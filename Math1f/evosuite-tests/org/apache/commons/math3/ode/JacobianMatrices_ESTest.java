/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:25:16 GMT 2022
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.JacobianMatrices;
import org.apache.commons.math3.ode.MainStateJacobianProvider;
import org.apache.commons.math3.ode.ParameterConfiguration;
import org.apache.commons.math3.ode.ParameterJacobianWrapper;
import org.apache.commons.math3.ode.ParameterizedWrapper;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JacobianMatrices_ESTest extends JacobianMatrices_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[2];
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, (String[]) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(294).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      try { 
        jacobianMatrices0.setInitialMainStateJacobian((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 294
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[8];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      // Undeclared exception!
      try { 
        jacobianMatrices0.setParameterStep((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      double[] doubleArray0 = new double[2];
      try { 
        jacobianMatrices0.setInitialParameterJacobian("", doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "3GD=OJi%ES2<%sf.2!";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      // Undeclared exception!
      try { 
        jacobianMatrices0.setInitialParameterJacobian("3GD=OJi%ES2<%sf.2!", (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[5];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      // Undeclared exception!
      try { 
        jacobianMatrices0.setInitialMainStateJacobian((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[4];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        jacobianMatrices0.setInitialMainStateJacobian(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[6];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      // Undeclared exception!
      try { 
        jacobianMatrices0.registerVariationalEquations((ExpandableStatefulODE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[3];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      double[][] doubleArray1 = new double[1][8];
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentMainSetJacobian(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices((MainStateJacobianProvider) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[6];
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(2147483645).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[2];
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483646
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices((FirstOrderDifferentialEquations) null, (double[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JacobianMatrices.MismatchedEquations jacobianMatrices_MismatchedEquations0 = new JacobianMatrices.MismatchedEquations();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      String[] stringArray0 = new String[8];
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[4];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      try { 
        jacobianMatrices0.setInitialParameterJacobian("3GD=OJi%ES2<%sf.2!", (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown parameter {0}
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">RbOHIUm4Af`k8";
      stringArray0[1] = "org.apache.commons.math3.ode.ParameterConfiguration";
      stringArray0[2] = ">RbOHIUm4Af`k8";
      stringArray0[3] = "'0u%`-`Zj++";
      stringArray0[4] = "";
      stringArray0[5] = "^rir;U}[>Y[F";
      stringArray0[6] = "org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper";
      stringArray0[7] = "[Object could not be serialized: ";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
      jacobianMatrices0.getCurrentParameterJacobian("[Object could not be serialized: ", doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">RbOHIUm4Af`k8";
      stringArray0[1] = "org.apache.commons.math3.ode.ParameterConfiguration";
      stringArray0[2] = "%tZ!z";
      stringArray0[3] = "'0u%`-`Zj++";
      stringArray0[4] = "";
      stringArray0[5] = "^rir;U}[>Y[F";
      stringArray0[6] = "org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper";
      stringArray0[7] = "[Object could not be serialized: ";
      stringArray0[8] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
      jacobianMatrices0.getCurrentParameterJacobian("9@=PFq!cyUYm", doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      stringArray0[4] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
      jacobianMatrices0.setInitialParameterJacobian("", doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      stringArray0[4] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      jacobianMatrices0.setInitialParameterJacobian("", doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      stringArray0[4] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      jacobianMatrices0.setParameterStep("", (-860.0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      try { 
        jacobianMatrices0.setParameterStep("e", (-860.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown parameter {0}
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, (String[]) null);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentParameterJacobian("org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations", doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[9];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
      double[][] doubleArray1 = new double[2][9];
      jacobianMatrices0.getCurrentMainSetJacobian(doubleArray1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[8];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderConverter0, doubleArray0, stringArray0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      jacobianMatrices0.setParameterizedODE(parameterizedWrapper0);
      assertEquals(0, parameterizedWrapper0.getDimension());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(154).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[1];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1823).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      ParameterConfiguration[] parameterConfigurationArray0 = new ParameterConfiguration[2];
      ParameterConfiguration parameterConfiguration0 = new ParameterConfiguration("org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations", (-741.0));
      parameterConfigurationArray0[0] = parameterConfiguration0;
      parameterConfigurationArray0[1] = parameterConfigurationArray0[0];
      ParameterJacobianWrapper parameterJacobianWrapper0 = new ParameterJacobianWrapper(firstOrderConverter0, parameterizedWrapper0, parameterConfigurationArray0);
      jacobianMatrices0.addParameterJacobianProvider(parameterJacobianWrapper0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ode does not match the main ode set in the extended set
         //
         verifyException("org.apache.commons.math3.ode.JacobianMatrices", e);
      }
  }
}
