/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:19:37 GMT 2022
 */

package org.apache.commons.math3.ode.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInput;
import java.io.ObjectOutputStream;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractStepInterpolator_ESTest extends AbstractStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.h = 123.05364738752;
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedSecondaryState(452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[0];
      EquationsMapper equationsMapper0 = new EquationsMapper(17, 1086);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.reinitialize(doubleArray0, false, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[1];
      EquationsMapper equationsMapper0 = new EquationsMapper(1, 227);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.doFinalize();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.setSoftPreviousTime(1287.10333329971);
      double double0 = nordsieckStepInterpolator0.getPreviousTime();
      assertEquals(1287.10333329971, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.setInterpolatedTime(0.5);
      double double0 = nordsieckStepInterpolator0.getInterpolatedTime();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      nordsieckStepInterpolator0.setSoftPreviousTime(0.0);
      nordsieckStepInterpolator0.copy();
      assertEquals(0.0, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      nordsieckStepInterpolator0.interpolatedTime = 0.0;
      nordsieckStepInterpolator0.copy();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      
      nordsieckStepInterpolator0.setSoftCurrentTime(0.0);
      nordsieckStepInterpolator0.copy();
      assertEquals(0.0, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.setSoftCurrentTime((-1604.930551535));
      nordsieckStepInterpolator0.copy();
      assertEquals((-1604.930551535), nordsieckStepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("EcGUzDw8w_\"H3B11sY");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.writeExternal(objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.writeBaseExternal(objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[5];
      EquationsMapper equationsMapper0 = new EquationsMapper((-1287), 0);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.reinitialize(doubleArray0, false, equationsMapper0, (EquationsMapper[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[7];
      EquationsMapper equationsMapper0 = new EquationsMapper(0, (-1));
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.reinitialize(doubleArray0, false, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readBaseExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.setInterpolatedTime((-57.5));
      double double0 = nordsieckStepInterpolator0.getInterpolatedTime();
      assertEquals((-57.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[8];
      EquationsMapper equationsMapper0 = new EquationsMapper(3964, 3964);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+5A9UrxiD)a\"l,");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      nordsieckStepInterpolator0.writeExternal(objectOutputStream0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.finalizeStep();
      nordsieckStepInterpolator0.finalizeStep();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      nordsieckStepInterpolator1.h = 0.0;
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.getInterpolatedSecondaryDerivatives(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[8];
      EquationsMapper equationsMapper0 = new EquationsMapper(3964, 3964);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double double0 = nordsieckStepInterpolator0.getGlobalCurrentTime();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedDerivatives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      nordsieckStepInterpolator0.shift();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double double0 = nordsieckStepInterpolator0.getCurrentTime();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double double0 = nordsieckStepInterpolator0.getGlobalPreviousTime();
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      boolean boolean0 = nordsieckStepInterpolator0.isForward();
      assertTrue(boolean0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      nordsieckStepInterpolator0.storeTime(Double.NaN);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
  }
}
