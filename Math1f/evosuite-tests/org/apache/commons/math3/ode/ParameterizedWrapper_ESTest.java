/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:29:56 GMT 2022
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.ParameterizedWrapper;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterizedWrapper_ESTest extends ParameterizedWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      parameterizedWrapper0.computeDerivatives(4062.5923945, doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      int int0 = parameterizedWrapper0.getDimension();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper((FirstOrderDifferentialEquations) null);
      // Undeclared exception!
      try { 
        parameterizedWrapper0.getDimension();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ParameterizedWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper((FirstOrderDifferentialEquations) null);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        parameterizedWrapper0.computeDerivatives((-2639.772153723365), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ParameterizedWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(159).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        parameterizedWrapper0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper((FirstOrderDifferentialEquations) null);
      boolean boolean0 = parameterizedWrapper0.isSupported("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      parameterizedWrapper0.setParameter("^r4", 0.0);
      assertEquals(0, parameterizedWrapper0.getDimension());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      try { 
        parameterizedWrapper0.getParameter("^r4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown parameter {0}
         //
         verifyException("org.apache.commons.math3.ode.ParameterizedWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      int int0 = parameterizedWrapper0.getDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ParameterizedWrapper parameterizedWrapper0 = new ParameterizedWrapper(firstOrderConverter0);
      Collection<String> collection0 = parameterizedWrapper0.getParametersNames();
      assertNotNull(collection0);
  }
}
