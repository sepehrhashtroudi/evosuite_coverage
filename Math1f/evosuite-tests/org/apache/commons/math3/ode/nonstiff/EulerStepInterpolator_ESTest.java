/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 23:02:30 GMT 2022
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.AbstractIntegrator;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EulerStepInterpolator_ESTest extends EulerStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 526.92101;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.054293734116568765);
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapperArray0[2];
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      eulerStepInterpolator0.reinitialize(threeEighthesIntegrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      double[] doubleArray2 = eulerStepInterpolator0.getInterpolatedDerivatives();
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      EulerStepInterpolator eulerStepInterpolator1 = new EulerStepInterpolator(eulerStepInterpolator0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 526.92101;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.054293734116568765);
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapperArray0[1];
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      eulerStepInterpolator1.reinitialize(threeEighthesIntegrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      eulerStepInterpolator1.previousState = doubleArray0;
      eulerStepInterpolator1.computeInterpolatedStateAndDerivatives((-3304.0953869847103), (-3304.0953869847103));
      assertEquals(Double.NaN, eulerStepInterpolator1.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[0][2];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      eulerStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      eulerStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        eulerStepInterpolator0.computeInterpolatedStateAndDerivatives((-1327.97511), 1900.54770706778);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      double[] doubleArray0 = new double[6];
      eulerStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        eulerStepInterpolator0.computeInterpolatedStateAndDerivatives(0.5, 140.664886408);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[0][2];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      eulerStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      eulerStepInterpolator0.previousState = doubleArray0;
      StepInterpolator stepInterpolator0 = eulerStepInterpolator0.doCopy();
      assertFalse(stepInterpolator0.equals((Object)eulerStepInterpolator0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      eulerStepInterpolator0.setSoftPreviousTime((-753.710066727035));
      StepInterpolator stepInterpolator0 = eulerStepInterpolator0.doCopy();
      assertFalse(stepInterpolator0.equals((Object)eulerStepInterpolator0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      eulerStepInterpolator0.storeTime(0.0);
      StepInterpolator stepInterpolator0 = eulerStepInterpolator0.doCopy();
      assertEquals(0.0, stepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      eulerStepInterpolator0.storeTime((-163.479427));
      StepInterpolator stepInterpolator0 = eulerStepInterpolator0.doCopy();
      assertTrue(stepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      double[] doubleArray0 = new double[9];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(92.24004908341, 5237.3699324374, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      EquationsMapper equationsMapper0 = new EquationsMapper(0, 6);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      eulerStepInterpolator0.reinitialize(graggBulirschStoerIntegrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        eulerStepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = null;
      try {
        eulerStepInterpolator0 = new EulerStepInterpolator((EulerStepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      EulerStepInterpolator eulerStepInterpolator1 = new EulerStepInterpolator(eulerStepInterpolator0);
      double[] doubleArray0 = new double[7];
      eulerStepInterpolator1.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        eulerStepInterpolator1.getInterpolatedDerivatives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator", e);
      }
  }
}
