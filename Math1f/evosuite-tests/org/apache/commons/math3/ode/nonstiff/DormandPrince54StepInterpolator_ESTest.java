/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:55:17 GMT 2022
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.AbstractIntegrator;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DormandPrince54StepInterpolator_ESTest extends DormandPrince54StepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      dormandPrince54StepInterpolator0.setSoftPreviousTime((-1076.9056528));
      StepInterpolator stepInterpolator0 = dormandPrince54StepInterpolator0.doCopy();
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      dormandPrince54StepInterpolator0.storeTime(0.0);
      dormandPrince54StepInterpolator0.doCopy();
      assertEquals(0.0, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 227.122031037731, 891.2732278005683, 0.0);
      double[][] doubleArray0 = new double[0][6];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[5];
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.reinitialize(graggBulirschStoerIntegrator0, (double[]) null, doubleArray0, true, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[5][6];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      EquationsMapper equationsMapper1 = new EquationsMapper((-1212), (-1212));
      equationsMapperArray0[0] = equationsMapper1;
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      double[] doubleArray0 = new double[5];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-15, 1.0E-15, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[9][6];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize(dormandPrince54Integrator0, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives((-3.9242560971295217E-8), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[4][1];
      EquationsMapper equationsMapper0 = new EquationsMapper(4, 4);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize(eulerIntegrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives((-43.48988418106996), 3.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = null;
      try {
        dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator((DormandPrince54StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      dormandPrince54StepInterpolator0.storeTime((-5.685526961588504));
      dormandPrince54StepInterpolator0.doCopy();
      assertEquals((-5.685526961588504), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2270.227437275763), (-44.0), (-2270.227437275763), (-44.0));
      double[][] doubleArray1 = new double[24][3];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      dormandPrince54StepInterpolator0.reinitialize(dormandPrince853Integrator0, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(1, (-1354.643585362997));
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives((-2270.227437275763), (-2270.227437275763));
      assertTrue(dormandPrince54StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-3.913411606668587E-8));
  }
}
