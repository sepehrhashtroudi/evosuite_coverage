/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:33:06 GMT 2022
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MidpointStepInterpolator_ESTest extends MidpointStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      double[] doubleArray0 = new double[8];
      midpointStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        midpointStepInterpolator0.computeInterpolatedStateAndDerivatives((-444.3), (-460.33381239492));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      double[] doubleArray0 = new double[3];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, (-2591.7735299995493), doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[8][6];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapperArray0[1];
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      midpointStepInterpolator0.reinitialize(dormandPrince853Integrator0, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      midpointStepInterpolator0.computeInterpolatedStateAndDerivatives(0, 0);
      assertEquals(Double.NaN, midpointStepInterpolator0.getGlobalCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      double[] doubleArray0 = new double[6];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1537.52);
      double[][] doubleArray1 = new double[1][8];
      EquationsMapper equationsMapper0 = new EquationsMapper((-1), 5);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapperArray0[4];
      equationsMapperArray0[6] = equationsMapperArray0[0];
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      midpointStepInterpolator0.reinitialize(eulerIntegrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      midpointStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        midpointStepInterpolator0.computeInterpolatedStateAndDerivatives((-865.93460003), (-865.93460003));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      double[] doubleArray0 = new double[5];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1237.28009555533), 0.0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[1][5];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      midpointStepInterpolator0.reinitialize(dormandPrince54Integrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      midpointStepInterpolator0.previousState = doubleArray1[0];
      StepInterpolator stepInterpolator0 = midpointStepInterpolator0.doCopy();
      assertFalse(stepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      midpointStepInterpolator0.setSoftPreviousTime(0.0);
      MidpointStepInterpolator midpointStepInterpolator1 = (MidpointStepInterpolator)midpointStepInterpolator0.doCopy();
      assertEquals(Double.NaN, midpointStepInterpolator1.getGlobalPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      midpointStepInterpolator0.setSoftPreviousTime((-2363.0));
      StepInterpolator stepInterpolator0 = midpointStepInterpolator0.doCopy();
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      midpointStepInterpolator0.setInterpolatedTime(0.0);
      StepInterpolator stepInterpolator0 = midpointStepInterpolator0.doCopy();
      assertNotSame(stepInterpolator0, midpointStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      midpointStepInterpolator0.storeTime((-830.1849375472));
      MidpointStepInterpolator midpointStepInterpolator1 = (MidpointStepInterpolator)midpointStepInterpolator0.doCopy();
      assertEquals(Double.NaN, midpointStepInterpolator1.getGlobalPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      midpointStepInterpolator0.setSoftCurrentTime(0.0);
      StepInterpolator stepInterpolator0 = midpointStepInterpolator0.doCopy();
      assertTrue(stepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3391.798650425897);
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[3][0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapperArray0[2];
      midpointStepInterpolator0.reinitialize(eulerIntegrator0, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        midpointStepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = null;
      try {
        midpointStepInterpolator0 = new MidpointStepInterpolator((MidpointStepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      double[] doubleArray0 = new double[3];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, (-2591.7735299995493), doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[8][6];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EquationsMapper equationsMapper0 = expandableStatefulODE0.getPrimaryMapper();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapperArray0[0];
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      midpointStepInterpolator0.reinitialize(dormandPrince853Integrator0, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      double[] doubleArray2 = midpointStepInterpolator0.getInterpolatedSecondaryState(0);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      double[] doubleArray0 = new double[8];
      midpointStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        midpointStepInterpolator0.getInterpolatedSecondaryDerivatives(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MidpointStepInterpolator midpointStepInterpolator0 = new MidpointStepInterpolator();
      MidpointStepInterpolator midpointStepInterpolator1 = new MidpointStepInterpolator(midpointStepInterpolator0);
      assertEquals(Double.NaN, midpointStepInterpolator1.getGlobalCurrentTime(), 0.01);
  }
}
