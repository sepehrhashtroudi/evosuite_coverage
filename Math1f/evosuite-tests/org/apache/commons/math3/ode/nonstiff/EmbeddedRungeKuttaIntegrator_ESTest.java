/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:38:58 GMT 2022
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[8] = 454.7567;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.9;
      doubleArray0[4] = 0.9;
      doubleArray0[5] = 1109.55;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1699.62757462652;
      doubleArray0[0] = 0.9;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2734.2925;
      doubleArray1[1] = 1699.62757462652;
      doubleArray1[2] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.9, (-1.0), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.setMinReduction((-1.0));
      dormandPrince54Integrator0.getMinReduction();
      dormandPrince54Integrator0.getSafety();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3223.9235979016);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-970.25963), 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setSafety(0.0);
      dormandPrince853Integrator0.getMaxGrowth();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setInitialStepSize((-1.0));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1670.225, (-3223.9235979016), 0.0, 1687.33);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.eventOccurred(1.2111317421229415E158, doubleArray0, true);
      highamHall54Integrator0.addEventHandler((EventHandler) eventFilter0, 1670.225, 946.25, 8, (UnivariateSolver) null);
      highamHall54Integrator0.setMinReduction(0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      highamHall54Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, (-3223.9235979016));
      dormandPrince853Integrator0.setSafety(3271.363941938);
      dormandPrince853Integrator0.setMinReduction(0.0);
      highamHall54Integrator0.getMaxGrowth();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(946.25, Double.NaN, 946.25, (-506.2312322836252));
      dormandPrince54Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, (-9.537874867759656E-8));
      dormandPrince54Integrator0.getOrder();
      highamHall54Integrator0.getMinReduction();
      dormandPrince853Integrator0.setMinReduction(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0126616322947826E158), (-1.0126616322947826E158), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.resetInternalState();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getMaxGrowth();
      dormandPrince54Integrator0.getMinReduction();
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      dormandPrince54Integrator0.scalRelativeTolerance = 10.0;
      doubleArray1[2] = doubleArray0;
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 0.2);
      dormandPrince54Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 0.0, 0.0, (-376.7994380016017));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.scalAbsoluteTolerance = 1930.67832746;
      dormandPrince853Integrator0.setMaxGrowth((-2029.6074311351883));
      double[][] doubleArray2 = new double[7][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      dormandPrince54Integrator0.estimateError(doubleArray2, doubleArray0, doubleArray0, (-1.0126616322947826E158));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2029.6074311351883));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1765.78873853734), 0.9, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getMaxGrowth();
      double double0 = 0.48910707235336304;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1720.547672), 0.48910707235336304, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.eventOccurred(761.819347868917, doubleArray0, false);
      eventFilter0.init(10.0, doubleArray0, (-1443.744));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      dormandPrince54Integrator0.addEventHandler((EventHandler) eventFilter0, (-1551.94367), (-1443.744), (-380), (UnivariateSolver) regulaFalsiSolver0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(6.301585387776819E255, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.computeDerivatives(6.301585387776819E255, doubleArray0, doubleArray0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1621.69429554);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-5.533523366931846E-8), (-5.533523366931846E-8), 0.2, 0.2);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1223.76612523662;
      doubleArray0[1] = 0.2;
      doubleArray0[2] = 0.2;
      doubleArray0[3] = (-5.533523366931846E-8);
      doubleArray0[4] = 1223.76612523662;
      doubleArray0[5] = 1223.76612523662;
      eventFilter0.init((-1558.496), doubleArray0, (-1.0));
      doubleArray0[6] = (-5.533523366931846E-8);
      eventFilter0.eventOccurred(0.2, doubleArray0, true);
      highamHall54Integrator0.addEventHandler((EventHandler) eventFilter0, 1223.76612523662, 0.0, (-1));
      highamHall54Integrator0.setMinReduction((-5.533523366931846E-8));
      highamHall54Integrator0.getMaxGrowth();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, (double) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(604.1524366306, (-3418.192), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.vecRelativeTolerance = doubleArray0;
      dormandPrince54Integrator0.setMaxGrowth(1341.731179);
      dormandPrince54Integrator0.setStepSizeControl(604.1524366306, 2.915165904253785E89, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.getMinReduction();
      dormandPrince54Integrator0.setSafety((-3418.192));
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setMinReduction(604.1524366306);
      dormandPrince54Integrator0.getMaxGrowth();
      dormandPrince54Integrator0.setMinReduction(3043.28);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-641.63243);
      doubleArray0[1] = (-641.63243);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-641.63243), (-641.63243), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.mainSetDimension = 0;
      dormandPrince853Integrator0.setInitialStepSize(2255.9865979842);
      dormandPrince853Integrator0.vecRelativeTolerance = doubleArray0;
      dormandPrince853Integrator0.mainSetDimension = 0;
      dormandPrince853Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, (-2379.013745761));
      dormandPrince853Integrator0.setSafety((-641.63243));
      dormandPrince853Integrator0.getSafety();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-641.63243), 0, dormandPrince853Integrator0.vecRelativeTolerance, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.mainSetDimension = 0;
      highamHall54Integrator0.getOrder();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3072.17653859), 0.0, (-2379.013745761), (-2379.013745761));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1685.052256);
      dormandPrince54Integrator0.setStepSizeControl((double) 0, (-526.4834951640369), doubleArray1, doubleArray0);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2388.3475926);
      doubleArray0[1] = (-2388.3475926);
      doubleArray0[2] = (-2388.3475926);
      doubleArray0[3] = (-2388.3475926);
      doubleArray0[4] = (-2388.3475926);
      doubleArray0[5] = (-2388.3475926);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2388.3475926), (-2388.3475926), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getSafety();
      dormandPrince54Integrator0.getMaxGrowth();
      dormandPrince54Integrator0.getMaxGrowth();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1958.9660746);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3585.696315157, 3585.696315157, 3585.696315157, 3585.696315157);
      dormandPrince853Integrator0.setSafety(3585.696315157);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 830.606;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(830.606, 830.606, 830.606, 830.606);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 830.606);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(4693.499089015137, 4693.499089015137, 1.7660059778220905E-220, 98.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMinReduction((-490.3604380755257));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1854.4), (-1854.4), (-1579.52163071493), (-1579.52163071493));
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1854.4);
      doubleArray1[1] = 2256.73534038792;
      doubleArray1[2] = (-1854.4);
      doubleArray1[3] = (-1854.4);
      doubleArray1[4] = 394.27096166077706;
      doubleArray1[5] = (-1854.4);
      doubleArray1[6] = (-1579.52163071493);
      doubleArray1[7] = (-1579.52163071493);
      doubleArray1[8] = (-1579.52163071493);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-2438.2710629883);
      doubleArray3[1] = 2256.73534038792;
      doubleArray3[2] = (-1579.52163071493);
      doubleArray3[3] = 394.27096166077706;
      doubleArray3[4] = 394.27096166077706;
      doubleArray3[5] = (-1854.4);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1854.4);
      doubleArray4[1] = 394.27096166077706;
      doubleArray4[2] = (-2833.83167728);
      doubleArray4[3] = 2256.73534038792;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 394.27096166077706;
      doubleArray5[1] = (-1854.4);
      doubleArray5[2] = (-1579.52163071493);
      doubleArray5[3] = (-1579.52163071493);
      doubleArray5[4] = 394.27096166077706;
      doubleArray5[5] = (-1579.52163071493);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1854.4);
      doubleArray6[1] = (-2833.83167728);
      doubleArray6[2] = (-2833.83167728);
      doubleArray6[3] = (-1854.4);
      doubleArray6[4] = (-2438.2710629883);
      doubleArray6[5] = (-2833.83167728);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-2833.83167728);
      doubleArray7[1] = 2256.73534038792;
      doubleArray7[2] = (-1854.4);
      doubleArray7[3] = (-2833.83167728);
      doubleArray7[4] = (-2833.83167728);
      doubleArray7[5] = (-1854.4);
      doubleArray7[6] = 2256.73534038792;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 2256.73534038792;
      doubleArray8[1] = 394.27096166077706;
      doubleArray8[2] = (-1854.4);
      doubleArray8[3] = (-2833.83167728);
      doubleArray0[7] = doubleArray8;
      dormandPrince54Integrator0.estimateError(doubleArray0, doubleArray5, doubleArray2, (-1579.52163071493));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 4658.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince54Integrator0.getOrder();
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1.2111317421229415E158;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.2111317421229415E158, (-1884.6), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      dormandPrince853Integrator0.addEventHandler((EventHandler) eventFilter0, 0.0, (-1529.55), 0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2111317421229415E158, doubleArray0, (-1884.6), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-29.9178444);
      double double1 = 121.359;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-29.9178444), (-29.9178444), 121.359, 121.359);
      double double2 = 0.0;
      highamHall54Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-29.9178444));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getMaxGrowth();
      highamHall54Integrator0.getMaxGrowth();
      highamHall54Integrator0.getMinReduction();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-6434.0), doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[1][6];
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.2, fixedStepHandler0, stepNormalizerMode0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.setMinReduction((-1.0));
      doubleArray1[0] = doubleArray0;
      highamHall54Integrator0.setInitialStepSize(0.0);
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 10.0);
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 10.0);
      dormandPrince54Integrator0.getSafety();
      highamHall54Integrator0.setMaxGrowth((-1495.028115825));
      highamHall54Integrator0.setInitialStepSize(0.0);
      highamHall54Integrator0.getMaxGrowth();
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, (-6434.0));
      highamHall54Integrator0.getOrder();
      assertEquals((-1495.028115825), highamHall54Integrator0.getMaxGrowth(), 0.01);
  }
}
