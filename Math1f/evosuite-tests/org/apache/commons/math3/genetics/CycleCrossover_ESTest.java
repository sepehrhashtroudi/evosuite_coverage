/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:32:41 GMT 2022
 */

package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.genetics.AbstractListChromosome;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.CycleCrossover;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CycleCrossover_ESTest extends CycleCrossover_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CycleCrossover<String> cycleCrossover0 = new CycleCrossover<String>(true);
      AbstractListChromosome<String> abstractListChromosome0 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(abstractListChromosome0).getLength();
      doReturn((List) null, (List) null, (List) null).when(abstractListChromosome0).getRepresentation();
      // Undeclared exception!
      try { 
        cycleCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CycleCrossover<Object> cycleCrossover0 = new CycleCrossover<Object>();
      AbstractListChromosome<Object> abstractListChromosome0 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(abstractListChromosome0).getLength();
      doReturn((List) null, (List) null, (List) null).when(abstractListChromosome0).getRepresentation();
      // Undeclared exception!
      try { 
        cycleCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CycleCrossover<String> cycleCrossover0 = new CycleCrossover<String>();
      AbstractListChromosome<String> abstractListChromosome0 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(abstractListChromosome0).getLength();
      doReturn((List) null).when(abstractListChromosome0).getRepresentation();
      AbstractListChromosome<String> abstractListChromosome1 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      AbstractListChromosome<String> abstractListChromosome2 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      AbstractListChromosome<String> abstractListChromosome3 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(abstractListChromosome3).getLength();
      doReturn((List) null, (List) null).when(abstractListChromosome3).getRepresentation();
      AbstractListChromosome<String> abstractListChromosome4 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cycleCrossover0.crossover(abstractListChromosome0, abstractListChromosome3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CycleCrossover<String> cycleCrossover0 = new CycleCrossover<String>();
      AbstractListChromosome<String> abstractListChromosome0 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 43, 0).when(abstractListChromosome0).getLength();
      try { 
        cycleCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 0
         //
         verifyException("org.apache.commons.math3.genetics.CycleCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CycleCrossover<Object> cycleCrossover0 = new CycleCrossover<Object>();
      AbstractListChromosome<Object> abstractListChromosome0 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      AbstractListChromosome<Object> abstractListChromosome1 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(abstractListChromosome1).getLength();
      doReturn((List) null, (List) null, (List) null).when(abstractListChromosome1).getRepresentation();
      // Undeclared exception!
      try { 
        cycleCrossover0.mate(abstractListChromosome1, abstractListChromosome1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CycleCrossover<String> cycleCrossover0 = new CycleCrossover<String>();
      AbstractListChromosome<String> abstractListChromosome0 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(200).when(abstractListChromosome0).getLength();
      AbstractListChromosome<String> abstractListChromosome1 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn((-2054), 0).when(abstractListChromosome1).getLength();
      try { 
        cycleCrossover0.crossover(abstractListChromosome0, abstractListChromosome1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 200
         //
         verifyException("org.apache.commons.math3.genetics.CycleCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Chromosome chromosome0 = mock(Chromosome.class, new ViolatedAssumptionAnswer());
      AbstractListChromosome<Object> abstractListChromosome0 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      CycleCrossover<String> cycleCrossover0 = new CycleCrossover<String>();
      try { 
        cycleCrossover0.crossover(abstractListChromosome0, chromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // one-point crossover only works with fixed-length chromosomes
         //
         verifyException("org.apache.commons.math3.genetics.CycleCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CycleCrossover<Object> cycleCrossover0 = new CycleCrossover<Object>(true);
      boolean boolean0 = cycleCrossover0.isRandomStart();
      assertTrue(boolean0);
  }
}
