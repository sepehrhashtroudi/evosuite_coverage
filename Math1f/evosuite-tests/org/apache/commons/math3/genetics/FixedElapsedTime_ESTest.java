/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:32:53 GMT 2022
 */

package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.genetics.ElitisticListPopulation;
import org.apache.commons.math3.genetics.FixedElapsedTime;
import org.apache.commons.math3.genetics.Population;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedElapsedTime_ESTest extends FixedElapsedTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FixedElapsedTime fixedElapsedTime0 = new FixedElapsedTime(0L);
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(424, 0.0);
      fixedElapsedTime0.isSatisfied(elitisticListPopulation0);
      boolean boolean0 = fixedElapsedTime0.isSatisfied(elitisticListPopulation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FixedElapsedTime fixedElapsedTime0 = null;
      try {
        fixedElapsedTime0 = new FixedElapsedTime((-316L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -316 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.genetics.FixedElapsedTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FixedElapsedTime fixedElapsedTime0 = new FixedElapsedTime(0L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FixedElapsedTime fixedElapsedTime0 = new FixedElapsedTime(1298L);
      boolean boolean0 = fixedElapsedTime0.isSatisfied((Population) null);
      System.setCurrentTimeMillis(3952090531849364496L);
      boolean boolean1 = fixedElapsedTime0.isSatisfied((Population) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FixedElapsedTime fixedElapsedTime0 = null;
      try {
        fixedElapsedTime0 = new FixedElapsedTime((-385L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -385 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.genetics.FixedElapsedTime", e);
      }
  }
}
