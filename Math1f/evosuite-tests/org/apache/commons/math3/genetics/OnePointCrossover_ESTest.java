/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:37:57 GMT 2022
 */

package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.OnePointCrossover;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OnePointCrossover_ESTest extends OnePointCrossover_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OnePointCrossover<String> onePointCrossover0 = new OnePointCrossover<String>();
      Chromosome chromosome0 = mock(Chromosome.class, new ViolatedAssumptionAnswer());
      Chromosome chromosome1 = mock(Chromosome.class, new ViolatedAssumptionAnswer());
      try { 
        onePointCrossover0.crossover(chromosome0, chromosome1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // one-point crossover only works with fixed-length chromosomes
         //
         verifyException("org.apache.commons.math3.genetics.OnePointCrossover", e);
      }
  }
}
