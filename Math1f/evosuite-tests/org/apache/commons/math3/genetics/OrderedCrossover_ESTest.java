/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:35:37 GMT 2022
 */

package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.genetics.AbstractListChromosome;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.GeneticAlgorithm;
import org.apache.commons.math3.genetics.OrderedCrossover;
import org.apache.commons.math3.random.RandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrderedCrossover_ESTest extends OrderedCrossover_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OrderedCrossover<Object> orderedCrossover0 = new OrderedCrossover<Object>();
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(488, 488, 488, 0).when(randomGenerator0).nextInt(anyInt());
      GeneticAlgorithm.setRandomGenerator(randomGenerator0);
      AbstractListChromosome<Object> abstractListChromosome0 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(abstractListChromosome0).getLength();
      doReturn((List) null, (List) null).when(abstractListChromosome0).getRepresentation();
      // Undeclared exception!
      try { 
        orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.genetics.OrderedCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OrderedCrossover<Integer> orderedCrossover0 = new OrderedCrossover<Integer>();
      AbstractListChromosome<Integer> abstractListChromosome0 = (AbstractListChromosome<Integer>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(3493, 2230, 0).when(abstractListChromosome0).getLength();
      try { 
        orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3,493
         //
         verifyException("org.apache.commons.math3.genetics.OrderedCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OrderedCrossover<String> orderedCrossover0 = new OrderedCrossover<String>();
      Chromosome chromosome0 = mock(Chromosome.class, new ViolatedAssumptionAnswer());
      try { 
        orderedCrossover0.crossover(chromosome0, (Chromosome) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // one-point crossover only works with fixed-length chromosomes
         //
         verifyException("org.apache.commons.math3.genetics.OrderedCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OrderedCrossover<String> orderedCrossover0 = new OrderedCrossover<String>();
      AbstractListChromosome<String> abstractListChromosome0 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn((-2728), (-2728)).when(abstractListChromosome0).getLength();
      doReturn((List<String>) null, (List<String>) null).when(abstractListChromosome0).getRepresentation();
      // Undeclared exception!
      try { 
        orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2728
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OrderedCrossover<Object> orderedCrossover0 = new OrderedCrossover<Object>();
      AbstractListChromosome<Object> abstractListChromosome0 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(abstractListChromosome0).getLength();
      doReturn((List) null).when(abstractListChromosome0).getRepresentation();
      AbstractListChromosome<Object> abstractListChromosome1 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(abstractListChromosome1).getLength();
      doReturn((List) null).when(abstractListChromosome1).getRepresentation();
      // Undeclared exception!
      try { 
        orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((-3165), (-3165), 3493).when(randomGenerator0).nextInt(anyInt());
      GeneticAlgorithm.setRandomGenerator(randomGenerator0);
      OrderedCrossover<Integer> orderedCrossover0 = new OrderedCrossover<Integer>();
      AbstractListChromosome<Integer> abstractListChromosome0 = (AbstractListChromosome<Integer>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(abstractListChromosome0).getLength();
      doReturn((List) null, (List) null).when(abstractListChromosome0).getRepresentation();
      // Undeclared exception!
      try { 
        orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.genetics.OrderedCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomGenerator0).nextInt(anyInt());
      GeneticAlgorithm.setRandomGenerator(randomGenerator0);
      OrderedCrossover<Integer> orderedCrossover0 = new OrderedCrossover<Integer>();
      AbstractListChromosome<Integer> abstractListChromosome0 = (AbstractListChromosome<Integer>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(abstractListChromosome0).getLength();
      doReturn((List) null, (List) null).when(abstractListChromosome0).getRepresentation();
      // Undeclared exception!
      orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OrderedCrossover<String> orderedCrossover0 = new OrderedCrossover<String>();
      AbstractListChromosome<String> abstractListChromosome0 = (AbstractListChromosome<String>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(33, 372, 372).when(abstractListChromosome0).getLength();
      try { 
        orderedCrossover0.mate(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 372 != 33
         //
         verifyException("org.apache.commons.math3.genetics.OrderedCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AbstractListChromosome<Object> abstractListChromosome0 = (AbstractListChromosome<Object>) mock(AbstractListChromosome.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(abstractListChromosome0).getLength();
      doReturn((List) null, (List) null).when(abstractListChromosome0).getRepresentation();
      OrderedCrossover<Object> orderedCrossover0 = new OrderedCrossover<Object>();
      // Undeclared exception!
      try { 
        orderedCrossover0.crossover(abstractListChromosome0, abstractListChromosome0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
