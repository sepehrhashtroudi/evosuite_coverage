/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:29:58 GMT 2022
 */

package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ElitisticListPopulation;
import org.apache.commons.math3.genetics.TournamentSelection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TournamentSelection_ESTest extends TournamentSelection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TournamentSelection tournamentSelection0 = new TournamentSelection((-210));
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(223, 1.0);
      try { 
        tournamentSelection0.select(elitisticListPopulation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population limit has to be positive
         //
         verifyException("org.apache.commons.math3.genetics.ListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TournamentSelection tournamentSelection0 = new TournamentSelection(2);
      int int0 = tournamentSelection0.getArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TournamentSelection tournamentSelection0 = new TournamentSelection((-1));
      int int0 = tournamentSelection0.getArity();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TournamentSelection tournamentSelection0 = new TournamentSelection(0);
      tournamentSelection0.setArity(1258);
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(603, 0);
      try { 
        tournamentSelection0.select(elitisticListPopulation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tournament arity (1,258) cannot be bigger than population size (0)
         //
         verifyException("org.apache.commons.math3.genetics.TournamentSelection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TournamentSelection tournamentSelection0 = new TournamentSelection(1);
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      elitisticListPopulation0.addChromosome((Chromosome) null);
      // Undeclared exception!
      try { 
        tournamentSelection0.select(elitisticListPopulation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.genetics.ListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TournamentSelection tournamentSelection0 = new TournamentSelection(0);
      int int0 = tournamentSelection0.getArity();
      assertEquals(0, int0);
  }
}
