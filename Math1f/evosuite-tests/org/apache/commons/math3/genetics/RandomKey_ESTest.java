/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:36:44 GMT 2022
 */

package org.apache.commons.math3.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.genetics.RandomKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomKey_ESTest extends RandomKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1220));
      linkedList0.add(integer0);
      linkedList0.offerLast((Integer) null);
      List<Double> list0 = RandomKey.inducedPermutation((List<Integer>) linkedList0, (List<Integer>) linkedList0);
      assertTrue(linkedList0.contains((-1220)));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      try { 
        RandomKey.inducedPermutation((List<Integer>) linkedList0, (List<Integer>) linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.genetics.RandomKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Double> list0 = RandomKey.randomPermutation(0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomKey.randomPermutation(3410);
      RandomKey.randomPermutation(3410);
      // Undeclared exception!
      RandomKey.randomPermutation(3410);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomKey.randomPermutation((-1750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1750
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomKey.inducedPermutation((List<Integer>) null, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.genetics.RandomKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomKey.identityPermutation((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        RandomKey.comparatorPermutation((List<String>) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double(1329.6367875181);
      linkedList0.add((Object) double0);
      linkedList0.add((Object) ":+O;^");
      // Undeclared exception!
      try { 
        RandomKey.comparatorPermutation((List<Object>) linkedList0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Double> list0 = RandomKey.randomPermutation(696);
      List<Double> list1 = RandomKey.identityPermutation(696);
      try { 
        RandomKey.inducedPermutation(list0, list1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // original and permuted data must contain the same elements
         //
         verifyException("org.apache.commons.math3.genetics.RandomKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      try { 
        RandomKey.inducedPermutation((List<Object>) linkedList0, (List<Object>) linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.genetics.RandomKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Double> list0 = RandomKey.identityPermutation(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add(0, (Object) list0);
      assertEquals(0, list0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Double> list1 = RandomKey.comparatorPermutation((List<Object>) linkedList0, comparator0);
      assertFalse(list1.equals((Object)list0));
  }
}
