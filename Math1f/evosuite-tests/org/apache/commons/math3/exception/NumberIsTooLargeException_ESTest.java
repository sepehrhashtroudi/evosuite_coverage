/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 23:03:10 GMT 2022
 */

package org.apache.commons.math3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.exception.MathIllegalNumberException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.exception.util.Localizable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberIsTooLargeException_ESTest extends NumberIsTooLargeException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(long0, long0, true);
      numberIsTooLargeException0.getMax();
      assertTrue(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Long long0 = new Long(1L);
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(long0, long0, true);
      numberIsTooLargeException0.getMax();
      assertTrue(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = MathIllegalNumberException.INTEGER_ZERO;
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(integer0, integer0, false);
      boolean boolean0 = numberIsTooLargeException0.getBoundIsAllowed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Short short0 = new Short((short) (-1611));
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException((Localizable) null, short0, short0, true);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException((Number) null, (Number) null, false);
      numberIsTooLargeException0.getMax();
      assertFalse(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Double double0 = new Double((-3.2103565109737424));
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(double0, double0, true);
      numberIsTooLargeException0.getMax();
      assertTrue(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Double double0 = new Double((-3.2103565109737424));
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(double0, double0, true);
      boolean boolean0 = numberIsTooLargeException0.getBoundIsAllowed();
      assertTrue(boolean0);
  }
}
