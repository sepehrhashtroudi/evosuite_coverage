/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 23:11:47 GMT 2022
 */

package org.apache.commons.math3.exception.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.math3.exception.util.ExceptionContext;
import org.apache.commons.math3.exception.util.Localizable;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExceptionContext_ESTest extends ExceptionContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Locale locale0 = Locale.CHINESE;
      exceptionContext0.setValue("", locale0);
      Locale locale1 = (Locale)exceptionContext0.getValue("");
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("=YMsSG33");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Throwable throwable0 = exceptionContext0.getThrowable();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: =YMsSG33", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.math3.exception.util.ExceptionContext");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION;
      exceptionContext0.addMessage(localizedFormats0, (Object[]) null);
      Locale locale0 = Locale.TAIWAN;
      String string0 = exceptionContext0.getMessage(locale0);
      assertEquals("cannot format given object as a fraction number", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      LocalizedFormats localizedFormats0 = LocalizedFormats.NON_REAL_FINITE_WEIGHT;
      Object[] objectArray0 = new Object[5];
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      String string0 = exceptionContext0.getMessage();
      assertEquals("all weights must be finite real numbers, but null-th is null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      exceptionContext0.addMessage((Localizable) null, objectArray0);
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage(locale0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.exception.util.ExceptionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) exceptionContext0;
      Locale locale0 = Locale.ENGLISH;
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage(locale0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("aC");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = mockThrowable0.getStackTrace();
      exceptionContext0.addMessage((Localizable) null, stackTraceElementArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.exception.util.ExceptionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Object[] objectArray0 = new Object[9];
      exceptionContext0.addMessage((Localizable) null, objectArray0);
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.exception.util.ExceptionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      exceptionContext0.addMessage((Localizable) null, (Object[]) null);
      // Undeclared exception!
      try { 
        exceptionContext0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.exception.util.ExceptionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Locale locale0 = Locale.CHINESE;
      String string0 = exceptionContext0.getMessage(locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      LocalizedFormats localizedFormats0 = LocalizedFormats.NON_REAL_FINITE_WEIGHT;
      Object[] objectArray0 = new Object[5];
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      Locale locale0 = Locale.KOREAN;
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      String string0 = exceptionContext0.getMessage(locale0, "all weights must be finite real numbers, but null-th is null");
      assertEquals("all weights must be finite real numbers, but null-th is nullall weights must be finite real numbers, but null-th is nullall weights must be finite real numbers, but null-th is null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      LocalizedFormats localizedFormats0 = LocalizedFormats.NON_REAL_FINITE_WEIGHT;
      Object[] objectArray0 = new Object[5];
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      String string0 = exceptionContext0.getLocalizedMessage();
      assertEquals("all weights must be finite real numbers, but null-th is null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      String string0 = exceptionContext0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      String string0 = exceptionContext0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Set<String> set0 = exceptionContext0.getKeys();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Throwable throwable0 = exceptionContext0.getThrowable();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Locale locale0 = Locale.KOREAN;
      String string0 = exceptionContext0.getMessage(locale0, "all weights must be finite real numbers, but null-th is null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Object object0 = exceptionContext0.getValue("all weights must be finite real numbers, but null-th is null");
      assertNull(object0);
  }
}
