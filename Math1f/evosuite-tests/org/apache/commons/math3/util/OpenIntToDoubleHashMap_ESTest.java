/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:48:53 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.apache.commons.math3.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenIntToDoubleHashMap_ESTest extends OpenIntToDoubleHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-2457.7));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      assertNotNull(openIntToDoubleHashMap1);
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator1.hasNext());
      
      double double0 = openIntToDoubleHashMap0.put((-26), 731.8089085901637);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator2 = openIntToDoubleHashMap1.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator2);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator1);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      assertFalse(openIntToDoubleHashMap_Iterator2.hasNext());
      
      double double1 = openIntToDoubleHashMap1.remove(13);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove(13);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.put((-2274), 0.0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double3, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator3 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator3);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator2));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator2);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator1);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator3.hasNext());
      
      double double4 = openIntToDoubleHashMap1.remove((-2274));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double4, 0.01);
      
      double double5 = openIntToDoubleHashMap1.put(1, 1.0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double5, 0.01);
      
      double double6 = openIntToDoubleHashMap1.remove(20);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double6, 0.01);
      
      double double7 = openIntToDoubleHashMap0.put(1, (-2457.7));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double7, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator4 = openIntToDoubleHashMap1.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator4);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertFalse(openIntToDoubleHashMap_Iterator4.equals((Object)openIntToDoubleHashMap_Iterator3));
      assertFalse(openIntToDoubleHashMap_Iterator4.equals((Object)openIntToDoubleHashMap_Iterator2));
      assertFalse(openIntToDoubleHashMap_Iterator4.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator4.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertNotSame(openIntToDoubleHashMap_Iterator4, openIntToDoubleHashMap_Iterator3);
      assertNotSame(openIntToDoubleHashMap_Iterator4, openIntToDoubleHashMap_Iterator2);
      assertNotSame(openIntToDoubleHashMap_Iterator4, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator4, openIntToDoubleHashMap_Iterator1);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertTrue(openIntToDoubleHashMap_Iterator4.hasNext());
      
      double double8 = openIntToDoubleHashMap1.remove((-783));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double8, 0.01);
      
      double double9 = openIntToDoubleHashMap1.get(1);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(1.0, double9, 0.01);
      
      double double10 = openIntToDoubleHashMap0.put(1, (-783));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double10, 0.01);
      
      double double11 = openIntToDoubleHashMap0.remove(13);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double11, double0, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(double11, double5, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(double11, double1, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double8, 0.01);
      assertEquals(double11, double6, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double11, 0.01);
      
      double double12 = openIntToDoubleHashMap0.get(942);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double12, double0, 0.01);
      assertEquals(double12, double2, 0.01);
      assertEquals(double12, double5, 0.01);
      assertEquals(double12, double7, 0.01);
      assertEquals(double12, double10, 0.01);
      assertEquals(double12, double4, 0.01);
      assertEquals(double12, double3, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertEquals(double12, double8, 0.01);
      assertEquals(double12, double11, 0.01);
      assertEquals(double12, double6, 0.01);
      assertEquals(double12, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double12, 0.01);
      
      double double13 = openIntToDoubleHashMap1.put((-2), (-523.61758232));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double2, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double6, 0.01);
      assertEquals(double13, double8, 0.01);
      assertEquals(double13, double1, 0.01);
      assertEquals(double13, double12, 0.01);
      assertEquals(double13, double5, 0.01);
      assertEquals(double13, double10, 0.01);
      assertEquals(double13, double0, 0.01);
      assertEquals(double13, double11, 0.01);
      assertEquals(double13, double7, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(2, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double13, 0.01);
      
      double double14 = openIntToDoubleHashMap1.remove(1);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotEquals(double14, double12, 0.01);
      assertEquals(double14, double9, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(1.0, double14, 0.01);
      
      double double15 = openIntToDoubleHashMap1.put((-2), 1);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals((-523.61758232), double15, 0.01);
      
      double double16 = openIntToDoubleHashMap0.get((-1651));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double16, double8, 0.01);
      assertEquals(double16, double12, 0.01);
      assertEquals(double16, double6, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertEquals(double16, double1, 0.01);
      assertEquals(double16, double3, 0.01);
      assertEquals(double16, double4, 0.01);
      assertEquals(double16, double11, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertEquals(double16, double7, 0.01);
      assertEquals(double16, double2, 0.01);
      assertEquals(double16, double13, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertEquals(double16, double10, 0.01);
      assertEquals(double16, double0, 0.01);
      assertEquals(double16, double5, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals((-2457.7), double16, 0.01);
      
      double double17 = openIntToDoubleHashMap1.put((-2274), 1.0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double17, double6, 0.01);
      assertEquals(double17, double0, 0.01);
      assertEquals(double17, double7, 0.01);
      assertEquals(double17, double8, 0.01);
      assertEquals(double17, double1, 0.01);
      assertEquals(double17, double10, 0.01);
      assertEquals(double17, double11, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double14, 0.01);
      assertEquals(double17, double3, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertEquals(double17, double13, 0.01);
      assertEquals(double17, double5, 0.01);
      assertEquals(double17, double4, 0.01);
      assertEquals(double17, double12, 0.01);
      assertEquals(double17, double2, 0.01);
      assertEquals(double17, double16, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(2, openIntToDoubleHashMap1.size());
      assertEquals((-2457.7), double17, 0.01);
      
      try { 
        openIntToDoubleHashMap_Iterator0.advance();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(0, Double.NaN);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double3, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator1.hasNext());
      
      double double4 = openIntToDoubleHashMap0.put(0, (-1755.6408202));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = openIntToDoubleHashMap0.put(0, (-1267.0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-1755.6408202), double5, 0.01);
      
      double double6 = openIntToDoubleHashMap0.remove((-1872));
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double6, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator2 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator2);
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator2.hasNext());
      
      double double7 = openIntToDoubleHashMap0.put(0, 4786.710691);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-1267.0), double7, 0.01);
      
      double double8 = openIntToDoubleHashMap0.remove(744);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double8, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator3 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator3);
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator2));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator2);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator3.hasNext());
      
      openIntToDoubleHashMap_Iterator3.advance();
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator2));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator2);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator3.hasNext());
      
      double double9 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(4786.710691, double9, 0.01);
      
      double double10 = openIntToDoubleHashMap0.put(744, (-1.0));
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double10, 0.01);
      
      // Undeclared exception!
      openIntToDoubleHashMap0.put(0, (-4605.676849017555));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(243.2887788846283);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, 243.2887788846283);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(243.2887788846283, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(243.2887788846283, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(1, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(243.2887788846283, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.remove((-1));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(243.2887788846283, double3, 0.01);
      
      double double4 = openIntToDoubleHashMap0.put(876, (-1145.65));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(243.2887788846283, double4, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double5 = openIntToDoubleHashMap0.put(0, 0.0);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(243.2887788846283, double5, 0.01);
      
      double double6 = openIntToDoubleHashMap0.get(0);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, (-1711.992));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator2 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator2);
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator1);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator2.hasNext());
      
      double double1 = openIntToDoubleHashMap0.put(148, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = openIntToDoubleHashMap0.size();
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(2, int0);
      
      boolean boolean0 = openIntToDoubleHashMap_Iterator1.hasNext();
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator2));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator2);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1, 1);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double0 = openIntToDoubleHashMap0.put(1, 1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.remove((-4329));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(1, 1);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double2, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      
      boolean boolean0 = openIntToDoubleHashMap_Iterator1.hasNext();
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      assertNotNull(openIntToDoubleHashMap1);
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      
      double double0 = openIntToDoubleHashMap1.remove((-1));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0, openIntToDoubleHashMap1.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(77, Double.NaN);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = 793;
      double double2 = openIntToDoubleHashMap1.put(793, 0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap1.put(793, (-1));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(0.0, double3, 0.01);
      
      double double4 = openIntToDoubleHashMap1.remove(0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = 0.0;
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      
      double double6 = openIntToDoubleHashMap1.put(793, 0.0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals((-1.0), double6, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator2 = openIntToDoubleHashMap1.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator2);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertTrue(openIntToDoubleHashMap_Iterator2.hasNext());
      
      double double7 = openIntToDoubleHashMap0.put(1, 0.0);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double7, 0.01);
      
      int int1 = openIntToDoubleHashMap1.size();
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertFalse(int1 == int0);
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(1, int1);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey((-1));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
      
      int int2 = openIntToDoubleHashMap1.size();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(1, int2);
      
      double double8 = openIntToDoubleHashMap1.remove((-240));
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double1, 0.01);
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(Double.NaN, double8, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator3 = openIntToDoubleHashMap1.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator3);
      assertFalse(openIntToDoubleHashMap0.equals((Object)openIntToDoubleHashMap1));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator2));
      assertFalse(openIntToDoubleHashMap_Iterator3.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertNotSame(openIntToDoubleHashMap0, openIntToDoubleHashMap1);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator1);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator2);
      assertNotSame(openIntToDoubleHashMap_Iterator3, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap1, openIntToDoubleHashMap0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator3.hasNext());
      assertEquals(1, openIntToDoubleHashMap1.size());
      
      try { 
        openIntToDoubleHashMap_Iterator3.key();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = null;
      try {
        openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-2));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      int int0 = (-1578);
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.containsKey((-1578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(1, 333.6);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int1 = 2;
      double double1 = openIntToDoubleHashMap0.put(0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(2, 1);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(2);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertTrue(boolean0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(3442, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double1 = openIntToDoubleHashMap0.put(0, 3442);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      
      double double2 = openIntToDoubleHashMap0.put((-1731), (-392.54));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey((-1495));
      assertEquals(3, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(685);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      int int0 = openIntToDoubleHashMap_Iterator0.key();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(0, int0);
      
      double double1 = openIntToDoubleHashMap0.put(0, 2804.648);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      int int1 = openIntToDoubleHashMap_Iterator0.key();
      assertTrue(int1 == int0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(0, int1);
      
      double double2 = openIntToDoubleHashMap0.remove((-5997));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.get(685);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = openIntToDoubleHashMap_Iterator0.value();
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(2804.648, double4, 0.01);
      
      double double5 = openIntToDoubleHashMap0.remove(0);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(2804.648, double5, 0.01);
      
      double double6 = openIntToDoubleHashMap0.remove(685);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double6, 0.01);
      
      boolean boolean1 = openIntToDoubleHashMap_Iterator0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertFalse(boolean1);
      
      double double7 = openIntToDoubleHashMap0.get(0);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1.0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.remove(0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put((-2375), 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double1, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      int int0 = openIntToDoubleHashMap_Iterator0.key();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals((-2375), int0);
      
      double double2 = openIntToDoubleHashMap_Iterator0.value();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(0.0, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.remove((-1814));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double3, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap_Iterator0.hasNext();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertFalse(boolean0);
      
      int int1 = openIntToDoubleHashMap0.size();
      assertFalse(int1 == int0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, int1);
      
      boolean boolean1 = openIntToDoubleHashMap0.containsKey((-2375));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(12);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(5, 5);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(3597, 3597);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(5.0, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double1 = openIntToDoubleHashMap0.get(316);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(5.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-2905.5847595156943));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      int int0 = 2205;
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator1.hasNext());
      
      double double0 = openIntToDoubleHashMap0.put(1, (-2664.4));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-2905.5847595156943), double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator2 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator2);
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertFalse(openIntToDoubleHashMap_Iterator2.equals((Object)openIntToDoubleHashMap_Iterator1));
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator0);
      assertNotSame(openIntToDoubleHashMap_Iterator2, openIntToDoubleHashMap_Iterator1);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator2.hasNext());
      
      double double1 = openIntToDoubleHashMap0.remove(2205);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-2905.5847595156943), double1, 0.01);
      
      try { 
        openIntToDoubleHashMap_Iterator0.key();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put((-2272), (-2272));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 1569.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = openIntToDoubleHashMap0.size();
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(2, int0);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = (-4494);
      double double1 = openIntToDoubleHashMap0.put((-4494), 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove(1581);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double3 = openIntToDoubleHashMap0.put(0, (-4494));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double3, 0.01);
      
      double double4 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-4494.0), double4, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      
      try { 
        openIntToDoubleHashMap_Iterator1.value();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-1564);
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-1564), (-1564));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      int int1 = 1339;
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.get(1339);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int1 = 0;
      double double1 = openIntToDoubleHashMap0.remove(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double1, 0.01);
      
      int int2 = 7;
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double2 = openIntToDoubleHashMap0.put(7, 0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.put(7, 7);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double3, 0.01);
      
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      assertNotNull(openIntToDoubleHashMap1);
      assertFalse(openIntToDoubleHashMap1.equals((Object)openIntToDoubleHashMap0));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1, openIntToDoubleHashMap1.size());
      
      // Undeclared exception!
      openIntToDoubleHashMap1.remove(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = null;
      try {
        openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((OpenIntToDoubleHashMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = null;
      try {
        openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(Integer.MAX_VALUE, 848.2448);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-1237);
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-1237), (-1237));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.put(20, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(5, 0.0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.remove(5);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(5);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-357);
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-357));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        openIntToDoubleHashMap0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      try { 
        openIntToDoubleHashMap_Iterator0.key();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      boolean boolean0 = openIntToDoubleHashMap_Iterator0.hasNext();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.remove((-2));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = openIntToDoubleHashMap0.size();
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(420.115);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(1862, 1862);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(420.115, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put(0, 420.115);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(420.115, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove((-3469));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(420.115, double2, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double3 = openIntToDoubleHashMap_Iterator0.value();
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      assertEquals(420.115, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.remove((-1));
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = openIntToDoubleHashMap0.put((-1), (-1));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove((-1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = openIntToDoubleHashMap0.remove((-1));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = openIntToDoubleHashMap0.put((-1), Double.NaN);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double4, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      openIntToDoubleHashMap_Iterator0.advance();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double0 = openIntToDoubleHashMap0.put(3442, 0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator1 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator1);
      assertFalse(openIntToDoubleHashMap_Iterator1.equals((Object)openIntToDoubleHashMap_Iterator0));
      assertNotSame(openIntToDoubleHashMap_Iterator1, openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator1.hasNext());
      
      double double1 = openIntToDoubleHashMap0.get((-132));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.put(0, 3442);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(Double.NaN, double2, 0.01);
      
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      assertFalse(openIntToDoubleHashMap_Iterator0.hasNext());
      
      try { 
        openIntToDoubleHashMap_Iterator0.advance();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-917.833420162346));
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(0, (-917.833420162346));
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-917.833420162346), double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double1 = openIntToDoubleHashMap0.remove(434);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals((-917.833420162346), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(896, 1.0);
      assertNotNull(openIntToDoubleHashMap0);
      assertEquals(0, openIntToDoubleHashMap0.size());
      
      double double0 = openIntToDoubleHashMap0.put(896, 896);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double0, 0.01);
      
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      assertNotNull(openIntToDoubleHashMap_Iterator0);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(openIntToDoubleHashMap_Iterator0.hasNext());
      
      double double1 = openIntToDoubleHashMap0.put(16, 1.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, openIntToDoubleHashMap0.size());
      assertEquals(1.0, double1, 0.01);
      
      double double2 = openIntToDoubleHashMap0.remove(896);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertEquals(896.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1536;
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1536, 0.0);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.iterator();
      int int1 = 4;
      // Undeclared exception!
      openIntToDoubleHashMap0.iterator();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1325, 0.0);
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(889);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-3084), (-3084));
      assertEquals(0, openIntToDoubleHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0.0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      try { 
        openIntToDoubleHashMap_Iterator0.key();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      double double0 = openIntToDoubleHashMap1.put(0, 0);
      assertEquals(1, openIntToDoubleHashMap1.size());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap();
      openIntToDoubleHashMap0.put(0, 0);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.iterator();
      int int0 = 1351;
      double double0 = 0.0;
      openIntToDoubleHashMap0.put(1351, 0.0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.put(1351, (-1618.47986582049));
      openIntToDoubleHashMap0.size();
      openIntToDoubleHashMap0.put(0, 2749.3347728743);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.put(0, 0);
      openIntToDoubleHashMap0.remove(0);
      openIntToDoubleHashMap0.remove(0);
      openIntToDoubleHashMap0.containsKey(0);
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.put(1, 1);
      openIntToDoubleHashMap0.remove(1);
      openIntToDoubleHashMap0.put(1, 1);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      boolean boolean0 = openIntToDoubleHashMap_Iterator0.hasNext();
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1, 1);
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.remove(1);
      openIntToDoubleHashMap0.put(1, 1);
      openIntToDoubleHashMap1.put(0, 1);
      openIntToDoubleHashMap1.containsKey(1);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap_Iterator0.advance();
      openIntToDoubleHashMap0.put((-4329), 3246.9);
      try { 
        openIntToDoubleHashMap_Iterator0.value();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0, 0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.put(0, (-2064.0390963636));
      openIntToDoubleHashMap0.containsKey(0);
      openIntToDoubleHashMap0.get(1855);
      try { 
        openIntToDoubleHashMap_Iterator0.advance();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap((-2457.7));
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      OpenIntToDoubleHashMap openIntToDoubleHashMap1 = new OpenIntToDoubleHashMap(openIntToDoubleHashMap0);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap1.iterator();
      openIntToDoubleHashMap1.remove(13);
      openIntToDoubleHashMap0.remove(13);
      openIntToDoubleHashMap0.put((-2274), 0.0);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap1.remove((-2274));
      openIntToDoubleHashMap1.put(1, 1.0);
      openIntToDoubleHashMap1.remove(20);
      openIntToDoubleHashMap0.put(1, (-2457.7));
      openIntToDoubleHashMap1.iterator();
      openIntToDoubleHashMap1.remove((-783));
      openIntToDoubleHashMap1.get(1);
      openIntToDoubleHashMap0.put(1, (-783));
      openIntToDoubleHashMap0.remove(13);
      openIntToDoubleHashMap0.get(942);
      openIntToDoubleHashMap1.put((-2), (-523.61758232));
      openIntToDoubleHashMap1.remove(1);
      openIntToDoubleHashMap1.put((-2), 1);
      openIntToDoubleHashMap0.get((-1651));
      openIntToDoubleHashMap1.put((-2274), 1.0);
      try { 
        openIntToDoubleHashMap_Iterator0.advance();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(0);
      openIntToDoubleHashMap0.put((-53), (-53));
      openIntToDoubleHashMap0.put(0, 0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.containsKey(685);
      openIntToDoubleHashMap_Iterator0.advance();
      openIntToDoubleHashMap_Iterator0.key();
      openIntToDoubleHashMap0.put(0, 2804.648);
      openIntToDoubleHashMap_Iterator0.key();
      openIntToDoubleHashMap0.remove((-5997));
      openIntToDoubleHashMap0.get(685);
      openIntToDoubleHashMap_Iterator0.value();
      openIntToDoubleHashMap0.remove(0);
      openIntToDoubleHashMap0.remove(685);
      openIntToDoubleHashMap_Iterator0.hasNext();
      openIntToDoubleHashMap0.get((-53));
      try { 
        openIntToDoubleHashMap_Iterator0.key();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OpenIntToDoubleHashMap openIntToDoubleHashMap0 = new OpenIntToDoubleHashMap(1727, 0.9888951954922794);
      openIntToDoubleHashMap0.iterator();
      openIntToDoubleHashMap0.put(0, 0.9888951954922794);
      openIntToDoubleHashMap0.containsKey((-1636));
      openIntToDoubleHashMap0.remove(5);
      boolean boolean0 = openIntToDoubleHashMap0.containsKey(958);
      assertEquals(1, openIntToDoubleHashMap0.size());
      assertFalse(boolean0);
  }
}
