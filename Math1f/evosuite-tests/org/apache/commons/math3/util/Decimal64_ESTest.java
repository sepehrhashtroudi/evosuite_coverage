/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:56:14 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Decimal64_ESTest extends Decimal64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_0.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_1, decimal64_1, decimal64_0, decimal64_0, decimal64_0);
      assertTrue(decimal64_2.isNaN());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.tan();
      Decimal64 decimal64_2 = decimal64_1.linearCombination((-908.24375708524), decimal64_1, (-1627.780101), decimal64_0, 674.845, decimal64_1);
      assertEquals(Double.NaN, decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_1.ONE.linearCombination(decimal64_1, decimal64_0, decimal64_0, decimal64_1, decimal64_1, decimal64_0);
      assertEquals("1.0", decimal64_1.toString());
      assertEquals((-9223372036854775808L), decimal64_2.longValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NAN.negate();
      Decimal64 decimal64_2 = decimal64_1.ZERO.linearCombination(decimal64_1, decimal64_1, decimal64_1, decimal64_0);
      assertNotSame(decimal64_1, decimal64_2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[1];
      double[] doubleArray0 = new double[7];
      try { 
        decimal64Array0[0].NEGATIVE_INFINITY.linearCombination(doubleArray0, decimal64Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1251.8496));
      Decimal64[] decimal64Array0 = new Decimal64[6];
      decimal64Array0[0] = decimal64_0;
      Decimal64[] decimal64Array1 = new Decimal64[6];
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination(decimal64Array0, decimal64Array1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64[] decimal64Array0 = new Decimal64[9];
      Decimal64[] decimal64Array1 = new Decimal64[2];
      try { 
        decimal64_0.linearCombination(decimal64Array0, decimal64Array1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.rootN((-39));
      Decimal64 decimal64_2 = decimal64_1.rootN(0);
      assertEquals("0.0", decimal64_2.toString());
      assertEquals("-0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1256.4316056986474));
      decimal64_0.hashCode();
      assertEquals("-1256.4316056986474", decimal64_0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_0.ONE.reciprocal();
      Decimal64 decimal64_3 = decimal64_1.log1p();
      boolean boolean0 = decimal64_3.equals(decimal64_2);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertFalse(decimal64_2.equals((Object)decimal64_3));
      assertFalse(decimal64_0.equals((Object)decimal64_3));
      assertEquals(0.6931472F, decimal64_3.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      boolean boolean0 = decimal64_1.equals(decimal64_1);
      assertTrue(boolean0);
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertEquals(1.0, decimal64_1.doubleValue(), 0.01);
      assertFalse(decimal64_0.equals((Object)decimal64_1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.tanh();
      Decimal64 decimal64_2 = decimal64_0.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_1, decimal64_1, decimal64_0, decimal64_1, decimal64_1);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.pow(2.965546585110978E236);
      Decimal64 decimal64_2 = decimal64_1.tanh();
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
      assertEquals(1.0, decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2312.6303));
      Decimal64 decimal64_1 = decimal64_0.tanh();
      assertEquals((-2312L), decimal64_0.longValue());
      assertEquals("-1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.tan();
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Decimal64 decimal64_1 = decimal64_0.subtract(decimal64_0);
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.3464667797088623);
      decimal64_0.NAN.subtract((-633.3389367857));
      assertEquals(0.3464667797088623, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.34646678F, decimal64_0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2524));
      Decimal64 decimal64_1 = decimal64_0.subtract((double) (-2524));
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.subtract((-2619.0));
      assertEquals((byte)59, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.ONE.negate();
      Decimal64 decimal64_2 = decimal64_1.subtract(0.0);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertEquals((-1.0), decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.sqrt();
      assertEquals((byte)1, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(Double.NEGATIVE_INFINITY);
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.sqrt();
      assertEquals((short) (-1), decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.ZERO.sinh();
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.sinh();
      assertEquals((byte)0, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      decimal64_0.NAN.sin();
      assertEquals(2190.9521F, decimal64_0.floatValue(), 0.01F);
      assertEquals(2190, decimal64_0.intValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1002.4960873484671);
      Decimal64 decimal64_1 = decimal64_0.sin();
      assertEquals("-0.32217950521727867", decimal64_1.toString());
      assertEquals((short)1002, decimal64_0.shortValue());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.signum();
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1.0);
      short short0 = decimal64_0.shortValue();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1256.4316056986474));
      short short0 = decimal64_0.shortValue();
      assertEquals((short) (-1256), short0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.scalb((-2524));
      assertEquals("-Infinity", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[8];
      Decimal64 decimal64_0 = decimal64Array0[2].ZERO.scalb(2143755891);
      assertEquals("0.0", decimal64_0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.scalb(0);
      assertEquals(1.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1347.7565842552);
      Decimal64 decimal64_1 = decimal64_0.ONE.scalb(775);
      assertEquals(1.9872231581449074E233, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      long long0 = decimal64_0.NEGATIVE_INFINITY.round();
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.multiply(decimal64_0);
      Decimal64 decimal64_2 = decimal64_1.rootN((-789));
      assertEquals("NaN", decimal64_2.toString());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-4.9452513107409435E-8));
      Decimal64 decimal64_1 = decimal64_0.rootN((-60));
      assertEquals((-4.9452513107409435E-8), decimal64_0.doubleValue(), 0.01);
      assertEquals((-1.3236206292403736), decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.rootN(4);
      assertEquals((short)1, decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.rint();
      assertEquals("0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(826.936962053891);
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.rint();
      assertEquals(Float.NEGATIVE_INFINITY, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.rint();
      assertEquals("1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.copySign(decimal64_0);
      Decimal64 decimal64_2 = decimal64_1.rint();
      assertEquals(Double.POSITIVE_INFINITY, decimal64_2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.asin();
      Decimal64 decimal64_2 = decimal64_1.remainder(decimal64_0);
      assertEquals((-0.42920366F), decimal64_2.floatValue(), 0.01F);
      assertEquals("1.5707963267948966", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = Decimal64.ONE;
      Decimal64 decimal64_2 = decimal64_1.remainder(decimal64_0);
      assertEquals(1.0, decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ZERO.ceil();
      Decimal64 decimal64_2 = decimal64_1.remainder((-2000.3352));
      assertEquals(0.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1251.8496));
      Decimal64 decimal64_1 = decimal64_0.tan();
      Decimal64 decimal64_2 = decimal64_1.remainder((-1251.8496));
      assertEquals("-13.29543122264008", decimal64_2.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.reciprocal();
      assertEquals((byte)0, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1503.6));
      Decimal64 decimal64_1 = decimal64_0.reciprocal();
      assertEquals("-6.650704974727322E-4", decimal64_1.toString());
      assertEquals((-1503.6F), decimal64_0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ZERO.ceil();
      Decimal64 decimal64_2 = decimal64_1.reciprocal();
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, decimal64_2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.ONE.cosh();
      Decimal64 decimal64_2 = decimal64_0.NEGATIVE_INFINITY.ceil();
      Decimal64 decimal64_3 = decimal64_1.pow(decimal64_2);
      assertEquals("0.0", decimal64_3.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(215.767109682);
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.pow(decimal64_0);
      assertEquals(Integer.MAX_VALUE, decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.pow(683);
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.ONE.negate();
      Decimal64 decimal64_2 = decimal64_1.pow(703);
      assertEquals((byte) (-1), decimal64_2.byteValue());
      assertEquals((-1.0), decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.ONE.asin();
      Decimal64 decimal64_2 = decimal64_1.pow(1373);
      assertEquals("1.8732302499814776E269", decimal64_2.toString());
      assertEquals(1.5707963267948966, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.pow((-2077.7729666639));
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      decimal64_0.NAN.pow((double) (-124));
      assertEquals(575.07935F, decimal64_0.floatValue(), 0.01F);
      assertEquals("575.0793675", decimal64_0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.cos();
      Decimal64 decimal64_2 = decimal64_0.subtract(decimal64_1);
      Decimal64 decimal64_3 = decimal64_2.negate();
      assertEquals(1.0, decimal64_3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = Decimal64.ZERO;
      Decimal64 decimal64_2 = decimal64_0.ZERO.multiply(decimal64_1);
      assertEquals("0.0", decimal64_2.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.divide((-151.45));
      Decimal64 decimal64_2 = decimal64_0.subtract(decimal64_1);
      Decimal64 decimal64_3 = decimal64_2.multiply(decimal64_1);
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
      assertEquals(Float.NEGATIVE_INFINITY, decimal64_3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = new Decimal64(585.9);
      Decimal64 decimal64_2 = decimal64_0.ONE.multiply(decimal64_1);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.expm1();
      Decimal64 decimal64_2 = decimal64_1.multiply(331);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.multiply((-1684));
      assertEquals((-9223372036854775808L), decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.pow(0.0);
      Decimal64 decimal64_2 = decimal64_1.multiply(2367);
      assertEquals(1, decimal64_1.intValue());
      assertEquals((short)2367, decimal64_2.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.multiply((-1260.3921));
      assertTrue(decimal64_1.isNaN());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.multiply((-1260.3921));
      assertEquals((short) (-1260), decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.negate();
      Decimal64 decimal64_2 = decimal64_1.multiply((-4103.66330713666));
      assertEquals(2359932L, decimal64_2.longValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.multiply(413.936498);
      assertEquals((short) (-1), decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      long long0 = decimal64_0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(Double.NEGATIVE_INFINITY);
      long long0 = decimal64_0.longValue();
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[4];
      Decimal64 decimal64_0 = decimal64Array0[1].ZERO.log1p();
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.negate();
      Decimal64 decimal64_2 = decimal64_1.log1p();
      assertEquals((-9223372036854775808L), decimal64_2.longValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      Decimal64 decimal64_1 = decimal64_0.log1p();
      assertEquals((byte)7, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.log1p();
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.ONE.remainder(Double.POSITIVE_INFINITY);
      Decimal64 decimal64_2 = decimal64_1.log10();
      assertEquals("0.0", decimal64_2.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ZERO.ceil();
      decimal64_1.log10();
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(3.5829049382293792E280);
      Decimal64 decimal64_1 = decimal64_0.log10();
      assertEquals((byte)24, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.log10();
      assertEquals(9223372036854775807L, decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.rootN((-1074));
      decimal64_1.log();
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      Decimal64 decimal64_1 = decimal64_0.log();
      assertEquals(7, decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.log();
      Decimal64 decimal64_2 = decimal64_0.subtract(decimal64_1);
      assertEquals(1.0, decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64[] decimal64Array0 = new Decimal64[1];
      Decimal64 decimal64_1 = Decimal64.ZERO;
      decimal64Array0[0] = decimal64_1;
      Decimal64 decimal64_2 = decimal64_0.linearCombination(decimal64Array0, decimal64Array0);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(513.27110632);
      Decimal64 decimal64_1 = Decimal64.NEGATIVE_INFINITY;
      Decimal64[] decimal64Array0 = new Decimal64[1];
      decimal64Array0[0] = decimal64_1;
      Decimal64 decimal64_2 = decimal64_0.NEGATIVE_INFINITY.linearCombination(decimal64Array0, decimal64Array0);
      assertEquals(Integer.MAX_VALUE, decimal64_2.intValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-416.190610862);
      Decimal64[] decimal64Array0 = new Decimal64[8];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array0[0];
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[7] = decimal64_0;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(doubleArray0, decimal64Array0);
      assertEquals((-416L), decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      double[] doubleArray0 = new double[4];
      Decimal64[] decimal64Array0 = new Decimal64[4];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(doubleArray0, decimal64Array0);
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-416.190610862);
      doubleArray0[2] = 579.5786189;
      Decimal64[] decimal64Array0 = new Decimal64[8];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64Array0[2];
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[7] = decimal64_0;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(doubleArray0, decimal64Array0);
      assertEquals((short)163, decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_1.linearCombination(decimal64_1, decimal64_0, decimal64_1, decimal64_1, decimal64_0, decimal64_0, decimal64_1, decimal64_1);
      assertFalse(decimal64_2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.remainder(decimal64_0);
      Decimal64 decimal64_2 = decimal64_0.linearCombination(decimal64_1, decimal64_0, decimal64_0, decimal64_1, decimal64_0, decimal64_1, decimal64_0, decimal64_1);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_1.linearCombination(decimal64_1, decimal64_1, decimal64_0, decimal64_1, decimal64_1, decimal64_0, decimal64_1, decimal64_1);
      assertFalse(decimal64_2.isNaN());
      assertEquals("1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1759.714005921));
      Decimal64 decimal64_1 = decimal64_0.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0);
      assertEquals("1.2386373530538134E7", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_0.ONE.linearCombination(decimal64_0, decimal64_0, decimal64_1, decimal64_1, decimal64_1, decimal64_0);
      assertEquals(Float.NaN, decimal64_2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0);
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_0.ONE.linearCombination(decimal64_1, decimal64_0, decimal64_1, decimal64_1, decimal64_1, decimal64_1);
      assertEquals((-9223372036854775808L), decimal64_2.longValue());
      assertEquals((byte)1, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = Decimal64.ONE;
      Decimal64 decimal64_2 = Decimal64.ZERO;
      Decimal64 decimal64_3 = decimal64_0.linearCombination(decimal64_1, decimal64_2, decimal64_2, decimal64_1);
      assertEquals(0.0, decimal64_3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = new Decimal64((-1148.58102));
      Decimal64 decimal64_2 = decimal64_0.NEGATIVE_INFINITY.copySign(decimal64_1);
      Decimal64 decimal64_3 = decimal64_1.linearCombination(decimal64_0, decimal64_2, decimal64_2, decimal64_0);
      assertEquals(Float.NEGATIVE_INFINITY, decimal64_3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_0);
      assertEquals("2.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.reciprocal();
      Decimal64 decimal64_2 = decimal64_0.NAN.linearCombination(0.0, decimal64_0, 0.0, decimal64_0, (-1.0), decimal64_1, 2.54224113415832E258, decimal64_1);
      assertFalse(decimal64_2.equals((Object)decimal64_1));
      assertEquals("0.0", decimal64_2.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1002.4960873484671);
      Decimal64 decimal64_1 = decimal64_0.ONE.cbrt();
      Decimal64 decimal64_2 = decimal64_0.NEGATIVE_INFINITY.pow(decimal64_1);
      Decimal64 decimal64_3 = decimal64_0.linearCombination((-1944.17), decimal64_1, (-1944.17), decimal64_1, 1002.4960873484671, decimal64_1, 1002.4960873484671, decimal64_2);
      assertEquals((-9223372036854775808L), decimal64_3.longValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = Decimal64.ONE;
      Decimal64 decimal64_2 = decimal64_0.ZERO.linearCombination((double) (-39), decimal64_0, 518.713839, decimal64_1, (-649.640458018585), decimal64_0, 0.0, decimal64_0);
      assertEquals((short)518, decimal64_2.shortValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.linearCombination((-269.7166), decimal64_0, (-269.7166), decimal64_0, (-1231.147), decimal64_0, (-1231.147), decimal64_0);
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-852.9));
      Decimal64 decimal64_1 = decimal64_0.linearCombination(0.5156965255737305, decimal64_0, 0.5156965255737305, decimal64_0, (double) (-852L), decimal64_0);
      assertEquals((-852L), decimal64_0.longValue());
      assertEquals(725791.1F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = Decimal64.ZERO;
      Decimal64 decimal64_2 = decimal64_0.ONE.linearCombination(3149.086193406405, decimal64_1, 3149.086193406405, decimal64_1, 3149.086193406405, decimal64_1);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.linearCombination((-2814.9022219), decimal64_0, (-151.45), decimal64_0, (-2814.9022219), decimal64_0);
      assertEquals((-5781L), decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = Decimal64.ZERO;
      Decimal64 decimal64_2 = decimal64_1.divide(Double.POSITIVE_INFINITY);
      Decimal64 decimal64_3 = decimal64_0.pow(decimal64_1);
      Decimal64 decimal64_4 = decimal64_0.linearCombination((double) 683, decimal64_2, Double.POSITIVE_INFINITY, decimal64_3, Double.POSITIVE_INFINITY, decimal64_3);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, decimal64_4.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_3.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.NAN.log();
      decimal64_0.linearCombination(575.0793675, decimal64_1, 575.0793675, decimal64_1);
      assertEquals(575L, decimal64_0.longValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.linearCombination(0.0, decimal64_0, 0.0, decimal64_0);
      assertEquals("0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = Decimal64.ONE;
      Decimal64 decimal64_2 = decimal64_0.linearCombination(575.0793675, decimal64_1, 575.0793675, decimal64_1);
      assertEquals(1150.1587F, decimal64_2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.linearCombination((double) (-2524), decimal64_0, (-4621.529484861993), decimal64_0);
      assertEquals("Infinity", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_2 = decimal64_0.linearCombination(Double.NEGATIVE_INFINITY, decimal64_1, (double) 1, decimal64_1, Double.NEGATIVE_INFINITY, decimal64_1);
      boolean boolean0 = decimal64_2.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      decimal64_1.isInfinite();
      assertEquals(1.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_2 = decimal64_0.linearCombination(Double.NEGATIVE_INFINITY, decimal64_1, (double) 1, decimal64_1, Double.NEGATIVE_INFINITY, decimal64_1);
      int int0 = decimal64_2.intValue();
      assertEquals(Integer.MAX_VALUE, decimal64_1.intValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2312.6303));
      Decimal64 decimal64_1 = decimal64_0.cosh();
      int int0 = decimal64_1.intValue();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.hypot(decimal64_0);
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.hypot(decimal64_0);
      assertEquals(1.4142135F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.pow(2.965546585110978E236);
      Decimal64 decimal64_2 = decimal64_0.hypot(decimal64_1);
      assertEquals(Double.POSITIVE_INFINITY, decimal64_2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(Double.NEGATIVE_INFINITY);
      Decimal64 decimal64_1 = decimal64_0.rootN((-2154));
      double double0 = decimal64_1.getReal();
      assertEquals(-0.0, double0, 0.01);
      assertEquals((short)0, decimal64_0.shortValue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.pow(0);
      double double0 = decimal64_1.getReal();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      double double0 = decimal64_0.getReal();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      Decimal64 decimal64_1 = decimal64_0.NAN.exp();
      decimal64_1.floor();
      assertEquals(2190.9521, decimal64_0.getReal(), 0.01);
      assertEquals((byte) (-114), decimal64_0.byteValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.ONE.floor();
      Decimal64[] decimal64Array0 = new Decimal64[9];
      decimal64Array0[0] = decimal64_1;
      decimal64Array0[1] = decimal64_1;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_1;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_1;
      decimal64Array0[6] = decimal64_1;
      decimal64Array0[7] = decimal64_1;
      decimal64Array0[8] = decimal64_0;
      Decimal64 decimal64_2 = decimal64_1.linearCombination(decimal64Array0, decimal64Array0);
      assertEquals(6.0, decimal64_2.doubleValue(), 0.01);
      assertEquals(1.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.floor();
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      float float0 = decimal64_0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_2 = decimal64_0.POSITIVE_INFINITY.copySign(decimal64_1);
      float float0 = decimal64_2.floatValue();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.rootN((-1074));
      Decimal64 decimal64_2 = decimal64_1.expm1();
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertEquals(0.0, decimal64_2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.cos();
      Decimal64 decimal64_2 = decimal64_1.expm1();
      assertEquals(Double.NaN, decimal64_2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.expm1();
      assertEquals(1.7182818284590453, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.exp();
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      double double0 = decimal64_0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      double double0 = decimal64_0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = new Decimal64((-3381.007276));
      Decimal64 decimal64_2 = decimal64_1.divide(decimal64_0);
      assertEquals(Integer.MIN_VALUE, decimal64_2.intValue());
      assertEquals((-3381.007276), decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_1.multiply(0);
      Decimal64 decimal64_3 = decimal64_2.divide(decimal64_1);
      assertEquals(1.0, decimal64_1.doubleValue(), 0.01);
      assertEquals(0.0F, decimal64_3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1759.714005921));
      Decimal64 decimal64_1 = decimal64_0.ONE.divide(decimal64_0);
      assertEquals((-5.682741608211611E-4), decimal64_1.getReal(), 0.01);
      assertEquals((-1759.714F), decimal64_0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.ONE.signum();
      Decimal64 decimal64_2 = decimal64_1.divide(decimal64_1);
      assertEquals("1.0", decimal64_1.toString());
      assertEquals((byte)1, decimal64_2.byteValue());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.divide(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.divide((double) 1);
      assertEquals("1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.divide((-151.45));
      Decimal64 decimal64_2 = decimal64_1.multiply(decimal64_1);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertEquals((byte) (-1), decimal64_2.byteValue());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NAN.negate();
      Decimal64 decimal64_2 = decimal64_1.cosh();
      assertNotSame(decimal64_2, decimal64_1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1347.7565842552);
      Decimal64 decimal64_1 = decimal64_0.cos();
      assertEquals((-0.99991107F), decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.cos();
      Decimal64 decimal64_2 = decimal64_0.linearCombination(decimal64_1, decimal64_1, decimal64_1, decimal64_1, decimal64_1, decimal64_0);
      assertEquals(2.0F, decimal64_2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.copySign(decimal64_0);
      assertEquals(Double.NaN, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64[] decimal64Array0 = new Decimal64[6];
      Decimal64 decimal64_1 = decimal64Array0[3].ONE.copySign(decimal64_0);
      assertEquals((short)1, decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.copySign((-649.640458018585));
      assertEquals("-1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.copySign(5.8376834484391746E-8);
      assertEquals("1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.copySign((double) 1);
      assertEquals("Infinity", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_2 = decimal64_0.linearCombination((-2547.1013), decimal64_1, 0.0, decimal64_1, 374.8242020769049, decimal64_1);
      Decimal64 decimal64_3 = decimal64_1.multiply(decimal64_2);
      int int0 = decimal64_1.compareTo(decimal64_3);
      assertEquals((-1), int0);
      assertEquals((short)0, decimal64_3.shortValue());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      decimal64_0.NAN.ceil();
      assertEquals(2190L, decimal64_0.longValue());
      assertEquals(2190.9521, decimal64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ZERO.ceil();
      Decimal64 decimal64_2 = decimal64_0.POSITIVE_INFINITY.divide(decimal64_1);
      assertEquals((short) (-1), decimal64_2.shortValue());
      assertEquals("0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.ceil();
      assertEquals((byte)64, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.cbrt();
      assertTrue(decimal64_1.isNaN());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.exp();
      Decimal64 decimal64_2 = decimal64_1.cbrt();
      assertEquals("0.0", decimal64_2.toString());
      assertTrue(decimal64_2.equals((Object)decimal64_1));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.cbrt();
      assertEquals(9223372036854775807L, decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      byte byte0 = decimal64_0.byteValue();
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = new Decimal64(1385.0293301169825);
      Decimal64 decimal64_2 = decimal64_0.ZERO.linearCombination(decimal64_1, decimal64_1, decimal64_1, decimal64_1);
      byte byte0 = decimal64_2.byteValue();
      assertEquals((byte) (-60), byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.3464667797088623);
      Decimal64 decimal64_1 = decimal64_0.ZERO.atanh();
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      Decimal64 decimal64_2 = decimal64_1.atan2(decimal64_0);
      assertEquals("0.0", decimal64_2.toString());
      assertEquals(1L, decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.atan2(decimal64_0);
      assertEquals((-2), decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.NAN.atan();
      assertEquals(Double.NaN, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.atan();
      assertEquals("0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      Decimal64 decimal64_1 = decimal64_0.atan();
      assertEquals(1.5703399042512183, decimal64_1.getReal(), 0.01);
      assertEquals(2190.9521, decimal64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NAN.asinh();
      assertEquals(Double.NaN, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Decimal64 decimal64_1 = decimal64_0.asinh();
      assertTrue(decimal64_1.equals((Object)decimal64_0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.asinh();
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.asinh();
      assertEquals("575.0793675", decimal64_0.toString());
      assertEquals("7.047655998200866", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.asin();
      assertEquals((byte)0, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.remainder(decimal64_0);
      Decimal64 decimal64_2 = decimal64_0.ONE.copySign(decimal64_1);
      Decimal64 decimal64_3 = decimal64_2.asin();
      assertEquals((short) (-1), decimal64_3.shortValue());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.negate();
      Decimal64 decimal64_2 = decimal64_1.add(decimal64_0);
      assertEquals("0.0", decimal64_2.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      Decimal64 decimal64_1 = decimal64_0.negate();
      Decimal64 decimal64_2 = decimal64_1.ONE.add(decimal64_1);
      assertEquals((short) (-574), decimal64_2.shortValue());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.add(decimal64_0);
      assertEquals((byte)0, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.ONE.atanh();
      Decimal64 decimal64_2 = decimal64_1.add(decimal64_0);
      assertEquals((short) (-1), decimal64_2.shortValue());
      assertEquals("Infinity", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.expm1();
      Decimal64 decimal64_2 = decimal64_1.add((-1.3455801602048414E-30));
      assertEquals(Double.POSITIVE_INFINITY, decimal64_2.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.add(0.0);
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.add((-151.45));
      assertEquals("-150.45", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.add(0.0);
      assertEquals("1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = Decimal64.ZERO;
      Decimal64 decimal64_2 = decimal64_0.pow(decimal64_1);
      Decimal64 decimal64_3 = decimal64_2.acosh();
      assertEquals("0.0", decimal64_3.toString());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1347.7565842552);
      Decimal64 decimal64_1 = decimal64_0.acosh();
      assertEquals("7.899343742616857", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1002.4960873484671);
      Decimal64 decimal64_1 = decimal64_0.ONE.acos();
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.acos();
      assertEquals((short)1, decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2190.9521);
      Decimal64 decimal64_1 = decimal64_0.ZERO.abs();
      assertEquals("0.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.abs();
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.subtract((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      // Undeclared exception!
      try { 
        decimal64_0.POSITIVE_INFINITY.remainder((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      // Undeclared exception!
      try { 
        decimal64_0.pow((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(465.972882452);
      Decimal64[] decimal64Array0 = new Decimal64[0];
      // Undeclared exception!
      try { 
        decimal64_0.NAN.linearCombination(decimal64Array0, decimal64Array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      double[] doubleArray0 = new double[0];
      Decimal64[] decimal64Array0 = new Decimal64[0];
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination(doubleArray0, decimal64Array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination((Decimal64) null, (Decimal64) null, (Decimal64) null, (Decimal64) null, (Decimal64) null, (Decimal64) null, decimal64_0, (Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination((Decimal64) null, (Decimal64) null, (Decimal64) null, (Decimal64) null, (Decimal64) null, (Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination(decimal64_0, decimal64_0, (Decimal64) null, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.POSITIVE_INFINITY.linearCombination((-2774.058), decimal64_0, (-1231.147), decimal64_0, 1232.184147, (Decimal64) null, 1232.184147, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination(Double.NEGATIVE_INFINITY, (Decimal64) null, 451.22519029017, (Decimal64) null, 451.22519029017, (Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination((-5.790384407322479E-8), decimal64_0, (-5.790384407322479E-8), (Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(826.936962053891);
      // Undeclared exception!
      try { 
        decimal64_0.NAN.hypot((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.POSITIVE_INFINITY.divide((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1793.52689927);
      // Undeclared exception!
      try { 
        decimal64_0.copySign((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.compareTo((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(9.390271617387205E-237);
      // Undeclared exception!
      try { 
        decimal64_0.atan2((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      // Undeclared exception!
      try { 
        decimal64_0.add((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      double[] doubleArray0 = new double[4];
      Decimal64[] decimal64Array0 = new Decimal64[4];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(doubleArray0, decimal64Array0);
      assertEquals("NaN", decimal64_1.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      double[] doubleArray0 = new double[5];
      Decimal64[] decimal64Array0 = new Decimal64[7];
      try { 
        decimal64_0.linearCombination(doubleArray0, decimal64Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      double[] doubleArray0 = new double[4];
      Decimal64[] decimal64Array0 = new Decimal64[4];
      // Undeclared exception!
      try { 
        decimal64_0.linearCombination(doubleArray0, decimal64Array0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64[] decimal64Array0 = new Decimal64[6];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      Decimal64 decimal64_1 = decimal64_0.NAN.linearCombination(decimal64Array0, decimal64Array0);
      assertEquals(Double.NaN, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64[] decimal64Array0 = new Decimal64[0];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      try { 
        decimal64_0.linearCombination(decimal64Array0, decimal64Array1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.NEGATIVE_INFINITY.rootN((-39));
      Decimal64 decimal64_2 = decimal64_1.copySign(decimal64_1);
      assertEquals("-0.0", decimal64_2.toString());
      assertTrue(decimal64_2.equals((Object)decimal64_1));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.rootN(0);
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.abs();
      boolean boolean0 = decimal64_1.equals(decimal64_0);
      assertFalse(decimal64_0.equals((Object)decimal64_1));
      assertFalse(boolean0);
      assertEquals("1.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      boolean boolean0 = decimal64_0.equals("org.apache.commons.math3.util.Precision");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.divide(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0);
      assertEquals(Float.POSITIVE_INFINITY, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.multiply(0);
      assertEquals("NaN", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.linearCombination(206.4075571233664, decimal64_0, 1.0, decimal64_0);
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ZERO.multiply(645.445);
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.subtract(206.4075571233664);
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.atan2(decimal64_0);
      assertEquals(Float.NaN, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        decimal64_0.multiply((Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.ceil();
      assertEquals(9223372036854775807L, decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      boolean boolean0 = decimal64_0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      int int0 = decimal64_0.intValue();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.negate();
      assertEquals(9223372036854775807L, decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      double double0 = decimal64_0.doubleValue();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      long long0 = decimal64_0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[6];
      Decimal64 decimal64_0 = decimal64Array0[2].ZERO.exp();
      assertEquals((byte)1, decimal64_0.byteValue());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.subtract(decimal64_0);
      assertFalse(decimal64_1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(575.0793675);
      decimal64_0.NAN.add(575.0793675);
      assertEquals("575.0793675", decimal64_0.toString());
      assertEquals((byte)63, decimal64_0.byteValue());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.expm1();
      assertEquals((-1.0), decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.pow(683);
      assertEquals("NaN", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.linearCombination((-1260.3921), decimal64_0, (-1260.3921), decimal64_0, (-1260.3921), decimal64_0, 1.0, decimal64_0);
      assertEquals(Double.NaN, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[6];
      Decimal64 decimal64_0 = decimal64Array0[1].POSITIVE_INFINITY.floor();
      assertEquals(9223372036854775807L, decimal64_0.longValue());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.abs();
      assertFalse(decimal64_1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      String string0 = decimal64_0.toString();
      assertEquals("-Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      boolean boolean0 = decimal64_0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.sin();
      Decimal64 decimal64_2 = decimal64_1.atanh();
      assertEquals(0.8414709848078965, decimal64_1.doubleValue(), 0.01);
      assertEquals(1.2261912F, decimal64_2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.acos();
      assertEquals(Double.NaN, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.atanh();
      assertEquals(Double.NaN, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.linearCombination(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0);
      assertEquals(Integer.MAX_VALUE, decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.tan();
      Decimal64 decimal64_2 = decimal64_1.sinh();
      assertEquals(1.5574077246549023, decimal64_1.doubleValue(), 0.01);
      assertEquals(2.2679098F, decimal64_2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      short short0 = decimal64_0.shortValue();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.sqrt();
      assertEquals("NaN", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.pow(decimal64_0);
      assertEquals("NaN", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.copySign((-424.06));
      assertTrue(decimal64_1.isNaN());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.remainder((-2000.3352));
      assertTrue(decimal64_1.isNaN());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      int int0 = decimal64_0.compareTo(decimal64_0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.log1p();
      assertEquals(0, decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.acosh();
      assertEquals((short)0, decimal64_1.shortValue());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.cbrt();
      assertEquals("-Infinity", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.NAN.scalb(43);
      assertEquals(Double.NaN, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.rint();
      assertEquals((byte)0, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.log10();
      assertFalse(decimal64_1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.ONE.reciprocal();
      Decimal64 decimal64_2 = decimal64_1.ONE.linearCombination(decimal64_1, decimal64_0, decimal64_1, decimal64_1, decimal64_0, decimal64_0);
      assertEquals(1.0, decimal64_1.getReal(), 0.01);
      assertEquals(0, decimal64_2.intValue());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.tanh();
      assertEquals(Double.NaN, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.divide(decimal64_0);
      assertEquals("NaN", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      long long0 = decimal64_0.round();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      Decimal64 decimal64_1 = decimal64_0.add(decimal64_0);
      assertEquals("2.0", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ONE;
      float float0 = decimal64_0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.hypot(decimal64_0);
      assertFalse(decimal64_1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.POSITIVE_INFINITY.asinh();
      int int0 = decimal64_0.compareTo(decimal64_1);
      assertEquals(1, int0);
      assertEquals(Double.POSITIVE_INFINITY, decimal64_1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Decimal64 decimal64_1 = decimal64_0.atan();
      assertEquals((-1L), decimal64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      byte byte0 = decimal64_0.byteValue();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Decimal64 decimal64_1 = decimal64_0.sinh();
      assertEquals(Float.NaN, decimal64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Field<Decimal64> field0 = decimal64_0.getField();
      assertNotNull(field0);
  }
}
