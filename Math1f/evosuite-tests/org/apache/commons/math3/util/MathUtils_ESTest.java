/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:50:26 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.util.Localizable;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = MathUtils.copySign((-2383L), (-9223372036854775808L));
      assertEquals((-2383L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = MathUtils.copySign(0L, (-1929L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = MathUtils.copySign((-37), 0);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = MathUtils.copySign(0, Integer.MIN_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      short short0 = MathUtils.copySign((short) (byte) (-123), (short)0);
      assertEquals((short)123, short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      short short0 = MathUtils.copySign((short)2408, (short) (byte) (-128));
      assertEquals((short) (-2408), short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      short short0 = MathUtils.copySign((short)2, (short)0);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte)32, (byte) (-123));
      assertEquals((byte) (-32), byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte)111, (byte)111);
      assertEquals((byte)111, byte0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = MathUtils.reduce(0.0, (short)24, 2.9358905032820014E18);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = MathUtils.reduce((-1.0), (-1065.9324625), 3873L);
      assertEquals(389.7298499999997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = MathUtils.reduce(2.9358905032820014E18, 204.647579019, 0.125);
      assertEquals((-0.125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1800L), 691L);
      assertEquals(688.1413816431163, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1814.3611071313255, (byte) (-24));
      assertEquals((-26.612187872293134), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 340593891;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1565212309), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = MathUtils.hash((-4819.75321434945));
      assertEquals(303367684, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = MathUtils.hash((-1086.70245688));
      assertEquals((-1874083070), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = MathUtils.copySign(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = MathUtils.copySign(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkFinite((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        MathUtils.checkNotNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MathUtils.checkNotNull((Object) "");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE;
      Object[] objectArray0 = new Object[3];
      try { 
        MathUtils.checkNotNull((Object) null, (Localizable) localizedFormats0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Conversion Exception in Transformation: null
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.MAX_ITERATIONS_EXCEEDED;
      Object[] objectArray0 = new Object[4];
      MathUtils.checkNotNull((Object) "", (Localizable) localizedFormats0, objectArray0);
      assertEquals("maximal number of iterations ({0}) exceeded", localizedFormats0.getSourceString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      try { 
        MathUtils.checkFinite(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value \uFFFD at index 1
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathUtils.checkFinite(doubleArray0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        MathUtils.checkFinite(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \uFFFD is not a finite number
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MathUtils.checkFinite(0.125);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        MathUtils.checkFinite(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u221E is not a finite number
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        MathUtils.copySign((-9223372036854775808L), 3550L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = MathUtils.copySign((long) (byte) (-19), (long) 0);
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = MathUtils.copySign(2935890503282001226L, 2935890503282001226L);
      assertEquals(2935890503282001226L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = MathUtils.copySign((long) (byte)111, (-2153L));
      assertEquals((-111L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      try { 
        MathUtils.copySign(Integer.MIN_VALUE, 1632);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = MathUtils.copySign(415, (-32768));
      assertEquals((-415), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = MathUtils.copySign(2584, (int) (byte)111);
      assertEquals(2584, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = MathUtils.copySign((-32768), (-415));
      assertEquals((-32768), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        MathUtils.copySign((short) (-32768), (short)2175);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      short short0 = MathUtils.copySign((short)60, (short) (byte)111);
      assertEquals((short)60, short0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      short short0 = MathUtils.copySign((short)0, (short) (-1025));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      short short0 = MathUtils.copySign((short) (-160), (short) (-128));
      assertEquals((short) (-160), short0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte) (-71), (byte)0);
      assertEquals((byte)71, byte0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        MathUtils.copySign((byte) (-128), (byte)8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte)0, (byte) (-128));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte) (-19), (byte) (-126));
      assertEquals((byte) (-19), byte0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((short)0, (short)0);
      assertEquals(0.0, double0, 0.01);
  }
}
