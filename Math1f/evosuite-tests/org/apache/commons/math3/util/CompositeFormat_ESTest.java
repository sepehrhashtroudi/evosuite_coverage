/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:49:43 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math3.util.CompositeFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeFormat_ESTest extends CompositeFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      boolean boolean0 = CompositeFormat.parseFixedstring("1{&2.<-h*", "5", parsePosition0);
      assertEquals(1, parsePosition0.getErrorIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      parsePosition0.setIndex(1091);
      boolean boolean0 = CompositeFormat.parseFixedstring("-5m5%@G3P", "", parsePosition0);
      assertEquals(1091, parsePosition0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      CompositeFormat.parseNumber("!+W*uM4nu?Wb{Dfd+", numberFormat0, parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      DecimalFormat decimalFormat0 = (DecimalFormat)CompositeFormat.getDefaultNumberFormat();
      CompositeFormat.parseNumber(":!bC \"R/5_W", decimalFormat0, parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals("#,##0.##########", decimalFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Number number0 = CompositeFormat.parseNumber("A0wC$h;aa5O93uD5Ec.", numberFormat0, parsePosition0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      char char0 = CompositeFormat.parseNextCharacter(">8+I#", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      char char0 = CompositeFormat.parseNextCharacter("lq`+\u0004j", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = CompositeFormat.formatDouble(0.0, choiceFormat0, stringBuffer0, fieldPosition0);
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      // Undeclared exception!
      try { 
        CompositeFormat.parseNumber("3(uMwirbNnyUO&w", numberFormat0, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-1247));
      // Undeclared exception!
      try { 
        CompositeFormat.parseNextCharacter("An4;-65H,J:", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeFormat.parseNextCharacter("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      parsePosition0.setIndex((-1540));
      // Undeclared exception!
      try { 
        CompositeFormat.parseFixedstring("oH'^L$-r_Jqe|{zwrZ", "org.apache.commons.math3.util.CompositeFormat", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeFormat.parseFixedstring("", "", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        CompositeFormat.parseAndIgnoreWhitespace("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-3029));
      // Undeclared exception!
      try { 
        CompositeFormat.parseAndIgnoreWhitespace((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeFormat.getDefaultNumberFormat((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      try { 
        CompositeFormat.formatDouble(1055, numberFormat0, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      // Undeclared exception!
      try { 
        CompositeFormat.formatDouble(0.0, choiceFormat0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      char char0 = CompositeFormat.parseNextCharacter("", parsePosition0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = CompositeFormat.getDefaultNumberFormat(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(408);
      FieldPosition fieldPosition0 = new FieldPosition(408);
      CompositeFormat.formatDouble(408, numberFormat0, stringBuffer0, fieldPosition0);
      assertEquals("408", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberFormat numberFormat0 = CompositeFormat.getDefaultNumberFormat();
      StringBuffer stringBuffer0 = new StringBuffer("s^");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      CompositeFormat.formatDouble(Double.POSITIVE_INFINITY, numberFormat0, stringBuffer0, fieldPosition0);
      assertEquals(12, stringBuffer0.length());
      assertEquals("s^(Infinity)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer("+JF6");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      CompositeFormat.formatDouble(Double.NaN, decimalFormat0, stringBuffer0, fieldPosition0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("+JF6(NaN)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      boolean boolean0 = CompositeFormat.parseFixedstring("1Q{&.<-h*", "s", parsePosition0);
      assertEquals(1, parsePosition0.getErrorIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(369);
      parsePosition0.setIndex(0);
      boolean boolean0 = CompositeFormat.parseFixedstring("[[8,>cd};]^", "SsN`P/Zd;qn,sT!c", parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      boolean boolean0 = CompositeFormat.parseFixedstring("z", "z", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      boolean boolean0 = CompositeFormat.parseFixedstring("", "", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      ParsePosition parsePosition0 = new ParsePosition(1);
      CompositeFormat.parseNumber(">8+I#", decimalFormat0, parsePosition0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition(1);
      CompositeFormat.parseNumber("*)KB1ch!m>?+P1W7L3", decimalFormat0, parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("z");
      Number number0 = CompositeFormat.parseNumber("", choiceFormat0, parsePosition0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      char char0 = CompositeFormat.parseNextCharacter("-4", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(369);
      parsePosition0.setIndex(0);
      CompositeFormat.parseNextCharacter("[[8,>cd};]^", parsePosition0);
      CompositeFormat.parseAndIgnoreWhitespace("m f<Rk8", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1188);
      CompositeFormat.parseAndIgnoreWhitespace("", parsePosition0);
      assertEquals(1187, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1187,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NumberFormat numberFormat0 = CompositeFormat.getDefaultNumberFormat();
      ParsePosition parsePosition0 = new ParsePosition((-2078));
      // Undeclared exception!
      try { 
        CompositeFormat.parseNumber("", numberFormat0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
