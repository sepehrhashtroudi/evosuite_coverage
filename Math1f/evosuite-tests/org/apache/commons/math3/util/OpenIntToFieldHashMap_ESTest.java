/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:00:42 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.apache.commons.math3.util.BigReal;
import org.apache.commons.math3.util.BigRealField;
import org.apache.commons.math3.util.Decimal64;
import org.apache.commons.math3.util.Decimal64Field;
import org.apache.commons.math3.util.OpenIntToFieldHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenIntToFieldHashMap_ESTest extends OpenIntToFieldHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = Complex.valueOf((double) 0, 1.0);
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 0, complex0);
      openIntToFieldHashMap0.put(233, complex0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      openIntToFieldHashMap_Iterator0.advance();
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0);
      openIntToFieldHashMap0.put(5, complex0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      boolean boolean0 = openIntToFieldHashMap_Iterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      FractionField fractionField0 = fraction0.getField();
      OpenIntToFieldHashMap<Fraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Fraction>(fractionField0, 1, fraction0);
      openIntToFieldHashMap0.put(6291, fraction0);
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FractionField fractionField0 = FractionField.getInstance();
      OpenIntToFieldHashMap<Fraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Fraction>(fractionField0);
      Fraction fraction0 = Fraction.TWO;
      openIntToFieldHashMap0.put(0, fraction0);
      openIntToFieldHashMap0.put(1635, fraction0);
      openIntToFieldHashMap0.remove(0);
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 0, bigFraction0);
      openIntToFieldHashMap0.put((-3814), bigFraction0);
      BigFraction bigFraction1 = openIntToFieldHashMap0.put(1678, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(-0.0);
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 243, complex0);
      openIntToFieldHashMap0.put(1, complex0);
      int int0 = openIntToFieldHashMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 0, (BigFraction) null);
      openIntToFieldHashMap0.remove(0);
      assertEquals(0, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigRealField bigRealField0 = BigRealField.getInstance();
      OpenIntToFieldHashMap<BigReal> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigReal>(bigRealField0, 0, (BigReal) null);
      openIntToFieldHashMap0.put(0, (BigReal) null);
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 9999, (Complex) null);
      Complex complex0 = openIntToFieldHashMap0.get(0);
      assertNull(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3778L);
      BigFractionField bigFractionField0 = bigFraction0.getField();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, (-3507), bigFraction0);
      // Undeclared exception!
      try { 
        openIntToFieldHashMap0.remove(214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 218
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, (-3881));
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      try { 
        openIntToFieldHashMap0.put(0, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FractionField fractionField0 = FractionField.getInstance();
      OpenIntToFieldHashMap<Fraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Fraction>(fractionField0, 4670);
      // Undeclared exception!
      openIntToFieldHashMap0.iterator();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      Decimal64 decimal64_0 = Decimal64.ZERO;
      OpenIntToFieldHashMap<Decimal64> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Decimal64>(decimal64Field0, (-1026), decimal64_0);
      // Undeclared exception!
      try { 
        openIntToFieldHashMap0.get((-1026));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -235869354
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = Complex.ZERO;
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, (-2889), complex0);
      // Undeclared exception!
      try { 
        openIntToFieldHashMap0.containsKey((-2889));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -235870987
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenIntToFieldHashMap<BigReal> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigReal>((OpenIntToFieldHashMap<BigReal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>((Field<Complex>) null, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>((Field<Complex>) null, 0, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Integer.MAX_VALUE, 2150.0);
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>((Field<Complex>) null, Integer.MAX_VALUE, complex0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenIntToFieldHashMap<Fraction> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Fraction>((Field<Fraction>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Field<Decimal64> field0 = decimal64_0.getField();
      OpenIntToFieldHashMap<Decimal64> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Decimal64>(field0, 1000000000);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OpenIntToFieldHashMap<Fraction> openIntToFieldHashMap0 = null;
      try {
        openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Fraction>((Field<Fraction>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, complex0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      try { 
        openIntToFieldHashMap_Iterator0.advance();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(-0.0);
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 243, complex0);
      openIntToFieldHashMap0.put(1, complex0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      openIntToFieldHashMap_Iterator0.advance();
      assertEquals(1, openIntToFieldHashMap0.size());
      assertFalse(openIntToFieldHashMap_Iterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      openIntToFieldHashMap0.put(1466, complex0);
      try { 
        openIntToFieldHashMap_Iterator0.advance();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      openIntToFieldHashMap0.put(2080, complex0);
      try { 
        openIntToFieldHashMap_Iterator0.value();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      try { 
        openIntToFieldHashMap_Iterator0.value();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 1586);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      Complex complex0 = openIntToFieldHashMap0.get(700);
      openIntToFieldHashMap0.put(32, complex0);
      try { 
        openIntToFieldHashMap_Iterator0.key();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(-0.0);
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 243, complex0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      try { 
        openIntToFieldHashMap_Iterator0.key();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 5);
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      openIntToFieldHashMap0.put(0, bigFraction0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      boolean boolean0 = openIntToFieldHashMap_Iterator0.hasNext();
      assertEquals(1, openIntToFieldHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 0);
      OpenIntToFieldHashMap.Iterator openIntToFieldHashMap_Iterator0 = openIntToFieldHashMap0.iterator();
      boolean boolean0 = openIntToFieldHashMap_Iterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 0, bigFraction0);
      openIntToFieldHashMap0.put(3356, bigFraction0);
      openIntToFieldHashMap0.remove(16);
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 0, bigFraction0);
      openIntToFieldHashMap0.put(0, bigFraction0);
      boolean boolean0 = openIntToFieldHashMap0.containsKey(4670);
      assertEquals(1, openIntToFieldHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, complex0);
      openIntToFieldHashMap0.put(12, complex0);
      boolean boolean0 = openIntToFieldHashMap0.containsKey(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 0, bigFraction0);
      boolean boolean0 = openIntToFieldHashMap0.containsKey(4670);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = Complex.valueOf((double) 0, 1.0);
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 0, complex0);
      openIntToFieldHashMap0.put(233, complex0);
      Complex complex1 = openIntToFieldHashMap0.get(4670);
      assertSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, 554, complex0);
      openIntToFieldHashMap0.put(554, complex0);
      openIntToFieldHashMap0.get(554);
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0);
      openIntToFieldHashMap0.put(1466, complex0);
      openIntToFieldHashMap0.put(1466, complex0);
      assertEquals(1, openIntToFieldHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 5);
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap1 = new OpenIntToFieldHashMap<BigFraction>(openIntToFieldHashMap0);
      assertEquals(0, openIntToFieldHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      OpenIntToFieldHashMap<Complex> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<Complex>(complexField0, (-1), complex0);
      int int0 = openIntToFieldHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      OpenIntToFieldHashMap<BigFraction> openIntToFieldHashMap0 = new OpenIntToFieldHashMap<BigFraction>(bigFractionField0, 0, bigFraction0);
      openIntToFieldHashMap0.put(3356, bigFraction0);
      openIntToFieldHashMap0.put((-3814), bigFraction0);
      openIntToFieldHashMap0.put(1678, bigFraction0);
      assertEquals(3, openIntToFieldHashMap0.size());
  }
}
