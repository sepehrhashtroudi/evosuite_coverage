/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:04:42 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.moment.SemiVariance;
import org.apache.commons.math3.stat.descriptive.summary.Sum;
import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math3.util.ResizableDoubleArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResizableDoubleArray_ESTest extends ResizableDoubleArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.addElementRolling(0.0);
      resizableDoubleArray0.hashCode();
      assertEquals(2, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray((double[]) null);
      double[] doubleArray0 = new double[4];
      resizableDoubleArray0.addElements(doubleArray0);
      resizableDoubleArray0.hashCode();
      assertEquals(5, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setContractionCriteria(2);
      resizableDoubleArray0.setNumElements(205);
      resizableDoubleArray0.addElementRolling(0.5);
      assertEquals(205, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      resizableDoubleArray0.addElementRolling((-520.3013916015625));
      resizableDoubleArray0.setNumElements(893);
      assertEquals(893, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.addElementRolling(0.0);
      resizableDoubleArray0.setNumElements(1);
      assertEquals(4, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(0);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(16, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.addElementRolling(0.0);
      resizableDoubleArray0.setElement(0, (-1485.87346689192));
      assertEquals(2, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.setElement(0, (-1485.87346689192));
      assertEquals(2, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      resizableDoubleArray0.setElement(0, (-1485.87346689192));
      assertEquals(1, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      resizableDoubleArray0.setNumElements(1168);
      resizableDoubleArray0.discardFrontElements(1);
      Sum sum0 = new Sum();
      resizableDoubleArray0.compute(sum0);
      assertEquals(1167, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.addElementRolling(0.5);
      resizableDoubleArray0.getElements();
      assertEquals(2, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      resizableDoubleArray0.getElement(0);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      resizableDoubleArray0.addElementRolling((-498.0));
      resizableDoubleArray0.discardFrontElements(0);
      assertEquals(1, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(246, 246);
      double[] doubleArray0 = new double[6];
      resizableDoubleArray0.addElements(doubleArray0);
      try { 
        resizableDoubleArray0.discardMostRecentElements(364);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot discard 364 elements from a 6 elements array
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(3149, (-436.49678990171884), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (1).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      resizableDoubleArray0.addElementRolling((-1816.3506));
      double double0 = resizableDoubleArray0.substituteMostRecentElement(6.0);
      assertEquals(1, resizableDoubleArray0.start());
      assertEquals((-1816.3506), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(1305, 0.5);
      resizableDoubleArray0.discardFrontElements(730);
      resizableDoubleArray0.addElementRolling(0.6533012390136719);
      assertEquals(577, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(3, 181.0);
      resizableDoubleArray0.setElement(3, 181.0);
      double[] doubleArray0 = new double[7];
      resizableDoubleArray0.addElementRolling((-2082.571327283525));
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(12, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      resizableDoubleArray0.checkContractExpand(1168, 921.49603F);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(1168, resizableDoubleArray0.getCapacity());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.checkContractExpand(205, 205);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(18, 50.0, 1372.069186084);
      resizableDoubleArray0.setExpansionFactor(441.0F);
      assertEquals(441.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(3, 3);
      double double0 = resizableDoubleArray0.substituteMostRecentElement((-1002.1380152905228));
      assertEquals(4, resizableDoubleArray0.getNumElements());
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.addElementRolling(0.0);
      int int0 = resizableDoubleArray0.start();
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      resizableDoubleArray0.setNumElements(1168);
      resizableDoubleArray0.discardFrontElements(1);
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(1167, resizableDoubleArray0.getNumElements());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      resizableDoubleArray0.setNumElements(1168);
      int int0 = resizableDoubleArray0.getNumElements();
      assertEquals(1168, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.getElements();
      assertEquals(2, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      resizableDoubleArray0.addElements(doubleArray0);
      resizableDoubleArray0.addElementRolling(0.0);
      double double0 = resizableDoubleArray0.getElement(1);
      assertEquals(12, resizableDoubleArray0.getCapacity());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(4, 670);
      resizableDoubleArray0.setElement(670, (-398.4892));
      double double0 = resizableDoubleArray0.getElement(670);
      assertEquals(671, resizableDoubleArray0.getNumElements());
      assertEquals((-398.4892), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.copy();
      assertEquals(2, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      Sum sum0 = new Sum();
      resizableDoubleArray0.compute(sum0);
      assertEquals(1168, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(1, 2234.3074F);
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double double0 = resizableDoubleArray0.compute(sumOfLogs0);
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-498.0);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      double double0 = resizableDoubleArray0.addElementRolling((-498.0));
      assertEquals(1, resizableDoubleArray0.start());
      assertEquals((-498.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      try { 
        resizableDoubleArray0.setContractionCriteria((-2921.619F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,921.619 is smaller than the minimum (1): contraction criteria (-2,921.619) smaller than the expansion factor (2).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      try { 
        resizableDoubleArray0.discardMostRecentElements((-711));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot discard a negative number of elements (-711)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      try { 
        ResizableDoubleArray.copy((ResizableDoubleArray) null, resizableDoubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      try { 
        resizableDoubleArray0.checkContractExpand((-1.0F), (-291.855F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (-1).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE;
      double[] doubleArray0 = new double[4];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(305, 305, 305, resizableDoubleArray_ExpansionMode0, doubleArray0);
      try { 
        resizableDoubleArray0.checkContractExpand(1.0E-19, (-2474.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (0).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(3971);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.addElements((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray((ResizableDoubleArray) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0, (-803.0929F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(1614, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1.5 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (1)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
      double[] doubleArray0 = new double[6];
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(5, (-1.0), (-1.0), resizableDoubleArray_ExpansionMode0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (-1).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0, 0, (-349.1420745045477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray((-1674), 2.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (-1,674) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(111, (-66.02828377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -65.528 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (-65.528).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      try { 
        resizableDoubleArray0.setExpansionMode((-1057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unsupported expansion mode -1,057, supported modes are 0 (MULTIPLICATIVE_MODE) and 1 (ADDITIVE_MODE)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE;
      double[] doubleArray0 = new double[1];
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray((-1016), 0.0, 2.0, resizableDoubleArray_ExpansionMode0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (-1,016) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      double double0 = resizableDoubleArray0.getContractionCriterion();
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(1168, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5, double0, 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      ResizableDoubleArray.copy(resizableDoubleArray0, resizableDoubleArray0);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(16, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      float float0 = resizableDoubleArray0.getExpansionFactor();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.0F, float0, 0.01F);
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertEquals(16, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      
      resizableDoubleArray0.contract();
      assertEquals(1, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      Object object0 = new Object();
      boolean boolean0 = resizableDoubleArray0.equals(object0);
      assertEquals(10, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(9, resizableDoubleArray0.getNumElements());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1386, 1386, 1386);
      try { 
        resizableDoubleArray0.setNumElements((-999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-999) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(670, 670, 5462.5F, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unsupported expansion mode 4, supported modes are 0 (MULTIPLICATIVE_MODE) and 1 (ADDITIVE_MODE)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setExpansionMode(0);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setElement((-1971), (-1971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(205);
      resizableDoubleArray0.setElement(205, 0.0);
      resizableDoubleArray0.setElement(205, 0.0);
      assertEquals(206, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      resizableDoubleArray0.setExpansionMode(1);
      int int0 = resizableDoubleArray0.getExpansionMode();
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(1, int0);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(1168, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      int int0 = resizableDoubleArray0.getExpansionMode();
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, int0);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement((-2159));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
      resizableDoubleArray0.setExpansionMode(resizableDoubleArray_ExpansionMode0);
      resizableDoubleArray0.addElementRolling(0.0);
      resizableDoubleArray0.addElement(4941.8443265851);
      assertEquals(8, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      try { 
        resizableDoubleArray0.discardFrontElements((-2603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot discard a negative number of elements (-2,603)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(2565, (-761.9433F), 2565, 3520);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,565 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (-761.943)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      try { 
        resizableDoubleArray0.substituteMostRecentElement(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      double double0 = resizableDoubleArray0.substituteMostRecentElement(6.0);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(7, resizableDoubleArray0.getNumElements());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(8, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      resizableDoubleArray0.expand();
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
      resizableDoubleArray0.setExpansionMode(resizableDoubleArray_ExpansionMode0);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      
      double double0 = resizableDoubleArray0.addElementRolling(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.addElementRolling(0.0);
      resizableDoubleArray0.copy();
      assertEquals(1, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      resizableDoubleArray0.addElement(4.831833881898182E203);
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double double0 = resizableDoubleArray0.compute(semiVariance0);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(670, 670, 5462.5F, 1);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement(670);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray((-1583), (-1583), 0.0F, (-1583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity (-1,583) is not positive
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(226, 0.0F, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (0).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      int int0 = resizableDoubleArray0.getNumElements();
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, int0);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertEquals(1168, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      double[] doubleArray0 = resizableDoubleArray0.getArrayRef();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(1168, doubleArray0.length);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      int int0 = resizableDoubleArray0.getInternalLength();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setNumElements(2);
      resizableDoubleArray0.discardMostRecentElements(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2041.12754144907;
      resizableDoubleArray0.addElements(doubleArray0);
      double double0 = resizableDoubleArray0.addElementRolling(0.5);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2041.12754144907, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      double[] doubleArray0 = resizableDoubleArray0.getElements();
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(0, doubleArray0.length);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      int int0 = resizableDoubleArray0.start();
      assertEquals(1168, resizableDoubleArray0.getCapacity());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      float float0 = resizableDoubleArray0.getContractionCriteria();
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5F, float0, 0.01F);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      double[] doubleArray0 = resizableDoubleArray0.getInternalValues();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(0, int0);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(1168, resizableDoubleArray0.getCapacity());
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1168);
      int int0 = resizableDoubleArray0.getCapacity();
      assertEquals(1168, int0);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(16, resizableDoubleArray1.getCapacity());
      assertEquals(2.0F, resizableDoubleArray1.getExpansionFactor(), 0.01F);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      try { 
        resizableDoubleArray0.setExpansionFactor(3090.037F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2.5 is smaller than the minimum (1): contraction criteria (2.5) smaller than the expansion factor (3,090.037).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.clear();
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(0, resizableDoubleArray0.start());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.0F, resizableDoubleArray1.getExpansionFactor(), 0.01F);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2, 2);
      resizableDoubleArray0.setInitialCapacity(2);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
  }
}
