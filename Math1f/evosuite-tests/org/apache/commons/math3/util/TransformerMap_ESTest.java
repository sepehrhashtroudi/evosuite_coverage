/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:44:46 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Set;
import org.apache.commons.math3.util.DefaultTransformer;
import org.apache.commons.math3.util.NumberTransformer;
import org.apache.commons.math3.util.TransformerMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformerMap_ESTest extends TransformerMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      assertTrue(transformerMap1.equals((Object)transformerMap0));
      
      Class<Byte> class0 = Byte.class;
      transformerMap1.putTransformer(class0, transformerMap0);
      boolean boolean0 = transformerMap0.equals(transformerMap1);
      assertFalse(transformerMap1.equals((Object)transformerMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Byte byte0 = new Byte((byte)87);
      double double0 = transformerMap0.transform(byte0);
      assertEquals(87.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Double double0 = new Double((-1.0));
      double double1 = transformerMap0.transform(double0);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Object> class0 = Object.class;
      DefaultTransformer defaultTransformer0 = new DefaultTransformer();
      transformerMap0.putTransformer(class0, defaultTransformer0);
      NumberTransformer numberTransformer0 = transformerMap0.removeTransformer(class0);
      assertSame(numberTransformer0, defaultTransformer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<TransformerMap> class0 = TransformerMap.class;
      transformerMap0.putTransformer(class0, transformerMap0);
      NumberTransformer numberTransformer0 = transformerMap0.putTransformer(class0, (NumberTransformer) null);
      assertSame(transformerMap0, numberTransformer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Long> class0 = Long.class;
      DefaultTransformer defaultTransformer0 = new DefaultTransformer();
      transformerMap0.putTransformer(class0, defaultTransformer0);
      NumberTransformer numberTransformer0 = transformerMap0.getTransformer(class0);
      assertSame(numberTransformer0, defaultTransformer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      // Undeclared exception!
      try { 
        transformerMap0.transform((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.TransformerMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<TransformerMap> class0 = TransformerMap.class;
      TransformerMap transformerMap1 = new TransformerMap();
      NumberTransformer numberTransformer0 = transformerMap0.putTransformer(class0, (NumberTransformer) null);
      Class<Float> class1 = Float.class;
      transformerMap1.putTransformer(class1, numberTransformer0);
      // Undeclared exception!
      try { 
        transformerMap0.equals(transformerMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.TransformerMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<String> class0 = String.class;
      NumberTransformer numberTransformer0 = transformerMap0.getTransformer(class0);
      assertNull(numberTransformer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<TransformerMap> class0 = TransformerMap.class;
      DefaultTransformer defaultTransformer0 = new DefaultTransformer();
      transformerMap0.putTransformer(class0, defaultTransformer0);
      transformerMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<TransformerMap> class0 = TransformerMap.class;
      TransformerMap transformerMap1 = new TransformerMap();
      assertTrue(transformerMap1.equals((Object)transformerMap0));
      
      DefaultTransformer defaultTransformer0 = new DefaultTransformer();
      transformerMap0.putTransformer(class0, defaultTransformer0);
      Class<Float> class1 = Float.class;
      transformerMap1.putTransformer(class1, (NumberTransformer) null);
      boolean boolean0 = transformerMap0.equals(transformerMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      assertTrue(transformerMap1.equals((Object)transformerMap0));
      
      Class<Float> class0 = Float.class;
      transformerMap1.putTransformer(class0, transformerMap0);
      boolean boolean0 = transformerMap1.equals(transformerMap0);
      assertFalse(transformerMap1.equals((Object)transformerMap0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      boolean boolean0 = transformerMap1.equals(transformerMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      boolean boolean0 = transformerMap0.equals(transformerMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      boolean boolean0 = transformerMap0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      transformerMap1.putTransformer(class0, transformerMap0);
      double double0 = transformerMap1.transform(object0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      try { 
        transformerMap0.transform("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Conversion Exception in Transformation: java.lang.String@0000000003
         //
         verifyException("org.apache.commons.math3.util.DefaultTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Byte byte0 = new Byte((byte)0);
      double double0 = transformerMap0.transform(byte0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      boolean boolean0 = transformerMap0.containsTransformer((NumberTransformer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Object> class0 = Object.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      boolean boolean0 = transformerMap0.containsClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Float> class0 = Float.class;
      boolean boolean0 = transformerMap0.containsClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<String> class0 = String.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      boolean boolean0 = transformerMap0.containsTransformer((NumberTransformer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Collection<NumberTransformer> collection0 = transformerMap0.transformers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Set<Class<?>> set0 = transformerMap0.classes();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Byte> class0 = Byte.class;
      NumberTransformer numberTransformer0 = transformerMap0.removeTransformer(class0);
      assertNull(numberTransformer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Object> class0 = Object.class;
      double double0 = transformerMap0.transform(class0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.clear();
  }
}
