/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:46:11 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import org.apache.commons.math3.util.BigReal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BigReal_ESTest extends BigReal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(1, mathContext0);
      BigReal bigReal1 = BigReal.ONE;
      boolean boolean0 = bigReal0.ONE.equals(bigReal1);
      assertTrue(bigReal1.equals((Object)bigReal0));
      assertEquals(64, bigReal0.getScale());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(charArray0, mathContext0);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '7';
      charArray0[2] = '3';
      BigReal bigReal0 = new BigReal(charArray0);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigReal bigReal0 = new BigReal("1", mathContext0);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigReal bigReal0 = new BigReal("1");
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigReal bigReal0 = BigReal.ZERO;
      bigReal0.setScale(0);
      int int0 = bigReal0.getScale();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      assertEquals(64, bigReal0.getScale());
      
      bigReal0.setScale((-1));
      int int0 = bigReal0.getScale();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigReal bigReal0 = BigReal.ZERO;
      double double0 = bigReal0.ZERO.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-317L));
      BigReal bigReal0 = new BigReal(bigDecimal0);
      bigReal0.doubleValue();
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-317L));
      BigReal bigReal0 = new BigReal(bigDecimal0);
      int int0 = bigReal0.ZERO.compareTo(bigReal0);
      assertEquals(64, bigReal0.getScale());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigReal bigReal0 = new BigReal((-1));
      BigReal bigReal1 = bigReal0.add(bigReal0);
      int int0 = bigReal1.compareTo(bigReal0);
      assertEquals(64, bigReal0.getScale());
      assertEquals((-1), int0);
      assertEquals(64, bigReal1.getScale());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      BigReal bigReal1 = bigReal0.ONE.add(bigReal0);
      BigDecimal bigDecimal0 = bigReal1.bigDecimalValue();
      assertEquals(64, bigReal1.getScale());
      assertEquals(64, bigReal0.getScale());
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigReal bigReal0 = new BigReal(bigDecimal0);
      bigReal0.bigDecimalValue();
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigReal bigReal0 = new BigReal((-2105));
      // Undeclared exception!
      try { 
        bigReal0.subtract((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      bigReal0.setRoundingMode((RoundingMode) null);
      // Undeclared exception!
      try { 
        bigReal0.reciprocal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      // Undeclared exception!
      try { 
        bigReal0.multiply((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigReal bigReal0 = new BigReal(bigDecimal0);
      try { 
        bigReal0.ZERO.divide(bigReal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(bigInteger0, 142, mathContext0);
      // Undeclared exception!
      try { 
        bigReal0.divide((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigReal bigReal0 = BigReal.ZERO;
      // Undeclared exception!
      try { 
        bigReal0.ZERO.compareTo((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(0.0, mathContext0);
      // Undeclared exception!
      try { 
        bigReal0.add((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      MathContext mathContext0 = new MathContext('\u0000');
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, 124, 2662, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, 675, 675);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((BigInteger) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(bigInteger0, 0, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((BigInteger) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal("2wt-!F=*?&;\"Kmu", mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((-1L), (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(33, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((-725.107253600192), (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigReal bigReal0 = new BigReal((BigDecimal) null);
      // Undeclared exception!
      try { 
        bigReal0.multiply(1912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(1, mathContext0);
      boolean boolean0 = bigReal0.ONE.equals(bigReal0);
      assertEquals(64, bigReal0.getScale());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      BigReal bigReal0 = new BigReal(charArray0, 1, 1);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      boolean boolean0 = bigReal0.ZERO.equals(roundingMode0);
      assertEquals(64, bigReal0.getScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, 'y', 'y', mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(1, mathContext0);
      int int0 = bigReal0.ONE.compareTo(bigReal0);
      assertEquals(0, int0);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      bigReal0.getRoundingMode();
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      BigReal bigReal0 = new BigReal(charArray0, 1, 1);
      BigReal bigReal1 = bigReal0.subtract(bigReal0);
      assertEquals(64, bigReal1.getScale());
      assertEquals(64, bigReal0.getScale());
      assertFalse(bigReal1.equals((Object)bigReal0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(1, mathContext0);
      int int0 = bigReal0.getScale();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(0.0, mathContext0);
      bigReal0.ZERO.hashCode();
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      BigReal bigReal0 = new BigReal(charArray0, 1, 1);
      BigReal bigReal1 = bigReal0.divide(bigReal0);
      assertEquals(64, bigReal0.getScale());
      assertEquals(64, bigReal1.getScale());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigReal bigReal0 = new BigReal(bigInteger0);
      try { 
        bigReal0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math3.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      BigReal bigReal1 = bigReal0.negate();
      assertEquals(64, bigReal1.getScale());
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(bigInteger0, mathContext0);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal("BvzI%Gni");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[6];
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      bigReal0.ONE.doubleValue();
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      BigReal bigReal1 = bigReal0.ONE.multiply(73);
      assertEquals(64, bigReal0.getScale());
      assertEquals(64, bigReal1.getScale());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      BigReal bigReal1 = bigReal0.multiply(bigReal0);
      assertFalse(bigReal1.equals((Object)bigReal0));
      assertEquals(64, bigReal1.getScale());
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(0.0, mathContext0);
      bigReal0.getField();
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal((long) (-1019), mathContext0);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((String) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, (-3665), (-3665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigReal bigReal0 = new BigReal((double) 73);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      BigReal bigReal1 = bigReal0.reciprocal();
      assertEquals(64, bigReal1.getScale());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigReal bigReal0 = new BigReal(0L);
      assertEquals(64, bigReal0.getScale());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0, 73);
      bigReal0.bigDecimalValue();
      assertEquals(64, bigReal0.getScale());
  }
}
