/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 22:07:34 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math3.util.ArithmeticUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArithmeticUtils_ESTest extends ArithmeticUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = ArithmeticUtils.subAndCheck(9223372036854775807L, 0L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = ArithmeticUtils.addAndCheck((long) 1555, (long) (-1));
      assertEquals(1554L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = ArithmeticUtils.addAndCheck(1588L, 1588L);
      assertEquals(3176L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 0L);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = ArithmeticUtils.pow(192L, 0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((-1955L), 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = ArithmeticUtils.pow((-932), 0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm((-2147483648L), 4294967295L);
      assertEquals(9223372034707292160L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm((-1L), 20922789888000L);
      assertEquals(20922789888000L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm((-1383), (-1383));
      assertEquals(1383, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd(0L, 3816L);
      assertEquals(3816L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = ArithmeticUtils.subAndCheck((long) 0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = ArithmeticUtils.subAndCheck(2203, 0);
      assertEquals(2203, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = ArithmeticUtils.subAndCheck(0, 3340);
      assertEquals((-3340), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = ArithmeticUtils.stirlingS2(1362, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = ArithmeticUtils.stirlingS2(731, 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-7168), bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)127;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)127, bigInteger0.shortValue());
      assertEquals((byte)127, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)127}, byteArray0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, (long) (byte)127);
      assertEquals((short)127, bigInteger0.shortValue());
      assertEquals((byte)127, bigInteger0.byteValue());
      assertEquals((short) (-129), bigInteger1.shortValue());
      assertEquals((byte)127, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)127}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 14L);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 397);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((long) 686, 668L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((-683L), 2400L);
      assertEquals((-1769305165355339647L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((long) 2, 364);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((-1333L), 2150);
      assertEquals((-1048291873801878999L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(2, 446224L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(1189, (long) 1189);
      assertEquals((-1457817387), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(1822, 1822);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(1013, 770);
      assertEquals((-1317467015), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = ArithmeticUtils.mulAndCheck(518, 1711);
      assertEquals(886298, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = ArithmeticUtils.mulAndCheck((-2474), 634);
      assertEquals((-1568516), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = ArithmeticUtils.factorialLog(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = ArithmeticUtils.factorialDouble(269);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = ArithmeticUtils.factorial(0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = ArithmeticUtils.binomialCoefficientLog(2613, 2415);
      assertEquals(697.6146509398972, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = ArithmeticUtils.binomialCoefficientDouble(397, 397);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = ArithmeticUtils.binomialCoefficient(686, 686);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = ArithmeticUtils.addAndCheck(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = ArithmeticUtils.addAndCheck(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = ArithmeticUtils.addAndCheck(Integer.MIN_VALUE, 1711);
      assertEquals((-2147481937), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        ArithmeticUtils.stirlingS2(2896, 1272);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Argument 2,896 outside domain [0 ; 25]
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        ArithmeticUtils.stirlingS2((-2147483645), (-2125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,125 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((BigInteger) null, (long) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((BigInteger) null, 4919524);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(bigInteger0, 2147479552);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      ArithmeticUtils.factorialLog(901825569);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        ArithmeticUtils.factorialLog((-3746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,746
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        ArithmeticUtils.factorialDouble((-2042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,042
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        ArithmeticUtils.factorial(311);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficientLog((-3796), (-3796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n, k), got n = -3,796
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficientLog(2, 274);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n, k), got k = 274, n = 2
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficientDouble((-649), (-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n, k), got n = -649
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficient((-773), (-773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n, k), got n = -773
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficient(0, 3821);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n, k), got k = 3,821, n = 0
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        ArithmeticUtils.mulAndCheck(9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = ArithmeticUtils.mulAndCheck(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = ArithmeticUtils.mulAndCheck((-2135L), 2261L);
      assertEquals((-4827235L), long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = ArithmeticUtils.mulAndCheck((-2856L), (-2856L));
      assertEquals(8156736L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = ArithmeticUtils.mulAndCheck(84L, 84L);
      assertEquals(7056L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = ArithmeticUtils.mulAndCheck(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd(192L, 192L);
      assertEquals(192L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd((-787L), (-787L));
      assertEquals(787L, long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd((-1512L), 989L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd((-2042), (-2042));
      assertEquals(2042, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd(1438, 269);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo(725L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = ArithmeticUtils.addAndCheck((-965L), (-965L));
      assertEquals((-1930L), long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        ArithmeticUtils.addAndCheck((-2034L), (-9223372036854775792L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,792 + -2,034
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        ArithmeticUtils.pow(bigInteger0, (-1930L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1,930)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        ArithmeticUtils.pow(bigInteger0, (-3162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-3,162)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 0);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        ArithmeticUtils.pow(8L, (-582L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-582)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        ArithmeticUtils.pow((-824L), (-2110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-2,110)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        ArithmeticUtils.pow(0, (-4035746434778044925L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-4,035,746,434,778,044,925)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        ArithmeticUtils.pow((-1783), (-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1,783)
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = ArithmeticUtils.subAndCheck(0L, 1L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = ArithmeticUtils.subAndCheck(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = ArithmeticUtils.mulAndCheck(3816L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        ArithmeticUtils.lcm(68719476735L, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = ArithmeticUtils.mulAndCheck((-2147483648L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        ArithmeticUtils.mulAndCheck((-1452L), (-4035746434778044925L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        ArithmeticUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        ArithmeticUtils.mulAndCheck(Integer.MAX_VALUE, (-1537));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm((long) 779, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm((long) 0, (-1073L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm(920, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm(0, 920);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm((-24L), (-4454L));
      assertEquals(53448L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd((-2261L), 0L);
      assertEquals(2261L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd(Integer.MIN_VALUE, (-3341));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm((-1370), 1697);
      assertEquals(2324890, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd((-2729), 0);
      assertEquals(2729, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd(0, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        ArithmeticUtils.addAndCheck(2147472347, 2147472347);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,147,472,347 + 2,147,472,347
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = ArithmeticUtils.addAndCheck((-295), 1074);
      assertEquals(779, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = ArithmeticUtils.factorialLog(63);
      assertEquals(201.00931639928152, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = ArithmeticUtils.binomialCoefficientLog(3341, (-2461));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficientDouble((-2495), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n, k), got k = 0, n = -2,495
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      ArithmeticUtils.factorialDouble(435178273);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        ArithmeticUtils.stirlingS2(686, 2964);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,964 is larger than the maximum (686)
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        ArithmeticUtils.factorial((-492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -492
         //
         verifyException("org.apache.commons.math3.util.CombinatoricsUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        ArithmeticUtils.binomialCoefficient(5036, 1101);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }
}
