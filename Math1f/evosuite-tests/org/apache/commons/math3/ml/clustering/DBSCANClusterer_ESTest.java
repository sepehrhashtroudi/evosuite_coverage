/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:55:26 GMT 2022
 */

package org.apache.commons.math3.ml.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.DBSCANClusterer;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.distance.ChebyshevDistance;
import org.apache.commons.math3.ml.distance.DistanceMeasure;
import org.apache.commons.math3.ml.distance.ManhattanDistance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBSCANClusterer_ESTest extends DBSCANClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(1.876974414381066, 1);
      Cluster<DoublePoint> cluster0 = new Cluster<DoublePoint>();
      List<DoublePoint> list0 = cluster0.getPoints();
      int[] intArray0 = new int[2];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint0);
      intArray0[0] = 1;
      DoublePoint doublePoint1 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint1);
      cluster0.addPoint(doublePoint0);
      List<Cluster<DoublePoint>> list1 = dBSCANClusterer0.cluster(list0);
      assertEquals(1, list1.size());
      assertEquals(1, dBSCANClusterer0.getMinPts());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(0.0, 0);
      Cluster<DoublePoint> cluster0 = new Cluster<DoublePoint>();
      int[] intArray0 = new int[9];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint0);
      DoublePoint doublePoint1 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint1);
      List<DoublePoint> list0 = cluster0.getPoints();
      List<Cluster<DoublePoint>> list1 = dBSCANClusterer0.cluster(list0);
      assertEquals(0.0, dBSCANClusterer0.getEps(), 0.01);
      assertEquals(1, list1.size());
      assertEquals(0, dBSCANClusterer0.getMinPts());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = null;
      try {
        dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>((-257.8359333315266), 348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -257.836 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.ml.clustering.DBSCANClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(0.0, 1);
      int int0 = dBSCANClusterer0.getMinPts();
      assertEquals(1, int0);
      assertEquals(0.0, dBSCANClusterer0.getEps(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(1.0, 272);
      double double0 = dBSCANClusterer0.getEps();
      assertEquals(272, dBSCANClusterer0.getMinPts());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(1.0, 1, chebyshevDistance0);
      try { 
        dBSCANClusterer0.cluster((Collection<DoublePoint>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = null;
      try {
        dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(4369.476387732, (-3491), manhattanDistance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,491 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.ml.clustering.DBSCANClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(0.0, 0, (DistanceMeasure) null);
      Cluster<DoublePoint> cluster0 = new Cluster<DoublePoint>();
      List<DoublePoint> list0 = cluster0.getPoints();
      int[] intArray0 = new int[9];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint0);
      DoublePoint doublePoint1 = new DoublePoint((double[]) null);
      cluster0.addPoint(doublePoint1);
      // Undeclared exception!
      try { 
        dBSCANClusterer0.cluster(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ml.clustering.Clusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = null;
      try {
        dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>((-2471.11013), (-542), manhattanDistance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,471.11 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.ml.clustering.DBSCANClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(0.0, 0);
      Cluster<DoublePoint> cluster0 = new Cluster<DoublePoint>();
      int[] intArray0 = new int[25];
      int[] intArray1 = new int[23];
      intArray1[0] = (-12);
      DoublePoint doublePoint0 = new DoublePoint(intArray1);
      DoublePoint doublePoint1 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint1);
      List<DoublePoint> list0 = cluster0.getPoints();
      cluster0.addPoint(doublePoint0);
      // Undeclared exception!
      try { 
        dBSCANClusterer0.cluster(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(1.876974414381066, 1);
      Cluster<DoublePoint> cluster0 = new Cluster<DoublePoint>();
      List<DoublePoint> list0 = cluster0.getPoints();
      int[] intArray0 = new int[2];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint0);
      intArray0[0] = 1;
      DoublePoint doublePoint1 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint1);
      List<Cluster<DoublePoint>> list1 = dBSCANClusterer0.cluster(list0);
      assertEquals(1, list1.size());
      assertEquals(1, dBSCANClusterer0.getMinPts());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(1.876974414381066, 1);
      Cluster<DoublePoint> cluster0 = new Cluster<DoublePoint>();
      List<DoublePoint> list0 = cluster0.getPoints();
      int[] intArray0 = new int[2];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      cluster0.addPoint(doublePoint0);
      cluster0.addPoint(doublePoint0);
      List<Cluster<DoublePoint>> list1 = dBSCANClusterer0.cluster(list0);
      assertEquals(1.876974414381066, dBSCANClusterer0.getEps(), 0.01);
      assertEquals(0, list1.size());
      assertEquals(1, dBSCANClusterer0.getMinPts());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(0.0, 0);
      int int0 = dBSCANClusterer0.getMinPts();
      assertEquals(0.0, dBSCANClusterer0.getEps(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSCANClusterer<DoublePoint> dBSCANClusterer0 = new DBSCANClusterer<DoublePoint>(0.0, 0);
      double double0 = dBSCANClusterer0.getEps();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, dBSCANClusterer0.getMinPts());
  }
}
