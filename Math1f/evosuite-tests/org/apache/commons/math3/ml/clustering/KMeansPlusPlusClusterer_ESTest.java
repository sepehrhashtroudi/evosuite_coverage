/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:57:55 GMT 2022
 */

package org.apache.commons.math3.ml.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.ml.clustering.CentroidCluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.distance.ChebyshevDistance;
import org.apache.commons.math3.ml.distance.EarthMoversDistance;
import org.apache.commons.math3.ml.distance.EuclideanDistance;
import org.apache.commons.math3.ml.distance.ManhattanDistance;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Well512a well512a0 = new Well512a(0);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(0, 0, chebyshevDistance0, well512a0);
      int[] intArray0 = new int[6];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      CentroidCluster<DoublePoint> centroidCluster0 = new CentroidCluster<DoublePoint>(doublePoint0);
      centroidCluster0.addPoint(doublePoint0);
      List<DoublePoint> list0 = centroidCluster0.getPoints();
      kMeansPlusPlusClusterer0.cluster(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(1456, 0, manhattanDistance0, (RandomGenerator) null);
      kMeansPlusPlusClusterer0.getRandomGenerator();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(0, 0, manhattanDistance0);
      kMeansPlusPlusClusterer0.getMaxIterations();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(1, 1, euclideanDistance0);
      kMeansPlusPlusClusterer0.getMaxIterations();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(0);
      kMeansPlusPlusClusterer0.getK();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(1, 1, euclideanDistance0);
      kMeansPlusPlusClusterer0.getK();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EarthMoversDistance earthMoversDistance0 = new EarthMoversDistance();
      Well19937a well19937a0 = new Well19937a(983);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE;
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-438), 4, earthMoversDistance0, well19937a0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(2, 2);
      try { 
        kMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EarthMoversDistance earthMoversDistance0 = new EarthMoversDistance();
      double[] doubleArray0 = new double[5];
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-2147189713), (-1), earthMoversDistance0);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[2];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.offerFirst(doublePoint0);
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.ml.distance.EarthMoversDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(2, 2671);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[8];
      intArray0[0] = 2671;
      double[] doubleArray0 = new double[8];
      DoublePoint doublePoint0 = new DoublePoint(doubleArray0);
      linkedList0.addFirst(doublePoint0);
      DoublePoint doublePoint1 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      linkedList0.add(doublePoint1);
      kMeansPlusPlusClusterer0.cluster(linkedList0);
      kMeansPlusPlusClusterer0.cluster(linkedList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(2, 2);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      double[] doubleArray0 = new double[8];
      DoublePoint doublePoint0 = new DoublePoint(doubleArray0);
      linkedList0.addFirst(doublePoint0);
      linkedList0.add(doublePoint0);
      kMeansPlusPlusClusterer0.cluster(linkedList0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-564), (-564), manhattanDistance0);
      int[] intArray0 = new int[0];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      CentroidCluster<DoublePoint> centroidCluster0 = new CentroidCluster<DoublePoint>(doublePoint0);
      centroidCluster0.addPoint(doublePoint0);
      List<DoublePoint> list0 = centroidCluster0.getPoints();
      kMeansPlusPlusClusterer0.cluster(list0);
      assertEquals((-564), kMeansPlusPlusClusterer0.getMaxIterations());
      assertEquals((-564), kMeansPlusPlusClusterer0.getK());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(2, 2671);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      double[] doubleArray0 = new double[8];
      DoublePoint doublePoint0 = new DoublePoint(doubleArray0);
      linkedList0.addFirst(doublePoint0);
      linkedList0.add(doublePoint0);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(221, 1);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (221)
         //
         verifyException("org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-564), (-564), manhattanDistance0);
      int[] intArray0 = new int[0];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      CentroidCluster<DoublePoint> centroidCluster0 = new CentroidCluster<DoublePoint>(doublePoint0);
      List<DoublePoint> list0 = centroidCluster0.getPoints();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-564), (-564), manhattanDistance0);
      int int0 = kMeansPlusPlusClusterer0.getMaxIterations();
      assertEquals((-564), kMeansPlusPlusClusterer0.getK());
      assertEquals((-564), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-1237));
      CentroidCluster<DoublePoint> centroidCluster0 = new CentroidCluster<DoublePoint>((Clusterable) null);
      List<DoublePoint> list0 = centroidCluster0.getPoints();
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>(list0);
      DoublePoint doublePoint0 = new DoublePoint((double[]) null);
      linkedList0.add(doublePoint0);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-564), (-564), manhattanDistance0);
      int int0 = kMeansPlusPlusClusterer0.getK();
      assertEquals((-564), int0);
      assertEquals((-564), kMeansPlusPlusClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EarthMoversDistance earthMoversDistance0 = new EarthMoversDistance();
      Well19937a well19937a0 = new Well19937a(983);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE;
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-438), 4, earthMoversDistance0, well19937a0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      kMeansPlusPlusClusterer0.getRandomGenerator();
      assertEquals((-438), kMeansPlusPlusClusterer0.getK());
      assertEquals(4, kMeansPlusPlusClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EarthMoversDistance earthMoversDistance0 = new EarthMoversDistance();
      Well19937a well19937a0 = new Well19937a(983);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE;
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-438), 4, earthMoversDistance0, well19937a0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      kMeansPlusPlusClusterer0.getEmptyClusterStrategy();
      assertEquals(4, kMeansPlusPlusClusterer0.getMaxIterations());
      assertEquals((-438), kMeansPlusPlusClusterer0.getK());
  }
}
