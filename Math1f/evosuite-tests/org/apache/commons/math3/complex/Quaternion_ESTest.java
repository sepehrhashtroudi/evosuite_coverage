/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:20:20 GMT 2022
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Quaternion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Quaternion_ESTest extends Quaternion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.J.isPureQuaternion(1307.9304504816198);
      assertTrue(boolean0);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      Quaternion quaternion3 = quaternion0.normalize();
      boolean boolean0 = quaternion3.equals((Object) quaternion2);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion3.getQ3(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion3.getQ2(), 0.01);
      assertFalse(quaternion1.equals((Object)quaternion2));
      assertTrue(quaternion3.equals((Object)quaternion0));
      assertEquals(0.0, quaternion3.getQ0(), 0.01);
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertFalse(quaternion2.equals((Object)quaternion3));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion1.equals((Object) quaternion0);
      assertEquals(2.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(1.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.IDENTITY;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertFalse(boolean0);
      assertEquals(1.0, quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.getPositivePolarForm();
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(2.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(1.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3074.6400771014), 3847.5, 1.0, 3847.5);
      double double0 = Quaternion.dotProduct(quaternion0, quaternion0);
      assertEquals(3847.5, quaternion0.getQ3(), 0.01);
      assertEquals(3.90599251037181E7, double0, 0.01);
      assertEquals(1.0, quaternion0.getQ2(), 0.01);
      assertEquals(3847.5, quaternion0.getQ1(), 0.01);
      assertEquals((-3074.6400771014), quaternion0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.K;
      double double0 = Quaternion.dotProduct(quaternion0, quaternion1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(1.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.K;
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-1.0), quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(1.0, quaternion1.getQ3(), 0.01);
      assertEquals(1.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      assertEquals((-1.0), quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1.0), quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
      assertEquals(1.0, quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(1.0, quaternion2.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1.0), quaternion2.getQ0(), 0.01);
      assertEquals((-1.0), quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.K;
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals((-1.0), quaternion2.getQ3(), 0.01);
      assertEquals(1.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion0.J.subtract(quaternion1);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(1.0, quaternion2.getQ2(), 0.01);
      assertEquals(1.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(1.0, quaternion1.getQ2(), 0.01);
      assertEquals((-1.0), quaternion2.getQ2(), 0.01);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals((-1.0), quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.ZERO.subtract(quaternion0);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(1.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals((-1.0), quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      Quaternion quaternion3 = quaternion2.normalize();
      assertEquals(0.0, quaternion3.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals((-1.0), quaternion3.getQ3(), 0.01);
      assertEquals((-1.0), quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.J;
      Quaternion quaternion3 = Quaternion.multiply(quaternion2, quaternion1);
      Quaternion quaternion4 = quaternion3.normalize();
      assertEquals((-1.0), quaternion3.getQ2(), 0.01);
      assertEquals(0.0, quaternion4.getQ1(), 0.01);
      assertEquals((-1.0), quaternion4.getQ2(), 0.01);
      assertEquals(-0.0, quaternion4.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.getConjugate();
      Quaternion quaternion2 = quaternion1.normalize();
      assertEquals(-0.0, quaternion2.getQ3(), 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals(-0.0, quaternion2.getQ2(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals((-1.0), quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.normalize();
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals((-1.0), quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      Quaternion quaternion3 = Quaternion.multiply(quaternion0, quaternion2);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertTrue(quaternion3.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = quaternion0.getVectorPart();
      Quaternion quaternion1 = new Quaternion(1410.53916881152, doubleArray0);
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      assertEquals(1410.53916881152, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals((-1.0), quaternion2.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-3074.6400771014), 3847.5, 1.0, 3847.5);
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      assertEquals((-2.3659355393295273E7), quaternion1.getQ1(), 0.01);
      assertEquals((-6149.280154202133), quaternion1.getQ2(), 0.01);
      assertEquals(3847.5, quaternion0.getQ1(), 0.01);
      assertEquals((-2.3659355393295273E7), quaternion1.getQ3(), 0.01);
      assertEquals((-2.0153101896281898E7), quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.I.getConjugate();
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(1.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = quaternion0.I.multiply(quaternion1);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(1.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.multiply(quaternion0);
      assertEquals(-0.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion2.getQ1(), 0.01);
      assertEquals((-1.0), quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion0.multiply(quaternion1);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(-0.0, quaternion2.getQ0(), 0.01);
      assertEquals((-1.0), quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.multiply(quaternion0);
      Quaternion quaternion2 = quaternion0.I.subtract(quaternion1);
      Quaternion quaternion3 = quaternion2.multiply(quaternion1);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion3.getQ3(), 0.01);
      assertEquals(1.0, quaternion3.getQ0(), 0.01);
      assertEquals(0.0, quaternion3.getQ1(), 0.01);
      assertEquals(1.0, quaternion3.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.K.multiply(4376.4346);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(4376.4346, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.K.multiply((-403.30639562));
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-403.30639562), quaternion1.getQ3(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.multiply(1.0);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(1.0, quaternion1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.multiply((-301.59));
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-301.59), quaternion1.getQ2(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.multiply(1307.9304504816198);
      assertEquals(1307.9304504816198, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.multiply((-1805.21832));
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals(-0.0, quaternion1.getQ0(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1805.21832), quaternion1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.multiply(2035.005278973027);
      assertEquals(2035.005278973027, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.IDENTITY.multiply((-1339.31));
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-1339.31), quaternion1.getQ0(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      boolean boolean0 = quaternion1.isUnitQuaternion(0.0);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double double0 = quaternion0.getScalarPart();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      double double0 = quaternion0.getScalarPart();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = Quaternion.K;
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      double double0 = quaternion2.getQ3();
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.multiply(quaternion0);
      double double0 = quaternion1.getQ3();
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      double double0 = quaternion2.getQ2();
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      double double0 = quaternion2.getQ2();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(1.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      double double0 = quaternion0.getQ1();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.I.getConjugate();
      double double0 = quaternion1.getQ1();
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      double double0 = quaternion0.getQ0();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.getPositivePolarForm();
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertTrue(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1615.30229145), (-1615.30229145), 0.0, 2388.15839931473);
      Quaternion quaternion1 = quaternion0.getPositivePolarForm();
      assertEquals(0.48877458712465777, quaternion1.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-0.7226332444347136), quaternion1.getQ3(), 0.01);
      assertEquals(0.48877458712465777, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals((-1615.30229145), quaternion0.getQ1(), 0.01);
      assertEquals(2388.15839931473, quaternion0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.getConjugate();
      Quaternion quaternion2 = quaternion1.getPositivePolarForm();
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
      assertEquals(-0.0, quaternion2.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1.0), quaternion1.getQ2(), 0.01);
      assertEquals(-0.0, quaternion2.getQ3(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.I.getConjugate();
      Quaternion quaternion2 = quaternion1.getPositivePolarForm();
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(-0.0, quaternion2.getQ2(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion1));
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-1.0), quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(-0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      double double0 = quaternion0.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0, 0.0, (-1125.158), (-895.1));
      Quaternion quaternion1 = quaternion0.getInverse();
      assertEquals((-1125.158), quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertEquals(4.330044003621516E-4, quaternion1.getQ3(), 0.01);
      assertEquals(5.442949001258829E-4, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals((-895.1), quaternion0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1.0), (-1.0), 0.0, 0.0);
      Quaternion quaternion1 = quaternion0.J.getInverse();
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals((-1.0), quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertEquals((-1.0), quaternion1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-2335.76528274), (-2335.76528274), 0.0, (-1841.1773923));
      Quaternion quaternion1 = quaternion0.getInverse();
      assertEquals((-1.6332271974460588E-4), quaternion1.getQ0(), 0.01);
      assertEquals((-1841.1773923), quaternion0.getQ3(), 0.01);
      assertEquals((-2335.76528274), quaternion0.getScalarPart(), 0.01);
      assertEquals((-2335.76528274), quaternion0.getQ1(), 0.01);
      assertEquals(1.287398616054306E-4, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(1.6332271974460588E-4, quaternion1.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.multiply(quaternion0);
      Quaternion quaternion2 = quaternion1.getInverse();
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertEquals((-1.0), quaternion1.getScalarPart(), 0.01);
      assertEquals((-1.0), quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      Quaternion quaternion3 = quaternion2.getConjugate();
      assertEquals(1.0, quaternion3.getQ3(), 0.01);
      assertEquals(-0.0, quaternion3.getQ1(), 0.01);
      assertEquals(0.0, quaternion3.getQ0(), 0.01);
      assertEquals(-0.0, quaternion3.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.J;
      Quaternion quaternion3 = Quaternion.multiply(quaternion2, quaternion1);
      Quaternion quaternion4 = quaternion3.getConjugate();
      assertTrue(quaternion4.equals((Object)quaternion2));
      assertEquals(1.0, quaternion2.getQ2(), 0.01);
      assertEquals(-0.0, quaternion4.getQ1(), 0.01);
      assertEquals(-0.0, quaternion4.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.IDENTITY.getConjugate();
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1615.30229145), (-1615.30229145), 0.0, 2388.15839931473);
      Quaternion quaternion1 = quaternion0.getConjugate();
      assertEquals(2388.15839931473, quaternion0.getQ3(), 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-2388.15839931473), quaternion1.getQ3(), 0.01);
      assertEquals(1615.30229145, quaternion1.getQ1(), 0.01);
      assertEquals((-1615.30229145), quaternion1.getQ0(), 0.01);
      assertEquals((-1615.30229145), quaternion0.getQ0(), 0.01);
      assertEquals((-1615.30229145), quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.getConjugate();
      double double0 = Quaternion.dotProduct(quaternion1, quaternion0);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(1.0, quaternion0.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.getConjugate();
      Quaternion quaternion2 = quaternion0.add(quaternion1);
      double double0 = quaternion0.dotProduct(quaternion2);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-1.0), quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.getPositivePolarForm();
      double double0 = quaternion1.dotProduct(quaternion2);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), quaternion1.getScalarPart(), 0.01);
      assertEquals(-0.0, quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(1.0, quaternion0.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.multiply(quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals((-1.0), quaternion2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.J;
      Quaternion quaternion3 = Quaternion.multiply(quaternion2, quaternion1);
      Quaternion quaternion4 = Quaternion.add(quaternion3, quaternion3);
      assertEquals(-0.0, quaternion4.getQ0(), 0.01);
      assertEquals(0.0, quaternion4.getQ1(), 0.01);
      assertEquals(0.0, quaternion3.getQ3(), 0.01);
      assertEquals((-2.0), quaternion4.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.getPositivePolarForm();
      Quaternion quaternion3 = Quaternion.add(quaternion2, quaternion0);
      assertEquals(1.0, quaternion3.getQ1(), 0.01);
      assertEquals(0.0, quaternion3.getQ2(), 0.01);
      assertEquals(1.0, quaternion3.getQ0(), 0.01);
      assertEquals(0.0, quaternion3.getQ3(), 0.01);
      assertEquals((-1.0), quaternion1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals((-1.0), quaternion2.getQ0(), 0.01);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.J;
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      Quaternion quaternion3 = quaternion0.add(quaternion2);
      assertEquals((-1.0), quaternion3.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(1.0, quaternion3.getQ1(), 0.01);
      assertEquals(0.0, quaternion3.getQ2(), 0.01);
      assertEquals(0.0, quaternion3.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.getConjugate();
      Quaternion quaternion2 = quaternion1.I.add(quaternion1);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
      assertEquals(1.0, quaternion2.getQ1(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals((-1.0), quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(-0.0, quaternion1.getQ1(), 0.01);
      assertEquals((-1.0), quaternion1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.I.getConjugate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      Quaternion quaternion3 = quaternion2.add(quaternion0);
      assertEquals(-0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion3.getQ3(), 0.01);
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals((-1.0), quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion3.getQ2(), 0.01);
      assertTrue(quaternion3.equals((Object)quaternion1));
      assertEquals(-0.0, quaternion2.getQ2(), 0.01);
      assertEquals((-2.0), quaternion2.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.K.add(quaternion0);
      Quaternion quaternion2 = quaternion1.normalize();
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.7071067811865475, quaternion2.getQ1(), 0.01);
      assertEquals(1.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.7071067811865475, quaternion2.getQ3(), 0.01);
      assertEquals(1.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(1.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.add(quaternion1);
      assertEquals(0.0, quaternion2.getQ3(), 0.01);
      assertEquals(0.0, quaternion2.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals((-2.0), quaternion2.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        Quaternion.subtract((Quaternion) null, quaternion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.subtract((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      // Undeclared exception!
      try { 
        Quaternion.multiply((Quaternion) null, quaternion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      // Undeclared exception!
      try { 
        quaternion0.IDENTITY.multiply((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        quaternion0.K.equals((Quaternion) null, (-3691.4790446557117));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      // Undeclared exception!
      try { 
        Quaternion.dotProduct((Quaternion) null, quaternion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.add((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = new Quaternion(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        quaternion0.add((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion((-6045.110734), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      // Undeclared exception!
      try { 
        quaternion1.normalize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Norm (0)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion(0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = new Quaternion(doubleArray0);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double double0 = quaternion0.getQ1();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double double0 = quaternion0.getQ3();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double double0 = quaternion0.getNorm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double double0 = quaternion0.getQ2();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      double double0 = quaternion1.getQ0();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getQ0();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        quaternion0.ZERO.getInverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Norm (0)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.getInverse();
      assertEquals(-0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals((-1.0), quaternion1.getQ1(), 0.01);
      assertEquals(-0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.isPureQuaternion(0.0);
      assertTrue(boolean0);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.isPureQuaternion((-1.0));
      assertFalse(boolean0);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.J.equals(quaternion0, 2.0);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(1.0, quaternion0.getQ1(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      boolean boolean0 = quaternion0.J.equals(quaternion0, (-403.30639562));
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      boolean boolean0 = quaternion0.ZERO.equals(quaternion0, (-1.0));
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertEquals(1.0, quaternion0.getQ3(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.ZERO.equals(quaternion0, (-1.0));
      assertEquals(1.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      boolean boolean0 = quaternion0.K.equals(quaternion0, 0.0);
      assertEquals(1.0, quaternion0.getQ0(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      quaternion0.J.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion1.equals((Object) quaternion0);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion0.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertEquals(1.0, quaternion0.getQ2(), 0.01);
      assertFalse(quaternion0.equals((Object)quaternion1));
      assertEquals(2.0, quaternion1.getQ2(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.getPositivePolarForm();
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = Quaternion.ZERO;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertFalse(boolean0);
      assertEquals(0.0, quaternion1.getQ0(), 0.01);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) "{odm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      // Undeclared exception!
      try { 
        quaternion0.ZERO.getPositivePolarForm();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Norm (0)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.isUnitQuaternion(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double double0 = quaternion0.dotProduct(quaternion0);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(1.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.multiply(quaternion0);
      quaternion1.equals((Object) quaternion0);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals((-1.0), quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1.0), (-1.0), 0.0, 0.0);
      Quaternion quaternion1 = quaternion0.IDENTITY.getPositivePolarForm();
      assertEquals(1.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals(0.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
      assertEquals((-1.0), quaternion0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1.0), (-1.0), 0.0, 0.0);
      double double0 = quaternion0.getScalarPart();
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, quaternion0.getQ2(), 0.01);
      assertEquals((-1.0), quaternion0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.add(quaternion0);
      assertEquals(0.0, quaternion0.getQ3(), 0.01);
      assertEquals(2.0, quaternion1.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getQ1(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
      assertEquals(1.0, quaternion0.getQ2(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Quaternion quaternion0 = null;
      try {
        quaternion0 = new Quaternion((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      String string0 = quaternion0.K.toString();
      assertEquals("[0.0 0.0 0.0 1.0]", string0);
  }
}
