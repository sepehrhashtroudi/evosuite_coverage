/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:17:56 GMT 2022
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexFormat_ESTest extends ComplexFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0);
      Complex complex0 = new Complex((-154.3063856568), (-3361.0));
      String string0 = complexFormat0.format(complex0);
      assertEquals("-\u00A4154.31 - \u00A43,361.00i", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0);
      Complex complex0 = complexFormat0.parse("0", parsePosition0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Complex complex0 = complexFormat0.parse("-807.8576197703");
      assertEquals((-807.8576197703), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      numberFormat0.setMinimumFractionDigits(265);
      ComplexFormat complexFormat0 = new ComplexFormat("org.apache.commons.math3.complex.ComplexFormat", numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)complexFormat0.getRealFormat();
      assertEquals("", decimalFormat0.getPositivePrefix());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("1", decimalFormatSymbols0);
      ComplexFormat complexFormat0 = new ComplexFormat("Cannot normalize to NaN", decimalFormat0, decimalFormat0);
      DecimalFormat decimalFormat1 = (DecimalFormat)complexFormat0.getRealFormat();
      assertEquals("-1", decimalFormat1.getNegativePrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat(" + ");
      ComplexFormat complexFormat0 = new ComplexFormat(" + ", decimalFormat0, decimalFormat0);
      DecimalFormat decimalFormat1 = (DecimalFormat)complexFormat0.getImaginaryFormat();
      assertEquals("", decimalFormat1.getPositiveSuffix());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setMaximumIntegerDigits(0);
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      complexFormat0.getImaginaryFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0);
      complexFormat0.getImaginaryFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("p9s'$YN@>-[I{-*UP");
      ParsePosition parsePosition0 = new ParsePosition((-987));
      // Undeclared exception!
      try { 
        complexFormat0.parse("p9s'$YN@>-[I{-*UP", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      ComplexFormat complexFormat0 = new ComplexFormat("org.apache.commons.math3.exception.MathIllegalArgumentException", numberFormat0);
      // Undeclared exception!
      try { 
        complexFormat0.parse((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComplexFormat.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComplexFormat.getInstance("!&k\"*", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      Complex complex0 = Complex.NaN;
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 633);
      // Undeclared exception!
      try { 
        complexFormat0.format(complex0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("5");
      ComplexFormat complexFormat0 = new ComplexFormat(choiceFormat0);
      Complex complex0 = Complex.ONE;
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      // Undeclared exception!
      try { 
        complexFormat0.format(complex0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1489);
      try { 
        complexFormat0.format(object0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot format a java.lang.Object instance as a complex number
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("'");
      // Undeclared exception!
      try { 
        complexFormat0.format((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat("", numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(14);
      Complex complex0 = complexFormat0.parse("3,166.42018699", parsePosition0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat(")7qA|+an");
      ParsePosition parsePosition0 = new ParsePosition(43);
      complexFormat0.parse("^:xq\"5*gi<aF", parsePosition0);
      assertEquals("java.text.ParsePosition[index=43,errorIndex=42]", parsePosition0.toString());
      assertEquals(43, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      Complex complex0 = Complex.INF;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(1717);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals(24, stringBuffer0.length());
      assertEquals("(Infinity) + (Infinity)i", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("v&/lpCeGL|B=r`$.ZK");
      Complex complex0 = complexFormat0.parse("0");
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals("0", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ComplexFormat complexFormat0 = new ComplexFormat("CANNOT_TRANSFORM_TO_DOUBLE", numberFormat0, numberFormat0);
      // Undeclared exception!
      try { 
        complexFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat("", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat((String) null, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0);
      complexFormat0.getImaginaryFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("v&/lpCeGL|B=r`$.ZK");
      String string0 = complexFormat0.getImaginaryCharacter();
      assertEquals("v&/lpCeGL|B=r`$.ZK", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("2UyoI[,}\"^mo");
      ParsePosition parsePosition0 = new ParsePosition(622);
      parsePosition0.setIndex(0);
      complexFormat0.parse("2UyoI[,}\"^mo", parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat(")7qA|+an");
      Complex complex0 = complexFormat0.parse("(Infinity) + (Infinity))7qA|+an");
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      try { 
        complexFormat0.parse("unable to bracket optimum in line search");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: string \"unable to bracket optimum in line search\" unparseable (from position 0) as an object of type org.apache.commons.math3.complex.Complex
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("v&/lpCeGL|B=r`$.ZK");
      Double double0 = new Double(0.0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      complexFormat0.format((Object) double0, stringBuffer0, fieldPosition0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Complex complex0 = complexFormat0.parse("3,166.42018699");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "3,166.42018699");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      complexFormat0.format((Object) complex0, stringBuffer0, fieldPosition0);
      assertEquals("3,166.420186993,166.42018699", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat(")7qA|+an");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "^:xq\"5*gi<aF");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        complexFormat0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat(")7qA|+an");
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(complex0);
      String string0 = complexFormat0.format(complex1);
      assertEquals("(NaN) + (NaN))7qA|+an", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("OZCNwwHdIfr ");
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      String string0 = complexFormat0.format(complex0);
      assertEquals("-1 - OZCNwwHdIfr ", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat("JBaZ3", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginary format
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      try { 
        ComplexFormat.getInstance("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat((NumberFormat) null, decimalFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // real format
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat((NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginary format
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      Complex complex0 = new Complex((-1.0), (-1.0));
      StringBuffer stringBuffer0 = new StringBuffer("");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals(1, fieldPosition0.getBeginIndex());
      assertEquals("-\u00A41.00 - \u00A41.00i", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginary format
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance("*Ux*;*Q.kYNV8frno", locale0);
      assertEquals("*Ux*;*Q.kYNV8frno", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Complex complex0 = Complex.NaN;
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(0);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals("(NaN) + (NaN)i", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat(")7qA|+an");
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      String string0 = complexFormat0.format(double0);
      assertEquals("(Infinity)", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      // Undeclared exception!
      try { 
        complexFormat0.format((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.complex.ComplexFormat", e);
      }
  }
}
