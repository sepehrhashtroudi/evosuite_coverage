/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:16:42 GMT 2022
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.278201128741098E-9), (-1.4356011804377797E-9));
      Complex complex1 = complex0.multiply((-1.4356011804377797E-9));
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.atan();
      complex3.ONE.sinh();
      complex0.sinh();
      complex0.getArgument();
      Complex complex4 = complex0.cosh();
      Complex.valueOf(1106.6740161626);
      complex2.createComplex((-1.4356011804377797E-9), (-253.342665487));
      Complex complex5 = complex4.cos();
      complex3.reciprocal();
      complex2.I.sqrt();
      complex1.createComplex((-4.278201128741098E-9), Double.POSITIVE_INFINITY);
      complex3.sqrt1z();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(1809);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-561.5874518));
      complex0.I.log();
      complex0.INF.multiply((-1567));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(0.0);
      complex1.sin();
      complex0.subtract((-2453.8450212253));
      complex2.negate();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0);
      complex1.I.multiply((double) 0);
      Complex complex2 = Complex.valueOf((double) 0);
      complex1.ONE.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.NaN;
      complex3.subtract(complex4);
      complex0.isInfinite();
      complex0.pow((double) 0);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex5.sqrt();
      complex6.hashCode();
      complex5.ZERO.divide(203.6387979401285);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex0.INF.nthRoot(1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ONE.negate();
      complex4.sqrt();
      Complex complex5 = complex3.INF.log();
      complex1.equals(complex0);
      Complex complex6 = Complex.valueOf((double) 1, 0.0);
      complex0.ZERO.abs();
      complex6.INF.add((double) 1);
      Complex complex7 = complex2.INF.sinh();
      complex7.abs();
      Complex complex8 = complex2.multiply((-1058));
      complex8.readResolve();
      complex3.negate();
      Complex complex9 = complex5.sqrt();
      complex9.acos();
      Complex complex10 = complex8.sqrt1z();
      complex8.exp();
      complex1.sinh();
      complex3.conjugate();
      complex7.abs();
      Complex complex11 = complex10.sinh();
      complex2.atan();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-589.5516463763), 2346.7341818);
      Complex complex1 = complex0.createComplex(5.8107841809216616E209, 5.8107841809216616E209);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.I.multiply(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.subtract((-20.0));
      complex4.sinh();
      complex4.NaN.acos();
      complex4.ZERO.log();
      complex2.isNaN();
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.divide(879.7816057);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.sqrt1z();
      complex1.hashCode();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.I.conjugate();
      complex4.ONE.negate();
      Complex complex5 = complex3.subtract(complex2);
      complex2.ZERO.atan();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.INF.negate();
      complex6.isNaN();
      Complex complex8 = complex7.ZERO.atan();
      complex8.exp();
      complex3.NaN.subtract(complex8);
      complex8.asin();
      complex2.NaN.sqrt();
      complex2.abs();
      complex2.toString();
      complex7.reciprocal();
      complex5.getImaginary();
      complex0.createComplex(2.0, 1.4142135623730951);
      Complex.valueOf(2.0);
      Complex.valueOf(Double.NaN, 0.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = complex0.I.multiply(0.0);
      complex1.I.getArgument();
      complex0.I.getArgument();
      complex0.hashCode();
      Complex complex2 = new Complex(1.5707963267948966);
      complex1.I.subtract(complex2);
      try { 
        complex1.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      complex0.I.subtract((-2067.79));
      Complex complex1 = complex0.ZERO.acos();
      complex1.INF.cosh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.add((-2.0648015610276362E257));
      complex3.INF.log();
      complex1.INF.nthRoot(360);
      Complex complex4 = complex2.log();
      complex4.ZERO.pow((-1.8382923511801317E183));
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.ONE.sqrt();
      complex6.INF.conjugate();
      complex2.readResolve();
      complex2.getReal();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      complex0.I.subtract((-2067.79));
      Complex complex1 = complex0.ZERO.acos();
      complex1.INF.cosh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.add((-2.0648015610276362E257));
      complex1.INF.nthRoot(360);
      Complex complex4 = complex2.log();
      complex4.ZERO.pow((double) 360);
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.ONE.sqrt();
      complex6.INF.conjugate();
      complex2.readResolve();
      complex2.getReal();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.log();
      complex1.INF.cos();
      complex1.INF.tan();
      Complex complex2 = complex0.cos();
      complex2.I.getField();
      Complex complex3 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex0.subtract(complex3);
      Complex complex4 = Complex.valueOf(2.8009086220877197E-205, (-1938.932003199));
      Complex complex5 = complex4.NaN.cos();
      complex5.createComplex((-960.0), 0.0);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-461.51958), (-461.51958));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.248332290732976E-35), (-8.248332290732976E-35));
      complex0.ONE.readResolve();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.ZERO.add(complex0);
      complex3.INF.multiply((-8.248332290732976E-35));
      complex0.INF.pow(983.8298258);
      Complex complex4 = complex0.INF.multiply((-945));
      Complex complex5 = complex4.I.sin();
      complex1.NaN.abs();
      Complex complex6 = complex2.ONE.divide(472.73);
      complex2.multiply(complex1);
      Complex complex7 = complex2.add(Double.NaN);
      complex6.I.cosh();
      complex2.NaN.divide(1775.2253356962);
      complex2.getField();
      Complex complex8 = complex2.add(0.7249995199969751);
      complex6.toString();
      complex8.asin();
      Complex complex9 = complex1.atan();
      complex8.log();
      complex9.getReal();
      complex7.negate();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-2812.4397));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.subtract(complex2);
      complex2.I.pow(complex3);
      Complex complex5 = complex4.sqrt1z();
      complex5.abs();
      complex5.ONE.conjugate();
      complex1.tan();
      complex1.isNaN();
      complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(341.0, (-1854.63));
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.getField();
      complex0.I.subtract(complex1);
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex0.INF.multiply(complex1);
      complex4.I.asin();
      complex0.NaN.nthRoot(3470);
      Complex complex5 = complex0.ONE.multiply(842);
      complex0.hashCode();
      Complex complex6 = complex1.ZERO.conjugate();
      complex1.getReal();
      complex1.readResolve();
      Complex.valueOf(1535.2660384459);
      complex0.subtract(complex5);
      Complex complex7 = complex2.pow((double) 3470);
      complex1.getField();
      complex2.tan();
      Complex complex8 = complex7.subtract((-1757.211071));
      complex0.asin();
      complex3.reciprocal();
      Complex complex9 = complex8.multiply((double) 3470);
      complex8.INF.pow(0.0);
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex2.ZERO.createComplex((-3068.3), 0.3743882179260254);
      complex4.ONE.asin();
      Complex complex5 = complex2.sqrt1z();
      complex5.add(complex3);
      Complex complex6 = complex2.I.multiply(411);
      complex0.getReal();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex1.sqrt1z();
      complex8.asin();
      complex1.atan();
      Complex complex9 = complex7.acos();
      complex9.cos();
      complex7.INF.cosh();
      complex1.equals(complex6);
      complex7.hashCode();
      complex2.isInfinite();
      complex0.getReal();
      complex3.createComplex((-3068.3), 264.78196515);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(194.691105266049, 194.691105266049);
      Complex complex2 = complex0.add(complex1);
      complex1.I.toString();
      Complex complex3 = Complex.valueOf(194.691105266049);
      complex3.NaN.subtract(0.0);
      Complex complex4 = complex1.NaN.multiply(complex3);
      Complex complex5 = complex1.createComplex(194.691105266049, 3.3888561478632076E-8);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex1.add(complex5);
      complex6.ZERO.add(complex1);
      complex2.INF.add(complex4);
      complex5.hashCode();
      complex1.abs();
      complex7.ONE.log();
      Complex complex8 = complex7.I.multiply(complex6);
      complex8.NaN.sqrt1z();
      complex5.divide(657.76293);
      complex7.pow(657.867004);
      complex2.sin();
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.NaN.acos();
      complex0.add((-20.0));
      Complex complex6 = complex2.divide((-20.0));
      Complex complex7 = complex3.multiply((-20.0));
      complex5.equals(complex6);
      complex0.nthRoot(17);
      complex7.sqrt1z();
      complex0.tan();
      complex4.getReal();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.68759245092879E-8);
      Complex complex1 = null;
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.abs();
      try { 
        complex3.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.NaN.tan();
      complex3.I.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      complex0.nthRoot(82);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.asin();
      complex6.ONE.readResolve();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex8.pow(0.0);
      complex6.I.sqrt();
      complex2.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-9.841244788104406E44));
      Complex complex2 = complex0.NaN.createComplex((-9.841244788104406E44), (-9.841244788104406E44));
      Complex complex3 = complex0.ZERO.divide(3198.0);
      complex3.ONE.sqrt1z();
      complex2.INF.negate();
      complex3.isNaN();
      complex3.add((-97.6085867));
      complex0.cosh();
      complex1.add((-9.841244788104406E44));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.08154398202896118);
      Complex complex1 = complex0.INF.reciprocal();
      complex1.ONE.readResolve();
      complex0.I.getField();
      complex0.INF.abs();
      complex0.getField();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2908.0, 2908.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.add(2908.0);
      complex2.getField();
      complex3.sqrt();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = Complex.valueOf(2908.0);
      complex6.NaN.sin();
      complex4.INF.cos();
      complex0.NaN.conjugate();
      complex4.ZERO.conjugate();
      complex4.add(complex0);
      complex0.cos();
      complex0.equals(")");
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.nthRoot(1434);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.createComplex(1281.96320153, 1281.96320153);
      Complex complex2 = complex0.subtract(complex1);
      complex1.ONE.subtract(1517.698594905178);
      Complex complex3 = complex2.multiply(303);
      complex3.sinh();
      complex1.isNaN();
      Complex.valueOf((double) 303, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(748);
      Complex complex1 = complex0.atan();
      complex0.getField();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.NaN.atan();
      complex3.ONE.subtract(complex2);
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex0.multiply(Double.NaN);
      Complex complex6 = complex5.ONE.sin();
      complex0.getImaginary();
      Complex complex7 = complex3.pow(complex0);
      complex7.ONE.log();
      complex4.isInfinite();
      complex7.asin();
      complex0.getImaginary();
      complex1.sinh();
      complex4.readResolve();
      Complex.valueOf((-7890.3249363));
      Complex complex8 = complex4.negate();
      complex8.hashCode();
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.divide(complex0);
      complex1.NaN.readResolve();
      Complex complex3 = complex1.reciprocal();
      complex3.INF.atan();
      complex3.log();
      Complex complex4 = complex2.tan();
      complex0.toString();
      complex1.log();
      complex3.multiply(complex4);
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1744.8291);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ONE.readResolve();
      complex0.I.add(complex1);
      complex0.I.sqrt();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2225.39996), 0.0);
      Complex complex1 = complex0.I.multiply((-2225.39996));
      Complex complex2 = complex0.ZERO.pow((-2225.39996));
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ZERO.tan();
      complex2.INF.cosh();
      Complex complex6 = complex2.divide(0.0);
      complex6.NaN.asin();
      complex3.asin();
      complex5.subtract(complex1);
      complex0.negate();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      complex1.ONE.toString();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.NaN.atan();
      complex0.NaN.hashCode();
      complex0.getReal();
      Complex complex4 = complex1.tan();
      complex2.INF.subtract(0.0);
      Complex complex5 = complex4.subtract(complex3);
      complex4.I.toString();
      complex4.toString();
      Complex complex6 = Complex.valueOf(0.0, 1642.18905156);
      Complex complex7 = complex6.INF.add(complex1);
      complex7.INF.sqrt1z();
      complex3.getImaginary();
      complex6.reciprocal();
      Complex complex8 = complex2.negate();
      Complex.valueOf((-309.6367474), Double.NaN);
      complex8.reciprocal();
      Complex complex9 = complex4.createComplex(Double.NaN, 0.0);
      complex5.pow(1642.18905156);
      complex5.getReal();
      complex8.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(715.0, 4085.2192611);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(1818.0);
      complex2.ONE.readResolve();
      Complex complex3 = complex1.ZERO.atan();
      complex3.I.conjugate();
      Complex complex4 = complex0.tan();
      complex0.NaN.toString();
      complex3.acos();
      Complex complex5 = Complex.valueOf(1818.0, 4085.2192611);
      Complex complex6 = complex0.NaN.tanh();
      complex6.hashCode();
      Complex complex7 = complex5.tanh();
      complex7.INF.nthRoot(4059);
      complex1.cosh();
      complex4.asin();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(5.579910641313343E186);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract((-3483.6545550232395));
      Complex complex3 = complex0.divide(complex2);
      complex1.sin();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.I.multiply((double) 1);
      complex0.ZERO.nthRoot(1);
      complex3.INF.hashCode();
      complex2.equals(complex3);
      complex3.INF.getField();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.multiply(1);
      complex6.NaN.nthRoot(1);
      complex4.readResolve();
      complex2.cosh();
      Complex complex8 = complex6.sin();
      Complex.valueOf((-3483.6545550232395), (-3483.6545550232395));
      Complex complex9 = complex7.tan();
      complex0.multiply(complex8);
      Object object0 = new Object();
      complex1.equals(object0);
      complex9.sqrt();
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1493.050133677));
      complex0.sin();
      Complex complex1 = complex0.cosh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.subtract(306.867044829);
      complex0.divide(complex2);
      complex1.NaN.getField();
      Complex complex3 = complex1.multiply(0);
      complex2.nthRoot(83);
      complex1.getImaginary();
      complex3.getField();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1637.3866799999555), (-1637.3866799999555));
      Complex complex1 = complex0.add((-1637.3866799999555));
      complex0.NaN.toString();
      complex0.getImaginary();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex4.ONE.asin();
      complex2.ZERO.divide(complex3);
      complex2.getField();
      complex5.getArgument();
      Complex complex6 = complex1.conjugate();
      complex6.INF.cosh();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(3257.89438, 0.0);
      Complex complex1 = complex0.multiply((-2816));
      complex1.INF.cos();
      complex1.multiply(907);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      complex0.ONE.acos();
      Complex complex2 = complex0.atan();
      complex0.ONE.toString();
      complex2.getReal();
      complex0.getArgument();
      complex0.ZERO.acos();
      complex0.multiply(172);
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.I.abs();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(539.63615686717, 539.63615686717);
      Complex.valueOf(0.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1170.53524814916));
      Complex complex1 = complex0.cosh();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex1.add(20.0);
      Complex complex2 = complex0.sinh();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.asin();
      try { 
        complex0.NaN.nthRoot((-2005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,005
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2852.1));
      complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      complex1.NaN.getArgument();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex4.ZERO.atan();
      complex5.NaN.divide(complex3);
      Complex complex6 = complex0.pow(0.0);
      complex4.nthRoot(4443);
      Complex complex7 = complex6.subtract((-2340.88260285));
      Complex.valueOf(0.0);
      Complex complex8 = Complex.ONE;
      complex7.equals(complex8);
      complex8.readResolve();
      complex2.getArgument();
      Complex complex9 = complex8.multiply(4443);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex0.subtract((-1317.178716976811));
      Complex complex4 = Complex.NaN;
      complex3.ZERO.pow(complex4);
      complex3.I.tanh();
      complex1.getArgument();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3957.0), 0.0);
      complex0.nthRoot(179);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.sqrt();
      complex0.atan();
      complex0.nthRoot(179);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-2373.63010516751), 0.0);
      Complex complex1 = complex0.acos();
      complex1.createComplex(5.982180242124184E65, 3268.900223);
      Complex complex2 = complex1.atan();
      complex2.add(37.8058233044046);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.909612209943178E-8));
      complex0.sin();
      Complex complex1 = new Complex((-9.909612209943178E-8), 0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      complex0.multiply(complex1);
      complex2.abs();
      Complex complex3 = Complex.valueOf(1171.4757);
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1.4677321100833294E199));
      complex0.readResolve();
      Complex complex1 = complex0.sin();
      complex1.NaN.sqrt1z();
      complex1.NaN.abs();
      complex1.equals(complex0);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-882));
      Complex complex2 = Complex.valueOf((double) (-882), 280.89451717);
      complex0.equals(complex1);
      complex0.hashCode();
      complex2.reciprocal();
      complex1.isNaN();
      Complex.valueOf((-1802.3));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide((-3652.4401));
      complex1.ZERO.toString();
      Complex complex2 = complex1.ZERO.acos();
      complex0.getField();
      complex2.I.pow((-3.233204600453039E-9));
      complex0.readResolve();
      Complex complex3 = complex1.pow(complex2);
      complex3.ZERO.divide(complex1);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(1.3469617366790771);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.reciprocal();
      complex3.INF.subtract((-1.0));
      Complex.valueOf(1.3469617366790771);
      Complex complex4 = complex2.createComplex(1.3469617366790771, 1.3469617366790771);
      complex4.ONE.sqrt();
      Complex complex5 = complex0.sqrt();
      complex5.I.negate();
      complex2.getReal();
      try { 
        complex0.nthRoot((-5153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,153
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1170.53524814916));
      Complex complex1 = complex0.cosh();
      complex0.equals(complex1);
      Complex complex2 = complex0.sinh();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-161.35874));
      Complex complex1 = complex0.I.divide(Double.NaN);
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      complex2.INF.toString();
      Complex complex4 = complex0.sinh();
      complex1.getReal();
      complex4.divide(complex3);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.divide(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf((-2463.248999333));
      complex3.NaN.negate();
      Complex complex4 = complex0.exp();
      complex4.ZERO.tan();
      complex0.ONE.cos();
      Complex complex5 = complex4.NaN.conjugate();
      complex2.I.multiply(Double.POSITIVE_INFINITY);
      complex5.ZERO.subtract(0.0);
      Complex complex6 = complex5.subtract(0.0);
      complex1.getField();
      complex0.subtract(complex4);
      Complex complex7 = complex2.multiply((-4841));
      complex7.multiply(complex6);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-485.92462));
      complex0.ZERO.sqrt();
      complex0.NaN.readResolve();
      Complex complex1 = new Complex((-47.0), (-47.0));
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ONE.getArgument();
      Complex complex3 = complex0.sqrt();
      complex3.I.conjugate();
      complex3.INF.abs();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = Complex.valueOf((-47.0));
      complex5.ONE.getArgument();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2061.630264), (-2061.630264));
      Complex complex1 = complex0.ZERO.asin();
      complex1.sqrt();
      complex0.getReal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.multiply(779);
      complex2.ZERO.readResolve();
      complex3.NaN.sqrt();
      complex2.pow(0.0);
      complex0.multiply((-3555));
      complex0.getField();
      complex3.subtract((double) (-3555));
      complex4.asin();
      complex2.exp();
      Complex.valueOf((-2061.630264));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.ZERO.divide(complex0);
      Complex complex2 = Complex.valueOf((-35.76263461));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.I.add(complex1);
      complex5.I.pow((-35.76263461));
      complex0.getReal();
      complex2.isNaN();
      Complex complex6 = complex0.divide(0.0);
      complex4.hashCode();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(642.022541);
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.INF.add(642.022541);
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.asin();
      complex3.ZERO.add((-1.8409546441412518E-8));
      Complex complex4 = Complex.valueOf((-1.8409546441412518E-8), 642.022541);
      complex4.ONE.subtract(complex2);
      Complex complex5 = Complex.valueOf((-1.8409546441412518E-8), 642.022541);
      complex4.ONE.pow(complex5);
      complex0.INF.toString();
      complex1.I.tan();
      Complex complex6 = complex1.ONE.asin();
      complex1.negate();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = Complex.valueOf(0.0);
      complex1.readResolve();
      complex4.ONE.multiply(complex7);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.I.add(complex0);
      complex10.ZERO.tanh();
      complex8.abs();
      complex8.subtract(complex6);
      complex6.getArgument();
      complex4.sqrt1z();
      complex11.isInfinite();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(1075.0);
      complex1.I.sinh();
      complex1.ONE.cosh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.add(complex1);
      complex0.isNaN();
      complex2.multiply(complex0);
      complex3.sin();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1618.220163682, 1618.220163682);
      Complex complex1 = Complex.valueOf(1618.220163682);
      complex0.ZERO.add(complex1);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.ONE.conjugate();
      complex0.ONE.divide(complex1);
      complex0.ZERO.abs();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.NaN.sqrt();
      complex4.NaN.sin();
      complex4.equals((Object) null);
      Complex complex6 = complex0.negate();
      complex6.INF.cosh();
      complex3.getReal();
      complex6.isInfinite();
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.ONE.add((-1742.383406330065));
      complex0.ONE.createComplex(1490.17265109841, (-1742.383406330065));
      complex0.isNaN();
      complex0.getImaginary();
      complex2.NaN.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.NaN;
      complex1.ONE.getArgument();
      complex1.multiply(complex4);
      complex2.divide(1490.17265109841);
      complex3.cosh();
      complex2.toString();
      Complex.valueOf((-1742.383406330065));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1346.3430119);
      Complex complex1 = Complex.valueOf(1346.3430119, 0.0);
      complex0.hashCode();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.I;
      complex1.INF.subtract(complex0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.INF.multiply(2.0);
      complex0.divide(complex1);
      complex2.ONE.pow((-566.62561651273));
      complex1.acos();
      complex3.divide(complex2);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.negate();
      complex1.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.NaN.add(complex2);
      complex0.I.conjugate();
      complex3.conjugate();
      complex0.asin();
      Complex complex4 = complex0.log();
      try { 
        complex4.I.nthRoot((-1147));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,147
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tanh();
      complex3.ONE.multiply(1722.4);
      complex3.ONE.sqrt1z();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1194));
      complex1.ONE.getArgument();
      complex1.INF.conjugate();
      try { 
        complex1.INF.nthRoot((-1194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,194
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3481.7207204);
      Complex complex1 = Complex.valueOf((-909.5644322902), 3481.7207204);
      complex0.I.conjugate();
      complex0.cos();
      complex1.hashCode();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.multiply(0);
      complex1.toString();
      Complex complex2 = complex1.exp();
      complex2.ZERO.getArgument();
      complex2.INF.tan();
      Complex.valueOf((double) 0);
      complex1.multiply(complex0);
      Complex complex3 = complex1.reciprocal();
      complex3.pow(0.0);
      complex1.acos();
      Complex.valueOf((double) 0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.cosh();
      complex1.I.asin();
      complex0.multiply((-147));
      complex2.isNaN();
      complex1.NaN.multiply((-147));
      Complex complex3 = complex1.sqrt();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.INF.readResolve();
      complex1.getReal();
      complex0.INF.tanh();
      complex1.cosh();
      complex1.nthRoot(587);
      Complex.valueOf(2094.4736594397);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-405.9314454));
      complex0.NaN.sqrt();
      complex0.getReal();
      complex0.atan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.hashCode();
      Complex complex2 = complex0.exp();
      complex2.INF.add(complex0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 3.09768273342776E-42);
      complex0.I.sqrt();
      Complex complex1 = complex0.cosh();
      complex1.multiply(3.09768273342776E-42);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1456.462033090133, 174.82653942);
      Complex complex1 = new Complex(1456.462033090133);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.pow(complex1);
      complex2.INF.toString();
      Complex complex4 = complex3.NaN.subtract(1.6458113136245473E-38);
      complex4.sin();
      complex3.getField();
      Complex complex5 = complex2.log();
      complex0.multiply(19);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.cos();
      complex7.I.sqrt();
      complex0.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(Double.NaN);
      Complex complex3 = complex2.tanh();
      complex3.I.tan();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = Complex.valueOf(0.9808930158615112);
      Complex complex7 = complex4.I.pow(complex5);
      Complex complex8 = complex6.I.reciprocal();
      Complex complex9 = complex6.subtract(complex4);
      complex9.ONE.getField();
      complex9.exp();
      Complex complex10 = complex6.ZERO.sqrt1z();
      complex4.INF.multiply(790);
      Complex complex11 = complex4.reciprocal();
      complex11.createComplex(0.9808930158615112, 1014.0);
      complex7.ZERO.multiply((-4961.72284479));
      Complex complex12 = complex0.atan();
      complex7.abs();
      Complex complex13 = complex4.conjugate();
      complex12.getImaginary();
      complex12.conjugate();
      Complex complex14 = complex11.add(complex8);
      complex14.I.sin();
      complex0.getField();
      complex10.tan();
      complex13.tan();
      complex13.add(Double.NaN);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(326.9583468623534, 0.0);
      complex1.ONE.multiply((-2939.8322258));
      Complex complex2 = complex1.ONE.subtract(326.9583468623534);
      Complex complex3 = complex2.INF.asin();
      complex0.I.hashCode();
      complex1.ONE.toString();
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex0.pow(complex1);
      complex6.ONE.sinh();
      Complex complex7 = Complex.valueOf((-41.9211556468));
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.ZERO.subtract(complex6);
      Complex complex10 = complex9.ZERO.sinh();
      complex10.NaN.multiply((-1035));
      complex2.sinh();
      complex9.exp();
      Complex complex11 = complex5.subtract(326.9583468623534);
      complex11.INF.sinh();
      complex8.getField();
      complex11.ONE.add((-2057.46579));
      Complex complex12 = complex0.add(326.9583468623534);
      complex12.NaN.acos();
      complex3.multiply(complex11);
      complex4.acos();
      complex2.divide((-86.443626));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1931.180248228737));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.sinh();
      complex6.ZERO.divide(0.0);
      complex4.NaN.multiply(0);
      Complex complex7 = complex3.I.negate();
      complex4.getField();
      Complex complex8 = complex3.multiply(1);
      complex8.negate();
      Complex complex9 = complex8.multiply(complex2);
      complex9.divide((double) 0);
      complex7.cosh();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 2469.86858149507;
      Complex complex0 = Complex.valueOf(2469.86858149507, 2469.86858149507);
      double double1 = 137.019444779;
      Complex complex1 = complex0.divide(137.019444779);
      complex1.ONE.cosh();
      complex1.isNaN();
      complex0.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-2408.40053628));
      complex3.I.pow(complex1);
      Complex complex4 = complex2.NaN.divide(2469.86858149507);
      complex2.I.sqrt();
      try { 
        complex4.I.nthRoot((-4266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,266
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1278.57280656, 1278.57280656);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.subtract(0.0);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.I.cosh();
      complex0.ONE.add(1278.57280656);
      Complex complex5 = complex0.NaN.subtract((-3908.36404862082));
      complex5.I.exp();
      Complex complex6 = complex0.createComplex((-3908.36404862082), (-2426.62843989));
      complex6.ONE.subtract(complex1);
      complex4.nthRoot(1495);
      Complex complex7 = complex0.subtract((-604.9085437378038));
      complex6.tan();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.cosh();
      complex9.sinh();
      complex3.tanh();
      complex9.multiply((-604.9085437378038));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(3.2813537149653483E-9);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.negate();
      complex2.NaN.readResolve();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = Complex.valueOf(2081.4, 3.2813537149653483E-9);
      complex0.INF.add(complex3);
      Complex complex5 = complex3.ONE.divide((-4607.4396447664));
      complex1.ONE.nthRoot(628);
      Complex complex6 = complex0.multiply(complex1);
      complex6.I.toString();
      Complex complex7 = complex0.multiply(1709.47785);
      complex7.NaN.getField();
      complex0.readResolve();
      complex7.atan();
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      Complex complex9 = complex4.sqrt();
      Complex.valueOf((double) 628);
      complex3.divide(complex9);
      complex5.negate();
      complex4.toString();
      complex8.multiply(628);
      complex0.acos();
      complex9.getArgument();
      Object object0 = complex8.readResolve();
      complex3.equals(object0);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(1.3469617366790771, 0.0);
      complex0.INF.subtract(1768.2312133478626);
      complex0.cos();
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.abs();
      complex0.subtract(complex1);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 702.115);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      complex0.readResolve();
      complex2.isNaN();
      Complex complex3 = complex2.subtract(0.0);
      complex3.isInfinite();
      complex2.readResolve();
      Complex complex4 = complex2.multiply(0);
      complex4.I.exp();
      Complex complex5 = complex0.add((double) 0);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex3.pow((-1828.02));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex3.ZERO.sqrt1z();
      Complex complex9 = complex8.ZERO.cosh();
      complex9.NaN.multiply(0);
      complex8.I.exp();
      Complex complex10 = new Complex(0.0);
      Complex complex11 = complex6.multiply(complex10);
      complex3.toString();
      complex11.hashCode();
      assertTrue(complex11.equals((Object)complex4));
      assertEquals((-1.0), complex6.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex12 = complex8.multiply(complex3);
      assertEquals((-702.115), complex12.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex9));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      assertEquals(0.20787957635076193, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.subtract((-2704.781));
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = Complex.valueOf((-2704.781));
      complex5.ONE.createComplex((-20.0), (-2704.781));
      complex5.INF.log();
      complex3.add(complex5);
      complex3.getField();
      Complex complex6 = complex0.INF.divide(complex3);
      complex4.equals((Object) null);
      complex3.subtract((-3621.065380282));
      Complex complex7 = new Complex(0.25201692062432024, 0.25201692062432024);
      Complex complex8 = complex6.ZERO.divide(complex7);
      complex4.equals(complex3);
      Complex complex9 = complex5.divide(complex4);
      Complex complex10 = complex9.subtract(complex6);
      complex10.INF.asin();
      Complex complex11 = new Complex((-2463.8896125));
      complex5.equals(complex11);
      Complex complex12 = complex9.add(complex5);
      assertSame(complex12, complex6);
      assertFalse(complex3.equals((Object)complex8));
      assertSame(complex12, complex10);
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex8));
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex13 = Complex.valueOf(103.901);
      assertFalse(complex13.isInfinite());
      assertEquals(103.901, complex13.getReal(), 0.01);
  }
}
