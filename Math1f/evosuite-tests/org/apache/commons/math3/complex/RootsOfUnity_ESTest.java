/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:22:28 GMT 2022
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.RootsOfUnity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RootsOfUnity_ESTest extends RootsOfUnity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(193);
      try { 
        rootsOfUnity0.getImaginary(1322);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range root of unity index 1,322 (must be in [0;192])
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(1681);
      try { 
        rootsOfUnity0.getReal(1681);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range root of unity index 1,681 (must be in [0;1,680])
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(193);
      rootsOfUnity0.computeRoots((-1));
      assertEquals(1, rootsOfUnity0.getNumberOfRoots());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      assertEquals(0, rootsOfUnity0.getNumberOfRoots());
      
      rootsOfUnity0.computeRoots((-1));
      boolean boolean0 = rootsOfUnity0.isCounterClockWise();
      assertEquals(1, rootsOfUnity0.getNumberOfRoots());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(506);
      double double0 = rootsOfUnity0.getReal(193);
      assertEquals(506, rootsOfUnity0.getNumberOfRoots());
      assertEquals((-0.7350596058898528), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(193);
      int int0 = rootsOfUnity0.getNumberOfRoots();
      assertEquals(193, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(2298);
      double double0 = rootsOfUnity0.getImaginary(0);
      assertEquals(2298, rootsOfUnity0.getNumberOfRoots());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots((-4357));
      double double0 = rootsOfUnity0.getImaginary(8);
      assertEquals(4357, rootsOfUnity0.getNumberOfRoots());
      assertEquals((-0.011536462575963852), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(506);
      double double0 = rootsOfUnity0.getImaginary(193);
      assertEquals(506, rootsOfUnity0.getNumberOfRoots());
      assertEquals(0.6780024895153907, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(1706);
      try { 
        rootsOfUnity0.getImaginary((-3286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range root of unity index -3,286 (must be in [0;1,705])
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      try { 
        rootsOfUnity0.getImaginary(1797);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // roots of unity have not been computed yet
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(193);
      try { 
        rootsOfUnity0.getImaginary(193);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range root of unity index 193 (must be in [0;192])
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(1);
      try { 
        rootsOfUnity0.getReal(1681);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range root of unity index 1,681 (must be in [0;0])
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      try { 
        rootsOfUnity0.getReal((-2175));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // roots of unity have not been computed yet
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(193);
      double double0 = rootsOfUnity0.getReal(0);
      assertEquals(193, rootsOfUnity0.getNumberOfRoots());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots((-4357));
      rootsOfUnity0.computeRoots((-4357));
      assertEquals(4357, rootsOfUnity0.getNumberOfRoots());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots((-1));
      try { 
        rootsOfUnity0.getReal((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range root of unity index -1 (must be in [0;0])
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      try { 
        rootsOfUnity0.computeRoots(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute 0-th root of unity, indefinite result
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      try { 
        rootsOfUnity0.isCounterClockWise();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // roots of unity have not been computed yet
         //
         verifyException("org.apache.commons.math3.complex.RootsOfUnity", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      rootsOfUnity0.computeRoots(193);
      boolean boolean0 = rootsOfUnity0.isCounterClockWise();
      assertEquals(193, rootsOfUnity0.getNumberOfRoots());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RootsOfUnity rootsOfUnity0 = new RootsOfUnity();
      int int0 = rootsOfUnity0.getNumberOfRoots();
      assertEquals(0, int0);
  }
}
