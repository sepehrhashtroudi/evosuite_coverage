/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:40:58 GMT 2022
 */

package org.apache.commons.math3.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.special.Gamma;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gamma_ESTest extends Gamma_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Gamma.digamma((-1.3324111396289096E-36));
      assertEquals(7.505190929869517E35, double0, 0.01);
      
      double double1 = Gamma.regularizedGammaP(1346.11, (-1465.6161398031804));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.gamma((-1.3324111396289096E-36));
      assertEquals((-7.505190929869517E35), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.logGamma(902.0);
      assertEquals(5233.279020756943, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(2.5, (-151.8433208345), 2.5, 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.logGamma(Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Gamma.trigamma(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = (-1038.62678716);
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaP(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-1038.62678716), (-5215));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than -5,215 iterations) for value \u221E
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2234;
      double double0 = Gamma.regularizedGammaP(0.0, (-1160.59876805), (-1794.94), 2234);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.regularizedGammaQ((double) 2234, Double.NaN, 1.7401160143611842E-8, 1426);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaP((-983.71), 0.054642130860422966);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Gamma.regularizedGammaP((-1794.94), 0.0);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double double4 = Gamma.regularizedGammaQ((-1794.94), (-983.71), 0.0, 2234);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaQ(2665.40609796109, 2665.40609796109, (-1794.94), (-1007));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,007) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(684.0, 684.0);
      assertEquals(0.5050846876097103, double0, 0.01);
      
      double double1 = Gamma.trigamma(0.5050846876097103);
      assertEquals(4.8504755450804025, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.gamma(684.0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = (-68);
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaP(3639.641163111068, 6.247308301164655E-9, 4.8504755450804025, (-68));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-68) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 1.2160992719555806E-37;
      double double1 = Gamma.trigamma(1.2160992719555806E-37);
      assertEquals(6.761794114043031E73, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.digamma(6.761794114043031E73);
      assertEquals(170.0000000448931, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Gamma.gamma(4503.0);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.invGamma1pm1(6.761794114043031E73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 67,617,941,140,430,310,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = Gamma.logGamma1p(0.0);
      assertEquals(-0.0, double0, 0.01);
      
      double double1 = Gamma.regularizedGammaQ(0.0, 0.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.lanczos(0.0);
      assertEquals(32.94631867978169, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.lanczos(Double.NaN);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = Gamma.regularizedGammaP(0.0, 32.94631867978169);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = Gamma.logGamma(1597.0099);
      assertEquals(10179.587858503719, double5, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      double double6 = Gamma.regularizedGammaP(20.0, 1597.0099, 139.858423, 1358);
      assertEquals(1.0, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      double double7 = Gamma.regularizedGammaQ(Double.NaN, Double.NaN, 1597.0099, 0);
      assertEquals(Double.NaN, double7, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      
      double double8 = Gamma.trigamma(-0.0);
      assertEquals(Double.POSITIVE_INFINITY, double8, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      
      double double9 = Gamma.regularizedGammaQ(139.858423, Double.NaN, (-9.27398924154364E-153), 0);
      assertEquals(Double.NaN, double9, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double1, 0.01);
      
      double double10 = Gamma.logGamma(Double.NaN);
      assertEquals(Double.NaN, double10, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double1, 0.01);
      
      double double11 = Gamma.regularizedGammaQ(0.0, Double.NaN, Double.POSITIVE_INFINITY, 0);
      assertEquals(Double.NaN, double11, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double9, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double1, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(double11, double10, 0.01);
      
      double double12 = Gamma.lanczos(1182.8);
      assertEquals(1.0094865751123552, double12, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double6, 0.01);
      
      double double13 = Gamma.logGamma(0.0);
      assertEquals(Double.NaN, double13, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double7, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(double13, double1, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double10, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertEquals(double13, double3, 0.01);
      assertEquals(double13, double9, 0.01);
      
      try { 
        Gamma.logGamma1p(895.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 895.1 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1320.430351330598);
      int int0 = 1011;
      double double1 = Gamma.regularizedGammaQ((-1320.430351330598), (-1320.430351330598), (-1320.430351330598), 1011);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaQ((double) 1011, (-1320.430351330598), 1.0398354530334473, 2321);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Gamma.trigamma((-1335.2534103439432));
      assertEquals(19.32439606963613, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = 710.7;
      try { 
        Gamma.logGamma1p(710.7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 710.7 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1.73927483790327808E18;
      // Undeclared exception!
      Gamma.regularizedGammaQ(1.73927483790327808E18, 1.73927483790327808E18);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(1142.24024, 0.0, 1142.24024, 1066);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Gamma.lanczos(1066);
      assertEquals(1.0105278720805637, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.lanczos(0.0);
      assertEquals(32.94631867978169, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.digamma(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = Gamma.regularizedGammaQ(717.28638278014, 0.0, 871.9530581740984, 2152);
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaQ(871.9530581740984, (double) 1066, 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 1,066
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaP(2346.33441512035, 2346.33441512035, 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Gamma.gamma(2153.12329274853);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.lanczos(2153.12329274853);
      assertEquals(1.0052075617611334, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaQ(2153.12329274853, 2153.12329274853, (-6.077618957228252E-8), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 852;
      double double0 = Gamma.regularizedGammaQ(2111.9976247, 5.205969622575851E-174, 0.0, 852);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = Gamma.lanczos(837.935);
      assertEquals(1.013399837353898, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.digamma(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.invGamma1pm1(2.6965931069318893E-8);
      assertEquals(1.5565157354936565E-8, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = Gamma.trigamma(2008.670967400688);
      assertEquals(4.979655594912954E-4, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      try { 
        Gamma.logGamma1p(196.666559);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 196.667 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Gamma.gamma(1.663275957107544);
      assertEquals(0.9021933141813363, double0, 0.01);
      
      double double1 = Gamma.digamma(1.663275957107544);
      assertEquals(0.17900231078891504, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.invGamma1pm1(0.9021933141813363);
      assertEquals(0.038940452513475554, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Gamma.regularizedGammaQ((-59.59796035547549), 0.17900231078891504, (-1113.06432843622), (-130));
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = Gamma.regularizedGammaP((-1.7743467191652895E-7), 0.0, 6312.848061798272, 1);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      
      double double5 = Gamma.gamma(0.0);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = Gamma.regularizedGammaQ(0.0, 4730.539133200745, 3.141592653589793, 0);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      
      double double7 = Gamma.gamma((-2444.018301121));
      assertEquals(Double.NaN, double7, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      double double8 = Gamma.invGamma1pm1(0.0);
      assertEquals(0.0, double8, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      
      double double9 = Gamma.digamma(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double9, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.invGamma1pm1(3.141592653589793);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3.142 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(0.0, 0.0, 2.8401159516008676E283, 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.invGamma1pm1((-0.04200263503409524));
      assertEquals((-0.025398056718811648), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaQ((-0.025398056718811648), (-7.368602086210704E159));
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Gamma.lanczos(0.0);
      assertEquals(32.94631867978169, double0, 0.01);
      
      double double1 = Gamma.trigamma(32.94631867978169);
      assertEquals(0.030817698593909343, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = (-748);
      double double2 = Gamma.regularizedGammaQ(0.0, 0.0, 1100.426723609431, (-748));
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = (-3144.115480186);
      double double4 = Gamma.lanczos((-3144.115480186));
      assertEquals(0.9964391802138409, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = Gamma.regularizedGammaQ(2611.534, 0.0);
      assertEquals(1.0, double5, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      double double6 = Gamma.lanczos((-748));
      assertEquals(0.9850621413356702, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      double double7 = Gamma.gamma(0.9964391802138409);
      assertEquals(1.00206794276453, double7, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      
      double double8 = 510.14;
      double double9 = Gamma.trigamma(510.14);
      assertEquals(0.001962168744914144, double9, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      
      double double10 = Gamma.regularizedGammaQ(Double.NaN, 1.007843017578125);
      assertEquals(Double.NaN, double10, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      
      double double11 = Gamma.digamma(732.811);
      assertEquals(6.5962053648161305, double11, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaQ(0.001962168744914144, 1100.426723609431, 0.001962168744914144, (-748));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than -748 iterations) for value 1,100.427
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(1713.25611525, (-932.797775));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.gamma(3876.6601118204544);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaQ((-3166.16), (-932.797775));
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Gamma.regularizedGammaQ(Double.NaN, (-1207.77579036731));
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double double4 = Gamma.regularizedGammaP(Double.NaN, (-59.59796035547549));
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = Gamma.regularizedGammaP((-744.7984771), Double.NaN);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      
      double double6 = Gamma.regularizedGammaQ((-4329.270096057332), 1713.25611525);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Gamma.invGamma1pm1(0.527290940284729);
      assertEquals(0.12686681253069726, double0, 0.01);
      
      double double1 = Gamma.digamma(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaQ((-372.6985846619), 917.8665843);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.trigamma((-372.6985846619));
      assertEquals(14.98007143759993, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = Gamma.regularizedGammaQ(Double.NaN, 0.0);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      
      double double5 = Gamma.regularizedGammaQ((-4179.1), (-4179.1), 1731.3648782746523, 0);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      double double6 = Gamma.digamma(1731.3648782746523);
      assertEquals(7.456376506115089, double6, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      double double7 = Gamma.logGamma1p(5.332900939354667E-277);
      assertEquals((-3.078233961563613E-277), double7, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      
      double double8 = Gamma.gamma(1731.3648782746523);
      assertEquals(Double.NaN, double8, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      
      double double9 = Gamma.regularizedGammaP(Double.NaN, 0.0, 0.0, 0);
      assertEquals(Double.NaN, double9, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      
      double double10 = Gamma.lanczos(3251.020055746);
      assertEquals(1.0034478847060995, double10, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaP(2203.899435512747, 2279.0, 0.0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 2,279
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Gamma.trigamma(1265.0);
      assertEquals(7.908263723865639E-4, double0, 0.01);
      
      double double1 = Gamma.logGamma(0.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaP(1265.0, 1265.0, 1665.5, 74);
      assertEquals(0.01121595332754386, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.lanczos((-299.2473726829808));
      assertEquals(0.9628079149701371, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = Gamma.regularizedGammaQ(1665.5, 0.0);
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = Gamma.lanczos(276.817629569036);
      assertEquals(1.040747858814184, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(3233.77754, 3233.77754);
      assertEquals(0.49766151554706106, double0, 0.01);
      
      double double1 = Gamma.trigamma(0.49766151554706106);
      assertEquals(4.974424075039749, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.invGamma1pm1((-315.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -315 is smaller than the minimum (-0.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(0.0, (-2553.757102646271));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.regularizedGammaQ((-2767.197233780439), 1.0E-5);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = 212.171717673;
      // Undeclared exception!
      try { 
        Gamma.invGamma1pm1(212.171717673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 212.172 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(1341.580855334565, 6.116095104481416E-9);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Gamma.invGamma1pm1(6.116095104481416E-9);
      assertEquals(3.5303058778000696E-9, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Gamma.logGamma(3.5303058778000696E-9);
      assertEquals(19.46188131678257, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = (-715.30897237017);
      double double4 = 2956.965468;
      double double5 = Gamma.regularizedGammaP((-715.30897237017), 2956.965468);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      int int0 = 626;
      double double6 = Gamma.regularizedGammaP(1.0, 0.0, 0.0, 626);
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      double double7 = Gamma.logGamma(1.0);
      assertEquals(-0.0, double7, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      
      double double8 = (-1007.11);
      try { 
        Gamma.logGamma1p((-1007.11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,007.11 is smaller than the minimum (-0.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = Gamma.logGamma1p((-0.009621971527876973));
      assertEquals(0.005630457889573821, double0, 0.01);
      
      double double1 = Gamma.digamma(0.005630457889573821);
      assertEquals((-178.17344057543283), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.trigamma((-178.17344057543283));
      assertEquals(36.73209951237338, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Gamma.regularizedGammaP(0.0, 386.8);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = Gamma.regularizedGammaP(0.0, 36.73209951237338);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      try { 
        Gamma.logGamma1p((-629.9405));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -629.941 is smaller than the minimum (-0.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(1317.557436568, 1317.557436568);
      assertEquals(0.4963364184693544, double0, 0.01);
      
      double double1 = Gamma.regularizedGammaP(1317.557436568, 0.0, 0.4963364184693544, (-825));
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Gamma.lanczos((-1178.97828744));
      assertEquals(0.990513701494793, double0, 0.01);
      
      double double1 = Gamma.trigamma(0.990513701494793);
      assertEquals(1.6680359848443564, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.gamma((-1178.97828744));
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Gamma.regularizedGammaQ(0.990513701494793, 1.6680359848443564);
      assertEquals(0.1859333478698012, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = 0.0;
      double double5 = Gamma.regularizedGammaP(0.0, (-1.7375090618655787E103), 0.990513701494793, 0);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = Gamma.regularizedGammaP(0.0, (-3.141592653589793), 0.0, 0);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      
      double double7 = Gamma.regularizedGammaP((double) 0, Double.NaN, 2941.60163, 0);
      assertEquals(Double.NaN, double7, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double6, 0.01);
      
      double double8 = Gamma.regularizedGammaP((-2.013485478078824E-5), 2268.3371);
      assertEquals(Double.NaN, double8, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      
      double double9 = Gamma.trigamma((-3.141592653589793));
      assertEquals(53.03043874008541, double9, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      
      try { 
        Gamma.logGamma1p(2941.60163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,941.602 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(1.3012807963586057E-8, 1.3012807963586057E-8);
      assertEquals(2.287666481803896E-7, double0, 0.01);
      
      double double1 = 0.0;
      double double2 = Gamma.regularizedGammaQ(0.0, 2.287666481803896E-7);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = 1146.413777014;
      double double4 = Gamma.lanczos(1146.413777014);
      assertEquals(1.0097881742185912, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = Gamma.logGamma(1589.85548806);
      assertEquals(10126.836009486695, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      double double6 = 0.0;
      double double7 = Gamma.regularizedGammaP(0.0, 1146.413777014);
      assertEquals(Double.NaN, double7, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      
      double double8 = Gamma.regularizedGammaP(0.0, Double.NaN);
      assertEquals(Double.NaN, double8, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      
      double double9 = Gamma.regularizedGammaQ(Double.NaN, 1.3012807963586057E-8, 2.287666481803896E-7, (-2525));
      assertEquals(Double.NaN, double9, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      
      // Undeclared exception!
      try { 
        Gamma.regularizedGammaQ(1411.058599, 557.0, 10126.836009486695, (-2525));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,525) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = Gamma.digamma((-1403.065944));
      assertEquals(22.19358294147218, double0, 0.01);
      
      double double1 = Gamma.regularizedGammaP((-1403.065944), 22.19358294147218, (-2623.59185043471), (-1186));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.regularizedGammaQ((-641.598192880276), 917.64501799, Double.NaN, 0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.regularizedGammaP(5.370131904567218E-8, Double.NaN, Double.NaN, (-1186));
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(673.122219445027, 5.83461777702912E14);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Gamma.gamma(0.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Gamma.gamma(0.0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = Gamma.regularizedGammaP(0.0, (-881.119564493136));
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = Gamma.trigamma(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = Gamma.gamma(673.122219445027);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      
      double double6 = Gamma.lanczos(Double.NaN);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gamma.trigamma(0.0);
      int int0 = 2094;
      Gamma.regularizedGammaP(0.0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2094);
      int int1 = 1068;
      Gamma.regularizedGammaQ(0.0, Double.POSITIVE_INFINITY, (-2.6778729562324134E-8), 1068);
      Gamma.regularizedGammaQ((double) 2094, (double) 1068);
      double double0 = 7.160277784358221E73;
      // Undeclared exception!
      try { 
        Gamma.invGamma1pm1(7.160277784358221E73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 71,602,777,843,582,210,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 1052.6254549;
      Gamma.trigamma(1052.6254549);
      // Undeclared exception!
      try { 
        Gamma.invGamma1pm1(1052.6254549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,052.625 is larger than the maximum (1.5)
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gamma.logGamma1p(0.0072189432466631);
      double double0 = Gamma.logGamma1p((-0.16624882440418567));
      assertEquals(0.12077163544115882, double0, 0.01);
      
      double double1 = Gamma.digamma(2.791018095971047E-10);
      assertEquals((-3.5829219509706664E9), double1, 0.01);
      
      double double2 = Gamma.digamma(528.985);
      assertEquals(6.270014571877796, double2, 0.01);
      
      Gamma.lanczos(0.0);
      double double3 = Gamma.gamma(0.0);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Gamma.regularizedGammaQ((-0.004124175792901782), 2.6923694661863613E-4, (-388.11575), 611);
      double double5 = Gamma.gamma(0.0072189432466631);
      assertEquals(137.954307564509, double5, 0.01);
      
      double double6 = Gamma.gamma((-62.66));
      assertEquals(7.409781635210607E-87, double6, 0.01);
      
      Gamma.regularizedGammaP(179.41672694, Double.NaN, 0.12077163544115882, (-1795));
      Gamma.invGamma1pm1(Double.NaN);
      double double7 = Gamma.regularizedGammaP(0.0, 0.0);
      assertEquals(double7, double4, 0.01);
      
      double double8 = Gamma.trigamma(32.94631867978169);
      assertEquals(0.030817698593909343, double8, 0.01);
      
      Gamma.trigamma(5315.3690338216);
      Gamma.logGamma((-970.2280831));
      double double9 = Gamma.logGamma(Double.NaN);
      assertEquals(double9, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gamma.regularizedGammaQ(0.0, 0.0, 2.6923694661863613E-4, (-6297));
      Gamma.invGamma1pm1(0.0);
      double double0 = Gamma.regularizedGammaP(0.35745590925216675, (-2060.1932));
      double double1 = Gamma.digamma(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      double double2 = Gamma.regularizedGammaQ(0.0, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gamma.regularizedGammaP(0.0, 1100.53484727261, 0.0, 72);
      double double0 = Gamma.regularizedGammaP(1.2210872189854344E-232, (-633.0569041368938));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Gamma.trigamma(1290.09152458);
      assertEquals(7.754393006086541E-4, double1, 0.01);
  }
}
