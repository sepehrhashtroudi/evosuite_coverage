/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:43:16 GMT 2022
 */

package org.apache.commons.math3.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.special.Beta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Beta_ESTest extends Beta_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Beta.logBeta((double) 0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      Beta.regularizedBeta(0.5, 0.5, 0.5, (-1227.4056052504));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, 534.5086251, 0.0, (-5.468175655175594E-8), 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.48850810527801514, 0.0, 7.936507936507937E-8, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0E-14, 1397.24083171, 2838.0, 1367);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Beta.regularizedBeta(7.091600108064668E-8, 2391.5, 1.9752871982669077E-21, 613.3464997454, 3592);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, 799.3451981, 65.33, 65.33);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.6128603219985962, 0.6128603219985962, 0.6128603219985962, 0.6128603219985962);
      assertEquals(0.5907473712170885, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.5, 303.9, 3670.1923385512);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Beta.logBeta(0.5, 0.5, 0.5, (-1));
      assertEquals(1.1447298858494004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Beta.regularizedBeta(1.0E-14, 397.278745653, 745.090400083928, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 0
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Beta.regularizedBeta(0.6674286127090454, 0.6674286127090454, 2.655313014984131, 5.493352163155986E60, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 0.333
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Beta.logBeta(43.99, 1.70518021921727E-8);
      assertEquals(17.887009864210704, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Beta.logBeta(1680.378259, 1.0337605476379395);
      assertEquals((-7.696081314429432), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Beta.logBeta(4.4921289690525345E-233, 4.4921289690525345E-233);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Beta.logBeta(968.891854854, 2.3410181999206543);
      assertEquals((-15.919563227182724), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = Beta.logBeta(2612.90119829, 2.6423792839050293);
      assertEquals((-20.401984281356427), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Beta.logBeta(10.0, 357.643959);
      assertEquals((-46.118276068481876), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Beta.logBeta(10.0, 10.0);
      assertEquals((-13.736229227036555), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = Beta.logBeta((-5.952380952380953E-10), (-1806.5));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Beta.logBeta(1817.75922, (double) 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Beta.logBeta((-165.9), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      Beta.regularizedBeta(9.854154449263851E-34, 1.0E-14, 781.60424033, Double.NaN, 2145006818);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Beta.regularizedBeta((-1173.74046293303), (-455.76013485861), 785.9040600162873, (-9.179458802504127E-9), (-2146173567));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Beta.regularizedBeta(10.0, 1.6697361107868944E-8, Double.NaN, 10.0, (-971));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1753.55768737495, 0.0, 1618.61969, 0.0, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.9189385332046727, (-1.0), 7.0, (-1396.0), (-2146173567));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Beta.regularizedBeta(Double.NaN, 1216.3004106, 0.0, 1216.3004106, 2750);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = Beta.logBeta(1.094732647312286, 2.2272801399230957);
      assertEquals((-0.9455757974121075), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = Beta.logBeta(935.9960065201457, 7.0, (-1396.0), (-2146173567));
      assertEquals((-41.334411493797475), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = Beta.logBeta(613.3464997454, (-1638.2), (double) 2876, 3592);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = Beta.logBeta(Double.NaN, (-1806.5));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Beta.regularizedBeta(4.4921289690525345E-233, 4.4921289690525345E-233, Double.POSITIVE_INFINITY, 4.4921289690525345E-233);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value 1
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = Beta.logBeta(1108.61405812, 2.0, 0.0, 15);
      assertEquals((-14.022633456331222), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = Beta.logBeta(1.5, 1.5, 0.0, (-979));
      assertEquals((-0.9347116558304357), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = Beta.logBeta(1.126528263092041, 1.126528263092041);
      assertEquals((-0.24785488632359393), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = Beta.logBeta(2.0, 2.0);
      assertEquals((-1.791759469228055), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = Beta.regularizedBeta(8.417508417508329E-12, 8.417508417508329E-12, 1.1386950016021729, 12);
      assertEquals(0.9999999997870963, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.5893045663833618, 0.5893045663833618, 0.5893045663833618, 0.5893045663833618, 1622);
      assertEquals(0.5737652112210547, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.7964371635940225E-17, 332.3350405451665, (-915.873861), (-1197.119667), 1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = Beta.regularizedBeta(300.591309, Double.NaN, (-1259.42169937655), (-1806.5), 15);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = Beta.regularizedBeta((double) 0, 876.029156, 876.029156);
      assertEquals(0.0, double0, 0.01);
  }
}
