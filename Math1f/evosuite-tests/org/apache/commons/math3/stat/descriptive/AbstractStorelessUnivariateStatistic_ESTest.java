/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:23:28 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math3.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math3.stat.descriptive.moment.Kurtosis;
import org.apache.commons.math3.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math3.stat.descriptive.moment.Skewness;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math3.stat.descriptive.moment.Variance;
import org.apache.commons.math3.stat.descriptive.rank.Max;
import org.apache.commons.math3.stat.descriptive.rank.Min;
import org.apache.commons.math3.stat.descriptive.summary.Product;
import org.apache.commons.math3.stat.descriptive.summary.Sum;
import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractStorelessUnivariateStatistic_ESTest extends AbstractStorelessUnivariateStatistic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[7];
      max0.incrementAll(doubleArray0);
      max0.hashCode();
      assertEquals(0.0, max0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      geometricMean0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      sumOfSquares0.increment((-1.0));
      assertEquals(1L, sumOfSquares0.getN());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Min min0 = new Min();
      min0.clear();
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Max max0 = new Max();
      boolean boolean0 = max0.equals(max0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.increment(0.0);
      double double0 = secondMoment0.getResult();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      double double0 = product0.getResult();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1030.5;
      secondMoment0.evaluate(doubleArray0);
      double double0 = secondMoment0.evaluate(doubleArray0, 0, 0);
      assertEquals(707953.5, secondMoment0.getResult(), 0.01);
      assertEquals(707953.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      double double0 = min0.evaluate(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = product0.copy();
      assertEquals(1.0, storelessUnivariateStatistic0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Kurtosis kurtosis0 = new Kurtosis();
      double[] doubleArray0 = new double[6];
      kurtosis0.incrementAll(doubleArray0);
      kurtosis0.copy();
      assertEquals(0.0, kurtosis0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[0];
      try { 
        secondMoment0.incrementAll(doubleArray0, (-386), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-386)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      try { 
        sumOfSquares0.incrementAll(doubleArray0, 3835, 3835);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      try { 
        skewness0.incrementAll((double[]) null, (-1881), (-787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      // Undeclared exception!
      try { 
        geometricMean0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      GeometricMean geometricMean0 = new GeometricMean();
      try { 
        geometricMean0.evaluate(doubleArray0, 76, (-1477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-1,477)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[8];
      try { 
        min0.evaluate(doubleArray0, 94, 94);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      try { 
        secondMoment0.evaluate((double[]) null, 154, 154);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      StandardDeviation standardDeviation0 = new StandardDeviation(true, secondMoment0);
      double[] doubleArray0 = new double[5];
      standardDeviation0.incrementAll(doubleArray0, 1, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[3];
      double double0 = secondMoment0.evaluate(doubleArray0, 0, 1);
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      Variance variance0 = new Variance(false, secondMoment0);
      double[] doubleArray0 = new double[3];
      secondMoment0.evaluate(doubleArray0);
      Sum sum0 = new Sum();
      boolean boolean0 = sum0.equals(variance0);
      assertEquals(3L, variance0.getN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Product product0 = new Product();
      Max max0 = new Max();
      boolean boolean0 = product0.equals(max0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      Variance variance0 = new Variance(false, secondMoment0);
      boolean boolean0 = variance0.equals(secondMoment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Variance variance0 = new Variance(true);
      Object object0 = new Object();
      boolean boolean0 = variance0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sum sum0 = new Sum();
      double[] doubleArray0 = new double[6];
      sum0.incrementAll(doubleArray0, 0, 0);
      assertEquals(0L, sum0.getN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      try { 
        secondMoment0.incrementAll((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Min min0 = new Min();
      try { 
        min0.evaluate((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }
}
