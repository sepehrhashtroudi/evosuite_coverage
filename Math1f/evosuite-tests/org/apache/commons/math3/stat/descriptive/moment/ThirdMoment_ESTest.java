/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:32:55 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.moment.ThirdMoment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThirdMoment_ESTest extends ThirdMoment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      thirdMoment0.increment(2.0);
      double double0 = thirdMoment0.getResult();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 2634.7511;
      thirdMoment0.evaluate(doubleArray0);
      double double0 = thirdMoment0.getResult();
      assertEquals(1.2002952844707167E10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      thirdMoment0.incrementAll(doubleArray0);
      double double0 = thirdMoment0.getResult();
      assertEquals((-2.220446049250313E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      thirdMoment0.incrementAll(doubleArray0);
      thirdMoment0.copy();
      assertEquals((-2.220446049250313E-16), thirdMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        ThirdMoment.copy((ThirdMoment) null, (ThirdMoment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThirdMoment thirdMoment0 = null;
      try {
        thirdMoment0 = new ThirdMoment((ThirdMoment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      thirdMoment0.increment(0.0);
      thirdMoment0.copy();
      assertEquals(0.0, thirdMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      thirdMoment0.n = 822L;
      thirdMoment0.increment(2634.7511);
      assertEquals(Double.NaN, thirdMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment.copy(thirdMoment0, thirdMoment0);
      assertEquals(Double.NaN, thirdMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      thirdMoment0.clear();
      assertEquals(Double.NaN, thirdMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = thirdMoment0.copy();
      assertEquals(Double.NaN, thirdMoment1.getResult(), 0.01);
      assertNotSame(thirdMoment1, thirdMoment0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      assertEquals(Double.NaN, thirdMoment1.getResult(), 0.01);
  }
}
