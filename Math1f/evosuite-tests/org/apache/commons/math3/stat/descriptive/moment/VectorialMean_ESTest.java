/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:32:10 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.moment.VectorialMean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VectorialMean_ESTest extends VectorialMean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(1953);
      vectorialMean0.getResult();
      Object object0 = new Object();
      double[] doubleArray0 = vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.equals(object0);
      double[] doubleArray1 = vectorialMean0.getResult();
      vectorialMean0.getN();
      vectorialMean0.increment(doubleArray1);
      vectorialMean0.hashCode();
      vectorialMean0.getN();
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.increment(doubleArray1);
      vectorialMean0.getResult();
      vectorialMean0.hashCode();
      vectorialMean0.getN();
      vectorialMean0.getN();
      double[] doubleArray2 = vectorialMean0.getResult();
      Object object1 = new Object();
      vectorialMean0.equals(object1);
      vectorialMean0.increment(doubleArray2);
      // Undeclared exception!
      vectorialMean0.increment(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(1780);
      vectorialMean0.getN();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        vectorialMean0.increment((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(459);
      int int0 = 2669;
      VectorialMean vectorialMean1 = new VectorialMean(2669);
      vectorialMean1.getResult();
      vectorialMean0.equals(vectorialMean1);
      vectorialMean0.hashCode();
      vectorialMean0.getN();
      double[] doubleArray0 = vectorialMean1.getResult();
      vectorialMean1.getN();
      vectorialMean1.getResult();
      vectorialMean1.increment(doubleArray0);
      vectorialMean1.increment(doubleArray0);
      vectorialMean0.getResult();
      // Undeclared exception!
      vectorialMean1.getResult();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(2684);
      vectorialMean0.getResult();
      double[] doubleArray0 = vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.getResult();
      // Undeclared exception!
      vectorialMean0.getResult();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(31);
      vectorialMean0.getResult();
      vectorialMean0.getN();
      double[] doubleArray0 = vectorialMean0.getResult();
      vectorialMean0.getN();
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.getN();
      vectorialMean0.getResult();
      vectorialMean0.getN();
      long long0 = vectorialMean0.getN();
      assertEquals(1L, long0);
      
      vectorialMean0.equals("");
      vectorialMean0.getResult();
      boolean boolean0 = vectorialMean0.equals("");
      assertFalse(boolean0);
      
      double[] doubleArray1 = vectorialMean0.getResult();
      assertEquals(31, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        vectorialMean0.increment(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.VectorialMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-572);
      VectorialMean vectorialMean0 = null;
      try {
        vectorialMean0 = new VectorialMean((-572));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.VectorialMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2320;
      VectorialMean vectorialMean0 = new VectorialMean(2320);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2320;
      doubleArray0[1] = (double) 2320;
      doubleArray0[2] = (double) 2320;
      doubleArray0[3] = (double) 2320;
      doubleArray0[4] = (double) 2320;
      doubleArray0[5] = (double) 2320;
      doubleArray0[6] = (double) 2320;
      try { 
        vectorialMean0.increment(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2,320
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.VectorialMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      VectorialMean vectorialMean0 = new VectorialMean(0);
      vectorialMean0.getResult();
      Object object0 = new Object();
      vectorialMean0.equals(object0);
      double[] doubleArray0 = vectorialMean0.getResult();
      vectorialMean0.hashCode();
      vectorialMean0.getResult();
      VectorialMean vectorialMean1 = new VectorialMean(1242);
      vectorialMean1.getN();
      vectorialMean1.getN();
      vectorialMean0.equals(vectorialMean1);
      try { 
        vectorialMean1.increment(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,242
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.VectorialMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(1);
      // Undeclared exception!
      try { 
        vectorialMean0.increment((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      long long0 = vectorialMean0.getN();
      assertEquals(0L, long0);
      
      vectorialMean0.hashCode();
      vectorialMean0.hashCode();
      vectorialMean0.hashCode();
      vectorialMean0.hashCode();
      VectorialMean vectorialMean1 = new VectorialMean(0);
      boolean boolean0 = vectorialMean0.equals(vectorialMean1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-1422);
      VectorialMean vectorialMean0 = null;
      try {
        vectorialMean0 = new VectorialMean((-1422));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.VectorialMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(1);
      vectorialMean0.getN();
      double[] doubleArray0 = vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray0);
      double[] doubleArray1 = vectorialMean0.getResult();
      vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray1);
      vectorialMean0.increment(doubleArray1);
      double[] doubleArray2 = vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray1);
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.getResult();
      vectorialMean0.getN();
      vectorialMean0.getN();
      vectorialMean0.getN();
      Object object0 = new Object();
      vectorialMean0.equals(object0);
      vectorialMean0.equals("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic");
      vectorialMean0.hashCode();
      double[] doubleArray3 = vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray1);
      vectorialMean0.increment(doubleArray2);
      vectorialMean0.increment(doubleArray0);
      vectorialMean0.getN();
      long long0 = vectorialMean0.getN();
      assertEquals(9L, long0);
      
      vectorialMean0.increment(doubleArray3);
      vectorialMean0.equals("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic");
      vectorialMean0.getResult();
      vectorialMean0.increment(doubleArray0);
      boolean boolean0 = vectorialMean0.equals(object0);
      assertFalse(boolean0);
      
      double[] doubleArray4 = vectorialMean0.getResult();
      assertArrayEquals(new double[] {Double.NaN}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorialMean vectorialMean0 = new VectorialMean(0);
      vectorialMean0.getResult();
      vectorialMean0.getResult();
      vectorialMean0.getN();
      vectorialMean0.hashCode();
      vectorialMean0.hashCode();
      vectorialMean0.getN();
      vectorialMean0.hashCode();
  }
}
