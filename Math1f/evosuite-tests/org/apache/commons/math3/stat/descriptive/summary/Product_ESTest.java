/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:48:44 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.summary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.summary.Product;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[5];
      double double0 = product0.evaluate(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[9];
      product0.incrementAll(doubleArray0);
      double double0 = product0.getResult();
      assertEquals(9L, product0.getN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      product0.increment((-1996.5645));
      double double0 = product0.getResult();
      assertEquals((-1996.5645), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 282.749;
      double[] doubleArray1 = new double[2];
      double double0 = product0.evaluate(doubleArray1, doubleArray0);
      assertEquals(0L, product0.getN());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 181.08318;
      double double0 = product0.evaluate(doubleArray0, doubleArray0);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = (-1620.042141);
      double double0 = product0.evaluate(doubleArray1, doubleArray0);
      assertEquals((-1620.042141), double0, 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = (-1.0);
      double double0 = product0.evaluate(doubleArray0, 1, 1);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[9];
      product0.incrementAll(doubleArray0);
      product0.copy();
      assertEquals(9L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      product0.increment((-500.81403372));
      product0.copy();
      assertEquals((-500.81403372), product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[5];
      try { 
        product0.evaluate(doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weigth array must contain at least one non-zero value
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      try { 
        product0.evaluate(doubleArray1, doubleArray0, 0, (-3083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      try { 
        product0.evaluate((double[]) null, (double[]) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        product0.evaluate(doubleArray0, doubleArray0, 893, 893);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 893
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[5];
      try { 
        product0.evaluate(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[6];
      try { 
        product0.evaluate(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.evaluate((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.summary.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[3];
      try { 
        product0.evaluate(doubleArray0, (-482), (-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-482)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[5];
      try { 
        product0.evaluate(doubleArray0, 0, 3452);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Product product0 = new Product();
      try { 
        product0.evaluate((double[]) null, (-3135), (-3135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Product product0 = new Product();
      try { 
        Product.copy((Product) null, product0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Product product0 = null;
      try {
        product0 = new Product((Product) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Product product0 = new Product();
      Product.copy(product0, product0);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 7.006465307902904;
      double double0 = product0.evaluate(doubleArray0, doubleArray0, 0, 5);
      assertEquals(839381.2098079487, double0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[4];
      double double0 = product0.evaluate(doubleArray0, 1, 1);
      assertEquals(0L, product0.getN());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[0];
      double double0 = product0.evaluate(doubleArray0, 0, 0);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Product product0 = new Product();
      Product product1 = product0.copy();
      assertEquals(1.0, product1.getResult(), 0.01);
      assertEquals(0L, product1.getN());
      assertNotSame(product1, product0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Product product0 = new Product();
      Product product1 = new Product(product0);
      assertEquals(1.0, product1.getResult(), 0.01);
      assertEquals(0L, product1.getN());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[6];
      try { 
        product0.evaluate(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weigth array must contain at least one non-zero value
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Product product0 = new Product();
      long long0 = product0.getN();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Product product0 = new Product();
      double double0 = product0.getResult();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Product product0 = new Product();
      product0.clear();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Product product0 = new Product();
      product0.increment(1012.37634173);
      long long0 = product0.getN();
      assertEquals(1012.37634173, product0.getResult(), 0.01);
      assertEquals(1L, long0);
  }
}
