/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:52:24 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.rank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.rank.Max;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Max_ESTest extends Max_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Max max0 = new Max();
      max0.increment(0.0);
      double double0 = max0.getResult();
      assertEquals(1L, max0.getN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Max max0 = new Max();
      max0.increment(3382.1);
      double double0 = max0.getResult();
      assertEquals(3382.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Max max0 = new Max();
      max0.increment((-5440.66995007068));
      double double0 = max0.getResult();
      assertEquals((-5440.66995007068), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Max max0 = new Max();
      max0.increment(3382.1);
      long long0 = max0.getN();
      assertEquals(3382.1, max0.getResult(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-228.4);
      double double0 = max0.evaluate(doubleArray0, 0, 1);
      assertEquals(0L, max0.getN());
      assertEquals((-228.4), double0, 0.01);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[5];
      max0.incrementAll(doubleArray0);
      max0.copy();
      assertEquals(5L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Max max0 = new Max();
      max0.increment((-1589.195688408383));
      max0.copy();
      assertEquals(1L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Max max0 = new Max();
      max0.increment(Double.NaN);
      max0.copy();
      assertEquals(1L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[9];
      try { 
        max0.evaluate(doubleArray0, (-2143656613), 2146003874);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-2,143,656,613)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[1];
      try { 
        max0.evaluate(doubleArray0, 1544, 1544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Max max0 = new Max();
      try { 
        max0.evaluate((double[]) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        max0.evaluate(doubleArray0, 2146052946, 2146052946);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2146052946
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Max", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        Max.copy((Max) null, (Max) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Max max0 = null;
      try {
        max0 = new Max((Max) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[12];
      doubleArray0[6] = 2289.593375410467;
      double double0 = max0.evaluate(doubleArray0, 4, 4);
      assertEquals(2289.593375410467, double0, 0.01);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[4];
      double double0 = max0.evaluate(doubleArray0, 2, 2);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Max max0 = new Max();
      Max.copy(max0, max0);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      double double0 = max0.evaluate(doubleArray0, 1, 1);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[20];
      double double0 = max0.evaluate(doubleArray0, 0, 0);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[1];
      max0.incrementAll(doubleArray0);
      max0.increment(0L);
      assertEquals(2L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[1];
      max0.incrementAll(doubleArray0);
      max0.increment(3411.629517801531);
      assertEquals(3411.629517801531, max0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Max max0 = new Max();
      Max max1 = new Max(max0);
      assertEquals(Double.NaN, max1.getResult(), 0.01);
      assertEquals(0L, max1.getN());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Max max0 = new Max();
      long long0 = max0.getN();
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Max max0 = new Max();
      Max max1 = max0.copy();
      assertEquals(Double.NaN, max1.getResult(), 0.01);
      assertNotSame(max1, max0);
      assertEquals(0L, max1.getN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Max max0 = new Max();
      max0.clear();
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
  }
}
