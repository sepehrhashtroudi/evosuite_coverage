/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:46:06 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.summary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SumOfLogs_ESTest extends SumOfLogs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      sumOfLogs0.increment(2079.953461558);
      double double0 = sumOfLogs0.getResult();
      assertEquals(7.640100798194095, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      sumOfLogs0.increment(0.0);
      double double0 = sumOfLogs0.getResult();
      assertEquals(1L, sumOfLogs0.getN());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      sumOfLogs0.increment(0.0);
      long long0 = sumOfLogs0.getN();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[6];
      double double0 = sumOfLogs0.evaluate(doubleArray0, 0, 0);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 561.2770161645174;
      double double0 = sumOfLogs0.evaluate(doubleArray0, 1, 1);
      assertEquals(6.330214573603132, double0, 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      sumOfLogs0.increment((-183.2));
      sumOfLogs0.copy();
      assertEquals(Double.NaN, sumOfLogs0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[5];
      sumOfLogs0.incrementAll(doubleArray0);
      sumOfLogs0.copy();
      assertEquals(5L, sumOfLogs0.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[6];
      try { 
        sumOfLogs0.evaluate(doubleArray0, (-1384), 286);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-1,384)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[5];
      try { 
        sumOfLogs0.evaluate(doubleArray0, 893, 893);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      try { 
        sumOfLogs0.evaluate((double[]) null, 1091, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        SumOfLogs.copy((SumOfLogs) null, (SumOfLogs) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SumOfLogs sumOfLogs0 = null;
      try {
        sumOfLogs0 = new SumOfLogs((SumOfLogs) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[3];
      double double0 = sumOfLogs0.evaluate(doubleArray0, 1, 1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      SumOfLogs.copy(sumOfLogs0, sumOfLogs0);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double double0 = sumOfLogs0.getResult();
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      long long0 = sumOfLogs0.getN();
      assertEquals(0L, long0);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      double[] doubleArray0 = new double[6];
      sumOfLogs0.setData(doubleArray0);
      double double0 = sumOfLogs0.evaluate();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      sumOfLogs0.clear();
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      SumOfLogs sumOfLogs1 = new SumOfLogs(sumOfLogs0);
      boolean boolean0 = sumOfLogs0.equals(sumOfLogs1);
      assertEquals(0L, sumOfLogs1.getN());
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      SumOfLogs sumOfLogs1 = sumOfLogs0.copy();
      assertNotSame(sumOfLogs1, sumOfLogs0);
      assertEquals(0L, sumOfLogs1.getN());
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
  }
}
