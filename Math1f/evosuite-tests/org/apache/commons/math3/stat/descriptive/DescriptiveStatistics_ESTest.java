/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:50:14 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math3.stat.descriptive.UnivariateStatistic;
import org.apache.commons.math3.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math3.stat.descriptive.rank.Percentile;
import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DescriptiveStatistics_ESTest extends DescriptiveStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      
      descriptiveStatistics0.setWindowSize(1);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // window size must be positive (0)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      Percentile percentile0 = (Percentile)descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setPercentileImpl(percentile0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.removeMostRecentValue();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.addValue((-465.290588595986));
      double double0 = descriptiveStatistics0.replaceMostRecentValue(0.0);
      assertEquals((-465.290588595986), double0, 0.01);
      
      double double1 = descriptiveStatistics0.replaceMostRecentValue(Double.NaN);
      assertEquals(0.0, double1, 0.01);
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(436);
      descriptiveStatistics0.addValue(9.979706999541057E-9);
      double double0 = descriptiveStatistics0.replaceMostRecentValue(436);
      assertEquals(436, descriptiveStatistics0.getWindowSize());
      assertEquals(9.979706999541057E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      int int0 = descriptiveStatistics0.getWindowSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double double0 = descriptiveStatistics0.getVariance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      descriptiveStatistics0.addValue(0.0);
      descriptiveStatistics0.addValue(3532.52984484961);
      double double0 = descriptiveStatistics0.getVariance();
      assertEquals(6239383.552376605, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double[] doubleArray0 = descriptiveStatistics0.getValues();
      assertArrayEquals(new double[] {2106.6}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      descriptiveStatistics0.addValue(3532.52984484961);
      double double0 = descriptiveStatistics0.getSumsq();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(1.247876710475321E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double double0 = descriptiveStatistics0.getSum();
      assertEquals(2106.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.addValue((-1));
      double double0 = descriptiveStatistics0.getSum();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-996.3079914669744);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      double double0 = descriptiveStatistics0.getStandardDeviation();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(575.218687069233, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.getSortedValues();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-264.57391688466);
      doubleArray0[3] = (-264.57391688466);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSkewness();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 961.0715885;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSkewness();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 961.0715885;
      doubleArray0[1] = (-808.8561503070792);
      doubleArray0[2] = 961.0715885;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSkewness();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(36);
      descriptiveStatistics0.addValue(0.0);
      descriptiveStatistics0.getPopulationVariance();
      assertEquals(36, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.addValue((-465.290588595986));
      descriptiveStatistics0.addValue((-465.290588595986));
      double double0 = descriptiveStatistics0.replaceMostRecentValue(0.0);
      assertEquals((-465.290588595986), double0, 0.01);
      
      double double1 = descriptiveStatistics0.getPopulationVariance();
      assertEquals(54123.83295899977, double1, 0.01);
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getPercentile(6.0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double double0 = descriptiveStatistics0.getPercentile(Double.NaN);
      assertEquals(2106.6, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2689.9872205692536);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getPercentile(4.0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      descriptiveStatistics0.addValue(0.0);
      long long0 = descriptiveStatistics0.getN();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      descriptiveStatistics0.addValue(0.0);
      double double0 = descriptiveStatistics0.getMin();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1561.96228;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.setMinImpl(univariateStatistic0);
      descriptiveStatistics0.getMin();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.addValue((-465.290588595986));
      double double0 = descriptiveStatistics0.getMin();
      assertEquals((-465.290588595986), double0, 0.01);
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getMean();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double double0 = descriptiveStatistics0.getMean();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(2106.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.addValue((-1674.95479));
      double double0 = descriptiveStatistics0.getMean();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1674.95479), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getMax();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 961.0715885;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getMax();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.addValue((-1674.95479));
      double double0 = descriptiveStatistics0.getMax();
      assertEquals((-1674.95479), double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-996.3079914669744);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.addValue(0.0);
      double double0 = descriptiveStatistics0.getKurtosis();
      assertEquals(4.0000000000000036, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 50.0;
      doubleArray0[4] = 50.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getKurtosis();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getGeometricMean();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double double0 = descriptiveStatistics0.getGeometricMean();
      assertEquals(2106.6000000000004, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getElement(0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-2129.179149804504);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      double double0 = descriptiveStatistics0.getElement(2);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-2129.179149804504), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      descriptiveStatistics0.apply(sumOfSquares0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumImpl();
      double double0 = descriptiveStatistics0.apply(univariateStatistic0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(2106.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.addValue((-465.290588595986));
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMeanImpl();
      double double0 = descriptiveStatistics0.apply(univariateStatistic0);
      assertEquals((-465.290588595986), double0, 0.01);
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.setPercentileImpl((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setSumsqImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getSumsq();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.setVarianceImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getStandardDeviation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      try { 
        descriptiveStatistics0.getPercentile(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getPercentile(Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(1);
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      descriptiveStatistics0.setGeometricMeanImpl(geometricMean0);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getGeometricMean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      try { 
        DescriptiveStatistics.copy(descriptiveStatistics0, (DescriptiveStatistics) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setVarianceImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.setMinImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(3458);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.apply((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics((DescriptiveStatistics) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics((-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // window size must be positive (-563)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.setWindowSize(1);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setWindowSize((-1));
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      double double0 = descriptiveStatistics0.getStandardDeviation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.getN();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.getValues();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSkewnessImpl();
      descriptiveStatistics0.apply(univariateStatistic0);
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      try { 
        descriptiveStatistics0.setWindowSize((-1363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // window size must be positive (-1,363)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.addValue((-465.290588595986));
      descriptiveStatistics0.addValue((-465.290588595986));
      double double0 = descriptiveStatistics0.getStandardDeviation();
      assertEquals(411, descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.windowSize = (-5317);
      descriptiveStatistics0.addValue(1196.54678561);
      assertEquals((-5317), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.windowSize = 0;
      descriptiveStatistics0.addValue(0);
      assertEquals(0, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.addValue((-465.290588595986));
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 1\nmin: -465.290588595986\nmax: -465.290588595986\nmean: -465.290588595986\nstd dev: 0.0\nmedian: -465.290588595986\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.addValue(2106.6);
      double double0 = descriptiveStatistics0.getStandardDeviation();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setMaxImpl((UnivariateStatistic) null);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals(411, descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      double[] doubleArray1 = descriptiveStatistics0.getSortedValues();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSumsq();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setMeanImpl((UnivariateStatistic) null);
      DescriptiveStatistics descriptiveStatistics1 = null;
      try {
        descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      try { 
        descriptiveStatistics0.replaceMostRecentValue(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(411);
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals(411, descriptiveStatistics1.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.clear();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.getSumsqImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setSumImpl((UnivariateStatistic) null);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(36);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement(36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.setKurtosisImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.getMinImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.getSum();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMaxImpl();
      descriptiveStatistics0.setMinImpl(univariateStatistic0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      try { 
        descriptiveStatistics0.setPercentileImpl(sumOfSquares0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // percentile implementation org.apache.commons.math3.stat.descriptive.summary.SumOfSquares does not support setQuantile
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(19);
      int int0 = descriptiveStatistics0.getWindowSize();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      try { 
        descriptiveStatistics0.removeMostRecentValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.stat.descriptive.DescriptiveStatistics", e);
      }
  }
}
