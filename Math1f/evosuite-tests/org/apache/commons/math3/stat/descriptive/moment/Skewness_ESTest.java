/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:35:44 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.moment.Skewness;
import org.apache.commons.math3.stat.descriptive.moment.ThirdMoment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Skewness_ESTest extends Skewness_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      double double0 = skewness0.evaluate(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-625.9);
      doubleArray0[1] = (-697.27);
      skewness0.incrementAll(doubleArray0);
      double double0 = skewness0.getResult();
      assertEquals(3L, skewness0.getN());
      assertEquals(1.6648540051800897, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[3];
      skewness0.incrementAll(doubleArray0);
      long long0 = skewness0.getN();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      thirdMoment0.n = (-585L);
      Skewness skewness0 = new Skewness(thirdMoment0);
      long long0 = skewness0.getN();
      assertEquals((-585L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-154.149316);
      double double0 = skewness0.evaluate(doubleArray0, 0, 5);
      assertEquals((-2.2360679774997907), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[3];
      skewness0.incrementAll(doubleArray0);
      skewness0.copy();
      assertEquals(3L, skewness0.getN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      thirdMoment0.n = (-5034868814120038111L);
      Skewness skewness0 = new Skewness(thirdMoment0);
      Skewness skewness1 = skewness0.copy();
      assertNotSame(skewness1, skewness0);
      assertEquals((-5034868814120038111L), skewness1.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      // Undeclared exception!
      try { 
        skewness0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[8];
      try { 
        skewness0.evaluate(doubleArray0, (-698), 191);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-698)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[8];
      try { 
        skewness0.evaluate(doubleArray0, 0, 3216);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      try { 
        skewness0.evaluate((double[]) null, (-2151), (-2304));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        Skewness.copy((Skewness) null, (Skewness) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = new Skewness((ThirdMoment) null);
      // Undeclared exception!
      try { 
        Skewness.copy(skewness1, skewness0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      // Undeclared exception!
      try { 
        skewness0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      skewness0.incMoment = true;
      // Undeclared exception!
      try { 
        skewness0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Skewness skewness0 = null;
      try {
        skewness0 = new Skewness((Skewness) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[0];
      double double0 = skewness0.evaluate(doubleArray0, 1610612736, 1610612736);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[3];
      double double0 = skewness0.evaluate(doubleArray0, 0, 1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      double[] doubleArray0 = new double[8];
      thirdMoment0.evaluate(doubleArray0);
      double double0 = skewness0.getResult();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double double0 = skewness0.getResult();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.increment(0.0);
      assertEquals(1L, skewness0.getN());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness.copy(skewness0, skewness0);
      assertEquals(0L, skewness0.getN());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      double[] doubleArray0 = new double[2];
      double double0 = skewness0.evaluate(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[3];
      double double0 = skewness0.evaluate(doubleArray0, 0, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.clear();
      assertEquals(0L, skewness0.getN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      skewness0.clear();
      assertEquals(0L, skewness0.getN());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1693.36);
      skewness0.incrementAll(doubleArray0);
      double double0 = skewness0.getResult();
      assertEquals(4L, skewness0.getN());
      assertEquals((-1.9999999999999996), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      skewness0.increment(0.0);
      assertEquals(0L, skewness0.getN());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = skewness0.copy();
      skewness1.moment = null;
      // Undeclared exception!
      try { 
        skewness1.increment(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      Skewness skewness1 = null;
      try {
        skewness1 = new Skewness(skewness0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      long long0 = skewness0.getN();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = new Skewness(skewness0);
      double[] doubleArray0 = new double[6];
      skewness1.incrementAll(doubleArray0);
      boolean boolean0 = skewness1.equals(skewness0);
      assertEquals(6L, skewness1.getN());
      assertFalse(boolean0);
  }
}
