/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:54:04 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.rank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.rank.Percentile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Percentile_ESTest extends Percentile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Percentile percentile0 = new Percentile(100.0);
      assertEquals(100.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[21];
      doubleArray0[3] = 675.804;
      double double0 = percentile0.evaluate(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[1];
      try { 
        percentile0.evaluate(doubleArray0, (-1777.83553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: -1,777.836, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[1];
      percentile0.setData(doubleArray0, 0, 0);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-828.1980794272616);
      double double0 = percentile0.evaluate(doubleArray0, 2, 2, 50.0);
      assertEquals((-414.0990397136308), double0, 0.01);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Percentile percentile0 = new Percentile();
      double double0 = percentile0.evaluate(doubleArray0, 2, 2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 708.70391636;
      double double0 = percentile0.evaluate(doubleArray0, 100.0);
      assertEquals(708.70391636, double0, 0.01);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-2310.276008138085);
      double double0 = percentile0.evaluate(doubleArray0, 1.0);
      assertEquals((-2310.276008138085), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 708.70391636;
      percentile0.setData(doubleArray0);
      double double0 = percentile0.evaluate(100.0);
      assertEquals(708.70391636, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2939.57912096);
      percentile0.setData(doubleArray0);
      double double0 = percentile0.evaluate(1.0);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
      assertEquals((-2939.57912096), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[0];
      try { 
        percentile0.setData(doubleArray0, 0, (-447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-447)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[8];
      try { 
        percentile0.setData(doubleArray0, 43, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      // Undeclared exception!
      try { 
        percentile0.medianOf3((double[]) null, (-1812), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        percentile0.medianOf3(doubleArray0, 312, 312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 312
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[4];
      try { 
        percentile0.evaluate(doubleArray0, (-1576), (-1576), (-1370.46259135574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-1,576)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.evaluate((double[]) null, 0, 0, (-2926.28531314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[1];
      try { 
        percentile0.evaluate(doubleArray0, 185, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-1)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.evaluate((double[]) null, 121, 1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[0];
      try { 
        percentile0.evaluate(doubleArray0, 995.4875152455147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 995.488, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.evaluate((double[]) null, 2472.33581743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        percentile0.evaluate(doubleArray0, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        Percentile.copy((Percentile) null, (Percentile) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Percentile percentile0 = null;
      try {
        percentile0 = new Percentile((Percentile) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Percentile percentile0 = null;
      try {
        percentile0 = new Percentile(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      Percentile.copy(percentile0, percentile0);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[2];
      percentile0.setData(doubleArray0);
      Percentile.copy(percentile0, percentile0);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      percentile0.setQuantile(1.0);
      assertEquals(1.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Percentile percentile0 = new Percentile(9.0);
      double double0 = percentile0.evaluate(doubleArray0, 0, 0, 9.0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[8];
      try { 
        percentile0.evaluate(doubleArray0, 0, 0, 817.5791529741);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 817.579, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[8];
      percentile0.evaluate(doubleArray0, 2, 2, 50.0);
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[9];
      try { 
        percentile0.evaluate(doubleArray0, 1, 1, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Percentile percentile0 = new Percentile(Double.NaN);
      percentile0.setData((double[]) null);
      assertEquals(Double.NaN, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[5];
      try { 
        percentile0.evaluate(doubleArray0, 3375, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.setQuantile(1341.4559490104095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 1,341.456, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.setQuantile((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: -1, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (-1.0);
      double double0 = percentile0.evaluate(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[8];
      percentile0.setData(doubleArray0);
      double double0 = percentile0.evaluate(1.986821492305628E-8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Percentile percentile0 = new Percentile(9.0);
      double[] doubleArray0 = new double[1];
      double double0 = percentile0.evaluate(doubleArray0, 9.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9.0, percentile0.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[5];
      percentile0.setData(doubleArray0);
      try { 
        percentile0.evaluate(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.setData((double[]) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double[] doubleArray0 = new double[0];
      percentile0.setData(doubleArray0);
      Percentile percentile1 = new Percentile(percentile0);
      assertEquals(50.0, percentile1.getQuantile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      Percentile percentile1 = percentile0.copy();
      assertEquals(50.0, percentile1.getQuantile(), 0.01);
      assertNotSame(percentile1, percentile0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      try { 
        percentile0.evaluate(1.986821492305628E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Percentile percentile0 = new Percentile();
      double double0 = percentile0.getQuantile();
      assertEquals(50.0, double0, 0.01);
  }
}
