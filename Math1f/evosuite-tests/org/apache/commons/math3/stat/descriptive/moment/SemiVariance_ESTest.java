/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:27:18 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.moment.SemiVariance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SemiVariance_ESTest extends SemiVariance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      semiVariance0.setVarianceDirection(semiVariance_Direction0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      SemiVariance.Direction semiVariance_Direction1 = semiVariance0.getVarianceDirection();
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance_Direction1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      semiVariance0.UPSIDE_VARIANCE.getDirection();
      assertFalse(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      SemiVariance semiVariance1 = new SemiVariance(semiVariance0);
      assertTrue(semiVariance1.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance1.getVarianceDirection());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      boolean boolean0 = semiVariance0.isBiasCorrected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      double[] doubleArray0 = new double[5];
      double double0 = semiVariance0.evaluate(doubleArray0, semiVariance0.UPSIDE_VARIANCE);
      assertEquals(0.0, double0, 0.01);
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1402.26438;
      double double0 = semiVariance0.evaluate(doubleArray0, semiVariance_Direction0);
      assertEquals(78653.81565667137, double0, 0.01);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-5047.88569754);
      double double0 = semiVariance0.evaluate(doubleArray0, 2, 2);
      assertEquals(1274057.5007714448, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[9];
      double double0 = semiVariance0.evaluate(doubleArray0, 279.51970209665, semiVariance0.DOWNSIDE_VARIANCE);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(87897.67184272496, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      double[] doubleArray0 = new double[1];
      double double0 = semiVariance0.evaluate(doubleArray0, (-1.813409985084585));
      assertEquals(0.0, double0, 0.01);
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(true, semiVariance_Direction0);
      double[] doubleArray0 = new double[6];
      double double0 = semiVariance0.evaluate(doubleArray0, 320.0189);
      assertEquals(122894.51562865198, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      SemiVariance semiVariance1 = semiVariance0.copy();
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance1.getVarianceDirection());
      assertNotSame(semiVariance1, semiVariance0);
      assertTrue(semiVariance1.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      try { 
        semiVariance0.evaluate((double[]) null, semiVariance0.UPSIDE_VARIANCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[2];
      try { 
        semiVariance0.evaluate(doubleArray0, (-3141), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-3,141)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[8];
      try { 
        semiVariance0.evaluate(doubleArray0, 1501, 1501);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      try { 
        semiVariance0.evaluate((double[]) null, (-2909), (-2590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[9];
      try { 
        semiVariance0.evaluate(doubleArray0, (-2329.85), semiVariance0.DOWNSIDE_VARIANCE, false, 2, (-2139828272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-2,139,828,272)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      double[] doubleArray0 = new double[9];
      try { 
        semiVariance0.evaluate(doubleArray0, 2170.030592232037, semiVariance0.UPSIDE_VARIANCE, true, 2172, 2172);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      try { 
        semiVariance0.evaluate((double[]) null, 273.3510532, semiVariance0.DOWNSIDE_VARIANCE, true, (-2813), (-2813));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.SemiVariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        SemiVariance.copy((SemiVariance) null, (SemiVariance) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[9];
      double double0 = semiVariance0.evaluate(doubleArray0, 279.51970209665, semiVariance0.DOWNSIDE_VARIANCE, false, 0, 2);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(78131.26386019996, double0, 0.01);
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      double[] doubleArray0 = new double[9];
      SemiVariance.Direction semiVariance_Direction1 = SemiVariance.Direction.DOWNSIDE;
      double double0 = semiVariance0.evaluate(doubleArray0, (-2329.85), semiVariance_Direction1, true, 0, 2);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      double[] doubleArray0 = new double[5];
      double double0 = semiVariance0.evaluate(doubleArray0, (-2297.5999), semiVariance0.DOWNSIDE_VARIANCE, true, 2, 0);
      assertEquals(-0.0, double0, 0.01);
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      double[] doubleArray0 = new double[0];
      double double0 = semiVariance0.evaluate(doubleArray0, 0.0, semiVariance0.UPSIDE_VARIANCE, true, 0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      double[] doubleArray0 = new double[1];
      double double0 = semiVariance0.evaluate(doubleArray0, 1.0, semiVariance0.DOWNSIDE_VARIANCE, true, 0, 0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(0.0, double0, 0.01);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      SemiVariance.copy(semiVariance0, semiVariance0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      double[] doubleArray0 = new double[3];
      double double0 = semiVariance0.evaluate(doubleArray0, 0, 0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, (-573.680603577286), semiVariance0.DOWNSIDE_VARIANCE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.moment.SemiVariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      semiVariance0.setBiasCorrected(false);
      assertFalse(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      double[] doubleArray0 = new double[1];
      double double0 = semiVariance0.evaluate(doubleArray0, 0.0, semiVariance0.UPSIDE_VARIANCE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      semiVariance0.setVarianceDirection(semiVariance0.DOWNSIDE_VARIANCE);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      SemiVariance.Direction semiVariance_Direction0 = semiVariance0.getVarianceDirection();
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance_Direction0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SemiVariance semiVariance0 = null;
      try {
        semiVariance0 = new SemiVariance((SemiVariance) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      SemiVariance semiVariance1 = semiVariance0.copy();
      assertNotSame(semiVariance1, semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance1.getVarianceDirection());
      assertFalse(semiVariance1.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      boolean boolean0 = semiVariance0.isBiasCorrected();
      assertTrue(boolean0);
  }
}
