/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:39:31 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.moment.SecondMoment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SecondMoment_ESTest extends SecondMoment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      secondMoment0.incrementAll(doubleArray0);
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      secondMoment0.increment(3890.9);
      double double0 = secondMoment0.getResult();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.m2 = 137.6695651436721;
      double double0 = secondMoment0.getResult();
      assertEquals(137.6695651436721, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      secondMoment1.m2 = (-1068.862363428);
      double double0 = secondMoment1.getResult();
      assertEquals((-1068.862363428), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      secondMoment0.increment((-1068.862363428));
      secondMoment0.copy();
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        SecondMoment.copy((SecondMoment) null, (SecondMoment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecondMoment secondMoment0 = null;
      try {
        secondMoment0 = new SecondMoment((SecondMoment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      SecondMoment.copy(secondMoment0, secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.increment(Double.NaN);
      secondMoment0.increment(Double.NaN);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      
      secondMoment1.m2 = (-4153.3);
      secondMoment1.copy();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      SecondMoment secondMoment1 = secondMoment0.copy();
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotSame(secondMoment1, secondMoment0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.clear();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
  }
}
