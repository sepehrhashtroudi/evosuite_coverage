/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:44:23 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics;
import org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math3.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math3.stat.descriptive.moment.Kurtosis;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math3.stat.descriptive.moment.Skewness;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math3.stat.descriptive.moment.Variance;
import org.apache.commons.math3.stat.descriptive.rank.Min;
import org.apache.commons.math3.stat.descriptive.summary.Product;
import org.apache.commons.math3.stat.descriptive.summary.Sum;
import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultivariateSummaryStatistics_ESTest extends MultivariateSummaryStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getGeoMeanImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getMinImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      multivariateSummaryStatistics0.setSumImpl(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      double[] doubleArray2 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      try { 
        multivariateSummaryStatistics0.addValue(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(757, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(757, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      String string0 = multivariateSummaryStatistics0.toString();
      assertNotNull(string0);
      assertEquals(757, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = null;
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setSumLogImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(292, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(292, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setMaxImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(2694, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(2694, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray0);
      assertEquals(2694, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(2694, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2694, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(2694, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.clear();
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(2694, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2694, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(2694, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      multivariateSummaryStatistics0.getSumLog();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMean();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[4];
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertNotNull(sumOfSquares0);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      SumOfSquares sumOfSquares1 = new SumOfSquares(sumOfSquares0);
      assertNotNull(sumOfSquares1);
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertEquals(0L, sumOfSquares1.getN());
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) sumOfSquares1;
      Variance variance0 = new Variance();
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[1] = (StorelessUnivariateStatistic) variance0;
      MultivariateSummaryStatistics multivariateSummaryStatistics1 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics1);
      assertEquals(0L, multivariateSummaryStatistics1.getN());
      assertEquals(0, multivariateSummaryStatistics1.getDimension());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.equals(multivariateSummaryStatistics1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[3];
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      Variance variance0 = new Variance(true, secondMoment0);
      assertNotNull(variance0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) variance0;
      Variance variance1 = new Variance(false, secondMoment0);
      assertNotNull(variance1);
      assertTrue(variance1.equals((Object)variance0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertFalse(variance1.isBiasCorrected());
      assertEquals(Double.NaN, variance1.getResult(), 0.01);
      assertEquals(0L, variance1.getN());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMin();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      storelessUnivariateStatisticArray0[1] = (StorelessUnivariateStatistic) variance1;
      Sum sum0 = new Sum();
      assertNotNull(sum0);
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[2] = (StorelessUnivariateStatistic) sum0;
      try { 
        multivariateSummaryStatistics0.setMinImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setGeoMeanImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      multivariateSummaryStatistics0.addValue(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[2];
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      StandardDeviation standardDeviation0 = new StandardDeviation(false, secondMoment0);
      assertNotNull(standardDeviation0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertFalse(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) standardDeviation0;
      GeometricMean geometricMean0 = new GeometricMean();
      assertNotNull(geometricMean0);
      assertEquals(0L, geometricMean0.getN());
      
      storelessUnivariateStatisticArray0[1] = (StorelessUnivariateStatistic) geometricMean0;
      try { 
        multivariateSummaryStatistics0.setMeanImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(2061, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(2061, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      multivariateSummaryStatistics0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      double[] doubleArray0 = new double[0];
      multivariateSummaryStatistics0.addValue(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      multivariateSummaryStatistics0.addValue(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(2L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray4 = multivariateSummaryStatistics0.getGeometricMean();
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(0, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(2L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      
      double[] doubleArray5 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertEquals(0, doubleArray5.length);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(2L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      
      boolean boolean0 = multivariateSummaryStatistics0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(2L, multivariateSummaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getSumImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      multivariateSummaryStatistics0.clear();
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.setMaxImpl(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      multivariateSummaryStatistics0.addValue(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray3 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.hashCode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.hashCode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(205, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(205, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray0);
      assertEquals(205, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(205, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      multivariateSummaryStatistics0.addValue(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getGeometricMean();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = null;
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setSumsqImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(31, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(31, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getMeanImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(31, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(31, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray0);
      assertEquals(31, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(31, multivariateSummaryStatistics0.getDimension());
      
      String string0 = multivariateSummaryStatistics0.toString();
      assertNotNull(string0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(31, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.setSumsqImpl(storelessUnivariateStatisticArray0);
      assertEquals(31, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(31, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.addValue(doubleArray0);
      assertEquals(31, doubleArray0.length);
      assertEquals(1L, multivariateSummaryStatistics0.getN());
      assertEquals(31, multivariateSummaryStatistics0.getDimension());
      
      try { 
        multivariateSummaryStatistics0.setMaxImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getGeometricMean();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(940, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(940, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[4];
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      Mean mean0 = new Mean(secondMoment0);
      assertNotNull(mean0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      Mean mean1 = new Mean(mean0);
      assertNotNull(mean1);
      assertTrue(mean1.equals((Object)mean0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) mean1;
      GeometricMean geometricMean0 = new GeometricMean();
      assertNotNull(geometricMean0);
      assertEquals(0L, geometricMean0.getN());
      
      storelessUnivariateStatisticArray0[1] = (StorelessUnivariateStatistic) geometricMean0;
      Kurtosis kurtosis0 = new Kurtosis();
      assertNotNull(kurtosis0);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      Kurtosis kurtosis1 = new Kurtosis(kurtosis0);
      assertNotNull(kurtosis1);
      assertTrue(kurtosis1.equals((Object)kurtosis0));
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertEquals(0L, kurtosis1.getN());
      assertEquals(Double.NaN, kurtosis1.getResult(), 0.01);
      
      Mean mean2 = mean1.copy();
      assertNotNull(mean2);
      assertNotSame(mean0, mean1);
      assertNotSame(mean0, mean2);
      assertNotSame(mean1, mean2);
      assertNotSame(mean1, mean0);
      assertNotSame(mean2, mean0);
      assertNotSame(mean2, mean1);
      assertTrue(mean0.equals((Object)mean1));
      assertTrue(mean1.equals((Object)mean0));
      assertTrue(mean2.equals((Object)mean0));
      assertTrue(mean2.equals((Object)mean1));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      assertEquals(Double.NaN, mean2.getResult(), 0.01);
      assertEquals(0L, mean2.getN());
      
      storelessUnivariateStatisticArray0[2] = (StorelessUnivariateStatistic) kurtosis1;
      Mean mean3 = new Mean(mean1);
      assertNotNull(mean3);
      assertTrue(mean0.equals((Object)mean2));
      assertTrue(mean0.equals((Object)mean1));
      assertTrue(mean1.equals((Object)mean0));
      assertTrue(mean1.equals((Object)mean2));
      assertTrue(mean3.equals((Object)mean1));
      assertTrue(mean3.equals((Object)mean2));
      assertTrue(mean3.equals((Object)mean0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      assertEquals(Double.NaN, mean3.getResult(), 0.01);
      assertEquals(0L, mean3.getN());
      
      storelessUnivariateStatisticArray0[3] = (StorelessUnivariateStatistic) mean3;
      try { 
        multivariateSummaryStatistics0.setGeoMeanImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 940
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)multivariateSummaryStatistics0.getCovariance();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMin();
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      multivariateSummaryStatistics0.hashCode();
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      String string0 = multivariateSummaryStatistics0.toString();
      assertNotNull(string0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getSumsqImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(1, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray1 = multivariateSummaryStatistics0.getMinImpl();
      assertNotNull(storelessUnivariateStatisticArray1);
      assertNotSame(storelessUnivariateStatisticArray1, storelessUnivariateStatisticArray0);
      assertEquals(1, storelessUnivariateStatisticArray1.length);
      assertFalse(storelessUnivariateStatisticArray1.equals((Object)storelessUnivariateStatisticArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.clear();
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.setSumsqImpl(storelessUnivariateStatisticArray0);
      assertNotSame(storelessUnivariateStatisticArray0, storelessUnivariateStatisticArray1);
      assertEquals(1, storelessUnivariateStatisticArray0.length);
      assertFalse(storelessUnivariateStatisticArray0.equals((Object)storelessUnivariateStatisticArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      int int0 = multivariateSummaryStatistics0.getDimension();
      assertEquals(1, int0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray2 = new StorelessUnivariateStatistic[5];
      assertFalse(storelessUnivariateStatisticArray2.equals((Object)storelessUnivariateStatisticArray1));
      assertFalse(storelessUnivariateStatisticArray2.equals((Object)storelessUnivariateStatisticArray0));
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      assertNotNull(secondMoment1);
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      
      Mean mean0 = new Mean(secondMoment1);
      assertNotNull(mean0);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      storelessUnivariateStatisticArray2[0] = (StorelessUnivariateStatistic) mean0;
      GeometricMean geometricMean0 = new GeometricMean();
      assertNotNull(geometricMean0);
      assertEquals(0L, geometricMean0.getN());
      
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      assertNotNull(geometricMean1);
      assertTrue(geometricMean1.equals((Object)geometricMean0));
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, geometricMean1.getN());
      
      SumOfLogs sumOfLogs0 = (SumOfLogs)geometricMean1.getSumLogImpl();
      assertNotNull(sumOfLogs0);
      assertNotSame(geometricMean0, geometricMean1);
      assertNotSame(geometricMean1, geometricMean0);
      assertTrue(geometricMean0.equals((Object)geometricMean1));
      assertTrue(geometricMean1.equals((Object)geometricMean0));
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, geometricMean1.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      
      storelessUnivariateStatisticArray2[1] = (StorelessUnivariateStatistic) sumOfLogs0;
      Product product0 = new Product();
      assertNotNull(product0);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      
      storelessUnivariateStatisticArray2[2] = (StorelessUnivariateStatistic) product0;
      Mean mean1 = new Mean();
      assertNotNull(mean1);
      assertTrue(mean1.equals((Object)mean0));
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      
      storelessUnivariateStatisticArray2[3] = (StorelessUnivariateStatistic) mean1;
      Skewness skewness0 = new Skewness();
      assertNotNull(skewness0);
      assertEquals(0L, skewness0.getN());
      
      storelessUnivariateStatisticArray2[4] = (StorelessUnivariateStatistic) skewness0;
      try { 
        multivariateSummaryStatistics0.setSumLogImpl(storelessUnivariateStatisticArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1718, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(1718, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = null;
      double[] doubleArray0 = multivariateSummaryStatistics0.getGeometricMean();
      assertNotNull(doubleArray0);
      assertEquals(1718, doubleArray0.length);
      assertEquals(1718, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      multivariateSummaryStatistics0.clear();
      assertEquals(1718, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setMinImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(67, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getGeometricMean();
      assertNotNull(doubleArray0);
      assertEquals(67, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(67, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(67, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      String string0 = multivariateSummaryStatistics0.toString();
      assertNotNull(string0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray3 = multivariateSummaryStatistics0.getMin();
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(67, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray4 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(67, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      Product product0 = new Product();
      assertNotNull(product0);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      
      Product.copy(product0, product0);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      
      boolean boolean0 = multivariateSummaryStatistics0.equals(product0);
      assertFalse(boolean0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getSumsqImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(67, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray1 = multivariateSummaryStatistics0.getMaxImpl();
      assertNotNull(storelessUnivariateStatisticArray1);
      assertNotSame(storelessUnivariateStatisticArray1, storelessUnivariateStatisticArray0);
      assertEquals(67, storelessUnivariateStatisticArray1.length);
      assertFalse(storelessUnivariateStatisticArray1.equals((Object)storelessUnivariateStatisticArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray2 = multivariateSummaryStatistics0.getSumLogImpl();
      assertNotNull(storelessUnivariateStatisticArray2);
      assertNotSame(storelessUnivariateStatisticArray2, storelessUnivariateStatisticArray0);
      assertNotSame(storelessUnivariateStatisticArray2, storelessUnivariateStatisticArray1);
      assertEquals(67, storelessUnivariateStatisticArray2.length);
      assertFalse(storelessUnivariateStatisticArray2.equals((Object)storelessUnivariateStatisticArray0));
      assertFalse(storelessUnivariateStatisticArray2.equals((Object)storelessUnivariateStatisticArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray5 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertEquals(67, doubleArray5.length);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.setMinImpl(storelessUnivariateStatisticArray1);
      assertNotSame(storelessUnivariateStatisticArray1, storelessUnivariateStatisticArray0);
      assertNotSame(storelessUnivariateStatisticArray1, storelessUnivariateStatisticArray2);
      assertEquals(67, storelessUnivariateStatisticArray1.length);
      assertFalse(storelessUnivariateStatisticArray1.equals((Object)storelessUnivariateStatisticArray0));
      assertFalse(storelessUnivariateStatisticArray1.equals((Object)storelessUnivariateStatisticArray2));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.setSumImpl(storelessUnivariateStatisticArray1);
      assertNotSame(storelessUnivariateStatisticArray1, storelessUnivariateStatisticArray0);
      assertNotSame(storelessUnivariateStatisticArray1, storelessUnivariateStatisticArray2);
      assertEquals(67, storelessUnivariateStatisticArray1.length);
      assertFalse(storelessUnivariateStatisticArray1.equals((Object)storelessUnivariateStatisticArray0));
      assertFalse(storelessUnivariateStatisticArray1.equals((Object)storelessUnivariateStatisticArray2));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray6 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray6);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertEquals(67, doubleArray6.length);
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray7 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray7);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray4);
      assertEquals(67, doubleArray7.length);
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray3 = multivariateSummaryStatistics0.getMinImpl();
      assertNotNull(storelessUnivariateStatisticArray3);
      assertNotSame(storelessUnivariateStatisticArray3, storelessUnivariateStatisticArray0);
      assertNotSame(storelessUnivariateStatisticArray3, storelessUnivariateStatisticArray2);
      assertNotSame(storelessUnivariateStatisticArray3, storelessUnivariateStatisticArray1);
      assertEquals(67, storelessUnivariateStatisticArray3.length);
      assertFalse(storelessUnivariateStatisticArray3.equals((Object)storelessUnivariateStatisticArray0));
      assertFalse(storelessUnivariateStatisticArray3.equals((Object)storelessUnivariateStatisticArray2));
      assertFalse(storelessUnivariateStatisticArray3.equals((Object)storelessUnivariateStatisticArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(67, multivariateSummaryStatistics0.getDimension());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(4572, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray0);
      assertEquals(4572, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      multivariateSummaryStatistics0.clear();
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      int int0 = multivariateSummaryStatistics0.getDimension();
      assertEquals(4572, int0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      int int1 = multivariateSummaryStatistics0.getDimension();
      assertEquals(4572, int1);
      assertTrue(int1 == int0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4572, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      long long0 = multivariateSummaryStatistics0.getN();
      assertEquals(0L, long0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4572, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      multivariateSummaryStatistics0.getMean();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(17, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(17, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[1];
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      StandardDeviation standardDeviation0 = new StandardDeviation(true, secondMoment0);
      assertNotNull(standardDeviation0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) standardDeviation0;
      try { 
        multivariateSummaryStatistics0.setMeanImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 17
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1331, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(1331, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1331;
      doubleArray0[1] = (double) 1331;
      doubleArray0[2] = (double) 1331;
      doubleArray0[3] = (double) 1331;
      doubleArray0[4] = (double) 1331;
      doubleArray0[5] = (double) 1331;
      doubleArray0[6] = (double) 1331;
      doubleArray0[7] = (double) 1331;
      doubleArray0[8] = (double) 1331;
      try { 
        multivariateSummaryStatistics0.addValue(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1,331
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[0];
      multivariateSummaryStatistics0.setGeoMeanImpl(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      Skewness skewness0 = new Skewness();
      assertNotNull(skewness0);
      assertEquals(0L, skewness0.getN());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(4414, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4414, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray0);
      assertEquals(4414, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4414, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4414, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4414, multivariateSummaryStatistics0.getDimension());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)multivariateSummaryStatistics0.getCovariance();
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(4414, multivariateSummaryStatistics0.getDimension());
      assertEquals(4414, blockRealMatrix0.getColumnDimension());
      assertEquals(4414, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setMeanImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.getCovariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1059, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray0);
      assertEquals(1059, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1059, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      String string0 = multivariateSummaryStatistics0.toString();
      assertNotNull(string0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)multivariateSummaryStatistics0.getCovariance();
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1059, blockRealMatrix0.getColumnDimension());
      assertEquals(1059, blockRealMatrix0.getRowDimension());
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)multivariateSummaryStatistics0.getCovariance();
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      assertEquals(1059, blockRealMatrix1.getRowDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(1059, blockRealMatrix1.getColumnDimension());
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getMean();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1059, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray3 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1059, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray4 = multivariateSummaryStatistics0.getMean();
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1059, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getSumImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(1059, storelessUnivariateStatisticArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray5 = multivariateSummaryStatistics0.getSumLog();
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertEquals(1059, doubleArray5.length);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray6 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray6);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertEquals(1059, doubleArray6.length);
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1059, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      multivariateSummaryStatistics0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[1];
      GeometricMean geometricMean0 = new GeometricMean();
      assertNotNull(geometricMean0);
      assertEquals(0L, geometricMean0.getN());
      
      try { 
        multivariateSummaryStatistics0.setSumImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(81, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(81, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSum();
      assertNotNull(doubleArray0);
      assertEquals(81, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(81, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[0];
      try { 
        multivariateSummaryStatistics0.setMeanImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 81
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(188, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(188, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getStandardDeviation();
      assertNotNull(doubleArray0);
      assertEquals(188, doubleArray0.length);
      assertEquals(188, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1603, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1603, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[6];
      Skewness skewness0 = new Skewness();
      assertNotNull(skewness0);
      assertEquals(0L, skewness0.getN());
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) skewness0;
      Mean mean0 = new Mean();
      assertNotNull(mean0);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      storelessUnivariateStatisticArray0[1] = (StorelessUnivariateStatistic) mean0;
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertNotNull(sumOfLogs0);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      assertNotNull(geometricMean0);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, geometricMean0.getN());
      
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      assertNotNull(geometricMean1);
      assertTrue(geometricMean1.equals((Object)geometricMean0));
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, geometricMean1.getN());
      
      storelessUnivariateStatisticArray0[2] = (StorelessUnivariateStatistic) geometricMean1;
      Variance variance0 = new Variance();
      assertNotNull(variance0);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      
      storelessUnivariateStatisticArray0[3] = (StorelessUnivariateStatistic) variance0;
      Variance variance1 = new Variance(false);
      assertNotNull(variance1);
      assertTrue(variance1.equals((Object)variance0));
      assertFalse(variance1.isBiasCorrected());
      assertEquals(Double.NaN, variance1.getResult(), 0.01);
      assertEquals(0L, variance1.getN());
      
      storelessUnivariateStatisticArray0[4] = (StorelessUnivariateStatistic) variance1;
      StandardDeviation standardDeviation0 = new StandardDeviation((SecondMoment) null);
      assertNotNull(standardDeviation0);
      assertTrue(standardDeviation0.isBiasCorrected());
      
      storelessUnivariateStatisticArray0[5] = (StorelessUnivariateStatistic) standardDeviation0;
      try { 
        multivariateSummaryStatistics0.setMinImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1,603
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1153, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1153, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray0);
      assertEquals(1153, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1153, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1153, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1153, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[1];
      GeometricMean geometricMean0 = new GeometricMean();
      assertNotNull(geometricMean0);
      assertEquals(0L, geometricMean0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = geometricMean0.getSumLogImpl();
      assertNotNull(storelessUnivariateStatistic0);
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[0] = storelessUnivariateStatistic0;
      double[] doubleArray2 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1153, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(1153, multivariateSummaryStatistics0.getDimension());
      
      try { 
        multivariateSummaryStatistics0.setSumsqImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,153
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-2267);
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = null;
      try {
        multivariateSummaryStatistics0 = new MultivariateSummaryStatistics((-2267), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(3536, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(3536, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMin();
      assertNotNull(doubleArray0);
      assertEquals(3536, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(3536, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getMean();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3536, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(3536, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      multivariateSummaryStatistics0.getSumSq();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(291, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(291, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray0);
      assertEquals(291, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(291, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray1 = multivariateSummaryStatistics0.getSumSq();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(291, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(291, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray2 = multivariateSummaryStatistics0.getMean();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(291, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(291, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[2];
      Kurtosis kurtosis0 = new Kurtosis();
      assertNotNull(kurtosis0);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      Kurtosis kurtosis1 = new Kurtosis(kurtosis0);
      assertNotNull(kurtosis1);
      assertTrue(kurtosis1.equals((Object)kurtosis0));
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertEquals(0L, kurtosis1.getN());
      assertEquals(Double.NaN, kurtosis1.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[0] = (StorelessUnivariateStatistic) kurtosis1;
      kurtosis1.incrementAll(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(kurtosis0, kurtosis1);
      assertNotSame(kurtosis1, kurtosis0);
      assertEquals(291, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(kurtosis0.equals((Object)kurtosis1));
      assertFalse(kurtosis1.equals((Object)kurtosis0));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(291, multivariateSummaryStatistics0.getDimension());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertEquals(291L, kurtosis1.getN());
      assertEquals(Double.NaN, kurtosis1.getResult(), 0.01);
      
      Kurtosis kurtosis2 = new Kurtosis();
      assertNotNull(kurtosis2);
      assertTrue(kurtosis2.equals((Object)kurtosis0));
      assertFalse(kurtosis2.equals((Object)kurtosis1));
      assertEquals(0L, kurtosis2.getN());
      assertEquals(Double.NaN, kurtosis2.getResult(), 0.01);
      
      Kurtosis kurtosis3 = kurtosis1.copy();
      assertNotNull(kurtosis3);
      assertNotSame(kurtosis0, kurtosis3);
      assertNotSame(kurtosis0, kurtosis1);
      assertNotSame(kurtosis0, kurtosis2);
      assertNotSame(kurtosis1, kurtosis3);
      assertNotSame(kurtosis1, kurtosis0);
      assertNotSame(kurtosis1, kurtosis2);
      assertNotSame(kurtosis3, kurtosis1);
      assertNotSame(kurtosis3, kurtosis0);
      assertNotSame(kurtosis3, kurtosis2);
      assertTrue(kurtosis0.equals((Object)kurtosis2));
      assertFalse(kurtosis0.equals((Object)kurtosis1));
      assertFalse(kurtosis1.equals((Object)kurtosis0));
      assertFalse(kurtosis1.equals((Object)kurtosis2));
      assertFalse(kurtosis3.equals((Object)kurtosis0));
      assertTrue(kurtosis3.equals((Object)kurtosis1));
      assertFalse(kurtosis3.equals((Object)kurtosis2));
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertEquals(291L, kurtosis1.getN());
      assertEquals(Double.NaN, kurtosis1.getResult(), 0.01);
      assertEquals(Double.NaN, kurtosis3.getResult(), 0.01);
      assertEquals(291L, kurtosis3.getN());
      
      double double0 = kurtosis2.evaluate(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(kurtosis2, kurtosis3);
      assertNotSame(kurtosis2, kurtosis0);
      assertNotSame(kurtosis2, kurtosis1);
      assertEquals(291, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(kurtosis2.equals((Object)kurtosis0));
      assertFalse(kurtosis2.equals((Object)kurtosis3));
      assertFalse(kurtosis2.equals((Object)kurtosis1));
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(291, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, kurtosis2.getN());
      assertEquals(Double.NaN, kurtosis2.getResult(), 0.01);
      
      storelessUnivariateStatisticArray0[1] = (StorelessUnivariateStatistic) kurtosis2;
      try { 
        multivariateSummaryStatistics0.setMaxImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 291
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 162;
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(162, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(162, multivariateSummaryStatistics0.getDimension());
      
      double[] doubleArray0 = multivariateSummaryStatistics0.getMax();
      assertNotNull(doubleArray0);
      assertEquals(162, doubleArray0.length);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(162, multivariateSummaryStatistics0.getDimension());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)multivariateSummaryStatistics0.getCovariance();
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(162, multivariateSummaryStatistics0.getDimension());
      assertEquals(162, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(162, blockRealMatrix0.getColumnDimension());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.addValue((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(3, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(3, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setMinImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(2603, true);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(2603, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getSumImpl();
      assertNotNull(storelessUnivariateStatisticArray0);
      assertEquals(2603, storelessUnivariateStatisticArray0.length);
      assertEquals(2603, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(21, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(21, multivariateSummaryStatistics0.getDimension());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = null;
      multivariateSummaryStatistics0.clear();
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      assertEquals(21, multivariateSummaryStatistics0.getDimension());
      
      // Undeclared exception!
      try { 
        multivariateSummaryStatistics0.setSumImpl((StorelessUnivariateStatistic[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(0, false);
      assertNotNull(multivariateSummaryStatistics0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = multivariateSummaryStatistics0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[0];
      multivariateSummaryStatistics0.setGeoMeanImpl(storelessUnivariateStatisticArray0);
      assertEquals(0, storelessUnivariateStatisticArray0.length);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
      
      long long0 = multivariateSummaryStatistics0.getN();
      assertEquals(0L, long0);
      assertEquals(0, multivariateSummaryStatistics0.getDimension());
      assertEquals(0L, multivariateSummaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(1140, false);
      multivariateSummaryStatistics0.toString();
      multivariateSummaryStatistics0.getCovariance();
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = new StorelessUnivariateStatistic[2];
      SecondMoment secondMoment0 = new SecondMoment();
      try { 
        multivariateSummaryStatistics0.setSumLogImpl(storelessUnivariateStatisticArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1,140
         //
         verifyException("org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultivariateSummaryStatistics multivariateSummaryStatistics0 = new MultivariateSummaryStatistics(94, false);
      double[] doubleArray0 = multivariateSummaryStatistics0.getSum();
      multivariateSummaryStatistics0.getSumSq();
      double[] doubleArray1 = multivariateSummaryStatistics0.getMin();
      StorelessUnivariateStatistic[] storelessUnivariateStatisticArray0 = multivariateSummaryStatistics0.getSumLogImpl();
      multivariateSummaryStatistics0.addValue(doubleArray0);
      multivariateSummaryStatistics0.getGeometricMean();
      multivariateSummaryStatistics0.getGeoMeanImpl();
      multivariateSummaryStatistics0.addValue(doubleArray1);
      multivariateSummaryStatistics0.clear();
      multivariateSummaryStatistics0.getMin();
      multivariateSummaryStatistics0.setGeoMeanImpl(storelessUnivariateStatisticArray0);
      multivariateSummaryStatistics0.setSumsqImpl(storelessUnivariateStatisticArray0);
      multivariateSummaryStatistics0.getSumLog();
      multivariateSummaryStatistics0.setMaxImpl(storelessUnivariateStatisticArray0);
      multivariateSummaryStatistics0.hashCode();
      Min min0 = new Min();
      try { 
        min0.evaluate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }
}
