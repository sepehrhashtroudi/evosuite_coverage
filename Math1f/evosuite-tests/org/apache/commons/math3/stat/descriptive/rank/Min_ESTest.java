/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:54:56 GMT 2022
 */

package org.apache.commons.math3.stat.descriptive.rank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.descriptive.rank.Min;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Min_ESTest extends Min_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1169.63776474);
      double double0 = min0.evaluate(doubleArray0);
      assertEquals((-1169.63776474), double0, 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(0.0);
      double double0 = min0.getResult();
      assertEquals(1L, min0.getN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(2532.727);
      double double0 = min0.getResult();
      assertEquals(1L, min0.getN());
      assertEquals(2532.727, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1.0);
      min0.incrementAll(doubleArray0);
      double double0 = min0.getResult();
      assertEquals(7L, min0.getN());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(Double.NaN);
      long long0 = min0.getN();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 236.81;
      double double0 = min0.evaluate(doubleArray0, 1, 1);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(236.81, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(0.0);
      min0.copy();
      assertEquals(1L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Min min0 = new Min();
      min0.increment((-869.001398));
      min0.copy();
      assertEquals((-869.001398), min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(Double.NaN);
      min0.copy();
      assertEquals(1L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[3];
      try { 
        min0.evaluate(doubleArray0, (-3266), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-3,266)
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[5];
      try { 
        min0.evaluate(doubleArray0, 2213, 2213);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Min min0 = new Min();
      try { 
        min0.evaluate((double[]) null, (-667), (-667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        min0.evaluate(doubleArray0, 2139316719, 2139316719);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2139316719
         //
         verifyException("org.apache.commons.math3.stat.descriptive.rank.Min", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        Min.copy((Min) null, (Min) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Min min0 = null;
      try {
        min0 = new Min((Min) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1169.63776474);
      double double0 = min0.evaluate(doubleArray0, 3, 3);
      assertEquals((-1169.63776474), double0, 0.01);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[11];
      doubleArray0[1] = Double.NaN;
      double double0 = min0.evaluate(doubleArray0, 1, 1);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[7];
      double double0 = min0.evaluate(doubleArray0, 3, 3);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(1.0);
      min0.increment(1253.923);
      assertEquals(2L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Min min0 = new Min();
      Min.copy(min0, min0);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[6];
      double double0 = min0.evaluate(doubleArray0, 0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[6];
      min0.incrementAll(doubleArray0);
      assertEquals(6L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(2839.482786215855);
      min0.increment(1464.62281);
      assertEquals(1464.62281, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Min min0 = new Min();
      long long0 = min0.getN();
      assertEquals(0L, long0);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Min min0 = new Min();
      min0.clear();
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Min min0 = new Min();
      Min min1 = min0.copy();
      assertEquals(0L, min1.getN());
      assertNotSame(min1, min0);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Min min0 = new Min();
      Min min1 = new Min(min0);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
  }
}
