/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:04:13 GMT 2022
 */

package org.apache.commons.math3.stat.correlation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.stat.correlation.SpearmansCorrelation;
import org.apache.commons.math3.stat.ranking.NaNStrategy;
import org.apache.commons.math3.stat.ranking.NaturalRanking;
import org.apache.commons.math3.stat.ranking.RankingAlgorithm;
import org.apache.commons.math3.stat.ranking.TiesStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpearmansCorrelation_ESTest extends SpearmansCorrelation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.REMOVED;
      MersenneTwister mersenneTwister0 = new MersenneTwister((-353L));
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, mersenneTwister0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = naturalRanking0.rank(doubleArray0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      double double0 = spearmansCorrelation0.correlation(doubleArray1, doubleArray0);
      assertEquals(0.3746343246326776, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.REMOVED;
      MersenneTwister mersenneTwister0 = new MersenneTwister((-353L));
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, mersenneTwister0);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = naturalRanking0.rank(doubleArray0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      // Undeclared exception!
      try { 
        spearmansCorrelation0.correlation(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient dimension 1, must be at least 2
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[] doubleArray0 = new double[2];
      double double0 = spearmansCorrelation0.correlation(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      // Undeclared exception!
      try { 
        spearmansCorrelation0.correlation(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      TiesStrategy tiesStrategy0 = TiesStrategy.MAXIMUM;
      NaturalRanking naturalRanking0 = new NaturalRanking(tiesStrategy0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(realMatrix0, naturalRanking0);
      PearsonsCorrelation pearsonsCorrelation0 = spearmansCorrelation0.getRankCorrelation();
      assertNotNull(pearsonsCorrelation0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      TiesStrategy tiesStrategy0 = TiesStrategy.MAXIMUM;
      NaturalRanking naturalRanking0 = new NaturalRanking(tiesStrategy0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(realMatrix0, naturalRanking0);
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)spearmansCorrelation0.getCorrelationMatrix();
      assertFalse(blockRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2843.58;
      doubleArray0[2] = (-979.62968);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-979.62968);
      doubleArray1[2] = (-979.62968);
      double double0 = spearmansCorrelation0.correlation(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1597.0);
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (-1597.0);
      double double0 = spearmansCorrelation0.correlation(doubleArray0, doubleArray1);
      assertEquals((-0.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[][] doubleArray0 = new double[1][6];
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient dimension 1, must be at least 2
         //
         verifyException("org.apache.commons.math3.stat.correlation.PearsonsCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[][] doubleArray0 = new double[1][5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient dimension 1, must be at least 2
         //
         verifyException("org.apache.commons.math3.stat.correlation.PearsonsCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(644, 644);
      // Undeclared exception!
      spearmansCorrelation0.computeCorrelationMatrix(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[][] doubleArray0 = new double[4][5];
      RealMatrix realMatrix0 = spearmansCorrelation0.computeCorrelationMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NaN is not allowed
         //
         verifyException("org.apache.commons.math3.stat.ranking.NaturalRanking", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.FIXED;
      TiesStrategy tiesStrategy0 = TiesStrategy.MINIMUM;
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, tiesStrategy0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 7.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      TiesStrategy tiesStrategy0 = TiesStrategy.MAXIMUM;
      NaturalRanking naturalRanking0 = new NaturalRanking(tiesStrategy0);
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(realMatrix0, naturalRanking0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient data: only 7 rows and 1 columns.
         //
         verifyException("org.apache.commons.math3.stat.correlation.PearsonsCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1647, 1184);
      TiesStrategy tiesStrategy0 = TiesStrategy.RANDOM;
      NaturalRanking naturalRanking0 = new NaturalRanking(tiesStrategy0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(blockRealMatrix0, naturalRanking0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      NaNStrategy naNStrategy0 = NaNStrategy.FIXED;
      Well19937c well19937c0 = new Well19937c(1L);
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, well19937c0);
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(diagonalMatrix0, naturalRanking0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.REMOVED;
      Well19937c well19937c0 = new Well19937c(0);
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, well19937c0);
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation((RealMatrix) null, naturalRanking0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient data: only 2 rows and 1 columns.
         //
         verifyException("org.apache.commons.math3.stat.correlation.PearsonsCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(589, 910);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(diagonalMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      NaturalRanking naturalRanking0 = new NaturalRanking();
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(array2DRowRealMatrix0, naturalRanking0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.REMOVED;
      MersenneTwister mersenneTwister0 = new MersenneTwister((-353L));
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, mersenneTwister0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      double[][] doubleArray0 = new double[3][8];
      RealMatrix realMatrix0 = spearmansCorrelation0.computeCorrelationMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation((RankingAlgorithm) null);
      double[][] doubleArray0 = new double[1][2];
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation((RankingAlgorithm) null);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        spearmansCorrelation0.correlation(doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        spearmansCorrelation0.correlation(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.MAXIMAL;
      Well1024a well1024a0 = new Well1024a(0L);
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, well1024a0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      // Undeclared exception!
      try { 
        spearmansCorrelation0.getCorrelationMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.correlation.SpearmansCorrelation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation();
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(2, 2);
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)spearmansCorrelation0.computeCorrelationMatrix((RealMatrix) array2DRowRealMatrix0);
      assertFalse(blockRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.MINIMAL;
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1L));
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, mersenneTwister0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      PearsonsCorrelation pearsonsCorrelation0 = spearmansCorrelation0.getRankCorrelation();
      assertNull(pearsonsCorrelation0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      SpearmansCorrelation spearmansCorrelation0 = null;
      try {
        spearmansCorrelation0 = new SpearmansCorrelation(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaNStrategy naNStrategy0 = NaNStrategy.MINIMAL;
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1L));
      NaturalRanking naturalRanking0 = new NaturalRanking(naNStrategy0, mersenneTwister0);
      SpearmansCorrelation spearmansCorrelation0 = new SpearmansCorrelation(naturalRanking0);
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        spearmansCorrelation0.computeCorrelationMatrix(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }
}
