/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:17:30 GMT 2022
 */

package org.apache.commons.math3.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.regression.RegressionResults;
import org.apache.commons.math3.stat.regression.SimpleRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleRegression_ESTest extends SimpleRegression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      int[] intArray0 = new int[2];
      intArray0[0] = (-3793);
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,793 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      double[] doubleArray2 = new double[3];
      simpleRegression0.addObservation(doubleArray1, 0.0);
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      simpleRegression0.addObservation(doubleArray1, 2.0);
      double double0 = simpleRegression0.getSlopeConfidenceInterval();
      assertEquals(5L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      double[] doubleArray2 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      simpleRegression0.addObservation(doubleArray1, 2.0);
      double double0 = simpleRegression0.getSlopeConfidenceInterval();
      assertEquals(4L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1572.621024);
      doubleArray0[0] = doubleArray1;
      simpleRegression0.addData(doubleArray0);
      double double0 = simpleRegression0.getR();
      assertEquals(2L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[8][8];
      simpleRegression0.addObservations(doubleArray0, doubleArray0[0]);
      simpleRegression0.getSignificance();
      assertEquals(8L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      try { 
        simpleRegression0.addObservations(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      simpleRegression0.addData(doubleArray1);
      assertEquals(0.0, simpleRegression0.getXSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      simpleRegression0.addObservation(doubleArray0, (-858.058808));
      simpleRegression0.removeData(Double.NaN, Double.NaN);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      simpleRegression0.append(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1639.7368822;
      doubleArray1[1] = 3327.41133;
      doubleArray0[1] = doubleArray1;
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      double double0 = simpleRegression0.predict(1.0678032937388479E12);
      assertEquals(2688737.042846977, simpleRegression0.getXSumSquares(), 0.01);
      assertEquals(2.1668237242007683E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      simpleRegression0.hasIntercept();
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      double double0 = simpleRegression0.getXSumSquares();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(752577.3435831671, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-1062.48106589);
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      double double0 = simpleRegression0.getTotalSumSquares();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(752577.3435831671, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      doubleArray0[1] = doubleArray1;
      simpleRegression0.addObservations(doubleArray0, doubleArray0[1]);
      simpleRegression0.removeData((-273.39068758), (-2200.43589));
      double double0 = simpleRegression0.getTotalSumSquares();
      assertEquals(2L, simpleRegression0.getN());
      assertEquals((-7262877.15900014), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 63.38224467163757;
      doubleArray1[1] = 2793.45;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray2;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray2;
      doubleArray0[7] = doubleArray0[2];
      simpleRegression0.addData(doubleArray0);
      double double0 = simpleRegression0.getSumSquaredErrors();
      assertEquals(8L, simpleRegression0.getN());
      assertEquals(1.862645149230957E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[] doubleArray0 = new double[8];
      simpleRegression0.addObservation(doubleArray0, 4.9E-324);
      simpleRegression0.addData((-2250.0), (-2250.0));
      double double0 = simpleRegression0.getSumOfCrossProducts();
      assertEquals(2531250.0, simpleRegression0.getXSumSquares(), 0.01);
      assertEquals(2531250.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = (-1062.48106589);
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      double double0 = simpleRegression0.getSlopeConfidenceInterval();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(11.00389608721348, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      simpleRegression0.addObservation(doubleArray2, 2.0);
      double double0 = simpleRegression0.getSlope();
      assertEquals(4L, simpleRegression0.getN());
      assertEquals(6.274621619804823E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = (-1062.48106589);
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      double double0 = simpleRegression0.getSignificance();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(0.6666666666666667, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-409.31500143);
      doubleArray1[1] = (-3812.2411);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray0[1] = doubleArray2;
      simpleRegression0.addData(doubleArray0);
      double double0 = simpleRegression0.getRegressionSumSquares();
      assertEquals(2L, simpleRegression0.getN());
      assertEquals(7266591.1022646045, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = (-1062.48106589);
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      double double0 = simpleRegression0.getRSquare();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1572.621024);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[1] = 2.0;
      doubleArray0[1] = doubleArray2;
      simpleRegression0.addData(doubleArray0);
      double double0 = simpleRegression0.getR();
      assertEquals(2L, simpleRegression0.getN());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      simpleRegression0.addData(0.0, 2861.896143423359);
      long long0 = simpleRegression0.getN();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 649086.1332951451;
      doubleArray0[1] = 1759.0;
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      simpleRegression0.addData(doubleArray1);
      double double0 = simpleRegression0.getMeanSquareError();
      assertEquals(2.5278768506162573E12, simpleRegression0.getXSumSquares(), 0.01);
      assertEquals(7.450580596923829E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      double double0 = simpleRegression0.getInterceptStdErr();
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-3812.2411);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 4224.4408;
      doubleArray0[1] = doubleArray2;
      simpleRegression0.addData(doubleArray0);
      double double0 = simpleRegression0.getIntercept();
      assertEquals(2L, simpleRegression0.getN());
      assertEquals((-3812.2411), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      // Undeclared exception!
      try { 
        simpleRegression0.removeData((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      simpleRegression0.addData(0.0, 2861.896143423359);
      double[][] doubleArray0 = new double[2][0];
      // Undeclared exception!
      try { 
        simpleRegression0.removeData(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      // Undeclared exception!
      try { 
        simpleRegression0.append((SimpleRegression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      // Undeclared exception!
      try { 
        simpleRegression0.addData((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double double0 = simpleRegression0.getSlopeConfidenceInterval(0.0);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      double double0 = simpleRegression0.getMeanSquareError();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double double0 = simpleRegression0.getMeanSquareError();
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double double0 = simpleRegression0.getTotalSumSquares();
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1062.48106589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray2);
      double double0 = simpleRegression0.getSlope();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      double double0 = simpleRegression0.getSlope();
      assertEquals(3L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double double0 = simpleRegression0.getSlope();
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      simpleRegression0.removeData(1033346.5789883818, (-144.813174142));
      simpleRegression0.addData(0.0, 601.0189);
      double double0 = simpleRegression0.getRegressionSumSquares();
      assertEquals(1.496421980920845E8, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals((-20970.855405081216), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1907);
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,907 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      int[] intArray0 = new int[1];
      intArray0[0] = 891;
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 891 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the number of observations is not sufficient to conduct regression
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,147,483,647 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      int[] intArray0 = new int[1];
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the number of observations is not sufficient to conduct regression
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      int[] intArray0 = new int[2];
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      int[] intArray0 = new int[1];
      RegressionResults regressionResults0 = simpleRegression0.regress(intArray0);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(-0.0, regressionResults0.getMeanSquareError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      int[] intArray0 = new int[7];
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array size cannot be greater than 2
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      int[] intArray0 = new int[0];
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a null or zero length array not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      int[] intArray0 = new int[2];
      try { 
        simpleRegression0.regress(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array size cannot be greater than 1
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      try { 
        simpleRegression0.regress((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a null or zero length array not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      simpleRegression0.addObservation(doubleArray0, 1476.41859046);
      simpleRegression0.addObservation(doubleArray0, Double.NaN);
      simpleRegression0.regress();
      assertEquals(2L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      simpleRegression0.addData(1358.8601225405, 0.0);
      simpleRegression0.addData((-1064.269489), 0.0);
      simpleRegression0.regress();
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double[][] doubleArray0 = new double[4][7];
      simpleRegression0.addData(doubleArray0);
      simpleRegression0.regress();
      assertEquals(4L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      try { 
        simpleRegression0.regress();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the number of observations is not sufficient to conduct regression
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      try { 
        simpleRegression0.regress();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the number of observations is not sufficient to conduct regression
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double double0 = simpleRegression0.getSignificance();
      assertFalse(simpleRegression0.hasIntercept());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[][] doubleArray0 = new double[3][9];
      simpleRegression0.addData(doubleArray0);
      try { 
        simpleRegression0.getSlopeConfidenceInterval(435.9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // significance level (435.9)
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double double0 = simpleRegression0.getInterceptStdErr();
      assertEquals(0L, simpleRegression0.getN());
      assertFalse(simpleRegression0.hasIntercept());
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      simpleRegression0.getInterceptStdErr();
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double double0 = simpleRegression0.getXSumSquares();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      simpleRegression0.addObservations(doubleArray0, doubleArray0[0]);
      double double0 = simpleRegression0.getXSumSquares();
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double double0 = simpleRegression0.getIntercept();
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      simpleRegression0.predict(Double.NaN);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      try { 
        simpleRegression0.addObservations(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not enough data (0 rows) for this many predictors (1 predictors)
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      try { 
        simpleRegression0.addObservations(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[][] doubleArray0 = new double[7][3];
      try { 
        simpleRegression0.addObservations(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[7];
      simpleRegression0.addObservations(doubleArray0, doubleArray1);
      try { 
        simpleRegression0.getSlopeConfidenceInterval(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // significance level (0)
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      try { 
        simpleRegression0.addObservations((double[][]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 0
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[] doubleArray0 = new double[0];
      try { 
        simpleRegression0.addObservation(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length of regressor array = 0 does not match the number of variables = 1 in the model
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      try { 
        simpleRegression0.addObservation((double[]) null, 4.397691311390564E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length of regressor array = 0 does not match the number of variables = 1 in the model
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[][] doubleArray0 = new double[1][3];
      simpleRegression0.addData(1016.53606871, 1258.373199376);
      simpleRegression0.removeData(doubleArray0);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      simpleRegression0.addData(0.0, 2861.896143423359);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      simpleRegression0.removeData(doubleArray0);
      assertEquals(Double.NaN, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      simpleRegression0.removeData(5.508673578184983E83, (double) (-1876));
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(0L, simpleRegression0.getN());
      assertTrue(simpleRegression0.hasIntercept());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[] doubleArray0 = new double[1];
      simpleRegression0.addObservation(doubleArray0, 1476.41859046);
      simpleRegression0.append(simpleRegression0);
      assertEquals(2L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      simpleRegression0.append(simpleRegression0);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double[] doubleArray0 = new double[6];
      simpleRegression0.addObservation(doubleArray0, Double.POSITIVE_INFINITY);
      simpleRegression0.append(simpleRegression0);
      double double0 = simpleRegression0.getXSumSquares();
      assertEquals(Double.NaN, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(false);
      double[] doubleArray0 = new double[4];
      simpleRegression0.addObservation(doubleArray0, 1759.0);
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      try { 
        simpleRegression0.addData(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length of regressor array = 1 does not match the number of variables = 2 in the model
         //
         verifyException("org.apache.commons.math3.stat.regression.SimpleRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      simpleRegression0.clear();
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression(true);
      double double0 = simpleRegression0.getSumOfCrossProducts();
      assertEquals(0.0, double0, 0.01);
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      long long0 = simpleRegression0.getN();
      assertEquals(0L, long0);
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertTrue(simpleRegression0.hasIntercept());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      boolean boolean0 = simpleRegression0.hasIntercept();
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      double double0 = simpleRegression0.getSlopeStdErr();
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(simpleRegression0.hasIntercept());
      assertEquals(0.0, simpleRegression0.getSumOfCrossProducts(), 0.01);
  }
}
