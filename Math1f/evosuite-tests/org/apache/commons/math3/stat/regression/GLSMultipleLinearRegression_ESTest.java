/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:16:10 GMT 2022
 */

package org.apache.commons.math3.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GLSMultipleLinearRegression_ESTest extends GLSMultipleLinearRegression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[3][5];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData((double[]) null, (double[][]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray1, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (4x3) matrix
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray1, doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[16][1];
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.getOmegaInverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (16x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.getOmegaInverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[1][1];
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[3][2];
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (3x2) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[1][1];
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateBetaVariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateBeta();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (4x3) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateBeta();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[3][8];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not enough data (3 rows) for this many predictors (8 predictors)
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[16][1];
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateBetaVariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (16x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateBetaVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }
}
