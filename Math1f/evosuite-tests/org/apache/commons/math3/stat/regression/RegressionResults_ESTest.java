/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:20:19 GMT 2022
 */

package org.apache.commons.math3.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.regression.RegressionResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegressionResults_ESTest extends RegressionResults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-347L), 0, 0.0, 0, 1.0, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 4, 716.5815, (-1.0), (-663.986), true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(5, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[1][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 7, 716.5815, (-1.0), (-663.986), true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(5, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[2][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 3712L, 0, 3712L, 0.0, (-3027.74143177), true, true);
      try { 
        regressionResults0.getCovarianceOfParameters(0, 1713);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,713 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[1][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-14L), 4, 0.0, (-14L), 4, false, false);
      try { 
        regressionResults0.getCovarianceOfParameters(6, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 out of [0, 5] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4.9E-324;
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 3, 869.4888, 1948.879, 3415.4, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 4.9E-324;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[2] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-1676L), 0, 0.0, (-2031.3), (-1.0), true, true);
      double double0 = regressionResults0.getStdErrorOfEstimate(2);
      assertEquals(5.966587112171838E-4, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals((-1676L), regressionResults0.getN());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][6];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 658, 2692.7338818, 658, (-2562.7087614863), true, true);
      try { 
        regressionResults0.getStdErrorOfEstimate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 out of [0, -1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 0L, 1788, 0L, 0.0, 1788, false, false);
      try { 
        regressionResults0.getParameterEstimate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 out of [0, -1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, (double[][]) null, false, 0L, 3244, 0L, 0L, 0L, false, false);
      boolean boolean0 = regressionResults0.hasIntercept();
      assertEquals(-0.0, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(0.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[4][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-3019L), 750, 4.9E-324, 0.0, 2355.8538, false, true);
      double double0 = regressionResults0.getTotalSumSquares();
      assertEquals(0.0, double0, 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3019L), regressionResults0.getN());
      assertEquals((-0.6250607057574953), regressionResults0.getMeanSquareError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-3255L), 5, (-3255L), 5, (-3255L), true, false);
      double double0 = regressionResults0.getTotalSumSquares();
      assertEquals((-3255.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(1.9972411456961119, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-3255L), regressionResults0.getN());
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(3260.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[3][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 2, 0.0, (-830.52036863), (-150.116888727741), false, false);
      double double0 = regressionResults0.getTotalSumSquares();
      assertEquals((-830.52036863), double0, 0.01);
      assertEquals(75.0584443638705, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(0.8192496001327829, regressionResults0.getRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][4];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-980L), 302, (-381.779), (-381.779), (-980L), false, false);
      regressionResults0.getStdErrorOfEstimates();
      assertEquals((-0.9622398447233271), regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-980L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[7][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 4239, 4239, 4239, 4239, false, true);
      double double0 = regressionResults0.getRegressionSumSquares();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[5][4];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-211L), 957, 0.0, 0.0, (-211L), true, false);
      double double0 = regressionResults0.getRegressionSumSquares();
      assertEquals(211.0, double0, 0.01);
      assertEquals((-211L), regressionResults0.getN());
      assertEquals(0.18065068493150685, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][3];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 2203, 2203, 0L, 0L, true, true);
      double double0 = regressionResults0.getRegressionSumSquares();
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(0.0, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[9][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4239, 4239, 4239, 4239, false, false);
      double double0 = regressionResults0.getRSquared();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-3255L), 5, (-3255L), 5, (-3255L), true, false);
      double double0 = regressionResults0.getRSquared();
      assertEquals(0.9984662576687117, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(1.9984662576687118, double0, 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-3255L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][4];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-980L), 302, (-381.779), (-381.779), (-980L), false, false);
      regressionResults0.getParameterEstimates();
      assertEquals((-980L), regressionResults0.getN());
      assertEquals((-0.9622398447233271), regressionResults0.getAdjustedRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 22.662330549025697;
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.0, 0, 1.0, true, true);
      double double0 = regressionResults0.getParameterEstimate(0);
      assertEquals(22.662330549025697, double0, 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals((-347L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-124.1634484867);
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 2402L, 0, 1.0, 2402L, (-124.1634484867), false, false);
      double double0 = regressionResults0.getParameterEstimate(0);
      assertEquals((-124.1634484867), double0, 0.01);
      assertEquals(2402L, regressionResults0.getN());
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-0.05169169379129892), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 0L, 1788, 0L, 0.0, 1788, false, false);
      regressionResults0.getNumberOfParameters();
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[9][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4239, 4239, 4239, 4239, false, false);
      regressionResults0.getN();
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(0.0, regressionResults0.getRegressionSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[3][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 955L, (-130), (-2490.146190882185), (-1445.751539411092), 1679.7171, false, false);
      long long0 = regressionResults0.getN();
      assertEquals(1.5481263594470047, regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(955L, long0);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[8][2];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-2430L), (-2428), Double.NaN, (-3702.60173), (-2430L), false, false);
      double double0 = regressionResults0.getMeanSquareError();
      assertEquals(1215.0, double0, 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-2430L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, 0L, (-249), 0.0, 0L, (-2056.8546), false, false);
      double double0 = regressionResults0.getMeanSquareError();
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-8.260460240963855), double0, 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[2][9];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, (-6116), 0L, 1.0, 0.0, true, false);
      double double0 = regressionResults0.getErrorSumSquares();
      assertEquals(0.0, double0, 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[9][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4239, 4239, 4239, 4239, false, false);
      double double0 = regressionResults0.getErrorSumSquares();
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(0.0, regressionResults0.getRSquared(), 0.01);
      assertEquals(4239.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 22.662330549025697;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.0, 0, 1.0, true, true);
      regressionResults0.getCovarianceOfParameters(0, 0);
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals((-347L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2031.3);
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-1676L), 0, 0.0, (-2031.3), (-1.0), true, true);
      regressionResults0.getCovarianceOfParameters(0, 0);
      assertEquals((-1676L), regressionResults0.getN());
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(5.966587112171838E-4, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[9][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-1481L), 3, (-1.0), 3, 896.19374671975, false, false);
      double double0 = regressionResults0.getAdjustedRSquared();
      assertEquals((-297.1273447645889), double0, 0.01);
      assertEquals((-1481L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 2131L, (-1063), 0.0, (-1063), 0.0, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 2402L, 0, 1.0, 2402L, (-124.1634484867), false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[0][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-2158L), (-608), (-608), (-1415.142919845505), 0.0, true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimate(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 1278L, 0, (-2464.61705), 360.99705256065, 899.157741, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      RegressionResults regressionResults0 = null;
      try {
        regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, 0L, (-926), 487.766877233272, (-327.269707), (-1041.25392247467), false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[1][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 0, 0.0, (-1.0), (-663.986), true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.27365108467185684, 0, 1.0, true, true);
      regressionResults0.getCovarianceOfParameters(1, 0);
      assertEquals((-347L), regressionResults0.getN());
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.0, 0, 1.0, true, true);
      regressionResults0.getCovarianceOfParameters(0, 1);
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals((-347L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, (-3599L), 420, (-3599L), (-4104.10825), (-2304.0), false, false);
      int int0 = regressionResults0.getNumberOfParameters();
      assertEquals(0.49727844350001027, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-1), int0);
      assertEquals((-3599L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[1][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-14L), 4, 0.0, (-14L), 4, false, false);
      int int0 = regressionResults0.getNumberOfParameters();
      assertEquals(1.222222222222222, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(6, int0);
      assertEquals((-14L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 1.3447163440116534, 0, 1.0, true, true);
      try { 
        regressionResults0.getCovarianceOfParameters(0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.27365108467185684, 0, 1.0, true, true);
      try { 
        regressionResults0.getCovarianceOfParameters(0, (-1515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,515 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][4];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-980L), 302, (-381.779), (-381.779), (-980L), false, false);
      try { 
        regressionResults0.getCovarianceOfParameters(203, 302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 203 out of [0, -1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[8][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-209L), 2534, 0.0, (-6.05956385849144), (-6.05956385849144), true, true);
      try { 
        regressionResults0.getCovarianceOfParameters((-2940), 2534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,940 out of [0, 3] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-1L), 291, (-1L), 291, 291, true, false);
      double double0 = regressionResults0.getCovarianceOfParameters(2, 291);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-1L), regressionResults0.getN());
      assertEquals(0.9931741414899606, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-0.9965753424657534), regressionResults0.getMeanSquareError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 22.662330549025697;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.0, 0, 1.0, true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-1082L), 1056, (-2577.0), (-1.0), 1056, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[1] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.0, 0, 1.0, true, true);
      double[] doubleArray2 = regressionResults0.getStdErrorOfEstimates();
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-347L), regressionResults0.getN());
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-1L), 291, (-1L), 291, 291, true, false);
      regressionResults0.getStdErrorOfEstimates();
      assertEquals(0.9931741414899606, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-1L), regressionResults0.getN());
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(291.0, regressionResults0.getErrorSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 22.662330549025697;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.0, 0, 1.0, true, true);
      double double0 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(4.760496880476417, double0, 0.01);
      assertEquals((-347L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-1082L), 1056, (-2577.0), (-1.0), 1056, false, false);
      double double0 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(535.4209541627689, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-1082L), regressionResults0.getN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[0][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 360L, 0, 0.0, 0.0, (-2872.3), true, true);
      try { 
        regressionResults0.getStdErrorOfEstimate(1700);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,700 out of [0, 5] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[7][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, (-1038), 0.0, Double.NaN, (-2419.29), true, true);
      try { 
        regressionResults0.getStdErrorOfEstimate((-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,038 out of [0, 4] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-1L), 291, (-1L), 291, 291, true, false);
      double double0 = regressionResults0.getStdErrorOfEstimate(291);
      assertEquals((-1L), regressionResults0.getN());
      assertEquals(0.9931741414899606, regressionResults0.getAdjustedRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-0.9965753424657534), regressionResults0.getMeanSquareError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.27365108467185684, 0, 1.0, true, true);
      double double0 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-347L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-1L), 291, (-1L), 291, 291, true, false);
      regressionResults0.getParameterEstimates();
      assertEquals(291.0, regressionResults0.getErrorSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(0.9931741414899606, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals((-1L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.27365108467185684, 0, 1.0, true, true);
      double[] doubleArray2 = regressionResults0.getParameterEstimates();
      assertEquals((-347L), regressionResults0.getN());
      assertNotNull(doubleArray2);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[9][5];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4239, 4239, 4239, 4239, false, false);
      try { 
        regressionResults0.getParameterEstimate(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 out of [0, -1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 3061L, (-448), 3061L, (-448), (-448), false, false);
      try { 
        regressionResults0.getParameterEstimate((-448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -448 out of [0, -1] range
         //
         verifyException("org.apache.commons.math3.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-1L), 291, (-1L), 291, 291, true, false);
      double double0 = regressionResults0.getParameterEstimate(2440);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(291.0, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-1L), regressionResults0.getN());
      assertEquals(0.9931741414899606, regressionResults0.getAdjustedRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.27365108467185684, 0, 1.0, true, true);
      double double0 = regressionResults0.getParameterEstimate(0);
      assertEquals((-347L), regressionResults0.getN());
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, true, (-1L), 291, (-1L), 291, 291, true, false);
      double double0 = regressionResults0.getAdjustedRSquared();
      assertEquals(291.0, regressionResults0.getErrorSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(0.9931741414899606, double0, 0.01);
      assertEquals((-1L), regressionResults0.getN());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[7][9];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 539L, (-381), 408.7651179086827, 408.7651179086827, (-381), false, true);
      double double0 = regressionResults0.getErrorSumSquares();
      assertEquals((-0.4141304347826087), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-381.0), double0, 0.01);
      assertEquals(539L, regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][1];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-347L), 0, 0.27365108467185684, 0, 1.0, true, true);
      long long0 = regressionResults0.getN();
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-0.002881844380403458), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals((-347L), long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4, 0.0, 0L, 4, false, false);
      double double0 = regressionResults0.getRSquared();
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[6][9];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 1L, (-3091), (-2005.6427258787717), (-2005.6427258787717), 0.0, true, false);
      boolean boolean0 = regressionResults0.hasIntercept();
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertTrue(boolean0);
      assertEquals(1L, regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getErrorSumSquares(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[2][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 3712L, (-6), 3712L, 0.0, 0.0, true, true);
      double double0 = regressionResults0.getMeanSquareError();
      assertEquals(3712L, regressionResults0.getN());
      assertEquals(0.0, double0, 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
  }
}
