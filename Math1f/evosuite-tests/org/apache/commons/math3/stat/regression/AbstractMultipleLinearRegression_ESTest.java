/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:21:08 GMT 2022
 */

package org.apache.commons.math3.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;
import org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMultipleLinearRegression_ESTest extends AbstractMultipleLinearRegression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[8][1];
      double[][] doubleArray1 = new double[8][1];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (8x1) matrix
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[2][3];
      double[][] doubleArray1 = new double[3][1];
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[6][2];
      double[] doubleArray2 = new double[5];
      doubleArray1[0] = doubleArray2;
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newXSampleData(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, (-3030), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[1][3];
      gLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      gLSMultipleLinearRegression0.getX();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-2675.86777070246);
      oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      oLSMultipleLinearRegression0.estimateRegressandVariance();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[2];
      oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      oLSMultipleLinearRegression0.calculateYVariance();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-2675.86777070246);
      oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      oLSMultipleLinearRegression0.calculateYVariance();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not enough data (7 rows) for this many predictors (7 predictors)
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      try { 
        oLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[3];
      try { 
        oLSMultipleLinearRegression0.validateSampleData((double[][]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[2][4];
      oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersVariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (4)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[5][4];
      oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersStandardErrors();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[3][6];
      gLSMultipleLinearRegression0.newCovarianceData(doubleArray0);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateErrorVariance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (3x6) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateYVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateResiduals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[6];
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      oLSMultipleLinearRegression0.validateCovarianceData(doubleArray1, doubleArray1);
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][6];
      gLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray0);
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[7][4];
      double[][] doubleArray1 = new double[0][4];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[6][8];
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (6x8) matrix
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[7];
      oLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray1);
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[8][5];
      try { 
        oLSMultipleLinearRegression0.newSampleData((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][5];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newXSampleData(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      
      double[][] doubleArray0 = new double[4][9];
      oLSMultipleLinearRegression0.setNoIntercept(true);
      oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      assertTrue(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newXSampleData(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newXSampleData((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[2][4];
      oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersStandardErrors();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (4)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newYSampleData((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData((double[]) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, 2930, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5,860
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersStandardErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateResiduals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateRegressionParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionStandardError();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateRegressandVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      oLSMultipleLinearRegression0.getY();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      boolean boolean0 = oLSMultipleLinearRegression0.isNoIntercept();
      assertFalse(boolean0);
  }
}
