/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:12:06 GMT 2022
 */

package org.apache.commons.math3.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EuclideanDoublePoint_ESTest extends EuclideanDoublePoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-43.2668204034);
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      LinkedList<EuclideanDoublePoint> linkedList0 = new LinkedList<EuclideanDoublePoint>();
      linkedList0.add(euclideanDoublePoint0);
      EuclideanDoublePoint euclideanDoublePoint1 = euclideanDoublePoint0.centroidOf(linkedList0);
      assertTrue(linkedList0.contains(euclideanDoublePoint1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      double[] doubleArray1 = euclideanDoublePoint0.getPoint();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      double[] doubleArray1 = euclideanDoublePoint0.getPoint();
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2253.4);
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      double[] doubleArray1 = new double[6];
      EuclideanDoublePoint euclideanDoublePoint1 = new EuclideanDoublePoint(doubleArray1);
      double double0 = euclideanDoublePoint1.distanceFrom(euclideanDoublePoint0);
      assertEquals(2253.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      // Undeclared exception!
      try { 
        euclideanDoublePoint0.distanceFrom((EuclideanDoublePoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.clustering.EuclideanDoublePoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      double[] doubleArray1 = new double[8];
      EuclideanDoublePoint euclideanDoublePoint1 = new EuclideanDoublePoint(doubleArray1);
      // Undeclared exception!
      try { 
        euclideanDoublePoint1.distanceFrom(euclideanDoublePoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint((double[]) null);
      LinkedList<EuclideanDoublePoint> linkedList0 = new LinkedList<EuclideanDoublePoint>();
      // Undeclared exception!
      try { 
        euclideanDoublePoint0.centroidOf(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.stat.clustering.EuclideanDoublePoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      LinkedList<EuclideanDoublePoint> linkedList0 = new LinkedList<EuclideanDoublePoint>();
      double[] doubleArray1 = new double[13];
      EuclideanDoublePoint euclideanDoublePoint1 = new EuclideanDoublePoint(doubleArray1);
      linkedList0.add(euclideanDoublePoint0);
      // Undeclared exception!
      try { 
        euclideanDoublePoint1.centroidOf(linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.stat.clustering.EuclideanDoublePoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint((double[]) null);
      double[] doubleArray0 = euclideanDoublePoint0.getPoint();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      LinkedList<EuclideanDoublePoint> linkedList0 = new LinkedList<EuclideanDoublePoint>();
      boolean boolean0 = euclideanDoublePoint0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      boolean boolean0 = euclideanDoublePoint0.equals(euclideanDoublePoint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      LinkedList<EuclideanDoublePoint> linkedList0 = new LinkedList<EuclideanDoublePoint>();
      EuclideanDoublePoint euclideanDoublePoint1 = euclideanDoublePoint0.centroidOf(linkedList0);
      assertEquals("[NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]", euclideanDoublePoint1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      String string0 = euclideanDoublePoint0.toString();
      assertEquals("[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      double double0 = euclideanDoublePoint0.distanceFrom(euclideanDoublePoint0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EuclideanDoublePoint euclideanDoublePoint0 = new EuclideanDoublePoint(doubleArray0);
      euclideanDoublePoint0.hashCode();
  }
}
