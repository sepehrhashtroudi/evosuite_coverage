/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:05:00 GMT 2022
 */

package org.apache.commons.math3.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Abs;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Atan;
import org.apache.commons.math3.analysis.function.Constant;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.function.Rint;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.function.Signum;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.analysis.function.Ulp;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.univariate.BracketFinder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BracketFinder_ESTest extends BracketFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Acosh acosh0 = new Acosh();
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(acosh0, goalType0, 1825.2, 1.0E-21);
      double double0 = bracketFinder0.getMid();
      assertEquals(Double.NaN, bracketFinder0.getFMid(), 0.01);
      assertEquals(1.0E-21, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Acosh acosh0 = new Acosh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(acosh0, goalType0, (-416.9275), (-416.9275));
      double double0 = bracketFinder0.getMid();
      assertEquals((-416.9275), bracketFinder0.getLo(), 0.01);
      assertEquals((-416.9275), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Constant constant0 = new Constant(6.283185307179586);
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(constant0, goalType0, 1.0, 5590.09335332);
      double double0 = bracketFinder0.getLo();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder(3.0, 1286);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(sin0, goalType0, 604.4749545494262, 2743.872122317);
      double double0 = bracketFinder0.getLo();
      assertEquals(604.4749545494262, bracketFinder0.getMid(), 0.01);
      assertEquals((-1153.8747373397148), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Sigmoid sigmoid0 = new Sigmoid(1459.0814215, (-1093.3001337351698));
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(sigmoid0, goalType0, (-1093.3001337351698), 1459.0814215);
      double double0 = bracketFinder0.getHi();
      assertEquals((-1093.3001337351698), bracketFinder0.getFHi(), 0.01);
      assertEquals(1459.0814215, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Acos acos0 = new Acos();
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(acos0, goalType0, (-2931.1), (-3806.2029239));
      double double0 = bracketFinder0.getHi();
      assertEquals((-3806.2029239), bracketFinder0.getMid(), 0.01);
      assertEquals((-2931.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Abs abs0 = new Abs();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(abs0, goalType0, 6.283185307179586, 6.283185307179586);
      double double0 = bracketFinder0.getFMid();
      assertEquals(6.283185307179586, bracketFinder0.getFLo(), 0.01);
      assertEquals(6.283185307179586, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(ulp0, goalType0, 0.0, 0.0);
      double double0 = bracketFinder0.getFLo();
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(725.6096759364, (-2314), 725.6096759364);
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(harmonicOscillator0, goalType0, 176.256, 1392.9902709935059);
      double double0 = bracketFinder0.getFLo();
      assertEquals(176.256, bracketFinder0.getMid(), 0.01);
      assertEquals((-269.94938765110084), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Constant constant0 = new Constant(6.283185307179586);
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(constant0, goalType0, 1.0, 5590.09335332);
      double double0 = bracketFinder0.getFHi();
      assertEquals(5590.09335332, bracketFinder0.getMid(), 0.01);
      assertEquals(6.283185307179586, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Acosh acosh0 = new Acosh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(acosh0, goalType0, (-416.9275), (-416.9275));
      bracketFinder0.getEvaluations();
      assertEquals(Double.NaN, bracketFinder0.getFLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Logit logit0 = new Logit();
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search(logit0, goalType0, 10.0, 5054.7769);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search((UnivariateFunction) null, goalType0, 4.547473508864641E-13, 916.15722);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Sigmoid sigmoid0 = new Sigmoid(0.0, 1691.3);
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(sigmoid0, goalType0, 1595.606688, 0.0);
      assertEquals((-2581.745871811392), bracketFinder0.getMid(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder(3.0, 1286);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(sin0, goalType0, 604.4749545494262, 2743.872122317);
      double double0 = bracketFinder0.getFHi();
      assertEquals(2743.872122317, bracketFinder0.getHi(), 0.01);
      assertEquals((-0.9526197236436381), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Atan atan0 = new Atan();
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search(atan0, goalType0, 712.1779773, 1.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (50) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Sinc sinc0 = new Sinc(false);
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(sinc0, goalType0, 2910.703735, 870.0);
      assertEquals(3.852677741393557E-5, bracketFinder0.getFLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Sqrt sqrt0 = new Sqrt();
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search(sqrt0, goalType0, 50, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (50) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Signum signum0 = new Signum();
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(signum0, goalType0, 50, 1978.0);
      assertEquals(1.0, bracketFinder0.getFHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Signum signum0 = new Signum();
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(signum0, goalType0, (-989.06), 0);
      assertEquals(1.0, bracketFinder0.getFMid(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Rint rint0 = new Rint();
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search(rint0, goalType0, 0.0, 3.141592653589793);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (50) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      Tan tan0 = new Tan();
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(tan0, goalType0, (-3196.606793189147), 100.0);
      double double0 = bracketFinder0.getFMid();
      assertEquals((-0.5872139151569291), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder(1.618034, (-1395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,395 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder((-1687.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,687 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      double double0 = bracketFinder0.getHi();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      double double0 = bracketFinder0.getMid();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      double double0 = bracketFinder0.getFHi();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      int int0 = bracketFinder0.getMaxEvaluations();
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      double double0 = bracketFinder0.getFLo();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      double double0 = bracketFinder0.getLo();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(0, int0);
  }
}
