/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:06:47 GMT 2022
 */

package org.apache.commons.math3.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchInterval_ESTest extends SearchInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-1029.6948135983), (-1.0));
      double double0 = searchInterval0.getStartValue();
      assertEquals((-1029.6948135983), searchInterval0.getMin(), 0.01);
      assertEquals((-515.34740679915), double0, 0.01);
      assertEquals((-1.0), searchInterval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(3004.0, 3490.39);
      double double0 = searchInterval0.getMin();
      assertEquals(3004.0, double0, 0.01);
      assertEquals(3490.39, searchInterval0.getMax(), 0.01);
      assertEquals(3247.1949999999997, searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-1.0), 0.0);
      double double0 = searchInterval0.getMin();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, searchInterval0.getMax(), 0.01);
      assertEquals((-0.5), searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-3164.191699672714), 0.0, (-1666.57));
      double double0 = searchInterval0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-3164.191699672714), searchInterval0.getMin(), 0.01);
      assertEquals((-1666.57), searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-3090.0), (-1.0));
      double double0 = searchInterval0.getMax();
      assertEquals((-1545.5), searchInterval0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-3090.0), searchInterval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 0.5, 0.0);
      double double0 = searchInterval0.getStartValue();
      assertEquals(0.0, searchInterval0.getMin(), 0.01);
      assertEquals(0.5, searchInterval0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval((-1.0), (-1.0), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is larger than, or equal to, the maximum (-1)
         //
         verifyException("org.apache.commons.math3.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval((-1838.41141379), 0.0, 1008.26529);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,008.265 out of [-1,838.411, 0] range
         //
         verifyException("org.apache.commons.math3.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval((-1.0), 0.0, (-1590.2544091883267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,590.254 out of [-1, 0] range
         //
         verifyException("org.apache.commons.math3.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 15.0);
      double double0 = searchInterval0.getMax();
      assertEquals(7.5, searchInterval0.getStartValue(), 0.01);
      assertEquals(15.0, double0, 0.01);
      assertEquals(0.0, searchInterval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 15.0);
      double double0 = searchInterval0.getStartValue();
      assertEquals(7.5, double0, 0.01);
      assertEquals(0.0, searchInterval0.getMin(), 0.01);
      assertEquals(15.0, searchInterval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 15.0);
      double double0 = searchInterval0.getMin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(15.0, searchInterval0.getMax(), 0.01);
      assertEquals(7.5, searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval((-119.1), (-119.1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -119.1 is larger than, or equal to, the maximum (-119.1)
         //
         verifyException("org.apache.commons.math3.optim.univariate.SearchInterval", e);
      }
  }
}
