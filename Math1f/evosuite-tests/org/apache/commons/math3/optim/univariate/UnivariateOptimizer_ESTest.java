/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:06:35 GMT 2022
 */

package org.apache.commons.math3.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnivariateOptimizer_ESTest extends UnivariateOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(395.9423372934, 395.9423372934);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      MaxEval maxEval0 = new MaxEval(511);
      optimizationDataArray0[0] = (OptimizationData) maxEval0;
      Acos acos0 = new Acos();
      UnivariateObjectiveFunction univariateObjectiveFunction0 = new UnivariateObjectiveFunction(acos0);
      optimizationDataArray0[1] = (OptimizationData) univariateObjectiveFunction0;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(optimizationDataArray0);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2685.6, 2685.6);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[5] = (OptimizationData) maxEval0;
      OptimizationData[] optimizationDataArray1 = new OptimizationData[6];
      Power power0 = new Power(3.0144088843073416E-40);
      UnivariateObjectiveFunction univariateObjectiveFunction0 = new UnivariateObjectiveFunction(power0);
      optimizationDataArray1[2] = (OptimizationData) univariateObjectiveFunction0;
      brentOptimizer0.parseOptimizationData(optimizationDataArray1);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(optimizationDataArray0);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      SearchInterval searchInterval0 = new SearchInterval(94, 1565.0, 1565.0);
      optimizationDataArray0[3] = (OptimizationData) searchInterval0;
      brentOptimizer0.parseOptimizationData(optimizationDataArray0);
      double double0 = brentOptimizer0.getStartValue();
      assertEquals(1565.0, brentOptimizer0.getMax(), 0.01);
      assertEquals(1565.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      SearchInterval searchInterval0 = new SearchInterval(94, 1565.0, 1565.0);
      optimizationDataArray0[3] = (OptimizationData) searchInterval0;
      brentOptimizer0.parseOptimizationData(optimizationDataArray0);
      double double0 = brentOptimizer0.getMin();
      assertEquals(1565.0, brentOptimizer0.getStartValue(), 0.01);
      assertEquals(94.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      SearchInterval searchInterval0 = new SearchInterval(94, 1565.0, 1565.0);
      optimizationDataArray0[3] = (OptimizationData) searchInterval0;
      brentOptimizer0.parseOptimizationData(optimizationDataArray0);
      double double0 = brentOptimizer0.getMax();
      assertEquals(1565.0, brentOptimizer0.getStartValue(), 0.01);
      assertEquals(1565.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      GoalType goalType0 = GoalType.MINIMIZE;
      optimizationDataArray0[0] = (OptimizationData) goalType0;
      brentOptimizer0.parseOptimizationData(optimizationDataArray0);
      GoalType goalType1 = brentOptimizer0.getGoalType();
      assertSame(goalType1, goalType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      // Undeclared exception!
      try { 
        brentOptimizer0.parseOptimizationData((OptimizationData[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      Well44497a well44497a0 = new Well44497a(0);
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(brentOptimizer0, 1, well44497a0);
      // Undeclared exception!
      try { 
        multiStartUnivariateOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2685.6, 10.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      MaxEval maxEval0 = new MaxEval(2080);
      optimizationDataArray0[5] = (OptimizationData) maxEval0;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.univariate.UnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2685.6, 2685.6);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[5] = (OptimizationData) maxEval0;
      brentOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        brentOptimizer0.computeObjectiveValue(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.univariate.UnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      double double0 = brentOptimizer0.getMax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      Well44497a well44497a0 = new Well44497a(0);
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(brentOptimizer0, 1, well44497a0);
      multiStartUnivariateOptimizer0.getGoalType();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      double double0 = brentOptimizer0.getMin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(10.0, 10.0);
      double double0 = brentOptimizer0.getStartValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2685.6, 2685.6);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      GoalType goalType0 = GoalType.MINIMIZE;
      optimizationDataArray0[1] = (OptimizationData) goalType0;
      try { 
        brentOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1742.783772402453, 1589.408);
      // Undeclared exception!
      try { 
        brentOptimizer0.computeObjectiveValue(1742.783772402453);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }
}
