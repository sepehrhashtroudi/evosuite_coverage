/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:38:57 GMT 2022
 */

package org.apache.commons.math3.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.optim.SimpleVectorValueChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractOptimizer_ESTest extends AbstractOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = LevenbergMarquardtOptimizer.create();
      levenbergMarquardtOptimizer0.withMaxIterations(0);
      int int0 = levenbergMarquardtOptimizer0.getMaxIterations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = LevenbergMarquardtOptimizer.create();
      levenbergMarquardtOptimizer0.withMaxEvaluations(0);
      int int0 = levenbergMarquardtOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = GaussNewtonOptimizer.create();
      // Undeclared exception!
      try { 
        gaussNewtonOptimizer0.optimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = GaussNewtonOptimizer.create();
      int int0 = gaussNewtonOptimizer0.getMaxIterations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = GaussNewtonOptimizer.create();
      int int0 = gaussNewtonOptimizer0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = GaussNewtonOptimizer.create();
      int int0 = gaussNewtonOptimizer0.getIterations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = LevenbergMarquardtOptimizer.create();
      double[] doubleArray0 = new double[6];
      levenbergMarquardtOptimizer0.withStartPoint(doubleArray0);
      levenbergMarquardtOptimizer0.withTarget(doubleArray0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = GaussNewtonOptimizer.create();
      GaussNewtonOptimizer gaussNewtonOptimizer1 = gaussNewtonOptimizer0.shallowCopy();
      assertNotSame(gaussNewtonOptimizer0, gaussNewtonOptimizer1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = LevenbergMarquardtOptimizer.create();
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0);
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = levenbergMarquardtOptimizer0.withConvergenceChecker(simpleVectorValueChecker0);
      assertEquals(1.0E-10, levenbergMarquardtOptimizer1.getCostRelativeTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = LevenbergMarquardtOptimizer.create();
      int int0 = levenbergMarquardtOptimizer0.getEvaluations();
      assertEquals(0, int0);
  }
}
