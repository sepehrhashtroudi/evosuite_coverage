/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:43:39 GMT 2022
 */

package org.apache.commons.math3.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleVectorValueChecker;
import org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer;
import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
import org.apache.commons.math3.random.NormalizedRandomGenerator;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseMultiStartMultivariateOptimizer_ESTest extends BaseMultiStartMultivariateOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateVectorOptimizer0).getConvergenceChecker();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1);
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1, unitSphereRandomVectorGenerator0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(845);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      double[] doubleArray0 = new double[0];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 845 != 0
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateVectorOptimizer0).getConvergenceChecker();
      doReturn(0, 0, 0, 0, 0).when(multivariateVectorOptimizer0).getEvaluations();
      doReturn((double[]) null).when(multivariateVectorOptimizer0).getTarget();
      doReturn((PointVectorValuePair) null).when(multivariateVectorOptimizer0).optimize(any(org.apache.commons.math3.optim.OptimizationData[].class));
      double[] doubleArray0 = new double[7];
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, (NormalizedRandomGenerator) null);
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1144, uncorrelatedRandomVectorGenerator0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[3] = (OptimizationData) maxEval0;
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplePointChecker<PointVectorValuePair> simplePointChecker0 = new SimplePointChecker<PointVectorValuePair>(2233.7272065, 2233.7272065, 61);
      double[] doubleArray0 = new double[1];
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(simplePointChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(61);
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 61, unitSphereRandomVectorGenerator0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimplePointChecker<PointVectorValuePair> simplePointChecker0 = new SimplePointChecker<PointVectorValuePair>(2233.7272065, 2233.7272065, 61);
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(simplePointChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(61);
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 61, unitSphereRandomVectorGenerator0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[2] = (OptimizationData) maxEval0;
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 1.0, 258);
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(simpleVectorValueChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      int[] intArray0 = new int[5];
      Well1024a well1024a0 = new Well1024a(intArray0);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1451, well1024a0);
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = null;
      try {
        multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, (-29), unitSphereRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -29 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }
}
