/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:11:43 GMT 2022
 */

package org.apache.commons.math3.optim.nonlinear.vector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer;
import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiStartMultivariateVectorOptimizer_ESTest extends MultiStartMultivariateVectorOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      doReturn(doubleArray0).when(multivariateVectorOptimizer0).getTarget();
      doReturn((RealMatrix) null).when(multivariateVectorOptimizer0).getWeight();
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1651, (RandomVectorGenerator) null);
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0, false);
      multiStartMultivariateVectorOptimizer0.store(pointVectorValuePair0);
      PointVectorValuePair[] pointVectorValuePairArray0 = multiStartMultivariateVectorOptimizer0.getOptima();
      assertEquals(1, pointVectorValuePairArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      doReturn(doubleArray0).when(multivariateVectorOptimizer0).getTarget();
      doReturn((RealMatrix) null).when(multivariateVectorOptimizer0).getWeight();
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1536, (RandomVectorGenerator) null);
      double[] doubleArray1 = new double[6];
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray1, doubleArray1, true);
      multiStartMultivariateVectorOptimizer0.store(pointVectorValuePair0);
      multiStartMultivariateVectorOptimizer0.store(pointVectorValuePair0);
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.getOptima();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      doReturn((Object) doubleArray0, (Object) null).when(multivariateVectorOptimizer0).getTarget();
      doReturn((RealMatrix) null).when(multivariateVectorOptimizer0).getWeight();
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1536, (RandomVectorGenerator) null);
      multiStartMultivariateVectorOptimizer0.getOptima();
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.getOptima();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateVectorOptimizer0).getConvergenceChecker();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(19937);
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = null;
      try {
        multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 0, unitSphereRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = null;
      try {
        multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer((MultivariateVectorOptimizer) null, 5826, (RandomVectorGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1536, (RandomVectorGenerator) null);
      multiStartMultivariateVectorOptimizer0.clear();
      assertEquals(0, multiStartMultivariateVectorOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      MultivariateVectorOptimizer multivariateVectorOptimizer0 = mock(MultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateVectorOptimizer0).getConvergenceChecker();
      doReturn(doubleArray0).when(multivariateVectorOptimizer0).getTarget();
      doReturn((RealMatrix) null).when(multivariateVectorOptimizer0).getWeight();
      MultiStartMultivariateVectorOptimizer multiStartMultivariateVectorOptimizer0 = new MultiStartMultivariateVectorOptimizer(multivariateVectorOptimizer0, 1536, (RandomVectorGenerator) null);
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0, true);
      multiStartMultivariateVectorOptimizer0.store(pointVectorValuePair0);
      multiStartMultivariateVectorOptimizer0.store(pointVectorValuePair0);
      // Undeclared exception!
      try { 
        multiStartMultivariateVectorOptimizer0.getOptima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer$1", e);
      }
  }
}
