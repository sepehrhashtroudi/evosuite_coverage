/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:23:54 GMT 2022
 */

package org.apache.commons.math3.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultivariateFunctionPenaltyAdapter_ESTest extends MultivariateFunctionPenaltyAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 1020.59623;
      doubleArray0[5] = (-3820.789403906);
      double[] doubleArray1 = new double[7];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, (-3820.789403906), doubleArray1);
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertEquals((-3820.789403906), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2312.0;
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, 1591.50809, doubleArray0);
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        multivariateFunctionPenaltyAdapter0.value(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, 1591.50809, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (-1.0);
      // Undeclared exception!
      try { 
        multivariateFunctionPenaltyAdapter0.value(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 1020.59623;
      doubleArray0[3] = 9.223372036854776E18;
      double[] doubleArray1 = new double[7];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, (-3820.789403906), doubleArray1);
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertEquals((-3820.789403906), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = null;
      try {
        multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, (double[]) null, (double[]) null, 3600.39822786, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 9.223372036854776E18;
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, (-3820.789403906), doubleArray1);
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertEquals(9.2233720368547717E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 1020.59623;
      double[] doubleArray1 = new double[7];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, 0.0, doubleArray1);
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, (-3820.789403906), doubleArray0);
      // Undeclared exception!
      try { 
        multivariateFunctionPenaltyAdapter0.value(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[2] = 597.3505920197;
      double[] doubleArray1 = new double[10];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = null;
      try {
        multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray1, 813.25594, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (597.351)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[13];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = null;
      try {
        multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[14];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = null;
      try {
        multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray1, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 14
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }
}
