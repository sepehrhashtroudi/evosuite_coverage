/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:21:49 GMT 2022
 */

package org.apache.commons.math3.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.differentiation.GradientFunction;
import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeastSquaresConverter_ESTest extends LeastSquaresConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      double[] doubleArray0 = new double[2];
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      double[] doubleArray0 = new double[2];
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, (RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GradientFunction gradientFunction0 = new GradientFunction((MultivariateDifferentiableFunction) null);
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(multivariateDifferentiableFunction0).value(any(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class));
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0);
      double double0 = leastSquaresConverter0.value(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(multivariateDifferentiableFunction0).value(any(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class));
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray1);
      // Undeclared exception!
      try { 
        leastSquaresConverter0.value(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(multivariateDifferentiableFunction0).value(any(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class));
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, diagonalMatrix0);
      double double0 = leastSquaresConverter0.value(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray1);
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, diagonalMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GradientFunction gradientFunction0 = new GradientFunction((MultivariateDifferentiableFunction) null);
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultivariateDifferentiableFunction multivariateDifferentiableFunction0 = mock(MultivariateDifferentiableFunction.class, new ViolatedAssumptionAnswer());
      GradientFunction gradientFunction0 = new GradientFunction(multivariateDifferentiableFunction0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[3];
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(gradientFunction0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }
}
