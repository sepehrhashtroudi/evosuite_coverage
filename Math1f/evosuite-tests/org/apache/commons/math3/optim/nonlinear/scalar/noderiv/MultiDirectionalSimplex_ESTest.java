/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:29:43 GMT 2022
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiDirectionalSimplex_ESTest extends MultiDirectionalSimplex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 4428L, 4428L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // equal vertices 1 and 0 in simplex configuration
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-2.0), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[][]) null, 0.0, 819.54389484114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[22][0];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 21
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 0.5, 0.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // equal vertices 0 and {1} in simplex configuration
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[]) null, 0.5, 0.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // equal vertices 0 and {1} in simplex configuration
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(179, 179, 2838.854513, 2.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0, 0.0, 2.220446049250313E-16, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-2287), (-2287), (-1396.59360063), 9.223372036854776E18);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1109, 0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(155, 3312.61955426);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(277);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-2135));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
      assertEquals(0, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-1540), (-1540));
      assertEquals(0, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1, 1);
      assertEquals(1, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-570.217397604);
      doubleArray0[1] = 2725.53533969783;
      doubleArray0[2] = (-164.41889227);
      doubleArray0[3] = (-1634.66876);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 0.0, (-570.217397604));
      assertEquals(4, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1, 1, 1, 1);
      assertEquals(1, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1, 1, 2.0);
      assertEquals(1, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // simplex must contain at least one point
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-3), (-3), (-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 540.3;
      doubleArray0[1] = (-348.48140318742);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
      assertEquals(2, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1);
      Comparator<PointValuePair> comparator0 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectionalSimplex0.iterate((MultivariateFunction) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-32768), (-186.9298007347576));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-2524.95947349), Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // simplex must contain at least one point
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }
}
