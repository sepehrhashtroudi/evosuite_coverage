/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:37:18 GMT 2022
 */

package org.apache.commons.math3.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractConvergenceChecker_ESTest extends AbstractConvergenceChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0);
      double double0 = simpleValueChecker0.getRelativeThreshold();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2513.7286032, 996.2323984517, 2401);
      double double0 = simplePointChecker0.getRelativeThreshold();
      assertEquals(2513.7286032, double0, 0.01);
      assertEquals(996.2323984517, simplePointChecker0.getAbsoluteThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0, 117);
      double double0 = simpleValueChecker0.getAbsoluteThreshold();
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-926.3216), (-890.1623787229007));
      double double0 = simpleValueChecker0.getAbsoluteThreshold();
      assertEquals((-890.1623787229007), double0, 0.01);
      assertEquals((-926.3216), simpleValueChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2513.7286032, 996.2323984517, 2401);
      double[] doubleArray0 = new double[0];
      PointValuePair pointValuePair0 = new PointValuePair(doubleArray0, (-150.00571752527));
      simplePointChecker0.converged(1806, pointValuePair0, pointValuePair0);
      assertEquals(996.2323984517, simplePointChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(2513.7286032, simplePointChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 1.0);
      double[] doubleArray0 = new double[0];
      PointValuePair pointValuePair0 = new PointValuePair(doubleArray0, 0.0);
      PointValuePair pointValuePair1 = new PointValuePair(doubleArray0, (-2573.9206757424), false);
      boolean boolean0 = simpleValueChecker0.converged(0, pointValuePair0, pointValuePair1);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals(1.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-901.02), 1.0);
      PointValuePair pointValuePair0 = new PointValuePair((double[]) null, 0.0);
      // Undeclared exception!
      try { 
        simplePointChecker0.converged((-393), pointValuePair0, pointValuePair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointValuePair pointValuePair0 = new PointValuePair(doubleArray0, 0.0, true);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1833.71), 0.0);
      double[] doubleArray1 = new double[9];
      PointValuePair pointValuePair1 = new PointValuePair(doubleArray1, (-1195.6980707), true);
      // Undeclared exception!
      try { 
        simplePointChecker0.converged((-1), pointValuePair1, pointValuePair0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1023.00735580721), 1.0, 1157);
      double double0 = simplePointChecker0.getAbsoluteThreshold();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-1023.00735580721), simplePointChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-4360.124685687), 1.0);
      double double0 = simplePointChecker0.getRelativeThreshold();
      assertEquals(1.0, simplePointChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals((-4360.124685687), double0, 0.01);
  }
}
