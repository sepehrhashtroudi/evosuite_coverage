/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:40:56 GMT 2022
 */

package org.apache.commons.math3.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.optim.SimpleVectorValueChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleVectorValueChecker_ESTest extends SimpleVectorValueChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-3668.1991644), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-3668.1991644);
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0);
      boolean boolean0 = simpleVectorValueChecker0.converged(446, pointVectorValuePair0, pointVectorValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(498.019, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1792;
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0);
      boolean boolean0 = simpleVectorValueChecker0.converged(1792, pointVectorValuePair0, pointVectorValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-3668.1991644), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-3668.1991644);
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      PointVectorValuePair pointVectorValuePair1 = new PointVectorValuePair(doubleArray0, doubleArray1);
      boolean boolean0 = simpleVectorValueChecker0.converged(446, pointVectorValuePair0, pointVectorValuePair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(1925.72779, 1925.72779, 1);
      boolean boolean0 = simpleVectorValueChecker0.converged(617, (PointVectorValuePair) null, (PointVectorValuePair) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-1.0), 0.0);
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      PointVectorValuePair pointVectorValuePair1 = new PointVectorValuePair(doubleArray0, doubleArray1, true);
      // Undeclared exception!
      try { 
        simpleVectorValueChecker0.converged((-1205), pointVectorValuePair1, pointVectorValuePair0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.optim.SimpleVectorValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-2311.897720938648), 3.5348281395856596);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 3.5348281395856596;
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0);
      boolean boolean0 = simpleVectorValueChecker0.converged((-2982), pointVectorValuePair0, pointVectorValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0, 4202);
      double[] doubleArray0 = new double[6];
      PointVectorValuePair pointVectorValuePair0 = new PointVectorValuePair(doubleArray0, doubleArray0, true);
      boolean boolean0 = simpleVectorValueChecker0.converged(0, pointVectorValuePair0, pointVectorValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-2499.059303369626), (-2499.059303369626), 2204);
      // Undeclared exception!
      try { 
        simpleVectorValueChecker0.converged((-1), (PointVectorValuePair) null, (PointVectorValuePair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.SimpleVectorValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = null;
      try {
        simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 2741.213, (-544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -544 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.SimpleVectorValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-2499.059303369626), (-2499.059303369626), 2204);
      boolean boolean0 = simpleVectorValueChecker0.converged(2204, (PointVectorValuePair) null, (PointVectorValuePair) null);
      assertTrue(boolean0);
  }
}
