/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:36:36 GMT 2022
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0, (-1.0), vector2D0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Line line0 = new Line(vector2D1, (-1.0));
      SubLine subLine1 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      ((AbstractRegion)intervalsSet0).setSize(0.0);
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((BSPTree<Euclidean2D>) null);
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(false);
      assertNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-1630.050468127822), vector3D0, 0.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, (-1630.050468127822), vector3D0);
      Plane plane0 = new Plane(vector3D0, vector3D0, vector3D1);
      PolyhedronsSet polyhedronsSet0 = plane0.wholeSpace();
      double double0 = polyhedronsSet0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(215.69061, (-89.3584083582216));
      double double0 = intervalsSet0.getSize();
      assertEquals((-305.0490183582216), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 0.0);
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      ((AbstractRegion)intervalsSet0).setBarycenter(vector0);
      assertFalse(vector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      AbstractRegion<Euclidean1D, Euclidean1D> abstractRegion0 = intervalsSet0.buildNew(bSPTree0);
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      AbstractRegion<Euclidean1D, Euclidean1D> abstractRegion0 = intervalsSet0.applyTransform(transform0);
      assertNotSame(intervalsSet0, abstractRegion0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((BSPTree<Euclidean1D>) null);
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      // Undeclared exception!
      try { 
        intervalsSet0.side(orientedPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(subOrientedPoint0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.side(orientedPoint0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      // Undeclared exception!
      try { 
        polygonsSet0.isEmpty((BSPTree<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((BSPTree<Euclidean1D>) null);
      // Undeclared exception!
      try { 
        intervalsSet0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      // Undeclared exception!
      try { 
        intervalsSet0.intersection((SubHyperplane<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      Vector3D vector3D0 = new Vector3D((-0.1666666567325592), 1.7827257129423813E-8);
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D1 = plane0.toSubSpace(vector3D0);
      vector2DArray0[2] = vector2D1;
      vector2DArray0[3] = vector2DArray0[0];
      vector2DArray0[4] = vector2DArray0[1];
      vector2DArray0[5] = vector2DArray0[1];
      vector2DArray0[6] = vector2DArray0[2];
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      // Undeclared exception!
      try { 
        polygonsSet0.getSize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion$BoundaryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((BSPTree<Euclidean1D>) null);
      // Undeclared exception!
      try { 
        intervalsSet0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(intervalsSet0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet1.getSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-523.53629), (-523.53629));
      // Undeclared exception!
      try { 
        intervalsSet0.getBoundarySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(0.0, (-1.0), (-190.250714431), 9136123.8456228, (-1.0), 1.4142135623730951);
      // Undeclared exception!
      polyhedronsSet0.getBarycenter();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.getBarycenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(euclidean3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.getBarycenter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((BSPTree<Euclidean3D>) null);
      // Undeclared exception!
      try { 
        polyhedronsSet0.copySelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((BSPTree<Euclidean1D>) null);
      // Undeclared exception!
      try { 
        intervalsSet0.contains(intervalsSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(object0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.contains(intervalsSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[5];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      vector2DArray0[2] = vector2DArray0[0];
      vector2DArray0[3] = vector2DArray0[1];
      vector2DArray0[4] = vector2DArray0[3];
      PolygonsSet polygonsSet0 = new PolygonsSet(1.0, vector2DArray0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      try { 
        polygonsSet1.checkPoint(vector2DArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(object0);
      Vector1D vector1D0 = Vector1D.ZERO;
      IntervalsSet intervalsSet0 = new IntervalsSet((-1064.810692181648), 1.986821492305628E-8);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet1.checkPoint(vector1D0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1797.25), (-1797.25));
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertFalse(subHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      Vector3D vector3D0 = new Vector3D((-0.1666666567325592), 1.7827257129423813E-8);
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D1 = plane0.toSubSpace(vector3D0);
      vector2DArray0[2] = vector2D1;
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2DArray0[1];
      vector2DArray0[5] = vector2DArray0[3];
      vector2DArray0[6] = vector2DArray0[0];
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      Line line0 = new Line(vector2D1, 0.0);
      polygonsSet0.side(line0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(1.0, 1.0);
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      intervalsSet0.getBarycenter();
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      assertFalse(vector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      assertNotNull(vector0);
      
      double double0 = intervalsSet0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(839.5557389, 0.0, 0.0, (-1.0));
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertEquals(1, vector2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      PolygonsSet polygonsSet0 = new PolygonsSet((-2052.6548044), vector2DArray0);
      polygonsSet0.getBoundarySize();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      assertNotNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      PolyhedronsSet polyhedronsSet0 = plane0.wholeSpace();
      BSPTree<Euclidean3D> bSPTree0 = polyhedronsSet0.getTree(true);
      assertNotNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        intervalsSet0.getTree(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      // Undeclared exception!
      try { 
        ((AbstractRegion)intervalsSet0).checkPoint(bSPTree0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D((-392.544));
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, object0);
      boolean boolean0 = intervalsSet0.isEmpty(bSPTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(vector3D0);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      // Undeclared exception!
      try { 
        intervalsSet0.isEmpty(bSPTree1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2920.0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-210.0012), (-210.0012));
      boolean boolean0 = intervalsSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 0.0);
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      doReturn((Hyperplane) null).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      // Undeclared exception!
      try { 
        intervalsSet0.applyTransform(transform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(818.3085928335, (-1.0), (-1726.252), 2616.3161729, (-240.82064094352), (-3.9986783938944604E-8));
      Vector3D vector3D0 = new Vector3D(818.3085928335, (-240.82064094352));
      PolyhedronsSet polyhedronsSet1 = polyhedronsSet0.translate(vector3D0);
      assertFalse(polyhedronsSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1797.25), (-1797.25));
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, 0.0, 0.0, 0.0);
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertNotNull(subHyperplane0);
      assertNotSame(subLine0, subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1797.24902), (-1797.24902));
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D2 = new Vector2D((-1.0), vector2D0, (-1797.24902), vector2D0, (-1.0), vector2D0, 0.0, vector2D1);
      SubLine subLine0 = new SubLine(vector2D2, vector2D0);
      Line line0 = new Line(vector2D1, 1.0);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      Vector3D vector3D0 = new Vector3D((-0.1666666567325592), 1.7827257129423813E-8);
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D1 = plane0.toSubSpace(vector3D0);
      vector2DArray0[2] = vector2D1;
      vector2DArray0[3] = vector2D1;
      vector2DArray0[4] = vector2D1;
      vector2DArray0[5] = vector2DArray0[4];
      vector2DArray0[6] = vector2D0;
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      Line line0 = new Line(vector2D1, 0.0);
      polygonsSet0.side(line0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[9];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2D0;
      vector2DArray0[5] = vector2DArray0[4];
      vector2DArray0[6] = vector2DArray0[4];
      vector2DArray0[7] = vector2DArray0[1];
      vector2DArray0[8] = vector2D0;
      PolygonsSet polygonsSet0 = new PolygonsSet((-256.4445625), vector2DArray0);
      Line line0 = new Line(vector2D0, vector2DArray0[2]);
      polygonsSet0.side(line0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(Double.POSITIVE_INFINITY, vector2D0, 0.0, vector2D0);
      vector2DArray0[0] = vector2D1;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D1;
      Vector2D vector2D2 = Vector2D.NEGATIVE_INFINITY;
      vector2DArray0[3] = vector2D2;
      vector2DArray0[4] = vector2D0;
      vector2DArray0[5] = vector2D0;
      vector2DArray0[6] = vector2DArray0[5];
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      Line line0 = new Line(vector2D0, 0.0);
      polygonsSet0.side(line0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[3];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[2] = vector2D1;
      PolygonsSet polygonsSet0 = new PolygonsSet(2260.72, vector2DArray0);
      Line line0 = new Line(vector2DArray0[0], 15.90911935832894);
      polygonsSet0.side(line0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      Vector2D vector2D1 = Vector2D.NEGATIVE_INFINITY;
      vector2DArray0[3] = vector2D1;
      vector2DArray0[4] = vector2D0;
      vector2DArray0[5] = vector2DArray0[1];
      vector2DArray0[6] = vector2D0;
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      Line line0 = new Line(vector2DArray0[0], 0.0);
      polygonsSet0.side(line0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      Vector3D vector3D0 = new Vector3D((-0.1666666567325592), 1.7827257129423813E-8);
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D1 = plane0.toSubSpace(vector3D0);
      vector2DArray0[2] = vector2D1;
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2D0;
      vector2DArray0[5] = vector2D1;
      vector2DArray0[6] = vector2DArray0[4];
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      // Undeclared exception!
      try { 
        polygonsSet0.getVertices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion$BoundaryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0, (-1.0), vector2D0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Line line0 = new Line(vector2D1, (-1.0));
      SubLine subLine1 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      SubLine subLine2 = new SubLine(vector2D0, vector2D0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine2);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertFalse(polygonsSet0.isEmpty());
      assertEquals(1, vector2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Line line1 = new Line(vector2D0, (-1.0));
      SubLine subLine1 = line1.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      // Undeclared exception!
      try { 
        polygonsSet0.getVertices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-0.1666666567325592), vector2D0, 1403.5283200392, vector2D0, 1230.832303579809, vector2D0, 1230.832303579809, vector2D0);
      vector2DArray0[0] = vector2D1;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2DArray0[1];
      Vector2D vector2D2 = Vector2D.ZERO;
      vector2DArray0[3] = vector2D2;
      vector2DArray0[4] = vector2DArray0[3];
      vector2DArray0[5] = vector2DArray0[0];
      vector2DArray0[6] = vector2DArray0[3];
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.1666666567325592), vector2DArray0);
      Vector2D[][] vector2DArray1 = polygonsSet0.getVertices();
      assertEquals(0, vector2DArray1.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet();
      PolyhedronsSet polyhedronsSet1 = new PolyhedronsSet(0.9921976327896118, (-0.538633), (-2212.4855498), 0.9921976327896118, (-2212.4855498), 1896.692105345799);
      boolean boolean0 = polyhedronsSet1.contains(polyhedronsSet0);
      assertFalse(polyhedronsSet1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Line line1 = new Line(vector2D0, (-1.0));
      SubLine subLine1 = line1.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0, (-1.0), vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      SubLine subLine1 = new SubLine(vector2D1, vector2D1);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      SubLine subLine1 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-411.0), 0.0, (-1378.339), 0.0, 0.22253002997628385, 477.8956);
      // Undeclared exception!
      polyhedronsSet0.getSize();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.copySelf();
      assertNotSame(polygonsSet0, abstractRegion0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-367.956), (-89.3584083582216), (-89.3584083582216), 2860.0, (-367.956), 550.683652706);
      boolean boolean0 = polyhedronsSet0.contains(polyhedronsSet0);
      assertTrue(boolean0);
      assertFalse(polyhedronsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      double double0 = intervalsSet0.getBoundarySize();
      assertEquals(0.0, double0, 0.01);
  }
}
