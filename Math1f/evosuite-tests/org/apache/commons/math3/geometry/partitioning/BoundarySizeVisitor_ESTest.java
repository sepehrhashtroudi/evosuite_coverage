/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:26:41 GMT 2022
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoundarySizeVisitor_ESTest extends BoundarySizeVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-927.2292385817591), (-927.2292385817591), (-927.2292385817591), (-927.2292385817591));
      polygonsSet0.getBoundarySize();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(false);
      BoundarySizeVisitor<Euclidean2D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean2D>();
      boundarySizeVisitor0.visitInternalNode(bSPTree0);
      double double0 = boundarySizeVisitor0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoundarySizeVisitor<Euclidean2D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean2D>();
      // Undeclared exception!
      try { 
        boundarySizeVisitor0.visitInternalNode((BSPTree<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(object0);
      // Undeclared exception!
      try { 
        boundarySizeVisitor0.visitInternalNode(bSPTree0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.math3.geometry.partitioning.BoundaryAttribute
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BoundarySizeVisitor<Euclidean3D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean3D>();
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      boundarySizeVisitor0.visitOrder(bSPTree0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      boundarySizeVisitor0.visitLeafNode(bSPTree0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BoundarySizeVisitor<Euclidean2D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean2D>();
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      BoundaryAttribute<Euclidean2D> boundaryAttribute0 = new BoundaryAttribute<Euclidean2D>(subLine0, subLine0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(boundaryAttribute0);
      boundarySizeVisitor0.visitInternalNode(bSPTree0);
      assertEquals(Double.NaN, boundarySizeVisitor0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(true);
      BoundaryAttribute<Euclidean1D> boundaryAttribute0 = new BoundaryAttribute<Euclidean1D>((SubHyperplane<Euclidean1D>) null, (SubHyperplane<Euclidean1D>) null);
      bSPTree0.setAttribute(boundaryAttribute0);
      boundarySizeVisitor0.visitInternalNode(bSPTree0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      double double0 = boundarySizeVisitor0.getSize();
      assertEquals(0.0, double0, 0.01);
  }
}
