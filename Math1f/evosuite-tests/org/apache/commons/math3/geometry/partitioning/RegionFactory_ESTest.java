/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:30:32 GMT 2022
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.RegionFactory;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegionFactory_ESTest extends RegionFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      Region<Euclidean1D> region0 = regionFactory0.getComplement(intervalsSet0);
      Region<Euclidean1D> region1 = regionFactory0.difference(region0, intervalsSet0);
      assertTrue(region1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Region<Euclidean1D> region0 = regionFactory0.union(intervalsSet0, intervalsSet0);
      Region<Euclidean1D> region1 = regionFactory0.intersection(region0, intervalsSet0);
      assertNotSame(intervalsSet0, region1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      IntervalsSet intervalsSet1 = new IntervalsSet(0.9999, 0.9999);
      Region<Euclidean1D> region0 = regionFactory0.xor(intervalsSet1, intervalsSet0);
      assertFalse(region0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      Region<Euclidean1D> region0 = regionFactory0.getComplement(intervalsSet0);
      Region<Euclidean1D> region1 = regionFactory0.union(region0, region0);
      assertTrue(region1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Region<Euclidean1D> region0 = regionFactory0.getComplement(intervalsSet0);
      Region<Euclidean1D> region1 = regionFactory0.intersection(region0, region0);
      assertTrue(region1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet((-1.0), (-1.0));
      Region<Euclidean1D> region0 = regionFactory0.getComplement(intervalsSet0);
      assertNotSame(intervalsSet0, region0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegionFactory<Euclidean2D> regionFactory0 = new RegionFactory<Euclidean2D>();
      PolygonsSet polygonsSet0 = new PolygonsSet((BSPTree<Euclidean2D>) null);
      // Undeclared exception!
      try { 
        regionFactory0.xor(polygonsSet0, polygonsSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegionFactory<Euclidean2D> regionFactory0 = new RegionFactory<Euclidean2D>();
      Vector2D vector2D0 = new Vector2D((-0.9999999999), (-0.9999999999));
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector2D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      // Undeclared exception!
      try { 
        regionFactory0.xor(polygonsSet0, polygonsSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.Vector2D cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      // Undeclared exception!
      try { 
        regionFactory0.union((Region<Euclidean1D>) null, (Region<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      RegionFactory<Euclidean3D> regionFactory0 = new RegionFactory<Euclidean3D>();
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>(intervalsSet0);
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(bSPTree0);
      // Undeclared exception!
      try { 
        regionFactory0.union(polyhedronsSet0, polyhedronsSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegionFactory<Euclidean3D> regionFactory0 = new RegionFactory<Euclidean3D>();
      // Undeclared exception!
      try { 
        regionFactory0.intersection((Region<Euclidean3D>) null, (Region<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(3332.7311134, 0.0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(regionFactory0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      try { 
        regionFactory0.intersection(intervalsSet1, intervalsSet1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.partitioning.RegionFactory cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(1.0, 0.0);
      Region<Euclidean1D> region0 = regionFactory0.union(intervalsSet0, intervalsSet0);
      // Undeclared exception!
      try { 
        regionFactory0.getComplement(region0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(euclidean2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        regionFactory0.getComplement(intervalsSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      // Undeclared exception!
      try { 
        regionFactory0.difference((Region<Euclidean1D>) null, (Region<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegionFactory<Euclidean3D> regionFactory0 = new RegionFactory<Euclidean3D>();
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      PolyhedronsSet polyhedronsSet0 = plane0.wholeSpace();
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      bSPTree0.setAttribute(bSPTree0);
      PolyhedronsSet polyhedronsSet1 = new PolyhedronsSet(bSPTree0);
      // Undeclared exception!
      try { 
        regionFactory0.difference(polyhedronsSet0, polyhedronsSet1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.partitioning.BSPTree cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 390.9350352163021);
      IntervalsSet intervalsSet1 = new IntervalsSet(390.9350352163021, 0.0);
      // Undeclared exception!
      try { 
        intervalsSet0.contains(intervalsSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegionFactory<Euclidean2D> regionFactory0 = new RegionFactory<Euclidean2D>();
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = Vector2D.NaN;
      vector2DArray0[0] = vector2D0;
      PolygonsSet polygonsSet0 = new PolygonsSet(Double.NEGATIVE_INFINITY, vector2DArray0);
      Line line0 = new Line(vector2D0, vector2D0);
      PolygonsSet polygonsSet1 = line0.wholeSpace();
      Region<Euclidean2D> region0 = regionFactory0.difference(polygonsSet0, polygonsSet1);
      assertTrue(region0.isEmpty());
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 390.9350352163021);
      Region<Euclidean1D> region0 = regionFactory0.intersection(intervalsSet0, intervalsSet0);
      assertFalse(region0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegionFactory<Euclidean2D> regionFactory0 = new RegionFactory<Euclidean2D>();
      Hyperplane<Euclidean2D>[] hyperplaneArray0 = (Hyperplane<Euclidean2D>[]) Array.newInstance(Hyperplane.class, 5);
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 390.9350352163021);
      hyperplaneArray0[0] = (Hyperplane<Euclidean2D>) line0;
      hyperplaneArray0[1] = (Hyperplane<Euclidean2D>) line0;
      hyperplaneArray0[2] = (Hyperplane<Euclidean2D>) line0;
      hyperplaneArray0[3] = (Hyperplane<Euclidean2D>) line0;
      hyperplaneArray0[4] = (Hyperplane<Euclidean2D>) line0;
      Region<Euclidean2D> region0 = regionFactory0.buildConvex(hyperplaneArray0);
      assertFalse(region0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegionFactory<Euclidean2D> regionFactory0 = new RegionFactory<Euclidean2D>();
      Hyperplane<Euclidean2D>[] hyperplaneArray0 = (Hyperplane<Euclidean2D>[]) Array.newInstance(Hyperplane.class, 5);
      // Undeclared exception!
      try { 
        regionFactory0.buildConvex(hyperplaneArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.RegionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      Hyperplane<Euclidean1D>[] hyperplaneArray0 = (Hyperplane<Euclidean1D>[]) Array.newInstance(Hyperplane.class, 0);
      Region<Euclidean1D> region0 = regionFactory0.buildConvex(hyperplaneArray0);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      Region<Euclidean1D> region0 = regionFactory0.buildConvex((Hyperplane<Euclidean1D>[]) null);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegionFactory<Euclidean2D> regionFactory0 = new RegionFactory<Euclidean2D>();
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = Vector2D.NaN;
      vector2DArray0[0] = vector2D0;
      PolygonsSet polygonsSet0 = new PolygonsSet(Double.NEGATIVE_INFINITY, vector2DArray0);
      Region<Euclidean2D> region0 = regionFactory0.difference(polygonsSet0, polygonsSet0);
      assertFalse(region0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Region<Euclidean1D> region0 = regionFactory0.getComplement(intervalsSet0);
      Region<Euclidean1D> region1 = regionFactory0.union(region0, intervalsSet0);
      assertFalse(region1.isEmpty());
      assertTrue(region0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegionFactory<Euclidean1D> regionFactory0 = new RegionFactory<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 390.9350352163021);
      Region<Euclidean1D> region0 = regionFactory0.xor(intervalsSet0, intervalsSet0);
      assertTrue(region0.isEmpty());
  }
}
