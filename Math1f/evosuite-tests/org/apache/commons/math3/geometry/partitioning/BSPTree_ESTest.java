/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:29:05 GMT 2022
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BSPTree_ESTest extends BSPTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree<Euclidean1D>) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.merge((BSPTree<Euclidean1D>) null, bSPTree_LeafMerger0);
      assertNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      assertNotNull(vector1D0);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertTrue(vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      assertNotNull(orientedPoint0);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertTrue(vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      assertNotNull(intervalsSet0);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertTrue(vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      assertNotNull(subOrientedPoint0);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertTrue(vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      assertNotNull(bSPTree1);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertTrue(vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getPlus();
      assertNotNull(bSPTree2);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertTrue(vector1D0.isNaN());
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Euclidean1D euclidean1D0 = Euclidean1D.getInstance();
      assertNotNull(euclidean1D0);
      assertEquals(1, euclidean1D0.getDimension());
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(euclidean1D0);
      assertNotNull(bSPTree0);
      assertEquals(1, euclidean1D0.getDimension());
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split((SubHyperplane<Euclidean1D>) null);
      assertNotNull(bSPTree1);
      assertEquals(1, euclidean1D0.getDimension());
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getMinus();
      assertNotNull(bSPTree2);
      assertEquals(1, euclidean1D0.getDimension());
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      
      BSPTree<Euclidean1D> bSPTree3 = bSPTree2.getParent();
      assertNotNull(bSPTree3);
      assertEquals(1, euclidean1D0.getDimension());
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree3);
      assertNotSame(bSPTree0, bSPTree2);
      assertSame(bSPTree1, bSPTree3);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree2, bSPTree3);
      assertSame(bSPTree3, bSPTree1);
      assertNotSame(bSPTree3, bSPTree0);
      assertNotSame(bSPTree3, bSPTree2);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree0.equals((Object)bSPTree2));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree1.equals((Object)bSPTree2));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree3.equals((Object)bSPTree0));
      assertFalse(bSPTree3.equals((Object)bSPTree2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      bSPTree0.insertInTree(bSPTree0, false);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getMinus();
      assertNotNull(bSPTree1);
      assertSame(bSPTree0, bSPTree1);
      assertSame(bSPTree1, bSPTree0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      
      Plane plane0 = new Plane(vector3D0, vector3D0);
      assertNotNull(plane0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      
      SubPlane subPlane0 = plane0.wholeHyperplane();
      assertNotNull(subPlane0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertFalse(subPlane0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>(object0);
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(subPlane0, bSPTree0, bSPTree0, "org.apache.commons.math3.geometry.partitioning.BSPTree$1");
      assertNotNull(bSPTree1);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertFalse(subPlane0.isEmpty());
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      
      SubHyperplane<Euclidean3D> subHyperplane0 = bSPTree1.getCut();
      assertNotNull(subHyperplane0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertFalse(subPlane0.isEmpty());
      assertFalse(subHyperplane0.isEmpty());
      assertSame(subPlane0, subHyperplane0);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      bSPTree0.setAttribute("p~DWt2BXgS6o");
      Object object0 = bSPTree0.getAttribute();
      assertNotNull(object0);
      assertEquals("p~DWt2BXgS6o", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      assertNotNull(euclidean3D0);
      assertEquals(3, euclidean3D0.getDimension());
      
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      assertNotNull(euclidean2D0);
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      
      Euclidean1D euclidean1D0 = euclidean2D0.getSubSpace();
      assertNotNull(euclidean1D0);
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertEquals(1, euclidean1D0.getDimension());
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(euclidean1D0);
      assertNotNull(bSPTree0);
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertEquals(1, euclidean1D0.getDimension());
      
      Vector2D vector2D0 = Vector2D.ZERO;
      assertNotNull(vector2D0);
      assertFalse(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertNotNull(line0);
      assertFalse(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      
      boolean boolean0 = bSPTree0.insertCut(line0);
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertEquals(1, euclidean1D0.getDimension());
      assertFalse(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertTrue(boolean0);
      
      BoundarySizeVisitor<Euclidean2D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean2D>();
      assertNotNull(boundarySizeVisitor0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
      
      // Undeclared exception!
      try { 
        bSPTree0.visit(boundarySizeVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D cannot be cast to org.apache.commons.math3.geometry.partitioning.BoundaryAttribute
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(bSPTree0);
      assertNotNull(bSPTree1);
      
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      
      Plane plane0 = new Plane(vector3D0, vector3D0);
      assertNotNull(plane0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      
      boolean boolean0 = bSPTree1.insertCut(plane0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        bSPTree1.split((SubHyperplane<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      // Undeclared exception!
      try { 
        bSPTree0.merge((BSPTree<Euclidean1D>) null, (BSPTree.LeafMerger<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      assertNotNull(vector1D0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      assertNotNull(orientedPoint0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      assertNotNull(intervalsSet0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      assertNotNull(bSPTree0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      assertNotNull(subOrientedPoint0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      assertNotNull(bSPTree1);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getCell(vector1D0);
      assertNotNull(bSPTree2);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertSame(bSPTree1, bSPTree2);
      assertSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      
      // Undeclared exception!
      try { 
        bSPTree2.insertInTree(bSPTree0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>((Object) null);
      assertNotNull(bSPTree1);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree1);
      assertNotNull(polygonsSet0);
      
      SubPlane subPlane0 = new SubPlane((Hyperplane<Euclidean3D>) null, polygonsSet0);
      assertNotNull(subPlane0);
      
      BSPTree<Euclidean3D> bSPTree2 = bSPTree0.split(subPlane0);
      assertNotNull(bSPTree2);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree2, bSPTree0);
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      
      // Undeclared exception!
      try { 
        bSPTree2.getCell((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertNotNull(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertFalse(vector2D0.isNaN());
      
      Line line0 = new Line(vector2D0, (-179.03700266));
      assertNotNull(line0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      assertNotNull(intervalsSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(intervalsSet0.isEmpty());
      
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      assertNotNull(subLine0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subLine0.isEmpty());
      
      BSPTree<Euclidean2D> bSPTree0 = null;
      try {
        bSPTree0 = new BSPTree<Euclidean2D>(subLine0, (BSPTree<Euclidean2D>) null, (BSPTree<Euclidean2D>) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      bSPTree0.insertInTree(bSPTree0, true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      assertNotNull(vector1D0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      assertNotNull(orientedPoint0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertTrue(orientedPoint0.isDirect());
      
      IntervalsSet intervalsSet0 = new IntervalsSet((-3923.695), (-1.0));
      assertNotNull(intervalsSet0);
      assertFalse(intervalsSet0.isEmpty());
      
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      assertNotNull(subOrientedPoint0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertTrue(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane0 = subOrientedPoint0.reunite(subOrientedPoint0);
      assertNotNull(abstractSubHyperplane0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertTrue(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(abstractSubHyperplane0.isEmpty());
      assertNotSame(subOrientedPoint0, abstractSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(bSPTree0);
      assertNotNull(bSPTree1);
      
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      
      Plane plane0 = new Plane(vector3D0, vector3D0);
      assertNotNull(plane0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      
      boolean boolean0 = bSPTree1.insertCut(plane0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertFalse(vector3D0.isInfinite());
      assertFalse(vector3D0.isNaN());
      assertTrue(boolean0);
      
      Vector3D vector3D1 = Vector3D.MINUS_I;
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      BSPTree<Euclidean3D> bSPTree2 = bSPTree1.getCell(vector3D1);
      assertNotNull(bSPTree2);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertFalse(vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(bSPTree2, bSPTree1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      Vector1D vector1D0 = new Vector1D(86.984114221);
      assertNotNull(vector1D0);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(86.984114221, vector1D0.getX(), 0.01);
      assertEquals(7566.236126811974, vector1D0.getNormSq(), 0.01);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getCell(vector1D0);
      assertNotNull(bSPTree1);
      assertFalse(vector1D0.isInfinite());
      assertFalse(vector1D0.isNaN());
      assertEquals(86.984114221, vector1D0.getX(), 0.01);
      assertEquals(7566.236126811974, vector1D0.getNormSq(), 0.01);
      assertSame(bSPTree0, bSPTree1);
      assertSame(bSPTree1, bSPTree0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      assertNotNull(intervalsSet0);
      assertFalse(intervalsSet0.isEmpty());
      
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(true);
      assertNotNull(bSPTree0);
      assertFalse(intervalsSet0.isEmpty());
      
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      assertNotNull(vector1D0);
      assertTrue(vector1D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getNormSq(), 0.01);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      assertNotNull(orientedPoint0);
      assertTrue(vector1D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getNormSq(), 0.01);
      assertTrue(orientedPoint0.isDirect());
      
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      assertNotNull(subOrientedPoint0);
      assertTrue(vector1D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getNormSq(), 0.01);
      assertTrue(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      assertNotNull(bSPTree1);
      assertFalse(intervalsSet0.isEmpty());
      assertTrue(vector1D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getNormSq(), 0.01);
      assertTrue(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      assertNotNull(boundarySizeVisitor0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
      
      // Undeclared exception!
      try { 
        bSPTree1.visit(boundarySizeVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      assertNotNull(boundarySizeVisitor0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
      
      bSPTree0.visit(boundarySizeVisitor0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      Vector1D vector1D0 = Vector1D.ZERO;
      assertNotNull(vector1D0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      assertNotNull(orientedPoint0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      assertNotNull(subOrientedPoint0);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      assertNotNull(bSPTree1);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.copySelf();
      assertNotNull(bSPTree2);
      assertFalse(vector1D0.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(0.0, vector1D0.getNormSq(), 0.01);
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree2, bSPTree1);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      assertNotNull(bSPTree0);
      
      SubHyperplane<Euclidean3D> subHyperplane0 = bSPTree0.getCut();
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getParent();
      assertNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-3923.695), (-1.0));
      assertNotNull(intervalsSet0);
      assertFalse(intervalsSet0.isEmpty());
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(intervalsSet0);
      assertNotNull(bSPTree0);
      assertFalse(intervalsSet0.isEmpty());
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getPlus();
      assertNull(bSPTree1);
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>(object0);
      assertNotNull(bSPTree0);
      
      bSPTree0.insertInTree((BSPTree<Euclidean3D>) null, true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      assertNotNull(vector1D0);
      assertFalse(vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertTrue(vector1D0.isNaN());
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      assertNotNull(orientedPoint0);
      assertFalse(vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertTrue(vector1D0.isNaN());
      assertTrue(orientedPoint0.isDirect());
      
      IntervalsSet intervalsSet0 = new IntervalsSet((-3923.695), (-1.0));
      assertNotNull(intervalsSet0);
      assertFalse(intervalsSet0.isEmpty());
      
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      assertNotNull(subOrientedPoint0);
      assertFalse(vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertTrue(vector1D0.isNaN());
      assertTrue(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      doReturn(orientedPoint0).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      doReturn(subOrientedPoint0, subOrientedPoint0).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class) , nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class) , nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane0 = subOrientedPoint0.applyTransform(transform0);
      assertNotNull(abstractSubHyperplane0);
      assertFalse(vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertTrue(vector1D0.isNaN());
      assertTrue(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertFalse(abstractSubHyperplane0.isEmpty());
      assertNotSame(subOrientedPoint0, abstractSubHyperplane0);
      
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane1 = subOrientedPoint0.reunite(abstractSubHyperplane0);
      assertNotNull(abstractSubHyperplane1);
      assertFalse(vector1D0.isInfinite());
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
      assertTrue(vector1D0.isNaN());
      assertTrue(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertFalse(abstractSubHyperplane0.isEmpty());
      assertFalse(abstractSubHyperplane1.isEmpty());
      assertNotSame(subOrientedPoint0, abstractSubHyperplane1);
      assertNotSame(subOrientedPoint0, abstractSubHyperplane0);
      assertNotSame(abstractSubHyperplane0, abstractSubHyperplane1);
      assertNotSame(abstractSubHyperplane1, abstractSubHyperplane0);
      assertFalse(subOrientedPoint0.equals((Object)abstractSubHyperplane0));
      assertFalse(abstractSubHyperplane1.equals((Object)abstractSubHyperplane0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = new IntervalsSet((-3923.695), (-1.0));
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      doReturn(orientedPoint0).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      doReturn(subOrientedPoint0, subOrientedPoint0).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class) , nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class) , nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane0 = subOrientedPoint0.applyTransform(transform0);
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane1 = subOrientedPoint0.reunite(abstractSubHyperplane0);
      assertFalse(abstractSubHyperplane1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = new IntervalsSet((-3923.695), (-1.0));
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      doReturn(orientedPoint0).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      doReturn(subOrientedPoint0, subOrientedPoint0).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class) , nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class) , nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane0 = subOrientedPoint0.applyTransform(transform0);
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane1 = subOrientedPoint0.reunite(abstractSubHyperplane0);
      assertFalse(abstractSubHyperplane1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn(bSPTree0, (BSPTree<Euclidean1D>) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.merge(bSPTree1, bSPTree_LeafMerger0);
      assertNotNull(bSPTree2);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0);
      PolygonsSet polygonsSet0 = new PolygonsSet();
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      Object object0 = bSPTree0.getAttribute();
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>((Object) null);
      BSPTree<Euclidean3D> bSPTree2 = new BSPTree<Euclidean3D>(subPlane0, bSPTree1, bSPTree1, object0);
      BSPTree.LeafMerger<Euclidean3D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean3D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn(bSPTree1).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      BSPTree<Euclidean3D> bSPTree3 = bSPTree2.merge(bSPTree1, bSPTree_LeafMerger0);
      assertSame(bSPTree3, bSPTree1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0, vector3D0, vector3D0);
      PolygonsSet polygonsSet0 = new PolygonsSet();
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      Object object0 = new Object();
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>(object0);
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(subPlane0, bSPTree0, bSPTree0, object0);
      BSPTree<Euclidean3D> bSPTree2 = bSPTree1.split(subPlane0);
      assertNotSame(bSPTree2, bSPTree1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.split(subOrientedPoint0);
      bSPTree2.insertInTree(bSPTree1, false);
      assertNotSame(bSPTree0, bSPTree1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getCell(vector1D0);
      assertNotSame(bSPTree2, bSPTree1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0);
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>((Object) null);
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>((SubHyperplane<Euclidean3D>) null, bSPTree0, bSPTree0, (Object) null);
      // Undeclared exception!
      try { 
        bSPTree0.insertCut(plane0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(1.0, 1.0E-10, 1.0, 1.0E-10);
      double double0 = polygonsSet0.getBoundarySize();
      assertEquals(3.9999999996, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(1.0, 1.0E-10, 1.0, 1.0E-10);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>(polygonsSet0);
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(subPlane0, bSPTree0, bSPTree0, euclidean2D0);
      boolean boolean0 = bSPTree1.insertCut(plane0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      bSPTree0.insertInTree(bSPTree1, false);
      boolean boolean0 = bSPTree0.insertCut(orientedPoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getMinus();
      assertNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.copySelf();
      assertNotSame(bSPTree0, bSPTree1);
  }
}
