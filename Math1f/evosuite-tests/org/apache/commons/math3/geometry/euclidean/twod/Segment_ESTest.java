/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:21:22 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0, (-1.0), vector2D0, (-1.0), vector2D0);
      Line line0 = new Line(vector2D1, vector2D1);
      Segment segment0 = new Segment(vector2D1, vector2D0, line0);
      double double0 = segment0.distance(vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      double double0 = segment0.distance(vector2D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2735.9168234);
      Segment segment0 = new Segment((Vector2D) null, (Vector2D) null, line0);
      Vector2D vector2D1 = segment0.getStart();
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Vector2D vector2D1 = segment0.getStart();
      assertSame(vector2D0, vector2D1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0, (-1.0), vector2D0, (-1.0), vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      Segment segment0 = new Segment(vector2D1, vector2D0, line0);
      Vector2D vector2D2 = segment0.getStart();
      assertEquals(18.0, vector2D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Vector2D vector2D1 = segment0.getStart();
      assertFalse(vector2D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), 0.0);
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0);
      Segment segment0 = new Segment(vector2D1, vector2D0, (Line) null);
      Vector2D vector2D2 = segment0.getStart();
      assertEquals(1.0, vector2D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-584.2139760238219));
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Vector2D vector2D1 = segment0.getStart();
      assertSame(vector2D0, vector2D1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(0.0, 0.0);
      Line line0 = new Line(vector2D1, 0.0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Line line1 = segment0.getLine();
      assertSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Line line1 = segment0.getLine();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 178.728652);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Line line1 = segment0.getLine();
      assertSame(line0, line1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 672.5);
      Segment segment0 = new Segment((Vector2D) null, (Vector2D) null, line0);
      Vector2D vector2D1 = segment0.getEnd();
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Vector2D vector2D1 = segment0.getEnd();
      assertSame(vector2D0, vector2D1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Vector2D vector2D1 = segment0.getEnd();
      assertEquals((-1.0), vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Segment segment0 = new Segment(vector2D0, vector2D0, (Line) null);
      Vector2D vector2D1 = segment0.getEnd();
      assertSame(vector2D0, vector2D1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1002.18479);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      Vector2D vector2D1 = segment0.getEnd();
      assertFalse(vector2D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), 0.0);
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0);
      Segment segment0 = new Segment(vector2D1, vector2D0, (Line) null);
      double double0 = segment0.distance(vector2D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment((Vector2D) null, (Vector2D) null, (Line) null);
      // Undeclared exception!
      try { 
        segment0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(23.30772241224908, 23.30772241224908);
      Vector2D vector2D1 = new Vector2D(23.30772241224908, vector2D0);
      Vector2D vector2D2 = Vector2D.NEGATIVE_INFINITY;
      Segment segment0 = new Segment(vector2D1, vector2D0, (Line) null);
      double double0 = segment0.distance(vector2D2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), 0.0);
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0);
      Vector2D vector2D2 = vector2D0.add(836.51168635, (Vector<Euclidean2D>) vector2D1);
      Segment segment0 = new Segment(vector2D1, vector2D0, (Line) null);
      double double0 = segment0.distance(vector2D2);
      assertEquals(834.51168635, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), 0.0);
      Segment segment0 = new Segment(vector2D0, vector2D0, (Line) null);
      Line line0 = segment0.getLine();
      assertNull(line0);
  }
}
