/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:15:59 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SphericalCoordinates_ESTest extends SphericalCoordinates_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[4][3];
      double[][] doubleArray2 = sphericalCoordinates0.toCartesianHessian(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-1.0), (-279.94668199), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-279.94668199);
      double[] doubleArray1 = sphericalCoordinates0.toCartesianGradient(doubleArray0);
      assertEquals((-1.0), sphericalCoordinates0.getPhi(), 0.01);
      assertArrayEquals(new double[] {(-142.3464387751704), 51.14508614133349, 235.5670101878283}, doubleArray1, 0.01);
      assertEquals((-279.94668199), sphericalCoordinates0.getTheta(), 0.01);
      assertEquals((-1.0), sphericalCoordinates0.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-1.0), (-279.94668199), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-279.94668199);
      double[] doubleArray1 = sphericalCoordinates0.toCartesianGradient(doubleArray0);
      assertArrayEquals(new double[] {112.49363438732868, 313.09104056765176, 0.0}, doubleArray1, 0.01);
      assertEquals((-1.0), sphericalCoordinates0.getPhi(), 0.01);
      assertEquals((-279.94668199), sphericalCoordinates0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-1.0), (-279.94668199), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-279.94668199);
      double[] doubleArray1 = sphericalCoordinates0.toCartesianGradient(doubleArray0);
      assertArrayEquals(new double[] {(-221.69144332556658), 79.65375223465318, (-151.25583779933183)}, doubleArray1, 0.01);
      assertEquals((-1.0), sphericalCoordinates0.getPhi(), 0.01);
      assertEquals((-279.94668199), sphericalCoordinates0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double double0 = sphericalCoordinates0.getTheta();
      assertEquals(Double.NaN, sphericalCoordinates0.getPhi(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double double0 = sphericalCoordinates0.getTheta();
      assertEquals(1.5707963267948966, sphericalCoordinates0.getPhi(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double double0 = sphericalCoordinates0.getR();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, sphericalCoordinates0.getPhi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double double0 = sphericalCoordinates0.getR();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(0.0, 2.356194490192345, 0.0);
      double double0 = sphericalCoordinates0.getPhi();
      assertEquals(0.0, sphericalCoordinates0.getR(), 0.01);
      assertEquals(2.356194490192345, sphericalCoordinates0.getTheta(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(Double.POSITIVE_INFINITY, 2867.974170083831, Double.POSITIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPhi();
      assertEquals(2867.974170083831, sphericalCoordinates0.getTheta(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, sphericalCoordinates0.getR(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      Vector3D vector3D1 = sphericalCoordinates0.getCartesian();
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      Vector3D vector3D1 = sphericalCoordinates0.getCartesian();
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      sphericalCoordinates0.getCartesian();
      assertEquals(1.5707963267948966, sphericalCoordinates0.getPhi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-2.0), 68.5765, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.getCartesian();
      assertEquals((-0.5707963267948967), vector3D0.getDelta(), 0.01);
      assertEquals((-2.0), sphericalCoordinates0.getR(), 0.01);
      assertEquals(2.6030542746143377, vector3D0.getAlpha(), 0.01);
      assertEquals(1.0, sphericalCoordinates0.getPhi(), 0.01);
      assertEquals(68.5765, sphericalCoordinates0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      sphericalCoordinates0.getCartesian();
      assertEquals(0.0, sphericalCoordinates0.getPhi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(0.0, 2.356194490192345, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.getCartesian();
      assertEquals(0.0, sphericalCoordinates0.getPhi(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01);
      assertEquals(0.0, sphericalCoordinates0.getR(), 0.01);
      assertEquals(2.356194490192345, sphericalCoordinates0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-4204.6), (-4204.6), 0.0);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        sphericalCoordinates0.toCartesianHessian((double[][]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        sphericalCoordinates0.toCartesianHessian(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      // Undeclared exception!
      try { 
        sphericalCoordinates0.toCartesianGradient((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates(vector3D0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        sphericalCoordinates0.toCartesianGradient(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = null;
      try {
        sphericalCoordinates0 = new SphericalCoordinates((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-661.4578128513914), (-661.4578128513914), (-661.4578128513914));
      double double0 = sphericalCoordinates0.getPhi();
      assertEquals((-661.4578128513914), sphericalCoordinates0.getR(), 0.01);
      assertEquals((-661.4578128513914), sphericalCoordinates0.getTheta(), 0.01);
      assertEquals((-661.4578128513914), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-661.4578128513914), (-661.4578128513914), (-661.4578128513914));
      double[][] doubleArray0 = new double[6][9];
      sphericalCoordinates0.toCartesianHessian(doubleArray0, doubleArray0[1]);
      sphericalCoordinates0.toCartesianHessian(doubleArray0, doubleArray0[1]);
      assertEquals((-661.4578128513914), sphericalCoordinates0.getR(), 0.01);
      assertEquals((-661.4578128513914), sphericalCoordinates0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-661.4578128513914), (-661.4578128513914), (-661.4578128513914));
      double double0 = sphericalCoordinates0.getTheta();
      assertEquals((-661.4578128513914), sphericalCoordinates0.getR(), 0.01);
      assertEquals((-661.4578128513914), sphericalCoordinates0.getPhi(), 0.01);
      assertEquals((-661.4578128513914), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = new SphericalCoordinates((-661.4578128513914), (-661.4578128513914), (-661.4578128513914));
      double double0 = sphericalCoordinates0.getR();
      assertEquals((-661.4578128513914), sphericalCoordinates0.getPhi(), 0.01);
      assertEquals((-661.4578128513914), double0, 0.01);
      assertEquals((-661.4578128513914), sphericalCoordinates0.getTheta(), 0.01);
  }
}
