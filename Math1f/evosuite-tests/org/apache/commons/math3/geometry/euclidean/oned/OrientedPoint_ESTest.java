/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:03:50 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrientedPoint_ESTest extends OrientedPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(1305.8939716652);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.revertSelf();
      boolean boolean0 = orientedPoint0.isDirect();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      double double0 = orientedPoint0.getOffset(vector1D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(1305.8939716652);
      Vector1D vector1D1 = new Vector1D(1305.8939716652, vector1D0, 4517.85314, vector1D0, 1305.8939716652, vector1D0, 4517.85314, vector1D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, true);
      orientedPoint0.revertSelf();
      double double0 = orientedPoint0.getOffset(vector1D0);
      assertFalse(orientedPoint0.isDirect());
      assertEquals(1.5209086597280746E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D1 = line0.toSubSpace(vector3D1);
      double double0 = orientedPoint0.getOffset(vector1D1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      orientedPoint0.getLocation();
      assertFalse(orientedPoint0.isDirect());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.getLocation();
      assertTrue(orientedPoint0.isDirect());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      orientedPoint0.getLocation();
      assertFalse(orientedPoint0.isDirect());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.getLocation();
      assertTrue(orientedPoint0.isDirect());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      OrientedPoint orientedPoint1 = orientedPoint0.copySelf();
      assertFalse(orientedPoint1.isDirect());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      // Undeclared exception!
      try { 
        orientedPoint0.sameOrientationAs((Hyperplane<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      // Undeclared exception!
      try { 
        orientedPoint0.getOffset((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      boolean boolean0 = orientedPoint0.sameOrientationAs(orientedPoint0);
      assertTrue(orientedPoint0.isDirect());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D0, true);
      orientedPoint1.revertSelf();
      boolean boolean0 = orientedPoint0.sameOrientationAs(orientedPoint1);
      assertFalse(orientedPoint1.isDirect());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.revertSelf();
      assertFalse(orientedPoint0.isDirect());
      
      orientedPoint0.revertSelf();
      double double0 = orientedPoint0.getOffset(vector1D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.wholeSpace();
      assertTrue(orientedPoint0.isDirect());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      OrientedPoint orientedPoint1 = orientedPoint0.copySelf();
      assertTrue(orientedPoint1.isDirect());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      boolean boolean0 = orientedPoint0.isDirect();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.wholeHyperplane();
      assertTrue(orientedPoint0.isDirect());
  }
}
