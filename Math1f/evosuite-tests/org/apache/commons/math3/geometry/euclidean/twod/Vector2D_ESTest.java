/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:22:15 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector2D_ESTest extends Vector2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0);
      boolean boolean0 = vector2D0.equals(vector2D1);
      assertTrue(boolean0);
      assertFalse(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = Vector2D.NaN;
      boolean boolean0 = vector2D1.equals(vector2D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = Vector2D.distance(vector2D0, vector2D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.add(0.0, (Vector<Euclidean2D>) vector2D0);
      vector2D1.normalize();
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-3922.0), 1513.32356277558);
      Vector2D vector2D2 = vector2D0.add(0.6, (Vector<Euclidean2D>) vector2D1);
      assertEquals(1513.32356277558, vector2D1.getY(), 0.01);
      assertEquals((-3922.0), vector2D1.getX(), 0.01);
      assertTrue(vector2D2.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.NaN.getNorm1();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.NEGATIVE_INFINITY.subtract(0.0, (Vector<Euclidean2D>) vector2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertTrue(vector2D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.ZERO.scalarMultiply(0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(Double.POSITIVE_INFINITY, (-276.73311305704));
      Vector2D vector2D1 = vector2D0.normalize();
      assertEquals(-0.0, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertEquals((-276.73311305704), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1095.5036727);
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      Vector2D vector2D1 = vector2D0.normalize();
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals((-0.9999999999999999), vector2D1.getY(), 0.01);
      assertEquals(1200128.2968991885, vector2D0.getNormSq(), 0.01);
      assertEquals(0.9999999999999998, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      Vector2D vector2D1 = vector2D0.normalize();
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
      assertEquals(0.9110922788904189, vector2D1.getY(), 0.01);
      assertEquals((-0.41220244946659823), vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = vector2D0.negate();
      assertFalse(vector2D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.negate();
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.getZero();
      Vector2D vector2D2 = vector2D1.negate();
      assertEquals(-0.0, vector2D2.getY(), 0.01);
      assertEquals(-0.0, vector2D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.getZero();
      double double0 = vector2D1.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2912.947127324427);
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      double double0 = vector2D0.getY();
      assertEquals((-2912.947127324427), double0, 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = vector2D0.getX();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.getNormSq();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = vector2D0.NEGATIVE_INFINITY.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-3922.0), 1513.32356277558);
      Vector2D vector2D2 = vector2D0.subtract((Vector<Euclidean2D>) vector2D1);
      double double0 = vector2D0.dotProduct(vector2D2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1.7672232205651775E7, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.negate();
      double double0 = vector2D1.dotProduct(vector2D0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1491.478171, 1491.478171);
      Vector2D vector2D1 = new Vector2D(1491.478171, vector2D0, 0.0, vector2D0, 1491.478171, vector2D0);
      double double0 = Vector2D.distanceSq(vector2D1, vector2D0);
      assertEquals(1491.478171, vector2D0.getY(), 0.01);
      assertEquals(3.956091795235976E13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.distanceSq((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.scalarMultiply((-642.0));
      double double0 = vector2D1.distanceSq((Vector<Euclidean2D>) vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(Double.POSITIVE_INFINITY, (-276.73311305704));
      double double0 = Vector2D.distanceInf(vector2D0, vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01);
      assertEquals((-276.73311305704), vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.distanceInf((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.distance1(vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-2088.0), vector2D0);
      double double0 = vector2D1.distance1(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double[] doubleArray0 = new double[2];
      Vector2D vector2D1 = new Vector2D(doubleArray0);
      double double0 = Vector2D.distance(vector2D0, vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.negate();
      double double0 = vector2D1.distance((Vector<Euclidean2D>) vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.subtract((Vector<Euclidean2D>) vector2D0);
      vector2D1.add((Vector<Euclidean2D>) vector2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.add((Vector<Euclidean2D>) vector2D0);
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      // Undeclared exception!
      try { 
        vector2D0.toString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2361.871387372), (-2361.871387372));
      ChoiceFormat choiceFormat0 = new ChoiceFormat("polynomial");
      // Undeclared exception!
      try { 
        vector2D0.ZERO.toString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        vector2D0.NEGATIVE_INFINITY.subtract((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.ZERO.subtract(3.141592653589793, (Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.dotProduct((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.distanceSq((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        vector2D0.distanceSq((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      // Undeclared exception!
      try { 
        Vector2D.distanceInf((Vector2D) null, vector2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.distanceInf((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      // Undeclared exception!
      try { 
        vector2D0.distance1((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector2D.distance(vector2D0, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.distance((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.add((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.NaN.add(0.0, (Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2D vector2D0 = null;
      try {
        vector2D0 = new Vector2D((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(Double.NEGATIVE_INFINITY, (-94.087617488515));
      Vector2D vector2D1 = null;
      try {
        vector2D1 = new Vector2D((-313.6986196), vector2D0, 3456.0, (Vector2D) null, (-4138.705), (Vector2D) null, 0.0, vector2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector2D vector2D0 = null;
      try {
        vector2D0 = new Vector2D((-3590.123274772), (Vector2D) null, (-3590.123274772), (Vector2D) null, (-3590.123274772), (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector2D vector2D0 = null;
      try {
        vector2D0 = new Vector2D((-1373.705), (Vector2D) null, (-1373.705), (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector2D vector2D0 = null;
      try {
        vector2D0 = new Vector2D(55.0481, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(1390.037703, vector2D0, (-4692.780138714), vector2D0, 1390.037703, vector2D0);
      boolean boolean0 = vector2D1.isNaN();
      assertTrue(boolean0);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.getY();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.distance((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.distanceSq((Vector<Euclidean2D>) vector2D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.getX();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      double double0 = vector2D0.NEGATIVE_INFINITY.distanceInf((Vector<Euclidean2D>) vector2D0);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.POSITIVE_INFINITY.getNorm();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.scalarMultiply((-642.0));
      boolean boolean0 = vector2D0.equals(vector2D1);
      assertFalse(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      boolean boolean0 = vector2D0.equals(vector2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = Vector2D.NaN;
      boolean boolean0 = vector2D0.equals(vector2D1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertTrue(vector2D1.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      boolean boolean0 = vector2D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      boolean boolean0 = vector2D0.isInfinite();
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertFalse(boolean0);
      assertFalse(vector2D0.isNaN());
      assertEquals(452969.858436713, vector2D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      Vector2D vector2D1 = new Vector2D(2124.0, 0.0);
      Vector2D vector2D2 = vector2D0.ZERO.add(Double.POSITIVE_INFINITY, (Vector<Euclidean2D>) vector2D1);
      boolean boolean0 = vector2D2.isNaN();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D2.getX(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertFalse(vector2D2.equals((Object)vector2D1));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      vector2D0.POSITIVE_INFINITY.hashCode();
      assertFalse(vector2D0.isNaN());
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
      assertEquals(452969.858436713, vector2D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = vector2D0.subtract(Double.NaN, (Vector<Euclidean2D>) vector2D0);
      vector2D1.hashCode();
      assertFalse(vector2D0.isNaN());
      assertTrue(vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      try { 
        vector2D0.ZERO.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Vector2D vector2D0 = null;
      try {
        vector2D0 = new Vector2D(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0, 0.0, vector2D0);
      boolean boolean0 = vector2D1.equals(vector2D0);
      assertFalse(vector2D0.isNaN());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      double double0 = vector2D0.getNormSq();
      assertEquals(452969.858436713, double0, 0.01);
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      vector2D0.NaN.toString((NumberFormat) choiceFormat0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      vector2D0.NaN.toString();
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      vector2D0.ZERO.getNormInf();
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
      assertEquals(452969.858436713, vector2D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      double[] doubleArray0 = vector2D0.toArray();
      assertArrayEquals(new double[] {(-277.4247608), 613.1927596863615}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      vector2D0.POSITIVE_INFINITY.getSpace();
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
      assertEquals(452969.858436713, vector2D0.getNormSq(), 0.01);
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.ZERO.add((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, (-2738.218941248566), vector2D0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-277.4247608), 613.1927596863615);
      vector2D0.NaN.distance1(vector2D0);
      assertEquals(613.1927596863615, vector2D0.getY(), 0.01);
      assertEquals((-277.4247608), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.ZERO.subtract(2386.96702065, (Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = Vector2D.distance(vector2D0, vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.NEGATIVE_INFINITY.getNorm1();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.NaN.add(0.0, (Vector<Euclidean2D>) vector2D0);
      boolean boolean0 = vector2D1.isInfinite();
      assertFalse(boolean0);
      assertEquals(0.0, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01);
      assertTrue(vector2D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = Vector2D.distanceSq(vector2D0, vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      double double0 = vector2D0.dotProduct(vector2D0);
      assertEquals(0.0, double0, 0.01);
  }
}
