/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:07:17 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntervalsSet_ESTest extends IntervalsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 0.0);
      double double0 = intervalsSet0.getSup();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 0.0);
      double double0 = intervalsSet0.getInf();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-621.7037689999997), (-1.0));
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      Vector1D vector1D0 = Vector1D.NaN;
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getCell(vector1D0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree1);
      List<Interval> list0 = intervalsSet1.asList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew((BSPTree<Euclidean1D>) null);
      // Undeclared exception!
      try { 
        intervalsSet1.getInf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(orientedPoint0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.getInf();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew((BSPTree<Euclidean1D>) null);
      // Undeclared exception!
      try { 
        intervalsSet1.computeGeometricalProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(vector1D0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet1.computeGeometricalProperties();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.Vector1D cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((BSPTree<Euclidean1D>) null);
      // Undeclared exception!
      try { 
        intervalsSet0.asList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(object0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.asList();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean1D>) subOrientedPoint0);
      IntervalsSet intervalsSet0 = null;
      try {
        intervalsSet0 = new IntervalsSet(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(true);
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, bSPTree0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree1);
      List<Interval> list0 = intervalsSet1.asList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = intervalsSet0.getSup();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = intervalsSet0.getSup();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = intervalsSet0.getInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-621.7037689999997), (-1.0));
      intervalsSet0.computeGeometricalProperties();
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      double double0 = intervalsSet0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-1253.8778), Double.NEGATIVE_INFINITY);
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = intervalsSet0.getInf();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0);
      intervalsSet0.computeGeometricalProperties();
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = intervalsSet0.getSize();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-621.7037689999997), (-1.0));
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      Vector1D vector1D0 = Vector1D.NaN;
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getCell(vector1D0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree1);
      intervalsSet1.computeGeometricalProperties();
      assertNotSame(intervalsSet1, intervalsSet0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      List<Interval> list0 = intervalsSet0.asList();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      bSPTree0.setAttribute(list0);
      // Undeclared exception!
      try { 
        intervalsSet0.getSup();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      // Undeclared exception!
      try { 
        intervalsSet0.getSup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }
}
