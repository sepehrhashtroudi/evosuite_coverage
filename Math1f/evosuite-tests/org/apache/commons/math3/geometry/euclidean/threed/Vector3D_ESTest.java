/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:10:34 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.apache.commons.math3.geometry.Space;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-0.29308897892384284), vector3D1.getZ(), 0.01);
      assertEquals(0.9999999999999999, vector3D1.getNormSq(), 0.01);
      assertEquals(0.9560851690269958, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.NaN.add((Vector<Euclidean3D>) vector3D0);
      double double0 = vector3D0.PLUS_I.distance((Vector<Euclidean3D>) vector3D1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      vector3D0.MINUS_K.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      vector3D0.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      vector3D0.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_K;
      boolean boolean0 = vector3D1.equals(vector3D2);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.add(1.0, (Vector<Euclidean3D>) vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-2500.349), vector3D0, 0.01745329052209854, vector3D0, 0.0, vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(6251657.843470611, vector3D1.getNormSq(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.8307188599677033E-8, 1.8307188599677033E-8);
      Vector3D vector3D1 = vector3D0.MINUS_I.normalize();
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.1415926276995187, double0, 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-566.249), 1082.9167311435997, (-3137.102928333));
      Vector3D vector3D1 = new Vector3D((-5373.157581796), vector3D0, 1082.9167311435997, vector3D0);
      Vector3D vector3D2 = vector3D1.PLUS_J.subtract((Vector<Euclidean3D>) vector3D0);
      double double0 = Vector3D.angle(vector3D1, vector3D2);
      assertEquals(2.8126767514404487E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(638.0, (-2713.9939));
      Vector3D vector3D1 = new Vector3D(Double.NEGATIVE_INFINITY, vector3D0);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1307.2));
      Vector3D vector3D1 = vector3D0.subtract((Vector<Euclidean3D>) vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.9560851690269958, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals((-0.29308897892384284), vector3D0.getZ(), 0.01);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      boolean boolean0 = vector3D0.equals(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      String string0 = vector3D0.toString(numberFormat0);
      assertEquals("{-1; 0; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.NaN.subtract((Vector<Euclidean3D>) vector3D0);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D2 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      assertTrue(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.scalarMultiply((-1307.2));
      Vector3D vector3D2 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      Vector3D vector3D2 = vector3D0.subtract(2.0, (Vector<Euclidean3D>) vector3D1);
      assertEquals(0.5861779578476857, vector3D2.getZ(), 0.01);
      assertEquals(5.0, vector3D2.getNormSq(), 0.01);
      assertEquals((-1.9121703380539916), vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = vector3D0.subtract(0.0, (Vector<Euclidean3D>) vector3D0);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.scalarMultiply(Double.NaN);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.07073719799518585, 0.07073719799518585);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(1.0000000000000002, vector3D1.getNormSq(), 0.01);
      assertEquals((-0.07085452990892985), vector3D1.getX(), 0.01);
      assertEquals(0.07050146646863753, vector3D0.getY(), 0.01);
      assertEquals(0.9974866593550937, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.add((-8.0E298), (Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.MINUS_K.normalize();
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.normalize();
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.normalize();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.NaN.negate();
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.PLUS_K.negate();
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      Vector3D vector3D2 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D3 = vector3D2.negate();
      assertEquals(0.29308897892384284, vector3D3.getZ(), 0.01);
      assertEquals((-0.29308897892384284), vector3D2.getZ(), 0.01);
      assertEquals((-1.0), vector3D3.getY(), 0.01);
      assertEquals((-0.9560851690269958), vector3D3.getX(), 0.01);
      assertEquals(2.0, vector3D3.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D2.getY(), 0.01);
      assertEquals(0.9560851690269958, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.ZERO.negate();
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.getZ();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = vector3D0.getZ();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 197.7069, (-1794.0));
      double double0 = vector3D0.getY();
      assertEquals(3257524.01830761, vector3D0.getNormSq(), 0.01);
      assertEquals(197.7069, double0, 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1794.0), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.getX();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.getX();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      double double0 = vector3D1.getNormSq();
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getNormInf();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      double double0 = vector3D1.getNorm1();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.getNorm1();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.ZERO.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.PLUS_K.getDelta();
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.MINUS_K.getDelta();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.PLUS_K.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.POSITIVE_INFINITY.getAlpha();
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.MINUS_J.negate();
      double double0 = vector3D0.dotProduct((Vector<Euclidean3D>) vector3D1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      double double0 = vector3D0.PLUS_I.dotProduct((Vector<Euclidean3D>) vector3D1);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      double double0 = vector3D1.distanceSq((Vector<Euclidean3D>) vector3D0);
      assertEquals((-0.29308897892384284), vector3D1.getZ(), 0.01);
      assertEquals(2.0, double0, 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.9560851690269958, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      double double0 = vector3D0.distanceInf((Vector<Euclidean3D>) vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      double double0 = vector3D0.MINUS_I.distanceInf((Vector<Euclidean3D>) vector3D1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-2619.2162500705), vector3D0);
      double double0 = Vector3D.distance1(vector3D1, vector3D0);
      assertEquals(2620.2162500705, double0, 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = vector3D0.PLUS_J.distance1((Vector<Euclidean3D>) vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.PLUS_J.add((Vector<Euclidean3D>) vector3D0);
      double double0 = Vector3D.distance(vector3D1, vector3D0);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(277.5480650623, vector3D0);
      double double0 = vector3D0.distance((Vector<Euclidean3D>) vector3D1);
      assertEquals(276.5480650623, double0, 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Vector3D vector3D2 = new Vector3D((-5169.3330325764), vector3D0, (-5169.3330325764), vector3D0, (-2105.2), vector3D1);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D1);
      Vector3D vector3D4 = Vector3D.crossProduct(vector3D3, vector3D1);
      assertEquals(1.0688801600674208E8, vector3D4.getNormSq(), 0.01);
      assertEquals((-10338.6660651528), vector3D3.getZ(), 0.01);
      assertEquals((-2105.2), vector3D2.getX(), 0.01);
      assertEquals((-10338.6660651528), vector3D4.getY(), 0.01);
      assertEquals(0.0, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
      assertEquals((-0.9560851690269958), vector3D2.getZ(), 0.01);
      assertEquals((-0.29308897892384284), vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.9999999999999999, vector3D2.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 2452.75816398);
      Vector3D vector3D1 = new Vector3D((-1.0902938113007961E-8), (-5.207000323380292E-8), (-5.207000323380292E-8));
      Vector3D vector3D2 = vector3D0.crossProduct((Vector<Euclidean3D>) vector3D1);
      assertEquals(-0.0, vector3D0.getY(), 0.01);
      assertEquals(3.5305739624518595E-8, vector3D2.getZ(), 0.01);
      assertEquals(4.5878759417469954E-15, vector3D2.getNormSq(), 0.01);
      assertEquals(3.827257485895017E-8, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.add((Vector<Euclidean3D>) vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = vector3D1.add((Vector<Euclidean3D>) vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.NaN.add((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D2 = vector3D0.add(1.0, (Vector<Euclidean3D>) vector3D1);
      assertEquals(Double.NaN, vector3D2.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
      assertEquals(Double.NaN, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.add(1.0, (Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D2 = vector3D1.subtract(1.0, (Vector<Euclidean3D>) vector3D0);
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.ZERO.add(0.0, (Vector<Euclidean3D>) vector3D0);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.apache.commons.math3.geometry.euclidean.threed.Vector3D");
      // Undeclared exception!
      try { 
        vector3D0.toString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3D0.PLUS_J.subtract((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      // Undeclared exception!
      try { 
        vector3D0.PLUS_I.subtract((-1022.562589738392), (Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      // Undeclared exception!
      try { 
        Vector3D.dotProduct((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      // Undeclared exception!
      try { 
        vector3D0.MINUS_I.dotProduct((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector3D.distanceSq(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 2452.75816398);
      // Undeclared exception!
      try { 
        vector3D0.distanceSq((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector3D.distanceInf(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      // Undeclared exception!
      try { 
        vector3D0.MINUS_K.distanceInf((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      // Undeclared exception!
      try { 
        Vector3D.distance1((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3D0.distance1((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector3D.distance(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      // Undeclared exception!
      try { 
        vector3D0.distance((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.crossProduct((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      // Undeclared exception!
      try { 
        vector3D0.crossProduct((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.angle((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      // Undeclared exception!
      try { 
        vector3D0.add((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        vector3D0.MINUS_I.add(0.0, (Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = null;
      try {
        vector3D1 = new Vector3D(2.0, vector3D0, 2.0, (Vector3D) null, 0.0, (Vector3D) null, 0.0, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D((-1916.399669858524), (Vector3D) null, 491.42259917174, (Vector3D) null, 491.42259917174, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(0.0, (Vector3D) null, 0.0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(3542.9461451, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      boolean boolean0 = vector3D0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      boolean boolean0 = vector3D0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getY();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-566.249), 1082.9167311435997, (-3137.102928333));
      double double0 = vector3D0.distanceSq((Vector<Euclidean3D>) vector3D0);
      assertEquals(1082.9167311435997, vector3D0.getY(), 0.01);
      assertEquals((-3137.102928333), vector3D0.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.1334761359547222E7, vector3D0.getNormSq(), 0.01);
      assertEquals((-566.249), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-566.249), 1082.9167311435997, (-3137.102928333));
      double double0 = vector3D0.distance((Vector<Euclidean3D>) vector3D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-3137.102928333), vector3D0.getZ(), 0.01);
      assertEquals(1.1334761359547222E7, vector3D0.getNormSq(), 0.01);
      assertEquals((-566.249), vector3D0.getX(), 0.01);
      assertEquals(1082.9167311435997, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-566.249), 1082.9167311435997, (-3137.102928333));
      double double0 = vector3D0.getNorm();
      assertEquals(3366.713732937094, double0, 0.01);
      assertEquals(1082.9167311435997, vector3D0.getY(), 0.01);
      assertEquals((-566.249), vector3D0.getX(), 0.01);
      assertEquals((-3137.102928333), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.MINUS_K.distance1((Vector<Euclidean3D>) vector3D0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
      vector3D1.hashCode();
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertTrue(vector3D1.isNaN());
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.scalarMultiply((-1307.2));
      Vector3D vector3D2 = new Vector3D((-1.5707963267948966), vector3D1);
      Vector3D vector3D3 = vector3D1.negate();
      boolean boolean0 = vector3D2.equals(vector3D3);
      assertEquals(Double.POSITIVE_INFINITY, vector3D3.getZ(), 0.01);
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D3.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.orthogonal();
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(boolean0);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      boolean boolean0 = vector3D0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(0.9999999999999999, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.9560851690269958, vector3D1.getX(), 0.01);
      assertEquals((-0.29308897892384284), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D0.POSITIVE_INFINITY.subtract(225.621339819, (Vector<Euclidean3D>) vector3D1);
      vector3D2.isInfinite();
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D2.getY(), 0.01);
      assertEquals(Double.NaN, vector3D2.getZ(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(145.11485652, 0.0);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertFalse(boolean0);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.8244342692304117, vector3D0.getX(), 0.01);
      assertEquals(0.56595771548634, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, (-1307.2));
      Vector3D vector3D2 = vector3D1.crossProduct((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D1, vector3D2);
      double double0 = Vector3D.angle(vector3D3, vector3D0);
      assertEquals(0.9999999999999999, vector3D3.getY(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.crossProduct((Vector<Euclidean3D>) vector3D0);
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(145.11485652, 0.0);
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.orthogonal();
      boolean boolean0 = vector3D1.isNaN();
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertTrue(boolean0);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 0.0);
      try { 
        vector3D0.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      try { 
        vector3D0.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = new Vector3D(doubleArray0);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.getZero();
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Space space0 = vector3D0.getSpace();
      assertEquals(3, space0.getDimension());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getAlpha();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double[] doubleArray0 = vector3D0.toArray();
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.NaN.getNorm1();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      String string0 = vector3D0.toString();
      assertEquals("{0; 1; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      // Undeclared exception!
      try { 
        vector3D0.toString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.9999999999999998, 0.9999999999999998);
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.291926581726429, vector3D0.getX(), 0.01);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01);
      assertEquals(0.4546487134128409, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.9999999999999998, 0.9999999999999998);
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.crossProduct((Vector<Euclidean3D>) vector3D0);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.9999999999999998, 0.9999999999999998);
      double double0 = vector3D0.dotProduct((Vector<Euclidean3D>) vector3D0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.4546487134128409, vector3D0.getY(), 0.01);
      assertEquals(0.291926581726429, vector3D0.getX(), 0.01);
      assertEquals(0.8414709848078964, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.ZERO.getNormInf();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.MINUS_I.getDelta();
      assertEquals(0.0, double0, 0.01);
  }
}
