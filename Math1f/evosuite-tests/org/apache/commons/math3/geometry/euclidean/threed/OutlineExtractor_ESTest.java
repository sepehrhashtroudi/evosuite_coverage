/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:16:43 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutlineExtractor_ESTest extends OutlineExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-556.24), (-556.24), (-556.24), 0.001, (-556.24), 0.001);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = new Vector3D((-556.24), (-436.103), (-1.0));
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D1);
      // Undeclared exception!
      outlineExtractor0.getOutline(polyhedronsSet0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D0);
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(0.001, 859.0, 859.0, 2917.86015175, 859.0, 1.633123935319537E16);
      PolyhedronsSet polyhedronsSet1 = polyhedronsSet0.translate(vector3D0);
      // Undeclared exception!
      try { 
        outlineExtractor0.getOutline(polyhedronsSet1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion$BoundaryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-527.0727135262581), (-527.0727135262581), (-527.0727135262581), 0.14503290322547818, (-527.0727135262581), 0.14503290322547818);
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-527.0727135262581), 0.001, (-527.0727135262581));
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D1);
      // Undeclared exception!
      try { 
        outlineExtractor0.getOutline(polyhedronsSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D0);
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet();
      Plane plane0 = new Plane(vector3D0);
      Vector2D[] vector2DArray0 = new Vector2D[8];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      vector2DArray0[2] = vector2DArray0[1];
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2DArray0[0];
      vector2DArray0[5] = vector2D0;
      vector2DArray0[6] = vector2DArray0[0];
      vector2DArray0[7] = vector2DArray0[6];
      PolygonsSet polygonsSet0 = new PolygonsSet(1.0, vector2DArray0);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>("_=~sr ]R!isYk$)}");
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(subPlane0, bSPTree0, bSPTree0, vector2D0);
      PolyhedronsSet polyhedronsSet1 = polyhedronsSet0.buildNew(bSPTree1);
      // Undeclared exception!
      try { 
        outlineExtractor0.getOutline(polyhedronsSet1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.Vector2D cannot be cast to org.apache.commons.math3.geometry.partitioning.BoundaryAttribute
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OutlineExtractor outlineExtractor0 = null;
      try {
        outlineExtractor0 = new OutlineExtractor((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-556.24), (-556.24), (-556.24), 0.14503290322547818, (-556.24), 0.14503290322547818);
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-556.24), 0.14503290322547818, (-556.24));
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D1);
      Vector2D[][] vector2DArray0 = outlineExtractor0.getOutline(polyhedronsSet0);
      assertEquals(0, vector2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(0.001, 0.001, 0.001, 0.1450329, 0.001, 0.1450329);
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D1);
      Vector2D[][] vector2DArray0 = outlineExtractor0.getOutline(polyhedronsSet0);
      assertEquals(1, vector2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-581.8461216943467), (-581.8461216943467), (-581.8461216943467), 0.37519096325059414, (-581.8461216943467), 0.37519096325059414);
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      OutlineExtractor outlineExtractor0 = new OutlineExtractor(vector3D0, vector3D1);
      Vector2D[][] vector2DArray0 = outlineExtractor0.getOutline(polyhedronsSet0);
      assertEquals(1, vector2DArray0.length);
  }
}
