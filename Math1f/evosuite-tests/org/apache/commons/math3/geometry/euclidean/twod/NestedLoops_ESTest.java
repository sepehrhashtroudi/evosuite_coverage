/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:23:39 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NestedLoops_ESTest extends NestedLoops_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[6];
      Vector2D vector2D0 = Vector2D.NaN;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2DArray0[0];
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2DArray0[2];
      vector2DArray0[4] = vector2D0;
      vector2DArray0[5] = vector2D0;
      // Undeclared exception!
      try { 
        nestedLoops0.add(vector2DArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      Vector2D vector2D0 = new Vector2D((-3438.01468695), 0.9999);
      vector2DArray0[0] = vector2D0;
      // Undeclared exception!
      try { 
        nestedLoops0.add(vector2DArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[0];
      // Undeclared exception!
      try { 
        nestedLoops0.add(vector2DArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.NestedLoops", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      nestedLoops0.add(vector2DArray0);
      nestedLoops0.add(vector2DArray0);
      nestedLoops0.add(vector2DArray0);
      nestedLoops0.correctOrientation();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[2];
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      Vector2D vector2D1 = new Vector2D((-1.0), vector2D0, (-1.0), vector2D0, (-1.0), vector2D0, (-1.0), vector2D0);
      vector2DArray0[1] = vector2D1;
      nestedLoops0.add(vector2DArray0);
      nestedLoops0.correctOrientation();
      nestedLoops0.add(vector2DArray0);
      assertEquals(2, vector2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      nestedLoops0.add(vector2DArray0);
      nestedLoops0.add(vector2DArray0);
      nestedLoops0.correctOrientation();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      vector2DArray0[0] = vector2D0;
      nestedLoops0.add(vector2DArray0);
      try { 
        nestedLoops0.add(vector2DArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some outline boundary loops cross each other
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.NestedLoops", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NestedLoops nestedLoops0 = new NestedLoops();
      Vector2D[] vector2DArray0 = new Vector2D[1];
      try { 
        nestedLoops0.add(vector2DArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // an outline boundary loop is open
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.NestedLoops", e);
      }
  }
}
