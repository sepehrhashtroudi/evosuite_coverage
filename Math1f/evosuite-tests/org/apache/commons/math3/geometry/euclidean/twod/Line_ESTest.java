/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:20:41 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-117.928), (-1.0), 1.0E-20, 0.0, 1435.03, (-740.6327925453165));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((-2358.1377117502), (-2358.1377117502), (-1.0), 0.0, (-1153.216), (-1.0));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.44321345601866E-11), (-7.44321345601866E-11), (-7.44321345601866E-11));
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      line0.setAngle(1.0E-10);
      boolean boolean0 = line0.isParallelTo(line1);
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 710.900780498);
      Line line1 = new Line(line0);
      boolean boolean0 = line1.isParallelTo(line0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 4765.8636859856);
      Line line1 = line0.copySelf();
      boolean boolean0 = line0.sameOrientationAs(line1);
      assertTrue(boolean0);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.44321345601866E-11), (-7.44321345601866E-11), (-7.44321345601866E-11));
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      line0.setAngle(1.0E-10);
      Vector2D vector2D1 = line1.intersection(line0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertNotNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.0);
      line0.revertSelf();
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0, 1.0);
      Line line0 = new Line(vector2D0, 1.0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      Vector1D vector1D1 = line0.toSubSpace(vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, vector1D1.getNormSq(), 0.01);
      assertEquals((-0.30116867893975674), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(-0.0, (-0.33333333333333287));
      Vector2D vector2D2 = new Vector2D((-2309.40007), vector2D0, (-0.33333333333333287), vector2D1, (-669.3), vector2D0);
      Line line0 = new Line(vector2D2, (-2058.0));
      Vector1D vector1D0 = line0.toSubSpace(vector2D1);
      Vector2D vector2D3 = line0.toSpace(vector1D0);
      assertTrue(vector2D3.equals((Object)vector2D2));
      assertEquals((-0.0846661004902889), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.9868161777724352E-8, 882.88);
      Vector2D vector2D1 = vector2D0.subtract(1468.82575, (Vector<Euclidean2D>) vector2D0);
      Line line0 = new Line(vector2D0, 1.9868161777724352E-8);
      Line line1 = new Line(vector2D0, vector2D1);
      assertEquals(2.6753973659131143E-24, line1.getOriginOffset(), 0.01);
      
      line1.reset(vector2D1, vector2D1);
      Vector2D vector2D2 = line1.intersection(line0);
      assertEquals(4.260185770775273E27, vector2D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.125);
      Line line1 = new Line(line0);
      line1.reset(vector2D0, vector2D0);
      Vector2D vector2D1 = line1.intersection(line0);
      assertNotNull(vector2D1);
      
      Line line2 = new Line(vector2D1, vector2D0);
      assertEquals(-0.0, vector2D1.getX(), 0.01);
      assertEquals(-0.0, line2.getOriginOffset(), 0.01);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-2309.40007), vector2D0, (-0.33333333333333287), vector2D0, (-669.3), vector2D0);
      Line line0 = new Line(vector2D1, (-2058.0));
      Line line1 = line0.getReverse();
      assertEquals(Double.NEGATIVE_INFINITY, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(-0.0, (-0.33333333333333287));
      Vector2D vector2D2 = new Vector2D((-2309.40007), vector2D0, (-0.33333333333333287), vector2D1, (-669.3), vector2D0);
      Line line0 = new Line(vector2D2, (-2058.0));
      Vector1D vector1D0 = line0.toSubSpace(vector2D1);
      Vector2D vector2D3 = line0.getPointAt(vector1D0, (-2631.019));
      assertTrue(vector2D3.equals((Object)vector2D2));
      assertEquals((-0.0846661004902889), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(-0.0, (-0.33333333333333287));
      Line line0 = new Line(vector2D0, (-2058.0));
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, (-2631.019));
      assertEquals(6923957.578704737, vector2D1.getNormSq(), 0.01);
      assertEquals((-0.0846661004902889), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.125);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      double double0 = line0.getOriginOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-235.31050134), 0.0);
      Vector2D vector2D1 = new Vector2D((-235.31050134), vector2D0, (-1453.0572226682536), vector2D0, (-2846.681142186), vector2D0);
      Line line0 = new Line(vector2D1, (-2846.681142186));
      double double0 = line0.getOriginOffset();
      assertEquals(413793.8538386282, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1351.0), (-1351.0));
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals((-1351.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1840.8349872732858, 1840.8349872732858);
      Vector2D vector2D1 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D1);
      Line line1 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset(line1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(1840.8349872732858, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1043.3412), 3654.728069511);
      Vector2D vector2D1 = new Vector2D((-1043.3412), vector2D0, 1723.31, vector2D0, (-1043.3412), vector2D0, 2562.0522, vector2D0);
      Vector2D vector2D2 = new Vector2D((-1043.3412), vector2D1, 0.5, vector2D1, 1723.31, vector2D0);
      Line line0 = new Line(vector2D2, 0.9305076599121094);
      Line line1 = new Line(line0);
      line0.reset(vector2D0, vector2D1);
      double double0 = line1.getOffset(line0);
      assertEquals((-1.1417418128250276E-13), line0.getOriginOffset(), 0.01);
      assertEquals((-6.919532972276488E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset(1.01);
      line0.revertSelf();
      line0.revertSelf();
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(1.01, line0.getOriginOffset(), 0.01);
      assertEquals(1.01, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.9868161777724352E-8, 882.88);
      Line line0 = new Line(vector2D0, 1.9868161777724352E-8);
      line0.setAngle(0.0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals((-2.2737367544323206E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.125);
      double double0 = line0.distance(vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1043.3412), 3654.728069511);
      Vector2D vector2D1 = new Vector2D((-1043.3412), vector2D0, 1723.31, vector2D0, (-1043.3412), vector2D0, 2562.0522, vector2D0);
      Line line0 = new Line(vector2D1, 0.9305076599121094);
      double double0 = line0.distance(vector2D0);
      assertEquals(6637240.708126731, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.125);
      Line line1 = line0.copySelf();
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset(1.01);
      line0.revertSelf();
      line0.copySelf();
      assertEquals((-1.01), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, 0.0);
      // Undeclared exception!
      try { 
        line0.translateToPoint((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.0);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-235.31050134), 0.0);
      Line line0 = new Line(vector2D0, 2.925681159240093E-8);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.sameOrientationAs((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.reset(vector2D0, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Line.getTransform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 1.0);
      // Undeclared exception!
      try { 
        line0.getPointAt((Vector1D) null, 1.0E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.0);
      // Undeclared exception!
      try { 
        line0.getOffset((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3010.8898832353);
      // Undeclared exception!
      try { 
        line0.getOffset((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-2058.0));
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, 945.138642);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 1.125);
      line0.reset(vector2D0, vector2D0);
      double double0 = line0.getAngle();
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 4765.8636859856);
      line0.reset(vector2D0, -0.0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      try { 
        Line.getTransform(affineTransform0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non-invertible affine transform collapses some lines into single points
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 686.0345032839134);
      boolean boolean0 = line0.contains(vector2D0);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, 0.0);
      double double0 = line0.getOffset(line0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D0 = plane0.toSubSpace(vector3D0);
      Line line0 = new Line(vector2D0, 0.0);
      Vector2D vector2D1 = line0.intersection(line0);
      assertNull(vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line0);
      assertNotNull(vector2D1);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 4765.8636859856);
      line0.wholeHyperplane();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-2058.0));
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, (-2631.019));
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
      assertEquals(Double.NaN, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3010.8898832353);
      line0.wholeSpace();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3010.8898832353);
      double double0 = line0.getAngle();
      assertEquals(1.244121096278377, double0, 0.01);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1.244121096278377, 1.244121096278377, 1.244121096278377, Double.NaN, 1.0E-20, (-191.08));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.translateToPoint(vector2D0);
      assertFalse(vector2D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-2058.0));
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      line0.toSpace(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
  }
}
