/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:04:39 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector1D_ESTest extends Vector1D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      double double0 = Vector1D.distanceSq(vector1D0, vector1D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D0.NaN.normalize();
      assertTrue(vector1D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      double double0 = vector1D0.getNormSq();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = new Vector1D((-262.8), vector1D0, (-262.8), vector1D0, (-873.319375), vector1D0);
      Vector1D vector1D2 = vector1D0.subtract((Vector<Euclidean1D>) vector1D1);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.subtract((Vector<Euclidean1D>) vector1D0);
      assertTrue(vector1D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D0.subtract((-996.027988173), (Vector<Euclidean1D>) vector1D0);
      assertTrue(vector1D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = vector1D0.ZERO.subtract(0.0, (Vector<Euclidean1D>) vector1D0);
      assertEquals(0.0, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.scalarMultiply((-1.0));
      assertEquals(Double.POSITIVE_INFINITY, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = new Vector1D(0.0, vector1D0, 0.0, vector1D0, (-5592.845615107397), vector1D0);
      Vector1D vector1D2 = vector1D1.scalarMultiply(1110.631725395);
      assertEquals((-6211591.775374589), vector1D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = vector1D0.scalarMultiply(0.0);
      assertEquals(0.0, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = new Vector1D((-2195.9315518798544), vector1D0, 1.0, vector1D0);
      Vector1D vector1D2 = vector1D1.normalize();
      assertEquals((-1.0), vector1D2.getX(), 0.01);
      assertEquals((-2194.9315518798544), vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = vector1D0.ONE.negate();
      Vector1D vector1D2 = vector1D0.subtract((-1187.610847646659), (Vector<Euclidean1D>) vector1D1);
      boolean boolean0 = vector1D1.equals(vector1D2);
      assertFalse(vector1D2.equals((Object)vector1D1));
      assertFalse(vector1D0.equals((Object)vector1D1));
      assertEquals(1408045.3037527227, vector1D2.getNormSq(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      vector1D0.isNaN();
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      double double0 = vector1D0.getX();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = new Vector1D((-2195.9315518798544), vector1D0, 1.0, vector1D0);
      double double0 = vector1D1.getX();
      assertEquals((-2194.9315518798544), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      double double0 = vector1D0.getNormSq();
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      double double0 = vector1D0.ZERO.getNormInf();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.ONE.getNormInf();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      double double0 = vector1D0.getNorm1();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      double double0 = vector1D0.NEGATIVE_INFINITY.getNorm();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      double double0 = vector1D0.dotProduct(vector1D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.negate();
      double double0 = vector1D1.dotProduct(vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.ZERO;
      double double0 = vector1D0.distanceSq((Vector<Euclidean1D>) vector1D1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      double double0 = Vector1D.distanceInf(vector1D1, vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      double double0 = vector1D0.distanceInf((Vector<Euclidean1D>) vector1D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.POSITIVE_INFINITY.distanceInf((Vector<Euclidean1D>) vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      double double0 = vector1D0.ONE.distance1(vector1D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = vector1D0.POSITIVE_INFINITY.add((Vector<Euclidean1D>) vector1D0);
      double double0 = Vector1D.distance(vector1D0, vector1D1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      double double0 = vector1D0.distance((Vector<Euclidean1D>) vector1D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D0.add((Vector<Euclidean1D>) vector1D0);
      assertNotSame(vector1D1, vector1D0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.ZERO;
      Vector1D vector1D2 = vector1D0.ZERO.add((Vector<Euclidean1D>) vector1D1);
      assertEquals(0.0, vector1D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.ONE;
      Vector1D vector1D2 = vector1D1.add((-3500.81), (Vector<Euclidean1D>) vector1D0);
      assertEquals(Double.POSITIVE_INFINITY, vector1D2.getX(), 0.01);
      assertEquals(1.0, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = vector1D0.add((-964.01), (Vector<Euclidean1D>) vector1D0);
      assertEquals((-963.01), vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = vector1D0.ZERO.add(0.0, (Vector<Euclidean1D>) vector1D0);
      assertEquals(0.0, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.ONE.toString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      // Undeclared exception!
      try { 
        vector1D0.toString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.ONE.subtract((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.subtract(0.0, (Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      // Undeclared exception!
      try { 
        vector1D0.dotProduct((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector1D.distanceSq((Vector1D) null, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.distanceSq((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      // Undeclared exception!
      try { 
        Vector1D.distanceInf(vector1D0, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.distanceInf((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      // Undeclared exception!
      try { 
        vector1D0.NEGATIVE_INFINITY.distance1((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector1D.distance((Vector1D) null, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      // Undeclared exception!
      try { 
        vector1D0.POSITIVE_INFINITY.distance((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      // Undeclared exception!
      try { 
        vector1D0.ZERO.add((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.add((-3115.2365730793), (Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = null;
      try {
        vector1D1 = new Vector1D(1.0, vector1D0, 1.0, (Vector1D) null, 1.0, (Vector1D) null, 0.0, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = null;
      try {
        vector1D1 = new Vector1D(0.0, vector1D0, (-1.0), (Vector1D) null, Double.POSITIVE_INFINITY, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector1D vector1D0 = null;
      try {
        vector1D0 = new Vector1D(1007.10980281056, (Vector1D) null, 1007.10980281056, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector1D vector1D0 = null;
      try {
        vector1D0 = new Vector1D(96.38800880154756, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = vector1D0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      double double0 = vector1D0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      vector1D0.POSITIVE_INFINITY.hashCode();
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = vector1D0.subtract((Vector<Euclidean1D>) vector1D0);
      boolean boolean0 = vector1D1.equals(vector1D0);
      assertTrue(boolean0);
      assertEquals(0.0, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(1565.5);
      Vector1D vector1D1 = vector1D0.POSITIVE_INFINITY.normalize();
      Vector1D vector1D2 = vector1D1.scalarMultiply(0.0);
      boolean boolean0 = vector1D1.equals(vector1D2);
      assertEquals(1565.5, vector1D0.getX(), 0.01);
      assertFalse(vector1D2.equals((Object)vector1D0));
      assertTrue(boolean0);
      assertEquals(Double.NaN, vector1D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      boolean boolean0 = vector1D0.equals("{(-Infinity)}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      boolean boolean0 = vector1D0.equals(vector1D0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(Double.POSITIVE_INFINITY);
      boolean boolean0 = vector1D0.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      boolean boolean0 = vector1D0.isInfinite();
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      try { 
        vector1D0.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.Vector1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      vector1D0.POSITIVE_INFINITY.getNorm1();
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      double double0 = Vector1D.distance(vector1D0, vector1D0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.negate();
      double double0 = Vector1D.distanceSq(vector1D0, vector1D1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      double double0 = vector1D0.dotProduct(vector1D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      double double0 = vector1D0.getNormSq();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = new Vector1D(0.0, vector1D0, Double.POSITIVE_INFINITY, vector1D0, 0.0, vector1D0, 0.0, vector1D0);
      boolean boolean0 = vector1D1.equals(vector1D0);
      assertFalse(boolean0);
      assertTrue(vector1D1.isNaN());
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = vector1D0.add(Double.POSITIVE_INFINITY, (Vector<Euclidean1D>) vector1D0);
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(1565.5);
      double double0 = Vector1D.distanceSq(vector1D0, vector1D0);
      assertEquals(1565.5, vector1D0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = vector1D0.getZero();
      assertEquals(0.0, vector1D0.getX(), 0.01);
      assertEquals(0.0, vector1D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.distance((Vector<Euclidean1D>) vector1D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = new Vector1D(0.0, vector1D0);
      assertEquals(0.0, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      String string0 = vector1D0.toString();
      assertEquals("{0}", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = vector1D0.NEGATIVE_INFINITY.subtract(0.0, (Vector<Euclidean1D>) vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      double double0 = vector1D0.ONE.distance1(vector1D0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = vector1D0.NEGATIVE_INFINITY.add((Vector<Euclidean1D>) vector1D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      vector1D0.getSpace();
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      double double0 = vector1D0.distanceSq((Vector<Euclidean1D>) vector1D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D(0.0);
      Vector1D vector1D1 = vector1D0.NaN.scalarMultiply(Double.NEGATIVE_INFINITY);
      vector1D1.hashCode();
      assertEquals(0.0, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      double double0 = Vector1D.distanceInf(vector1D0, vector1D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      String string0 = vector1D0.toString(numberFormat0);
      assertEquals("{(-Infinity)}", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = vector1D0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.ZERO.getNorm();
      assertEquals(0.0, double0, 0.01);
  }
}
