/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:15:16 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rotation_ESTest extends Rotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(1.0, rotation0.getQ3(), 0.01);
      assertEquals((-3.141592653589793), vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1925.9192350431254), 1484.0750401, 636.075370880554, (-2179.45409416316), false);
      Rotation rotation1 = rotation0.revert();
      assertEquals(1925.9192350431254, rotation1.getQ0(), 0.01);
      assertEquals(636.075370880554, rotation1.getQ2(), 0.01);
      assertEquals(1484.0750401, rotation1.getQ1(), 0.01);
      assertEquals((-2179.45409416316), rotation1.getQ3(), 0.01);
      assertEquals((-2179.45409416316), rotation0.getQ3(), 0.01);
      assertEquals(1484.0750401, rotation0.getQ1(), 0.01);
      assertEquals(636.075370880554, rotation0.getQ2(), 0.01);
      assertEquals((-1925.9192350431254), rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      Rotation rotation1 = rotation0.revert();
      assertEquals(1.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(-0.0, rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Rotation rotation1 = rotation0.revert();
      rotation1.revert();
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      double double0 = rotation0.getQ3();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rotation rotation0 = new Rotation((-810.5563913011065), (-810.5563913011065), 0.0, (-810.5563913011065), true);
      double double0 = rotation0.getQ3();
      assertEquals((-0.5773502691896257), rotation0.getQ1(), 0.01);
      assertEquals((-0.5773502691896257), double0, 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals((-0.5773502691896257), rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Rotation rotation0 = new Rotation(rotationOrder0, (-1925.9192350431254), (-1925.9192350431254), (-1925.9192350431254));
      double double0 = rotation0.getQ2();
      assertEquals(0.9941129647411323, rotation0.getQ0(), 0.01);
      assertEquals((-0.05743209476229153), double0, 0.01);
      assertEquals(0.06496525157656069, rotation0.getQ3(), 0.01);
      assertEquals(0.06496525157656069, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1130.9), (-1130.9), (-1130.9), (-1130.9), true);
      Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
      double double0 = rotation1.getQ1();
      assertEquals(0.5, rotation1.getQ3(), 0.01);
      assertEquals(0.5, rotation1.getQ2(), 0.01);
      assertEquals(0.5, rotation1.getQ0(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation(rotationOrder0, (-398.03278), (-398.03278), (-398.03278));
      double double0 = rotation0.getQ1();
      assertEquals((-0.37168418014316584), rotation0.getQ2(), 0.01);
      assertEquals((-5.551115123125783E-17), rotation0.getQ3(), 0.01);
      assertEquals((-0.8894099983299689), double0, 0.01);
      assertEquals(0.26608405645958455, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1130.9), (-1130.9), (-1130.9), (-1130.9), true);
      double double0 = rotation0.getQ0();
      assertEquals((-0.5), rotation0.getQ3(), 0.01);
      assertEquals((-0.5), rotation0.getQ2(), 0.01);
      assertEquals((-0.5), rotation0.getQ1(), 0.01);
      assertEquals((-0.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1861.97019401924), (-0.9901474494715793), (-1339.2731405487223), (-1339.2731405487223), true);
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals((-0.7010478109325243), rotation0.getQ0(), 0.01);
      assertEquals((-1.571535643696798), vector3D0.getAlpha(), 0.01);
      assertEquals((-0.7071066845622499), vector3D0.getY(), 0.01);
      assertEquals((-0.7071066845622499), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      Vector3D vector3D2 = rotation0.getAxis();
      assertEquals(0.7071067811865475, rotation0.getQ3(), 0.01);
      assertEquals((-3.141592653589793), vector3D2.getAlpha(), 0.01);
      assertEquals((-1.0), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = new Vector3D(2.0, 5668.6008);
      Rotation rotation1 = new Rotation(vector3D0, 2.0);
      double double0 = Rotation.distance(rotation0, rotation1);
      assertEquals(2.0000000000000004, double0, 0.01);
      assertEquals(0.5403023058681398, rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rotation rotation0 = new Rotation((-810.5563913011065), (-810.5563913011065), 0.0, (-810.5563913011065), true);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertEquals((-0.6666666666666666), vector3D1.getZ(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals((-0.5773502691896257), rotation0.getQ3(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = rotation0.getAxis();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = rotation0.applyTo(vector3D1);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1861.97019401924), (-0.9901474494715793), (-1339.2731405487223), (-1339.2731405487223), true);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertEquals(1.4310711159602916, vector3D1.getNorm1(), 0.01);
      assertEquals(0.7073796964165074, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Rotation rotation1 = new Rotation(rotationOrder0, 0.9746193731258873, 0.9746193731258873, 0.9746193731258873);
      Rotation rotation2 = rotation0.IDENTITY.applyTo(rotation1);
      assertEquals(0.7925278068656383, rotation2.getQ0(), 0.01);
      assertEquals((-0.1718466986048989), rotation2.getQ1(), 0.01);
      assertEquals((-0.17184669860489887), rotation2.getQ2(), 0.01);
      assertEquals((-0.5593184242468113), rotation2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Rotation rotation1 = new Rotation(rotationOrder0, 0.0, 0.0, 0.0);
      Rotation rotation2 = rotation1.applyTo(rotation0);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(1.0, rotation2.getQ3(), 0.01);
      assertEquals(0.0, rotation2.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Rotation rotation1 = rotation0.revert();
      Rotation rotation2 = rotation1.applyTo(rotation0);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(0.0, rotation2.getQ3(), 0.01);
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals((-1.0), rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = new Vector3D(0.0, 4836.0);
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = rotation0.IDENTITY.applyInverseTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = rotation0.IDENTITY.applyInverseTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Rotation rotation1 = new Rotation(vector3D0, vector3D1);
      Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
      assertEquals((-0.7071067811865476), rotation2.getQ0(), 0.01);
      assertEquals((-0.7071067811865475), rotation2.getQ3(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Rotation rotation1 = new Rotation(rotationOrder0, (-921.600651649), 0.0, 0.0);
      Rotation rotation2 = rotation0.applyInverseTo(rotation1);
      assertEquals((-0.8488437583802086), rotation2.getQ2(), 0.01);
      assertEquals(0.0, rotation2.getQ3(), 0.01);
      assertEquals(0.5286438062239658, rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(0.8488437583802086, rotation1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = new Vector3D(2.0, 5668.6008);
      Rotation rotation1 = new Rotation(vector3D0, 2.0);
      Rotation rotation2 = rotation0.applyInverseTo(rotation1);
      assertEquals(0.7740122307442974, rotation2.getQ3(), 0.01);
      assertEquals((-0.5403023058681398), rotation2.getQ0(), 0.01);
      assertEquals((-0.13737793389906258), rotation2.getQ1(), 0.01);
      assertEquals(0.3001762619019577, rotation2.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Rotation rotation1 = new Rotation(rotationOrder0, 0.0, 0.0, 0.0);
      Rotation rotation2 = rotation0.applyInverseTo(rotation1);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(1.0, rotation2.getQ3(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals(-0.0, rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rotation rotation0 = new Rotation((-3280.254), (-3280.254), 106.7130132308, (-3280.254), true);
      // Undeclared exception!
      try { 
        Rotation.distance(rotation0, (Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation0 = new Rotation(vector3D0, 0.0);
      // Undeclared exception!
      try { 
        rotation0.applyTo((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.5, 0.5, (-848.4943));
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        rotation0.applyTo(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        rotation0.applyTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      // Undeclared exception!
      try { 
        rotation0.applyTo((Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        rotation0.applyInverseTo(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      // Undeclared exception!
      try { 
        rotation0.applyInverseTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        rotation0.IDENTITY.applyInverseTo((Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((double[][]) null, 1369.864172);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, 2994.49423622474);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((RotationOrder) null, 0.0, (-1521.19), (-1521.19));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 946.2068, false);
      double double0 = rotation0.getAngle();
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(946.2068, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Rotation rotation1 = rotation0.revert();
      double double0 = rotation1.getAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Rotation rotation1 = rotation0.IDENTITY.applyTo(rotation0);
      assertNotSame(rotation0, rotation1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      try { 
        rotation0.getAngles((RotationOrder) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      Rotation rotation0 = new Rotation(rotationOrder0, (-385.3857363), (-385.3857363), (-1114.0));
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {1.0301600915445492, 2.111432562045244, 1.2653920243765997}, doubleArray0, 0.01);
      assertEquals(0.20222221220220413, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Rotation rotation0 = new Rotation(864.474, 3078.7874835619696, 864.474, 864.474, false);
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder1 = RotationOrder.YZY;
      try { 
        rotation0.getAngles(rotationOrder1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Rotation rotation0 = new Rotation(vector3D0, (-1275.2648871382));
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      rotation0.getAngles(rotationOrder0);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation(rotationOrder0, (-5027.451031076696), (-5027.451031076696), 3384.99702866);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals((-0.2654720138435281), rotation0.getQ0(), 0.01);
      assertArrayEquals(new double[] {2.238807320562594, 0.9027853330271994, 1.5017407437927512}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1.0));
      Rotation rotation0 = new Rotation(vector3D0, (-1.0));
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1861.97019401924), (-0.9901474494715793), (-1339.2731405487223), (-1339.2731405487223), true);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {2.3556627161825787, 1.5878608105846503, (-2.3567262642021114)}, doubleArray0, 0.01);
      assertEquals((-0.7010478109325243), rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-909.8));
      Rotation rotation0 = new Rotation(vector3D0, 9.219544613762692E-9);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 947.9826852, true);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Rotation rotation0 = new Rotation(864.474, 3078.7874835619696, 864.474, 864.474, false);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      double[] doubleArray0 = rotation0.IDENTITY.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rotation rotation0 = new Rotation(864.474, 3078.7874835619696, 864.474, 864.474, false);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Rotation rotation0 = new Rotation(1593.738581842506, (-0.5146815920539978), (-0.5146815920539978), 1593.738581842506, false);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1793.015767), (-1793.015767), 0.0, (-3970.8072959017), false);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1861.97019401924), (-0.9901474494715793), (-1339.2731405487223), (-1339.2731405487223), false);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      double[] doubleArray0 = rotation0.IDENTITY.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, 219.0761934);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, (-0.8352923512855327), -0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.008333333333333333, (-5027.451031076696), (-2.356194490192345), 0.25, false);
      Rotation rotation1 = rotation0.revert();
      double double0 = rotation1.getAngle();
      assertEquals(0.25, rotation1.getQ3(), 0.01);
      assertEquals((-5027.451031076696), rotation1.getQ1(), 0.01);
      assertEquals(3.1249257940158635, double0, 0.01);
      assertEquals((-2.356194490192345), rotation1.getQ2(), 0.01);
      assertEquals((-2.356194490192345), rotation0.getQ2(), 0.01);
      assertEquals(0.25, rotation0.getQ3(), 0.01);
      assertEquals((-5027.451031076696), rotation0.getQ1(), 0.01);
      assertEquals(0.008333333333333333, rotation0.getQ0(), 0.01);
      assertEquals((-0.008333333333333333), rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      Rotation.distance(rotation0, rotation0);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, 219.0761934);
      double double0 = rotation0.IDENTITY.getAngle();
      assertEquals(-0.0, rotation0.getQ3(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals((-0.4056100744605399), rotation0.getQ2(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.9140462064338516), rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, (-1830.828781));
      Vector3D vector3D1 = rotation0.getAxis();
      assertEquals((-0.3521507118780722), rotation0.getQ0(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), (-3342.9802016713797));
      Vector3D vector3D2 = new Vector3D(2514.073, vector3D0, (-0.999999999999998), vector3D0, 0.6666666666666666, vector3D1, (-3342.9802016713797), vector3D0);
      Rotation rotation0 = new Rotation(vector3D2, vector3D0, vector3D0, vector3D2);
      assertEquals((-1.4602796078710567E-20), rotation0.getQ0(), 0.01);
      assertEquals((-3.451758088700046E-4), rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), 4361.9800345, 814.87);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, (-1902.140984132), vector3D0);
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      double double0 = rotation0.getQ2();
      assertEquals(0.18363511618291867, double0, 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals((-0.9829944781658166), rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, (-2445.951339484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a 3x1 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, 219.0761934);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 0.0);
      assertEquals(0.4056100744605399, rotation1.getQ2(), 0.01);
      assertEquals((-0.4056100744605399), rotation0.getQ2(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.9140462064338516, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, (-3861.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation axis
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1861.97019401924), (-0.9901474494715793), (-1339.2731405487223), (-1339.2731405487223), true);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals((-3.7279904059801523E-4), rotation0.getQ1(), 0.01);
      assertEquals((-0.7010478109325243), rotation0.getQ0(), 0.01);
      assertArrayEquals(new double[] {(-2.3567262642021114), 1.5878608105846503, 2.3556627161825787}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double[] doubleArray0 = new double[6];
      rotation0.applyTo(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = rotation0.IDENTITY.applyInverseTo(vector3D0);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        rotation0.applyInverseTo((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      double[] doubleArray0 = rotation0.getAngles((RotationOrder) null);
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray1, (-433.93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double[] doubleArray0 = new double[6];
      rotation0.applyInverseTo(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double double0 = rotation0.getQ1();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double double0 = rotation0.getQ0();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, 0.0);
      double double0 = rotation0.getQ3();
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, 0.0);
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals(-0.0, rotation0.getQ2(), 0.01);
      assertEquals(-0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, 0.0);
      double double0 = rotation0.getQ2();
      assertEquals(-0.0, double0, 0.01);
      assertEquals(-0.0, rotation0.getQ3(), 0.01);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
  }
}
