/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:09:23 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment((Vector3D) null, (Vector3D) null, (Line) null);
      Vector3D vector3D0 = segment0.getStart();
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = new Vector3D(Double.NaN, vector3D0, 1.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Segment segment0 = new Segment(vector3D1, vector3D0, (Line) null);
      Vector3D vector3D2 = segment0.getStart();
      assertFalse(vector3D2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      Vector3D vector3D1 = segment0.getStart();
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      Vector3D vector3D1 = segment0.getStart();
      assertEquals(1.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      Line line0 = segment0.getLine();
      assertNull(line0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment((Vector3D) null, (Vector3D) null, (Line) null);
      Vector3D vector3D0 = segment0.getEnd();
      assertNull(vector3D0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      Vector3D vector3D1 = segment0.getEnd();
      assertTrue(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D1, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      Vector3D vector3D2 = segment0.getEnd();
      assertFalse(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      Vector3D vector3D1 = segment0.getStart();
      assertSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      Line line1 = segment0.getLine();
      assertSame(line0, line1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      Vector3D vector3D1 = segment0.getEnd();
      assertSame(vector3D0, vector3D1);
  }
}
