/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:05:55 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval(21.4160015, 1838.745563375527);
      Region.Location region_Location0 = interval0.checkPoint(1838.745563375527, 21.4160015);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
      assertEquals(21.4160015, interval0.getInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 0.0);
      Region.Location region_Location0 = interval0.checkPoint(0.0, 0.0);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
      assertEquals(0.0, interval0.getLower(), 0.01);
      assertEquals(0.0, interval0.getSup(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval((-189.78574), 0.0);
      double double0 = interval0.getUpper();
      assertEquals(0.0, double0, 0.01);
      assertEquals(189.78574, interval0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval(1.0, (-2492.78646));
      double double0 = interval0.getUpper();
      assertEquals((-2493.78646), interval0.getSize(), 0.01);
      assertEquals((-2492.78646), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(81.0, 81.0);
      double double0 = interval0.getSup();
      assertEquals(81.0, double0, 0.01);
      assertEquals(81.0, interval0.getInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((-984.531893831027), (-1037.6359));
      double double0 = interval0.getSup();
      assertEquals((-1037.6359), double0, 0.01);
      assertEquals((-1011.0838969155135), interval0.getMidPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 0.0);
      double double0 = interval0.getSize();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, interval0.getInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval((-189.78574), 0.0);
      double double0 = interval0.getSize();
      assertEquals(189.78574, double0, 0.01);
      assertEquals(0.0, interval0.getUpper(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 0.0);
      double double0 = interval0.getMidPoint();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, interval0.getLower(), 0.01);
      assertEquals(0.0, interval0.getUpper(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval(0.5, 0.5);
      double double0 = interval0.getMidPoint();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 0.0);
      double double0 = interval0.getLower();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval((-1.0), (-1.0));
      double double0 = interval0.getLower();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, interval0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-45.48), (-1.0));
      double double0 = interval0.getLength();
      assertEquals(44.48, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval(0.0, (-196.198159536));
      double double0 = interval0.getLength();
      assertEquals((-196.198159536), double0, 0.01);
      assertEquals(0.0, interval0.getLower(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 0.0);
      double double0 = interval0.getInf();
      assertEquals(0.0, interval0.getSup(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval(0.5, 0.5);
      double double0 = interval0.getInf();
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.5, interval0.getUpper(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(0.0, 0.0);
      double double0 = interval0.getBarycenter();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, interval0.getLower(), 0.01);
      assertEquals(0.0, interval0.getUpper(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval(0.5, 0.5);
      double double0 = interval0.getBarycenter();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval((-984.531893831027), (-1037.6359));
      double double0 = interval0.getBarycenter();
      assertEquals((-1011.0838969155135), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval((-984.531893831027), (-1037.6359));
      double double0 = interval0.getSize();
      assertEquals((-53.104006168973), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interval interval0 = new Interval((-984.531893831027), (-1037.6359));
      double double0 = interval0.getInf();
      assertEquals((-984.531893831027), double0, 0.01);
      assertEquals((-1011.0838969155135), interval0.getMidPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval(21.4160015, 1838.745563375527);
      Region.Location region_Location0 = interval0.checkPoint(712.9313791241457, 21.4160015);
      assertEquals(Region.Location.INSIDE, region_Location0);
      assertEquals(1817.329561875527, interval0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval(21.4160015, 1838.745563375527);
      Region.Location region_Location0 = interval0.checkPoint(1838.745563375527, 1838.745563375527);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
      assertEquals(1817.329561875527, interval0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval interval0 = new Interval((-189.78574), 0.0);
      Region.Location region_Location0 = interval0.checkPoint(0.0, 0.0);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
      assertEquals(0.0, interval0.getUpper(), 0.01);
      assertEquals((-189.78574), interval0.getLower(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = new Interval(1.0, 1.0);
      Region.Location region_Location0 = interval0.checkPoint(611.978746185532, 1.0);
      assertEquals(Region.Location.OUTSIDE, region_Location0);
      assertEquals(0.0, interval0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval(1.0, 1.0);
      Region.Location region_Location0 = interval0.checkPoint(0.0, 0.0);
      assertEquals(Region.Location.OUTSIDE, region_Location0);
      assertEquals(1.0, interval0.getUpper(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = new Interval(1.0, 1.0);
      double double0 = interval0.getLower();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, interval0.getSup(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval(1.0, 1.0);
      double double0 = interval0.getUpper();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, interval0.getInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval(1.0, 1.0);
      double double0 = interval0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval((-189.78574), 0.0);
      double double0 = interval0.getSup();
      assertEquals(0.0, double0, 0.01);
      assertEquals(189.78574, interval0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval((-189.78574), 0.0);
      double double0 = interval0.getMidPoint();
      assertEquals(0.0, interval0.getSup(), 0.01);
      assertEquals((-94.89287), double0, 0.01);
  }
}
