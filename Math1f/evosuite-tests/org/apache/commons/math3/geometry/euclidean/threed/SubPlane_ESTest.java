/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:17:22 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubPlane_ESTest extends SubPlane_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      PolygonsSet polygonsSet0 = new PolygonsSet();
      AbstractSubHyperplane<Euclidean3D, Euclidean2D> abstractSubHyperplane0 = subPlane0.buildNew(plane0, polygonsSet0);
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Plane plane0 = new Plane(vector3D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, 0.0, 0.0, 0.0);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      // Undeclared exception!
      try { 
        subPlane0.split((Hyperplane<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubPlane", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(plane0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      // Undeclared exception!
      try { 
        subPlane0.split(plane0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.threed.Plane cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[7];
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2DArray0[0];
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2DArray0[0];
      vector2DArray0[5] = vector2DArray0[3];
      vector2DArray0[6] = vector2DArray0[1];
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, vector2DArray0);
      SubPlane subPlane0 = new SubPlane((Hyperplane<Euclidean3D>) null, polygonsSet0);
      // Undeclared exception!
      try { 
        subPlane0.side((Hyperplane<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubPlane", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0, vector3D0, vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      SubHyperplane.SplitSubHyperplane<Euclidean3D> subHyperplane_SplitSubHyperplane0 = subPlane0.split(plane0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      Plane plane1 = plane0.translate(vector3D0);
      SubHyperplane.SplitSubHyperplane<Euclidean3D> subHyperplane_SplitSubHyperplane0 = subPlane0.split(plane1);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      SubHyperplane.SplitSubHyperplane<Euclidean3D> subHyperplane_SplitSubHyperplane0 = subPlane0.split(plane0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      Plane plane1 = new Plane(vector3D1, vector3D1);
      SubHyperplane.SplitSubHyperplane<Euclidean3D> subHyperplane_SplitSubHyperplane0 = subPlane0.split(plane1);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Plane plane0 = new Plane(vector3D0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector3D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      // Undeclared exception!
      try { 
        subPlane0.side(plane0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.threed.Vector3D cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      Plane plane1 = new Plane(vector3D0);
      Side side0 = subPlane0.side(plane1);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      Plane plane1 = plane0.translate(vector3D0);
      Side side0 = subPlane0.side(plane1);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      Side side0 = subPlane0.side(plane0);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      SubPlane subPlane0 = plane1.wholeHyperplane();
      plane0.reset(vector3D1, vector3D1);
      Side side0 = subPlane0.side(plane0);
      assertEquals(Side.BOTH, side0);
  }
}
