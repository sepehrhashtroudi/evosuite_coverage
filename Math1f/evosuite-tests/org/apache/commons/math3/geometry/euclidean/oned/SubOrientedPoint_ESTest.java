/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:06:33 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubOrientedPoint_ESTest extends SubOrientedPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      // Undeclared exception!
      try { 
        subOrientedPoint0.split(orientedPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      // Undeclared exception!
      try { 
        subOrientedPoint0.side(orientedPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      AbstractSubHyperplane<Euclidean1D, Euclidean1D> abstractSubHyperplane0 = subOrientedPoint0.buildNew(orientedPoint0, intervalsSet0);
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      Vector1D vector1D1 = Vector1D.ONE;
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D1, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint1.wholeHyperplane();
      SubHyperplane.SplitSubHyperplane<Euclidean1D> subHyperplane_SplitSubHyperplane0 = subOrientedPoint0.split(orientedPoint0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      SubHyperplane.SplitSubHyperplane<Euclidean1D> subHyperplane_SplitSubHyperplane0 = subOrientedPoint0.split(orientedPoint0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D0, false);
      Side side0 = subOrientedPoint0.side(orientedPoint1);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      Vector1D vector1D1 = Vector1D.ONE;
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D1, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint1.wholeHyperplane();
      Side side0 = subOrientedPoint0.side(orientedPoint0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      Side side0 = subOrientedPoint0.side(orientedPoint0);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      double double0 = subOrientedPoint0.getSize();
      assertEquals(0.0, double0, 0.01);
  }
}
