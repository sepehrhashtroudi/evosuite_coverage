/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:33:18 GMT 2022
 */

package org.apache.commons.math3.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.GradientFunction;
import org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;
import org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer;
import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseMultivariateVectorMultiStartOptimizer_ESTest extends BaseMultivariateVectorMultiStartOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseMultivariateVectorOptimizer<GradientFunction> baseMultivariateVectorOptimizer0 = (BaseMultivariateVectorOptimizer<GradientFunction>) mock(BaseMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      Well1024a well1024a0 = new Well1024a((long) 0);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well1024a0);
      BaseMultivariateVectorMultiStartOptimizer<GradientFunction> baseMultivariateVectorMultiStartOptimizer0 = new BaseMultivariateVectorMultiStartOptimizer<GradientFunction>(baseMultivariateVectorOptimizer0, 66, unitSphereRandomVectorGenerator0);
      // Undeclared exception!
      try { 
        baseMultivariateVectorMultiStartOptimizer0.getOptima();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no optimum computed yet
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BaseMultivariateVectorOptimizer<GradientFunction> baseMultivariateVectorOptimizer0 = (BaseMultivariateVectorOptimizer<GradientFunction>) mock(BaseMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      Well44497a well44497a0 = new Well44497a();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(81, well44497a0);
      BaseMultivariateVectorMultiStartOptimizer<GradientFunction> baseMultivariateVectorMultiStartOptimizer0 = null;
      try {
        baseMultivariateVectorMultiStartOptimizer0 = new BaseMultivariateVectorMultiStartOptimizer<GradientFunction>(baseMultivariateVectorOptimizer0, (-839), unitSphereRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -839 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BaseMultivariateVectorOptimizer<GradientFunction> baseMultivariateVectorOptimizer0 = (BaseMultivariateVectorOptimizer<GradientFunction>) mock(BaseMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      BaseMultivariateVectorMultiStartOptimizer<GradientFunction> baseMultivariateVectorMultiStartOptimizer0 = null;
      try {
        baseMultivariateVectorMultiStartOptimizer0 = new BaseMultivariateVectorMultiStartOptimizer<GradientFunction>(baseMultivariateVectorOptimizer0, 0, (RandomVectorGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(30);
      BaseMultivariateVectorMultiStartOptimizer<GradientFunction> baseMultivariateVectorMultiStartOptimizer0 = null;
      try {
        baseMultivariateVectorMultiStartOptimizer0 = new BaseMultivariateVectorMultiStartOptimizer<GradientFunction>((BaseMultivariateVectorOptimizer<GradientFunction>) null, 30, unitSphereRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BaseMultivariateVectorOptimizer<GradientFunction> baseMultivariateVectorOptimizer0 = (BaseMultivariateVectorOptimizer<GradientFunction>) mock(BaseMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      Well1024a well1024a0 = new Well1024a((long) 0);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well1024a0);
      BaseMultivariateVectorMultiStartOptimizer<GradientFunction> baseMultivariateVectorMultiStartOptimizer0 = new BaseMultivariateVectorMultiStartOptimizer<GradientFunction>(baseMultivariateVectorOptimizer0, 66, unitSphereRandomVectorGenerator0);
      int int0 = baseMultivariateVectorMultiStartOptimizer0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BaseMultivariateVectorOptimizer<GradientFunction> baseMultivariateVectorOptimizer0 = (BaseMultivariateVectorOptimizer<GradientFunction>) mock(BaseMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      Well1024a well1024a0 = new Well1024a((long) 0);
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, well1024a0);
      BaseMultivariateVectorMultiStartOptimizer<GradientFunction> baseMultivariateVectorMultiStartOptimizer0 = new BaseMultivariateVectorMultiStartOptimizer<GradientFunction>(baseMultivariateVectorOptimizer0, 66, unitSphereRandomVectorGenerator0);
      int int0 = baseMultivariateVectorMultiStartOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
  }
}
