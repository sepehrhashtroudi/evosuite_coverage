/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:42:07 GMT 2022
 */

package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultivariateFunctionMappingAdapter_ESTest extends MultivariateFunctionMappingAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = 165.363667272729;
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(3);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter(microsphereInterpolatingFunction0, doubleArray1, doubleArray1);
      double double0 = multivariateFunctionMappingAdapter0.value(doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      double[] doubleArray1 = multivariateFunctionMappingAdapter0.unboundedToBounded(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      double[] doubleArray2 = multivariateFunctionMappingAdapter0.boundedToUnbounded(doubleArray1);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.value(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.unboundedToBounded((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.unboundedToBounded(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(3);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
      double[] doubleArray2 = unitSphereRandomVectorGenerator0.nextVector();
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter(microsphereInterpolatingFunction0, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.boundedToUnbounded(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.03 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.boundedToUnbounded((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.boundedToUnbounded(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = null;
      try {
        multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, (double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(3);
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 0, 0, unitSphereRandomVectorGenerator0);
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter(microsphereInterpolatingFunction0, doubleArray1, doubleArray1);
      double[] doubleArray2 = multivariateFunctionMappingAdapter0.unboundedToBounded(doubleArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = Double.NaN;
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = null;
      try {
        multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \uFFFD is smaller than the minimum (\uFFFD)
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[5];
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = null;
      try {
        multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      double[] doubleArray1 = multivariateFunctionMappingAdapter0.boundedToUnbounded(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter0 = new MultivariateFunctionMappingAdapter((MultivariateFunction) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        multivariateFunctionMappingAdapter0.value(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter", e);
      }
  }
}
