/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:18:58 GMT 2022
 */

package org.apache.commons.math3.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer;
import org.apache.commons.math3.optimization.BaseMultivariateOptimizer;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseMultivariateMultiStartOptimizer_ESTest extends BaseMultivariateMultiStartOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseMultivariateOptimizer<MicrosphereInterpolatingFunction> baseMultivariateOptimizer0 = (BaseMultivariateOptimizer<MicrosphereInterpolatingFunction>) mock(BaseMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(iSAACRandom0);
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, gaussianRandomGenerator0);
      BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction> baseMultivariateMultiStartOptimizer0 = new BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction>(baseMultivariateOptimizer0, 272, uncorrelatedRandomVectorGenerator0);
      // Undeclared exception!
      try { 
        baseMultivariateMultiStartOptimizer0.getOptima();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no optimum computed yet
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BaseMultivariateOptimizer<MicrosphereInterpolatingFunction> baseMultivariateOptimizer0 = (BaseMultivariateOptimizer<MicrosphereInterpolatingFunction>) mock(BaseMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(32767, jDKRandomGenerator0);
      BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction> baseMultivariateMultiStartOptimizer0 = null;
      try {
        baseMultivariateMultiStartOptimizer0 = new BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction>(baseMultivariateOptimizer0, (-1801), unitSphereRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,801 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BaseMultivariateOptimizer<MicrosphereInterpolatingFunction> baseMultivariateOptimizer0 = (BaseMultivariateOptimizer<MicrosphereInterpolatingFunction>) mock(BaseMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction> baseMultivariateMultiStartOptimizer0 = null;
      try {
        baseMultivariateMultiStartOptimizer0 = new BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction>(baseMultivariateOptimizer0, (-23), (RandomVectorGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction> baseMultivariateMultiStartOptimizer0 = null;
      try {
        baseMultivariateMultiStartOptimizer0 = new BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction>((BaseMultivariateOptimizer<MicrosphereInterpolatingFunction>) null, 0, (RandomVectorGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BaseMultivariateOptimizer<MicrosphereInterpolatingFunction> baseMultivariateOptimizer0 = (BaseMultivariateOptimizer<MicrosphereInterpolatingFunction>) mock(BaseMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1340);
      BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction> baseMultivariateMultiStartOptimizer0 = new BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction>(baseMultivariateOptimizer0, 1340, unitSphereRandomVectorGenerator0);
      int int0 = baseMultivariateMultiStartOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BaseMultivariateOptimizer<MicrosphereInterpolatingFunction> baseMultivariateOptimizer0 = (BaseMultivariateOptimizer<MicrosphereInterpolatingFunction>) mock(BaseMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(1340);
      BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction> baseMultivariateMultiStartOptimizer0 = new BaseMultivariateMultiStartOptimizer<MicrosphereInterpolatingFunction>(baseMultivariateOptimizer0, 1340, unitSphereRandomVectorGenerator0);
      int int0 = baseMultivariateMultiStartOptimizer0.getEvaluations();
      assertEquals(0, int0);
  }
}
