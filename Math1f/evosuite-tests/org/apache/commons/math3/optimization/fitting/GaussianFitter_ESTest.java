/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:45:24 GMT 2022
 */

package org.apache.commons.math3.optimization.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
import org.apache.commons.math3.optimization.PointVectorValuePair;
import org.apache.commons.math3.optimization.fitting.GaussianFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianFitter_ESTest extends GaussianFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint((-1414.0), 1183.3825812, 0.0);
      gaussianFitter0.addObservedPoint(1183.3825812, 1183.3825812);
      gaussianFitter0.addObservedPoint(627.9712, 627.9712);
      double[] doubleArray0 = gaussianFitter0.fit();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint((-1414.0), 1183.3825812, 0.0);
      gaussianFitter0.addObservedPoint((-1503.27229715), (-1503.27229715));
      gaussianFitter0.addObservedPoint((-1503.27229715), 2501.658124604);
      double[] doubleArray1 = gaussianFitter0.fit();
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[3];
      WeightedObservedPoint weightedObservedPoint0 = mock(WeightedObservedPoint.class, new ViolatedAssumptionAnswer());
      doReturn(1.9636495113372803, 1.9636495113372803, 1.9636495113372803, 221.789126045695).when(weightedObservedPoint0).getWeight();
      doReturn(1.9636495113372803, 1.9636495113372803, (-1533.757311494507), 3967.36098034656, 627.9712).when(weightedObservedPoint0).getX();
      doReturn(2.0, 627.9712, 830.3478, 450.0794038, 1.9636495113372803).when(weightedObservedPoint0).getY();
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = mock(WeightedObservedPoint.class, new ViolatedAssumptionAnswer());
      doReturn(1703.9314, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-1049.85219898), 1.6422934532165527).when(weightedObservedPoint0).getWeight();
      doReturn((-1049.85219898), Double.NEGATIVE_INFINITY, (-853.4982263576), 3715.8072310745088, 0.4734157919883728).when(weightedObservedPoint0).getX();
      doReturn(Double.POSITIVE_INFINITY, (-4462.33572), 0.4734157919883728, 1.6422934532165527, 8.344717266683004E69).when(weightedObservedPoint0).getY();
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint((-1414.0), 1183.3825812, 0.0);
      gaussianFitter0.addObservedPoint((-1503.27229715), (-1503.27229715));
      gaussianFitter0.addObservedPoint((-1503.27229715), (-1503.27229715));
      double[] doubleArray1 = gaussianFitter0.fit();
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = mock(WeightedObservedPoint.class, new ViolatedAssumptionAnswer());
      doReturn(1703.9314, Double.POSITIVE_INFINITY).when(weightedObservedPoint0).getWeight();
      doReturn((-1049.85219898), Double.NEGATIVE_INFINITY, (-853.4982263576), 3715.8072310745088).when(weightedObservedPoint0).getX();
      doReturn(Double.POSITIVE_INFINITY, (-4462.33572), 0.4734157919883728, 1.6422934532165527).when(weightedObservedPoint0).getY();
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      double[] doubleArray0 = gaussianFitter0.fit((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      double[] doubleArray1 = gaussianFitter0.fit((double[]) null);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint((-1414.0), 1183.3825812, 0.0);
      gaussianFitter0.addObservedPoint((-1503.27229715), (-1503.27229715));
      gaussianFitter0.addObservedPoint(627.9712, 627.9712);
      double[] doubleArray1 = gaussianFitter0.fit();
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[0];
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint(3967.36098034656, 1.0, 0.0);
      gaussianFitter0.addObservedPoint(0.0, 0.0, 0.0);
      gaussianFitter0.addObservedPoint(3967.36098034656, 2.0);
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = mock(WeightedObservedPoint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedObservedPoint0).getWeight();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedObservedPoint0).getX();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedObservedPoint0).getY();
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint((-1503.27229715), (-1503.27229715));
      gaussianFitter0.addObservedPoint((-1503.27229715), 2501.658124604);
      gaussianFitter0.addObservedPoint(627.9712, 627.9712);
      double[] doubleArray1 = gaussianFitter0.fit();
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      WeightedObservedPoint weightedObservedPoint0 = mock(WeightedObservedPoint.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedObservedPoint0).getWeight();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedObservedPoint0).getX();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedObservedPoint0).getY();
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (3)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser((WeightedObservedPoint[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      gaussianFitter0.addObservedPoint((-1414.0), 1183.3825812, 0.0);
      gaussianFitter0.addObservedPoint((-1503.27229715), (-1503.27229715));
      gaussianFitter0.addObservedPoint(0.0, 0.0);
      // Undeclared exception!
      try { 
        gaussianFitter0.fit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorOptimizer0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        gaussianFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }
}
