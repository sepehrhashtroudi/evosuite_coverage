/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:47:38 GMT 2022
 */

package org.apache.commons.math3.optimization.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.analysis.function.Logistic;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
import org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer;
import org.apache.commons.math3.optimization.PointVectorValuePair;
import org.apache.commons.math3.optimization.fitting.CurveFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CurveFitter_ESTest extends CurveFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      CurveFitter<Logit.Parametric> curveFitter0 = new CurveFitter<Logit.Parametric>(differentiableMultivariateVectorOptimizer0);
      curveFitter0.addObservedPoint((-1936.7456), 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer0 = mock(MultivariateDifferentiableVectorOptimizer.class, new ViolatedAssumptionAnswer());
      CurveFitter<HarmonicOscillator.Parametric> curveFitter0 = new CurveFitter<HarmonicOscillator.Parametric>(multivariateDifferentiableVectorOptimizer0);
      curveFitter0.addObservedPoint(783.76, 783.76, 783.76);
      WeightedObservedPoint[] weightedObservedPointArray0 = curveFitter0.getObservations();
      assertEquals(1, weightedObservedPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(pointVectorValuePair0).getPointRef();
      MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer0 = mock(MultivariateDifferentiableVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(multivariateDifferentiableVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<Logit.Parametric> curveFitter0 = new CurveFitter<Logit.Parametric>(multivariateDifferentiableVectorOptimizer0);
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = curveFitter0.fit(logit_Parametric0, doubleArray0);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<PolynomialFunction.Parametric> curveFitter0 = new CurveFitter<PolynomialFunction.Parametric>(differentiableMultivariateVectorOptimizer0);
      PolynomialFunction.Parametric polynomialFunction_Parametric0 = new PolynomialFunction.Parametric();
      double[] doubleArray1 = curveFitter0.fit(polynomialFunction_Parametric0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<Logistic.Parametric> curveFitter0 = new CurveFitter<Logistic.Parametric>(differentiableMultivariateVectorOptimizer0);
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray1 = new double[6];
      double[] doubleArray2 = curveFitter0.fit(logistic_Parametric0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<Logistic.Parametric> curveFitter0 = new CurveFitter<Logistic.Parametric>(differentiableMultivariateVectorOptimizer0);
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray1 = new double[8];
      double[] doubleArray2 = curveFitter0.fit(115, logistic_Parametric0, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<Gaussian.Parametric> curveFitter0 = new CurveFitter<Gaussian.Parametric>(differentiableMultivariateVectorOptimizer0);
      Gaussian.Parametric gaussian_Parametric0 = new Gaussian.Parametric();
      // Undeclared exception!
      try { 
        curveFitter0.fit(0, gaussian_Parametric0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getPointRef();
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<Gaussian.Parametric> curveFitter0 = new CurveFitter<Gaussian.Parametric>(differentiableMultivariateVectorOptimizer0);
      curveFitter0.addObservedPoint((-1936.7456), (-1936.7456), 1553.458346008);
      double[] doubleArray1 = curveFitter0.fit((-518), (Gaussian.Parametric) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = mock(DifferentiableMultivariateVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((PointVectorValuePair) null).when(differentiableMultivariateVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<HarmonicOscillator.Parametric> curveFitter0 = new CurveFitter<HarmonicOscillator.Parametric>(differentiableMultivariateVectorOptimizer0);
      curveFitter0.addObservedPoint((-2832.017099), (-2832.017099));
      double[] doubleArray0 = new double[0];
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      // Undeclared exception!
      try { 
        curveFitter0.fit(harmonicOscillator_Parametric0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(pointVectorValuePair0).getPointRef();
      MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer0 = mock(MultivariateDifferentiableVectorOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(pointVectorValuePair0).when(multivariateDifferentiableVectorOptimizer0).optimize(anyInt() , any(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction.class) , any(double[].class) , any(double[].class) , any(double[].class));
      CurveFitter<Logistic.Parametric> curveFitter0 = new CurveFitter<Logistic.Parametric>(multivariateDifferentiableVectorOptimizer0);
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = curveFitter0.fit(824, logistic_Parametric0, doubleArray0);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer0 = mock(MultivariateDifferentiableVectorOptimizer.class, new ViolatedAssumptionAnswer());
      CurveFitter<PolynomialFunction.Parametric> curveFitter0 = new CurveFitter<PolynomialFunction.Parametric>(multivariateDifferentiableVectorOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = curveFitter0.getObservations();
      assertEquals(0, weightedObservedPointArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer0 = mock(MultivariateDifferentiableVectorOptimizer.class, new ViolatedAssumptionAnswer());
      CurveFitter<PolynomialFunction.Parametric> curveFitter0 = new CurveFitter<PolynomialFunction.Parametric>(multivariateDifferentiableVectorOptimizer0);
      curveFitter0.clearObservations();
  }
}
