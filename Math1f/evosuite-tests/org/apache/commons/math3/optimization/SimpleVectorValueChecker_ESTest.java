/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:25:42 GMT 2022
 */

package org.apache.commons.math3.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.SimpleVectorValueChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleVectorValueChecker_ESTest extends SimpleVectorValueChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = null;
      try {
        simpleVectorValueChecker0 = new SimpleVectorValueChecker((-22), 77, (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -22 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.SimpleVectorValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(77, 77, 77);
      assertEquals(77.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0);
      assertEquals(0.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker();
      assertEquals(1.1102230246251565E-14, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
  }
}
