/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:26:08 GMT 2022
 */

package org.apache.commons.math3.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizer;
import org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer;
import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.UniformRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultivariateDifferentiableMultiStartOptimizer_ESTest extends MultivariateDifferentiableMultiStartOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultivariateDifferentiableOptimizer multivariateDifferentiableOptimizer0 = mock(MultivariateDifferentiableOptimizer.class, new ViolatedAssumptionAnswer());
      MultivariateDifferentiableMultiStartOptimizer multivariateDifferentiableMultiStartOptimizer0 = null;
      try {
        multivariateDifferentiableMultiStartOptimizer0 = new MultivariateDifferentiableMultiStartOptimizer(multivariateDifferentiableOptimizer0, 0, (RandomVectorGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultivariateDifferentiableOptimizer multivariateDifferentiableOptimizer0 = mock(MultivariateDifferentiableOptimizer.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      Well19937c well19937c0 = new Well19937c();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937c0);
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, uniformRandomGenerator0);
      MultivariateDifferentiableMultiStartOptimizer multivariateDifferentiableMultiStartOptimizer0 = new MultivariateDifferentiableMultiStartOptimizer(multivariateDifferentiableOptimizer0, 4584, uncorrelatedRandomVectorGenerator0);
      assertEquals(0, multivariateDifferentiableMultiStartOptimizer0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultivariateDifferentiableOptimizer multivariateDifferentiableOptimizer0 = mock(MultivariateDifferentiableOptimizer.class, new ViolatedAssumptionAnswer());
      Well44497b well44497b0 = new Well44497b();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well44497b0);
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(1734, uniformRandomGenerator0);
      MultivariateDifferentiableMultiStartOptimizer multivariateDifferentiableMultiStartOptimizer0 = null;
      try {
        multivariateDifferentiableMultiStartOptimizer0 = new MultivariateDifferentiableMultiStartOptimizer(multivariateDifferentiableOptimizer0, (-16), uncorrelatedRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -16 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }
}
