/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:32:06 GMT 2022
 */

package org.apache.commons.math3.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizer;
import org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DifferentiableMultivariateMultiStartOptimizer_ESTest extends DifferentiableMultivariateMultiStartOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DifferentiableMultivariateOptimizer differentiableMultivariateOptimizer0 = mock(DifferentiableMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      DifferentiableMultivariateMultiStartOptimizer differentiableMultivariateMultiStartOptimizer0 = null;
      try {
        differentiableMultivariateMultiStartOptimizer0 = new DifferentiableMultivariateMultiStartOptimizer(differentiableMultivariateOptimizer0, 0, (RandomVectorGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DifferentiableMultivariateOptimizer differentiableMultivariateOptimizer0 = mock(DifferentiableMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      MersenneTwister mersenneTwister0 = new MersenneTwister(1245L);
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(mersenneTwister0);
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(2191, gaussianRandomGenerator0);
      DifferentiableMultivariateMultiStartOptimizer differentiableMultivariateMultiStartOptimizer0 = new DifferentiableMultivariateMultiStartOptimizer(differentiableMultivariateOptimizer0, 2191, uncorrelatedRandomVectorGenerator0);
      assertEquals(0, differentiableMultivariateMultiStartOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DifferentiableMultivariateOptimizer differentiableMultivariateOptimizer0 = mock(DifferentiableMultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(jDKRandomGenerator0);
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(0, gaussianRandomGenerator0);
      DifferentiableMultivariateMultiStartOptimizer differentiableMultivariateMultiStartOptimizer0 = null;
      try {
        differentiableMultivariateMultiStartOptimizer0 = new DifferentiableMultivariateMultiStartOptimizer(differentiableMultivariateOptimizer0, 0, uncorrelatedRandomVectorGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer", e);
      }
  }
}
