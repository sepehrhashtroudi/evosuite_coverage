/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:24:15 GMT 2022
 */

package org.apache.commons.math3.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.PointVectorValuePair;
import org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussNewtonOptimizer_ESTest extends GaussNewtonOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false);
      assertEquals(0, gaussNewtonOptimizer0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false, convergenceChecker0);
      assertEquals(0.0, gaussNewtonOptimizer0.getChiSquare(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer((ConvergenceChecker<PointVectorValuePair>) null);
      assertEquals(0, gaussNewtonOptimizer0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer();
      assertEquals(0, gaussNewtonOptimizer0.getJacobianEvaluations());
  }
}
