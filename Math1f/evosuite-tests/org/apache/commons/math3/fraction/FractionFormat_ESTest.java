/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:08:05 GMT 2022
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FractionFormat_ESTest extends FractionFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ParsePosition parsePosition0 = new ParsePosition(1);
      FractionFormat fractionFormat0 = FractionFormat.getImproperInstance(locale0);
      fractionFormat0.parseObject("-3,073 / 1", parsePosition0);
      assertEquals(2, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=2]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Fraction fraction0 = fractionFormat0.parse("4", parsePosition0);
      assertEquals(4L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getImproperInstance();
      Fraction fraction0 = fractionFormat0.parse("2 / 1");
      assertEquals(2L, fraction0.longValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      Fraction fraction0 = fractionFormat0.parse("-3,073 / 1");
      assertEquals((short) (-3073), fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      ParsePosition parsePosition0 = new ParsePosition((-192));
      // Undeclared exception!
      try { 
        fractionFormat0.parse(" / ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      ParsePosition parsePosition0 = new ParsePosition(207);
      // Undeclared exception!
      try { 
        fractionFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      FractionFormat fractionFormat1 = new FractionFormat(fractionFormat0, fractionFormat0);
      // Undeclared exception!
      try { 
        fractionFormat1.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      FractionFormat fractionFormat0 = new FractionFormat(numberFormat0, numberFormat0);
      // Undeclared exception!
      try { 
        fractionFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FractionFormat.getProperInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FractionFormat.getImproperInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FractionFormat.formatFraction((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot format given object as a fraction number
         //
         verifyException("org.apache.commons.math3.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      Fraction fraction0 = Fraction.ZERO;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fractionFormat0.format(fraction0, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FractionFormat fractionFormat0 = null;
      try {
        fractionFormat0 = new FractionFormat((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FractionFormat fractionFormat0 = FractionFormat.getImproperInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(1230);
      fractionFormat0.parse("4 / 5", parsePosition0);
      assertEquals(1230, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1230,errorIndex=1229]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat((NumberFormat) null, (NumberFormat) null);
      Short short0 = new Short((short)0);
      StringBuffer stringBuffer0 = new StringBuffer("ARITHMETIC_EXCEPTION");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (short)0);
      // Undeclared exception!
      try { 
        fractionFormat0.format((Object) short0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      FractionFormat fractionFormat0 = new FractionFormat(numberFormat0);
      Fraction fraction0 = new Fraction(3649.3);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1));
      fractionFormat0.format((Object) fraction0, stringBuffer0, fieldPosition0);
      assertEquals(11, stringBuffer0.length());
      assertEquals("36,493 / 10", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("4 xEFr{)%UK6){h+Dba");
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance(locale0);
      try { 
        fractionFormat0.parse("4 xEFr{)%UK6){h+Dba");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: string \"4 xEFr{)%UK6){h+Dba\" unparseable (from position 2) as an object of type org.apache.commons.math3.fraction.Fraction
         //
         verifyException("org.apache.commons.math3.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      FractionFormat fractionFormat1 = new FractionFormat(fractionFormat0, fractionFormat0);
      Fraction fraction0 = fractionFormat1.parse("1 / 4");
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.US;
      FractionFormat fractionFormat0 = FractionFormat.getImproperInstance(locale0);
      try { 
        fractionFormat0.parse("0/yQ&-BSD");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: string \"0/yQ&-BSD\" unparseable (from position 2) as an object of type org.apache.commons.math3.fraction.Fraction
         //
         verifyException("org.apache.commons.math3.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getImproperInstance();
      StringBuffer stringBuffer0 = new StringBuffer("]J>n/0e@U-");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      try { 
        fractionFormat0.format((Object) "-3,073 / 1", stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot format given object as a fraction number
         //
         verifyException("org.apache.commons.math3.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)FractionFormat.getDefaultNumberFormat();
      assertEquals("#,##0", decimalFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 240);
      FractionFormat fractionFormat1 = new FractionFormat(fractionFormat0, fractionFormat0);
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fractionFormat1.format(fraction0, stringBuffer0, fieldPosition0);
      assertEquals(17, stringBuffer0.length());
      assertEquals("1 0 / 1 / 2 0 / 1", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      String string0 = FractionFormat.formatFraction(fraction0);
      assertEquals("1 / 4", string0);
  }
}
