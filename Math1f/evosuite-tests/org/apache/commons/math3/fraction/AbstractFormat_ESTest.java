/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:09:46 GMT 2022
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math3.fraction.AbstractFormat;
import org.apache.commons.math3.fraction.BigFractionFormat;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionFormat;
import org.apache.commons.math3.fraction.ProperBigFractionFormat;
import org.apache.commons.math3.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFormat_ESTest extends AbstractFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(527);
      AbstractFormat.parseAndIgnoreWhitespace("zs,.#{l", parsePosition0);
      assertEquals("java.text.ParsePosition[index=526,errorIndex=-1]", parsePosition0.toString());
      assertEquals(526, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-168));
      parsePosition0.setIndex(0);
      char char0 = AbstractFormat.parseNextCharacter("", parsePosition0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      char char0 = AbstractFormat.parseNextCharacter("0 / 1", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      char char0 = AbstractFormat.parseNextCharacter("lFM^Q", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat((NumberFormat) null, (NumberFormat) null);
      NumberFormat numberFormat0 = fractionFormat0.getNumeratorFormat();
      assertNull(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ProperBigFractionFormat properBigFractionFormat0 = new ProperBigFractionFormat(numberFormat0, numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)properBigFractionFormat0.getNumeratorFormat();
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance(locale0);
      BigFractionFormat bigFractionFormat1 = new BigFractionFormat(bigFractionFormat0, bigFractionFormat0);
      NumberFormat numberFormat0 = bigFractionFormat1.getNumeratorFormat();
      assertFalse(numberFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      properFractionFormat0.setMinimumIntegerDigits((-335));
      properFractionFormat0.setDenominatorFormat(properFractionFormat0);
      NumberFormat numberFormat0 = properFractionFormat0.getDenominatorFormat();
      assertEquals(3, numberFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance(locale0);
      fractionFormat0.setDenominatorFormat(bigFractionFormat0);
      NumberFormat numberFormat0 = fractionFormat0.getDenominatorFormat();
      assertSame(numberFormat0, bigFractionFormat0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      DecimalFormat decimalFormat0 = (DecimalFormat)AbstractFormat.getDefaultNumberFormat(locale0);
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberFormat numberFormat0 = AbstractFormat.getDefaultNumberFormat();
      assertEquals(0, numberFormat0.getMaximumFractionDigits());
      assertTrue(numberFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(666);
      bigFractionFormat0.format((double) 1743L, stringBuffer0, fieldPosition0);
      assertEquals("1.743 0 / 1", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-135));
      // Undeclared exception!
      try { 
        AbstractFormat.parseNextCharacter("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(66);
      // Undeclared exception!
      try { 
        AbstractFormat.parseNextCharacter((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-3907));
      // Undeclared exception!
      try { 
        AbstractFormat.parseAndIgnoreWhitespace("f.^", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractFormat.parseAndIgnoreWhitespace("2<h-7Y4je.zK", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractFormat.getDefaultNumberFormat((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      StringBuffer stringBuffer0 = new StringBuffer("V`?tdv}yE15QFHk");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        properFractionFormat0.format(4503599627370496L, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4,503,599,627,370,496 to fraction (4,503,599,627,370,496/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ProperBigFractionFormat properBigFractionFormat0 = new ProperBigFractionFormat(numberFormat0, numberFormat0, numberFormat0);
      FieldPosition fieldPosition0 = new FieldPosition(2352);
      // Undeclared exception!
      try { 
        properBigFractionFormat0.format((long) 2352, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("length must be positive ({0})");
      properFractionFormat0.setDenominatorFormat(choiceFormat0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        properFractionFormat0.format((-1479L), stringBuffer0, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = new Locale("M<u`^ngI0M^)8XKRNRc", "Jq5x~N3y&6AcHRi%", "spFs9u#lU5N*");
      FractionFormat fractionFormat0 = FractionFormat.getImproperInstance(locale0);
      ProperBigFractionFormat properBigFractionFormat0 = new ProperBigFractionFormat(fractionFormat0, fractionFormat0, fractionFormat0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "M<u`^ngI0M^)8XKRNRc");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2055);
      // Undeclared exception!
      try { 
        properBigFractionFormat0.format(5.415131809829094E-8, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4,091,557,913,449,305 to fraction (4,091,557,913,449,305/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      Fraction fraction0 = (Fraction)properFractionFormat0.parseObject("0");
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance(locale0);
      DecimalFormat decimalFormat0 = (DecimalFormat)fractionFormat0.getNumeratorFormat();
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProperBigFractionFormat properBigFractionFormat0 = new ProperBigFractionFormat();
      DecimalFormat decimalFormat0 = (DecimalFormat)properBigFractionFormat0.getDenominatorFormat();
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance(locale0);
      // Undeclared exception!
      try { 
        bigFractionFormat0.setNumeratorFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator format
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("length must be positive ({0})");
      properFractionFormat0.setNumeratorFormat(choiceFormat0);
      assertTrue(properFractionFormat0.isGroupingUsed());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      // Undeclared exception!
      try { 
        properFractionFormat0.setDenominatorFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator format
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("length must be positive ({0})");
      properFractionFormat0.setDenominatorFormat(choiceFormat0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "length must be positive ({0})");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        properFractionFormat0.format((double) (-1479L), stringBuffer0, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProperBigFractionFormat properBigFractionFormat0 = new ProperBigFractionFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      properBigFractionFormat0.parse("4 / 5", parsePosition0);
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      assertFalse(fractionFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = properFractionFormat0.format(0L, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        properFractionFormat0.format(0.0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
