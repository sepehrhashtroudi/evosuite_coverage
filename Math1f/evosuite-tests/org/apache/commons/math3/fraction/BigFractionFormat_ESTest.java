/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:10:47 GMT 2022
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.ChoiceFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionFormat;
import org.apache.commons.math3.fraction.ProperBigFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BigFractionFormat_ESTest extends BigFractionFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat(numberFormat0);
      try { 
        bigFractionFormat0.parse("-w/)1m_#3UK3*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: string \"-w/)1m_#3UK3*\" unparseable (from position 0) as an object of type org.apache.commons.math3.fraction.BigFraction
         //
         verifyException("org.apache.commons.math3.fraction.BigFractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      bigFractionFormat0.parse(",5w)0 Hvixi_JD.?:H", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance();
      ParsePosition parsePosition0 = new ParsePosition(45);
      bigFractionFormat0.parse("cannot compute nth root for null or negative n: {0}", parsePosition0);
      assertEquals("java.text.ParsePosition[index=45,errorIndex=45]", parsePosition0.toString());
      assertEquals(45, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      bigFractionFormat0.parseNextBigInteger("@I* 4AxF~", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      ProperBigFractionFormat properBigFractionFormat0 = (ProperBigFractionFormat)BigFractionFormat.getProperInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      properBigFractionFormat0.parseNextBigInteger(",5w)0 viFxi_JD.?:H", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat(numberFormat0, numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition(2385);
      parsePosition0.setIndex(0);
      BigInteger bigInteger0 = bigFractionFormat0.parseNextBigInteger("-1 / 1", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat(numberFormat0, numberFormat0);
      BigFraction bigFraction0 = bigFractionFormat0.parse("4 / 5");
      assertNotNull(bigFraction0);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        bigFractionFormat0.parseNextBigInteger("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat();
      // Undeclared exception!
      try { 
        bigFractionFormat0.parseNextBigInteger("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(15);
      // Undeclared exception!
      try { 
        bigFractionFormat0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.US;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2234));
      // Undeclared exception!
      try { 
        bigFractionFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance(locale0);
      // Undeclared exception!
      try { 
        bigFractionFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance(locale0);
      // Undeclared exception!
      try { 
        bigFractionFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFractionFormat.getProperInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFractionFormat.getImproperInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigFractionFormat.formatBigFraction((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot format given object as a fraction number
         //
         verifyException("org.apache.commons.math3.fraction.BigFractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = null;
      try {
        bigFractionFormat0 = new BigFractionFormat((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.AbstractFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      bigFractionFormat0.parse("]l`Brsldb`((", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat();
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        bigFractionFormat0.format((Object) bigFraction0, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.BigFractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Vih'Xlhj'}`O&");
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat(choiceFormat0);
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        bigFractionFormat0.format(bigFraction0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance();
      BigInteger bigInteger0 = BigInteger.ONE;
      StringBuffer stringBuffer0 = new StringBuffer(260);
      FieldPosition fieldPosition0 = new FieldPosition(260);
      bigFractionFormat0.format((Object) bigInteger0, stringBuffer0, fieldPosition0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("1 / 1", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getImproperInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(45);
      bigFractionFormat0.parse("1,034,337,052,712,139 / 302,231,454,903,657,293,676,544", parsePosition0);
      assertEquals(47, parsePosition0.getErrorIndex());
      assertEquals(45, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale("QAaIK/#c$2IA|iuZd", "QAaIK/#c$2IA|iuZd", "QAaIK/#c$2IA|iuZd");
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance(locale0);
      BigFraction bigFraction0 = bigFractionFormat0.parse("18");
      assertEquals((byte)18, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat(numberFormat0, numberFormat0);
      BigFraction bigFraction0 = bigFractionFormat0.parse("-1 / 1");
      assertEquals((byte) (-1), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance(locale0);
      Long long0 = new Long((-1486));
      String string0 = bigFractionFormat0.format((Object) long0);
      assertEquals("-1,486 0 / 1", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat();
      StringBuffer stringBuffer0 = new StringBuffer(",5w)0 Hvixi_JD.?:H");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        bigFractionFormat0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot format given object as a fraction number
         //
         verifyException("org.apache.commons.math3.fraction.BigFractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = new BigFractionFormat();
      BigFractionFormat bigFractionFormat1 = new BigFractionFormat(bigFractionFormat0, bigFractionFormat0);
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      StringBuffer stringBuffer0 = new StringBuffer(",5w)0 Hvixi_JD.?:H");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      bigFractionFormat1.format(bigFraction0, stringBuffer0, fieldPosition0);
      assertEquals(",5w)0 Hvixi_JD.?:H1 / 1 / 3 / 1", stringBuffer0.toString());
      assertEquals(32, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFractionFormat bigFractionFormat0 = BigFractionFormat.getProperInstance();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1943);
      // Undeclared exception!
      try { 
        bigFractionFormat0.format((BigFraction) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.ProperBigFractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      String string0 = BigFractionFormat.formatBigFraction(bigFraction0);
      assertEquals("2 / 3", string0);
  }
}
