/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:18:18 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.linear.AbstractFieldMatrix;
import org.apache.commons.math3.linear.Array2DRowFieldMatrix;
import org.apache.commons.math3.linear.ArrayFieldVector;
import org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor;
import org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor;
import org.apache.commons.math3.linear.FieldMatrixChangingVisitor;
import org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;
import org.apache.commons.math3.linear.FieldVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Array2DRowFieldMatrix_ESTest extends Array2DRowFieldMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[1][2];
      Complex[] complexArray1 = new Complex[6];
      Complex complex0 = Complex.I;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, false);
      try { 
        array2DRowFieldMatrix0.preMultiply(complexArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex[] complexArray0 = new Complex[8];
      Complex complex0 = Complex.I;
      complexArray0[0] = complex0;
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      ArrayFieldVector<Complex> arrayFieldVector0 = new ArrayFieldVector<Complex>(complexField0);
      try { 
        array2DRowFieldMatrix0.operate((FieldVector<Complex>) arrayFieldVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[][] complexArray0 = new Complex[2][6];
      Complex[] complexArray1 = new Complex[5];
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, 1755, 1084);
      Complex[][] complexArray0 = new Complex[2][5];
      array2DRowFieldMatrix0.setSubMatrix(complexArray0, 0, 0);
      assertEquals(1755, array2DRowFieldMatrix0.getRowDimension());
      assertEquals(1084, array2DRowFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = Complex.valueOf(0.7161639496097392);
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      array2DRowFieldMatrix0.setEntry(0, 0, complex0);
      assertEquals(1, array2DRowFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[1][8];
      Complex[] complexArray1 = new Complex[5];
      Complex complex0 = new Complex(0.0);
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, false);
      array2DRowFieldMatrix0.multiplyEntry(0, 0, complex0);
      assertEquals(1, array2DRowFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex[] complexArray0 = new Complex[9];
      Complex complex0 = Complex.ZERO;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      array2DRowFieldMatrix0.addToEntry(0, 0, complexArray0[0]);
      assertEquals(9, array2DRowFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.ONE;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complexArray1[1]);
      Complex complex1 = array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0);
      assertNull(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex[] complexArray0 = new Complex[7];
      Complex complex0 = Complex.valueOf((-996.599), 0.0);
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complexArray0[4]);
      Complex complex1 = array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0, 0, 0, 0, 0);
      assertNull(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      Complex[][] complexArray0 = array2DRowFieldMatrix0.getDataRef();
      assertNull(complexArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex[] complexArray0 = new Complex[1];
      Complex complex0 = Complex.ONE;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      Complex[][] complexArray1 = array2DRowFieldMatrix0.getData();
      assertEquals(1, complexArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      assertEquals(0, array2DRowFieldMatrix0.getRowDimension());
      
      array2DRowFieldMatrix0.getData();
      assertEquals(0, array2DRowFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = Complex.ONE;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      try { 
        array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0, 2684, (-2611), 2684, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (2,684)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex[] complexArray0 = new Complex[1];
      Complex complex0 = Complex.ZERO;
      complexArray0[0] = complex0;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(field0, 722, 231);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      // Undeclared exception!
      array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex[] complexArray0 = new Complex[2];
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex[] complexArray0 = new Complex[5];
      Complex complex0 = Complex.NaN;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixChangingVisitor<Complex> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Complex>(complex0);
      try { 
        array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixChangingVisitor<Complex>) defaultFieldMatrixChangingVisitor0, (-107), (-3428), (-3428), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-107)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      try { 
        array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0, (-2911), (-2911), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-2,911)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[5];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixPreservingVisitor<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex[] complexArray0 = new Complex[1];
      Complex complex0 = Complex.ONE;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixChangingVisitor<Complex> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Complex>(complexArray0[0]);
      try { 
        array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixChangingVisitor<Complex>) defaultFieldMatrixChangingVisitor0, 2163, (-2636), 2163, 1363);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (2,163)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixChangingVisitor<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      Complex[] complexArray0 = new Complex[5];
      Complex complex0 = Complex.ONE;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix1 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      try { 
        array2DRowFieldMatrix0.subtract(array2DRowFieldMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 5x1 but expected 0x0
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      Complex[][] complexArray1 = new Complex[4][9];
      try { 
        array2DRowFieldMatrix0.setSubMatrix(complexArray1, 810, 810);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (810)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex[] complexArray0 = new Complex[9];
      Complex complex0 = new Complex((-959.51));
      complexArray0[0] = complex0;
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[][] complexArray1 = new Complex[9][6];
      complexArray1[0] = complexArray0;
      complexArray1[1] = complexArray0;
      complexArray1[2] = complexArray0;
      complexArray1[3] = complexArray0;
      complexArray1[4] = complexArray0;
      complexArray1[5] = complexArray0;
      complexArray1[6] = complexArray0;
      complexArray1[7] = complexArray0;
      complexArray1[8] = complexArray0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray1);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.preMultiply(complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = Complex.NaN;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      try { 
        array2DRowFieldMatrix0.multiply(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[1][8];
      Complex[] complexArray1 = new Complex[2];
      Complex complex0 = Complex.valueOf((-670.94));
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(field0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.multiply(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = Complex.valueOf(1.0);
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.multiply((Array2DRowFieldMatrix<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      Complex[] complexArray0 = new Complex[0];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix1 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.multiply(array2DRowFieldMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[0];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex[] complexArray0 = new Complex[5];
      Complex complex0 = new Complex(0.0);
      complexArray0[0] = complex0;
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      Complex[][] complexArray1 = new Complex[6][4];
      complexArray1[0] = complexArray0;
      complexArray1[1] = complexArray0;
      complexArray1[2] = complexArray0;
      complexArray1[3] = complexArray0;
      complexArray1[4] = complexArray0;
      complexArray1[5] = complexArray0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix1 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray1, true);
      try { 
        array2DRowFieldMatrix0.add(array2DRowFieldMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 6x5 but expected 5x1
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.ONE;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.add(array2DRowFieldMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[0][6];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Complex[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex[] complexArray0 = new Complex[0];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Complex[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, (Complex[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[][] complexArray0 = new Complex[5][1];
      Complex[] complexArray1 = new Complex[9];
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, (Complex[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex[] complexArray0 = new Complex[8];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Field<Complex>) null, complexArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0, (-1449), 2023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-1,449)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Field<Complex>) null, 1216, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      int int0 = array2DRowFieldMatrix0.getColumnDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex[] complexArray0 = new Complex[3];
      Complex complex0 = Complex.ONE;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      int int0 = array2DRowFieldMatrix0.getColumnDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[0];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.getColumnDimension();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex[] complexArray0 = new Complex[9];
      Complex complex0 = Complex.NaN;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      int int0 = array2DRowFieldMatrix0.getRowDimension();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Field<Complex>) null);
      int int0 = array2DRowFieldMatrix0.getRowDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = Complex.NaN;
      complexArray0[0] = complex0;
      Complex[][] complexArray1 = new Complex[8][5];
      complexArray1[0] = complexArray0;
      complexArray1[1] = complexArray0;
      complexArray1[2] = complexArray0;
      complexArray1[3] = complexArray0;
      complexArray1[4] = complexArray0;
      complexArray1[5] = complexArray0;
      complexArray1[6] = complexArray0;
      complexArray1[7] = complexArray0;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray1);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(field0, complexArray1, false);
      assertEquals(8, array2DRowFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[][] complexArray0 = new Complex[0][9];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex[][] complexArray0 = new Complex[0][6];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, 815, 1458);
      DefaultFieldMatrixChangingVisitor<Complex> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Complex>(complex0);
      // Undeclared exception!
      array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixChangingVisitor<Complex>) defaultFieldMatrixChangingVisitor0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = new Complex(1.0, 1.0);
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      try { 
        array2DRowFieldMatrix0.setEntry((-4041), 0, complexArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-4,041)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex[] complexArray0 = new Complex[3];
      Complex complex0 = Complex.I;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      try { 
        array2DRowFieldMatrix0.getEntry(0, 680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (680)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex[] complexArray0 = new Complex[7];
      Complex complex0 = Complex.valueOf((-996.599), 0.0);
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      Complex complex1 = array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0, 0, 0, 0, 0);
      assertSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.NaN;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      Complex complex1 = array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      Complex[] complexArray0 = new Complex[2];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      DefaultFieldMatrixChangingVisitor<Complex> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Complex>(complex0);
      Complex complex1 = array2DRowFieldMatrix0.walkInColumnOrder((FieldMatrixChangingVisitor<Complex>) defaultFieldMatrixChangingVisitor0);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = Complex.valueOf(1.0);
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      Complex complex1 = array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0, 0, 0, 0, 0);
      assertSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.NaN;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      Complex complex1 = array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex[] complexArray0 = new Complex[6];
      Complex complex0 = Complex.NaN;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      DefaultFieldMatrixChangingVisitor<Complex> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Complex>(complexArray0[0]);
      Complex complex1 = array2DRowFieldMatrix0.walkInRowOrder((FieldMatrixChangingVisitor<Complex>) defaultFieldMatrixChangingVisitor0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      Complex[] complexArray0 = new Complex[2];
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      assertEquals(2, array2DRowFieldMatrix0.getRowDimension());
      
      Complex[] complexArray1 = array2DRowFieldMatrix0.preMultiply(complexArray0);
      assertEquals(1, complexArray1.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex[] complexArray0 = new Complex[8];
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[][] complexArray1 = new Complex[9][6];
      complexArray1[0] = complexArray0;
      complexArray1[1] = complexArray0;
      complexArray1[2] = complexArray0;
      complexArray1[3] = complexArray0;
      complexArray1[4] = complexArray0;
      complexArray1[5] = complexArray0;
      complexArray1[6] = complexArray0;
      complexArray1[7] = complexArray0;
      complexArray1[8] = complexArray0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray1);
      try { 
        array2DRowFieldMatrix0.preMultiply(complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[2];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.preMultiply(complexArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.NaN;
      complexArray1[0] = complex0;
      complexArray1[1] = complex0;
      complexArray1[2] = complex0;
      complexArray1[3] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      Complex[] complexArray2 = array2DRowFieldMatrix0.operate(complexArray1);
      assertEquals(2, complexArray2.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.NaN;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      Complex[] complexArray2 = new Complex[5];
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      try { 
        array2DRowFieldMatrix0.operate(complexArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 4
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.NaN;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.operate(complexArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-780.5795));
      ComplexField complexField0 = complex0.getField();
      Complex[][] complexArray0 = new Complex[1][7];
      Complex[] complexArray1 = new Complex[0];
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      Complex[][] complexArray0 = new Complex[6][8];
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.setSubMatrix(complexArray0, 1041, (-4508));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // first 1,041 rows are not initialized yet
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[2];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      try { 
        array2DRowFieldMatrix0.setSubMatrix((Complex[][]) null, (-377), (-377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[1][8];
      Complex[] complexArray1 = new Complex[2];
      Complex complex0 = Complex.valueOf((-670.94));
      complexArray1[0] = complex0;
      complexArray1[1] = complex0;
      complexArray0[0] = complexArray1;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(field0, complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix1 = new Array2DRowFieldMatrix<Complex>(field0, complexArray1);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix2 = array2DRowFieldMatrix0.multiply(array2DRowFieldMatrix1);
      assertEquals(1, array2DRowFieldMatrix2.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][9];
      Complex[] complexArray1 = new Complex[6];
      Complex complex0 = Complex.I;
      complexArray1[0] = complex0;
      complexArray1[1] = complex0;
      complexArray1[2] = complex0;
      complexArray1[3] = complex0;
      complexArray1[4] = complexArray1[2];
      complexArray1[5] = complexArray1[2];
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray0[0];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, true);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix1 = array2DRowFieldMatrix0.subtract(array2DRowFieldMatrix0);
      assertFalse(array2DRowFieldMatrix1.equals((Object)array2DRowFieldMatrix0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][9];
      Complex[] complexArray1 = new Complex[6];
      Complex complex0 = Complex.I;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray0[0];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, true);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.subtract(array2DRowFieldMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][2];
      Complex[] complexArray1 = new Complex[4];
      Complex complex0 = Complex.NaN;
      complexArray1[0] = complex0;
      complexArray1[1] = complexArray1[0];
      complexArray1[2] = complexArray1[1];
      complexArray1[3] = complexArray1[2];
      complexArray0[0] = complexArray1;
      complexArray0[1] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix1 = array2DRowFieldMatrix0.add(array2DRowFieldMatrix0);
      assertTrue(array2DRowFieldMatrix1.equals((Object)array2DRowFieldMatrix0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][6];
      Complex[] complexArray1 = new Complex[2];
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Field<Complex>) null, complexArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex[][] complexArray0 = new Complex[7][7];
      Complex[] complexArray1 = new Complex[0];
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.subtract(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][9];
      Complex[] complexArray1 = new Complex[6];
      Complex complex0 = Complex.I;
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][9];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = Complex.ZERO;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      array2DRowFieldMatrix0.getRowMatrix(0);
      assertEquals(2, array2DRowFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex[] complexArray0 = new Complex[3];
      Complex complex0 = Complex.I;
      complexArray0[0] = complex0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
      Complex[][] complexArray1 = array2DRowFieldMatrix0.getDataRef();
      assertEquals(3, complexArray1.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      Complex[] complexArray0 = new Complex[2];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      try { 
        array2DRowFieldMatrix0.multiplyEntry((-1393), (-1393), complex0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,393)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Field<Complex>) null);
      // Undeclared exception!
      try { 
        array2DRowFieldMatrix0.getData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      Complex[] complexArray0 = new Complex[2];
      complexArray0[0] = complex0;
      Complex[][] complexArray1 = new Complex[2][9];
      complexArray1[0] = complexArray0;
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[2];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      array2DRowFieldMatrix0.createMatrix(2161, 2161);
      assertEquals(2, array2DRowFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>((Field<Complex>) null);
      try { 
        array2DRowFieldMatrix0.createMatrix(0, (-285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[2][9];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = null;
      try {
        array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      try { 
        array2DRowFieldMatrix0.addToEntry(0, 0, complex0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[] complexArray0 = new Complex[2];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      assertEquals(1, array2DRowFieldMatrix0.getColumnDimension());
      
      array2DRowFieldMatrix0.copy();
      assertEquals(2, array2DRowFieldMatrix0.getRowDimension());
  }
}
