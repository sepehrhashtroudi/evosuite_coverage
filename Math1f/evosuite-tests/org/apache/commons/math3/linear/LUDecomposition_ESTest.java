/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:52:13 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DecompositionSolver;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.LUDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LUDecomposition_ESTest extends LUDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1641.655494396));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix0, (double) doubleArray0[3]);
      RealMatrix realMatrix1 = lUDecomposition0.getU();
      assertNotNull(realMatrix1);
      assertEquals(Double.NaN, lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      LUDecomposition lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0);
      lUDecomposition0.getPivot();
      assertEquals(1.0, lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      LUDecomposition lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0);
      // Undeclared exception!
      try { 
        lUDecomposition0.getU();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, (-2669.44722594857));
      // Undeclared exception!
      try { 
        lUDecomposition0.getP();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3395, 3395);
      LUDecomposition lUDecomposition0 = new LUDecomposition(blockRealMatrix0, 0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition((RealMatrix) null, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0, 259.7032568497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0, 758.84874794721);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (3x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0);
      double double0 = lUDecomposition0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 310.886974788109;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, 294.6581486524499);
      double double0 = lUDecomposition0.getDeterminant();
      assertEquals(310.886974788109, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(744, 744);
      LUDecomposition lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0, 744);
      RealMatrix realMatrix0 = lUDecomposition0.getP();
      assertNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 310.886974788109;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, 294.6581486524499);
      lUDecomposition0.getP();
      RealMatrix realMatrix0 = lUDecomposition0.getP();
      assertEquals(310.886974788109, lUDecomposition0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(557, 557);
      LUDecomposition lUDecomposition0 = new LUDecomposition(blockRealMatrix0, 52);
      RealMatrix realMatrix0 = lUDecomposition0.getU();
      assertNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 310.886974788109;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, 294.6581486524499);
      lUDecomposition0.getU();
      RealMatrix realMatrix0 = lUDecomposition0.getU();
      assertNotNull(realMatrix0);
      assertEquals(310.886974788109, lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, 0.0);
      RealMatrix realMatrix0 = lUDecomposition0.getL();
      assertNotNull(realMatrix0);
      assertEquals(Double.NaN, lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(744, 744);
      LUDecomposition lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0, 744);
      RealMatrix realMatrix0 = lUDecomposition0.getL();
      assertNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 310.886974788109;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, 294.6581486524499);
      lUDecomposition0.getL();
      RealMatrix realMatrix0 = lUDecomposition0.getL();
      assertNotNull(realMatrix0);
      assertEquals(310.886974788109, lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4612.22771;
      doubleArray0[1] = 3445.6915004302627;
      doubleArray0[2] = (-2111.1545482810843);
      doubleArray0[3] = 4021.1;
      doubleArray0[5] = 4021.43352287;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      RealMatrix realMatrix1 = diagonalMatrix0.multiply(realMatrix0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix1, 7.054443447243064E-8);
      assertEquals(0.0, lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (8x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      LUDecomposition lUDecomposition0 = new LUDecomposition(array2DRowRealMatrix0);
      // Undeclared exception!
      try { 
        lUDecomposition0.getL();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      LUDecomposition lUDecomposition0 = new LUDecomposition(diagonalMatrix0, 294.6581486524499);
      int[] intArray0 = lUDecomposition0.getPivot();
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(557, 557);
      LUDecomposition lUDecomposition0 = new LUDecomposition(blockRealMatrix0, 52);
      DecompositionSolver decompositionSolver0 = lUDecomposition0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }
}
