/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:16:12 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealMatrixChangingVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(351, 1153);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(351, openMapRealMatrix0.getRowDimension());
      assertEquals(1153, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      openMapRealMatrix0.multiplyEntry(39, 351, 351);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(351, openMapRealMatrix0.getRowDimension());
      assertEquals(1153, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(190, 190);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(190, openMapRealMatrix0.getColumnDimension());
      assertEquals(190, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      // Undeclared exception!
      openMapRealMatrix0.walkInOptimizedOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(227, 227);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertEquals(227, openMapRealMatrix1.getColumnDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(227, openMapRealMatrix1.getRowDimension());
      assertNotNull(openMapRealMatrix1);
      
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix1.subtract((RealMatrix) openMapRealMatrix0);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertEquals(227, openMapRealMatrix1.getColumnDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(227, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix2.isTransposable());
      assertEquals(227, openMapRealMatrix2.getRowDimension());
      assertEquals(227, openMapRealMatrix2.getColumnDimension());
      assertNotNull(openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(227, 227);
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(227, openMapRealMatrix1.getColumnDimension());
      assertEquals(227, openMapRealMatrix1.getRowDimension());
      assertNotNull(openMapRealMatrix1);
      
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.add(openMapRealMatrix1);
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(227, openMapRealMatrix1.getColumnDimension());
      assertEquals(227, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix2.isTransposable());
      assertEquals(227, openMapRealMatrix2.getColumnDimension());
      assertEquals(227, openMapRealMatrix2.getRowDimension());
      assertNotNull(openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(38, 38);
      assertEquals(38, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(38, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(38, 1641);
      assertEquals(38, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(38, openMapRealMatrix0.getColumnDimension());
      assertEquals(38, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(1641, openMapRealMatrix1.getColumnDimension());
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      
      double double0 = openMapRealMatrix1.getEntry(0, 211);
      assertEquals(0.0, double0, 0.01);
      assertEquals(38, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(38, openMapRealMatrix0.getColumnDimension());
      assertEquals(38, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(1641, openMapRealMatrix1.getColumnDimension());
      assertFalse(openMapRealMatrix0.equals((Object)openMapRealMatrix1));
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(102, 102);
      assertEquals(102, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(102, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      try { 
        openMapRealMatrix0.subtract((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 102x102 but expected 0x0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(874, 874);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(874, openMapRealMatrix0.getRowDimension());
      assertEquals(874, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(874, 874);
      assertEquals(874, openMapRealMatrix0.getRowDimension());
      assertEquals(874, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(1239, 1239);
      assertEquals(1239, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(1239, openMapRealMatrix1.getColumnDimension());
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotNull(openMapRealMatrix1);
      
      try { 
        openMapRealMatrix0.subtract(openMapRealMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 874x874 but expected 1,239x1,239
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(73, 8);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(73, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertNotNull(openMapRealMatrix0);
      
      try { 
        openMapRealMatrix0.setEntry(1840, 73, 115.88946);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,840)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(136, 136);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      try { 
        openMapRealMatrix0.multiplyEntry(136, 201, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (136)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2481, 2481);
      assertEquals(2481, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(2481, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      double[] doubleArray0 = new double[9];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      assertEquals(9, diagonalMatrix0.getColumnDimension());
      assertFalse(diagonalMatrix0.isTransposable());
      assertEquals(9, diagonalMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(diagonalMatrix0);
      
      try { 
        openMapRealMatrix0.multiply((RealMatrix) diagonalMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,481 != 9
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(589, 45);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(45, openMapRealMatrix0.getColumnDimension());
      assertEquals(589, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      try { 
        openMapRealMatrix0.createMatrix(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      try { 
        openMapRealMatrix0.addToEntry(1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1455, 5423);
      assertEquals(1455, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(5423, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      // Undeclared exception!
      try { 
        openMapRealMatrix0.add((OpenMapRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(227, 227);
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      openMapRealMatrix0.setEntry(0, 0, 0);
      assertEquals(227, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(227, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(136, 136);
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.multiply(openMapRealMatrix0);
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertEquals(136, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(136, openMapRealMatrix1.getColumnDimension());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(241, 241);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(241, openMapRealMatrix0.getRowDimension());
      assertEquals(241, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(241, openMapRealMatrix0.getRowDimension());
      assertEquals(241, openMapRealMatrix0.getColumnDimension());
      assertEquals(241, openMapRealMatrix1.getColumnDimension());
      assertEquals(241, openMapRealMatrix1.getRowDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(136, 136);
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertNotNull(openMapRealMatrix0);
      
      int int0 = openMapRealMatrix0.getColumnDimension();
      assertEquals(136, int0);
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(38, 38);
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(38, openMapRealMatrix0.getColumnDimension());
      assertEquals(38, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      try { 
        openMapRealMatrix0.getEntry(0, 211);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (211)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(136, 136);
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(136, 136);
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(136, openMapRealMatrix1.getColumnDimension());
      assertEquals(136, openMapRealMatrix1.getRowDimension());
      assertNotNull(openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix1.multiply(openMapRealMatrix0);
      assertEquals(136, openMapRealMatrix0.getRowDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(136, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix1.isTransposable());
      assertEquals(136, openMapRealMatrix1.getColumnDimension());
      assertEquals(136, openMapRealMatrix1.getRowDimension());
      assertEquals(136, openMapRealMatrix2.getRowDimension());
      assertEquals(136, openMapRealMatrix2.getColumnDimension());
      assertFalse(openMapRealMatrix2.isTransposable());
      assertNotNull(openMapRealMatrix2);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix0, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix2);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix1);
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2481, 2481);
      assertEquals(2481, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(2481, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      int int0 = openMapRealMatrix0.getRowDimension();
      assertEquals(2481, int0);
      assertEquals(2481, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix0.isTransposable());
      assertEquals(2481, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1680, 50);
      // Undeclared exception!
      openMapRealMatrix0.scalarAdd(50);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3, 3);
      assertEquals(3, openMapRealMatrix0.getColumnDimension());
      assertEquals(3, openMapRealMatrix0.getRowDimension());
      
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) openMapRealMatrix0);
      assertTrue(realMatrix0.equals((Object)openMapRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,686,014,132,420,609 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(241, 241);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertEquals(241, openMapRealMatrix1.getRowDimension());
      assertEquals(241, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1429, 181);
      try { 
        openMapRealMatrix0.multiply(openMapRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 181 != 1,429
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix((OpenMapRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealMatrix", e);
      }
  }
}
