/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:23:40 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.ConjugateGradient;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.JacobiPreconditioner;
import org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver;
import org.apache.commons.math3.linear.RealLinearOperator;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.SymmLQ;
import org.apache.commons.math3.util.Incrementor;
import org.apache.commons.math3.util.IterationManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PreconditionedIterativeLinearSolver_ESTest extends PreconditionedIterativeLinearSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1408, 1408, false);
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealVector realVector0 = conjugateGradient0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      SymmLQ symmLQ0 = new SymmLQ(5612, (-2803.852062489794), false);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(5612);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) diagonalMatrix0, realVector0, realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5,612 != 1
         //
         verifyException("org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5625);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5625, false);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1146, 5625);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) blockRealMatrix0, realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (5,625x1,146) linear operator
         //
         verifyException("org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), 664.5, false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector1, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), (-2025), false);
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector1, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (8x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      PreconditionedIterativeLinearSolver.checkParameters(array2DRowRealMatrix0, array2DRowRealMatrix0, realVector0, realVector0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5612);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5612, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5612;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      RealVector realVector1 = symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
      assertFalse(realVector1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5612);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5612, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5612;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      RealVector realVector1 = symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
      assertFalse(realVector1.isNaN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(56, 56, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 56;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 56.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      RealVector realVector0 = symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-548), 120.0, false);
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-548.0);
      doubleArray1[1] = (Double) (-548.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-548) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5595);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5595, false);
      double[] doubleArray0 = new double[11];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0, false);
      double[] doubleArray0 = new double[4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (4x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5625);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5625, false);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      // Undeclared exception!
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5628);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5628, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(5628, 5628);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      // Undeclared exception!
      symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0, false);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(2698, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 1526.5103472994, false);
      double[] doubleArray0 = new double[6];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(31, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 31, false);
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) null, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(5, (-2.1581119071750435E-10), true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1167.6979568246;
      doubleArray0[1] = (-2.1581119071750435E-10);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(diagonalMatrix0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5625);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5625, false);
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (7x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(227, 227, true);
      double[] doubleArray0 = new double[9];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      RealVector realVector0 = RealVector.unmodifiableRealVector((RealVector) null);
      // Undeclared exception!
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, realVector0, realVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 661.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      IterationManager iterationManager0 = new IterationManager(1456);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-1221.684892), false);
      // Undeclared exception!
      conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), 664.5, false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,025) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1870, 1375.7163694936733, true);
      double[] doubleArray0 = new double[6];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 661.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      IterationManager iterationManager0 = new IterationManager(1456);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-1221.684892), true);
      // Undeclared exception!
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.ConjugateGradient", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 120.0, true);
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Double[] doubleArray1 = new Double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, 0, 0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (8x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      IterationManager iterationManager0 = new IterationManager(1);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 1, false);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(5625, 5625);
      SymmLQ symmLQ0 = new SymmLQ(5625, 27.25930657871, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(5625, 5625);
      // Undeclared exception!
      symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), (-2025), true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,025) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5625);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5625, false);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(5625);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5,625
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0, true);
      double[] doubleArray0 = new double[6];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SymmLQ symmLQ0 = new SymmLQ((-3290), (-1696.281354421761), true);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (6x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), (-2025), true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealVector realVector0 = RealVector.unmodifiableRealVector((RealVector) null);
      // Undeclared exception!
      try { 
        conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, realVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5612);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(5612, 5612);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 5612, false);
      // Undeclared exception!
      conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 1.0, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager((-1), incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 1493.935, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-1053), 0.006, true);
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      try { 
        conjugateGradient0.solve((RealLinearOperator) null, (RealLinearOperator) null, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(322562, (-2.356194490192345), false);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-2.356194490192345);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      SymmLQ symmLQ0 = new SymmLQ(1, 0.0, true);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), 664.5, false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,025) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(138, 138, true);
      double[] doubleArray0 = new double[3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2025), 664.5, false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x5) linear operator
         //
         verifyException("org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5625);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 5625, true);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(1559, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 1559, false);
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        PreconditionedIterativeLinearSolver.checkParameters(array2DRowRealMatrix0, array2DRowRealMatrix0, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        PreconditionedIterativeLinearSolver.checkParameters((RealLinearOperator) null, (RealLinearOperator) null, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-2045), (-2045), false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        PreconditionedIterativeLinearSolver.checkParameters(diagonalMatrix0, array2DRowRealMatrix0, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x8) linear operator
         //
         verifyException("org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5612);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 5612, false);
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(array2DRowRealMatrix0);
      // Undeclared exception!
      conjugateGradient0.solve((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, realVector0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1433, 1433, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(5612);
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 5612, false);
      RealVector realVector1 = conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, realVector0);
      assertNotSame(realVector1, realVector0);
      assertTrue(realVector1.equals((Object)realVector0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1433, 1433, true);
      RealVector realVector0 = conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector0, realVector0);
  }
}
