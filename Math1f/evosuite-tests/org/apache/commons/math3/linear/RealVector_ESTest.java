/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:28:24 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Cosh;
import org.apache.commons.math3.analysis.function.Log;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RealVectorChangingVisitor;
import org.apache.commons.math3.linear.RealVectorPreservingVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealVector_ESTest extends RealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-462.221);
      doubleArray0[1] = 2379.844;
      doubleArray0[2] = (-462.221);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 60.958940530009;
      doubleArray0[5] = (-0.6857516427158127);
      doubleArray0[6] = 0.5;
      doubleArray0[7] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.toString();
      // Undeclared exception!
      try { 
        arrayRealVector0.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1201.6807375);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      arrayRealVector1.getDimension();
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      realVector0.toArray();
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combine((-1201.6807375), 1, realVector0);
      Logit logit0 = new Logit();
      arrayRealVector2.map(logit0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        realVector0.walkInDefaultOrder(realVectorChangingVisitor0, 1, 1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(711, 1117.716552);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 711;
      doubleArray0[1] = (double) 711;
      doubleArray0[2] = 1117.716552;
      doubleArray0[3] = 1117.716552;
      doubleArray0[4] = 1117.716552;
      RealVector realVector0 = arrayRealVector1.append(920.56235);
      realVector0.set(0.0);
      doubleArray0[5] = 1117.716552;
      RealVector realVector1 = arrayRealVector0.unitVector();
      realVector1.projection(arrayRealVector1);
      doubleArray0[6] = (double) 711;
      doubleArray0[7] = 1117.716552;
      doubleArray0[8] = (double) 711;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(1117.716552).when(realVectorChangingVisitor0).end();
      doReturn((-866.3)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0, 0, 0);
      Object object0 = new Object();
      realVector1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(711, 1117.716552);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 711;
      doubleArray0[1] = (double) 711;
      doubleArray0[2] = 1117.716552;
      doubleArray0[3] = 1117.716552;
      doubleArray0[4] = 1117.716552;
      RealVector realVector0 = arrayRealVector1.append(920.56235);
      realVector0.set(0.0);
      doubleArray0[5] = 1117.716552;
      RealVector realVector1 = arrayRealVector0.unitVector();
      realVector1.projection(arrayRealVector1);
      doubleArray0[6] = (double) 711;
      doubleArray0[7] = 1117.716552;
      doubleArray0[8] = (double) 711;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0, 0, 0);
      Object object0 = new Object();
      realVector1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = 885.079590223883;
      doubleArray0[3] = 885.079590223883;
      doubleArray0[4] = (-1253.289825996514);
      doubleArray0[5] = 885.079590223883;
      Double[] doubleArray1 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      arrayRealVector1.unitize();
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector1);
      realVector0.getL1Distance(arrayRealVector1);
      realVector0.getLInfNorm();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
      RealVector.unmodifiableRealVector(arrayRealVector2);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector1.walkInOptimizedOrder(realVectorChangingVisitor0, 110, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (110)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1504.2);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1964.13083222717);
      doubleArray0[4] = 3610.5238331;
      int int0 = 3361;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3361);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      arrayRealVector1.getMaxValue();
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector1);
      // Undeclared exception!
      realVector0.getMinIndex();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(0, 0);
      arrayRealVector0.subtract(arrayRealVector2);
      RealVector realVector0 = arrayRealVector2.getSubVector(0, 0);
      realVector0.getMinIndex();
      arrayRealVector2.mapAddToSelf(0);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0);
      arrayRealVector3.getMaxValue();
      arrayRealVector3.getMaxIndex();
      arrayRealVector0.add(arrayRealVector3);
      try { 
        arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.mapAdd((-3033.474049121));
      arrayRealVector2.getMaxValue();
      arrayRealVector2.set((-3033.474049121));
      arrayRealVector1.toString();
      arrayRealVector1.checkIndex(1);
      arrayRealVector2.unitize();
      arrayRealVector1.getLInfNorm();
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(1440.852660295367).when(realVectorChangingVisitor0).end();
      doReturn(2734.381923926, (-1.6040513288090055E-287)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector1.walkInDefaultOrder(realVectorChangingVisitor0);
      int int1 = 1853;
      RealVector.Entry realVector_Entry0 = arrayRealVector1.new Entry();
      realVector_Entry0.getValue();
      RealVectorChangingVisitor realVectorChangingVisitor1 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor1, (-730), (-730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-730)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.mapAdd((-3033.474049121));
      arrayRealVector2.getMaxValue();
      arrayRealVector1.toString();
      // Undeclared exception!
      try { 
        realVector0.mapSubtractToSelf((-3033.474049121));
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1754);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1754;
      doubleArray0[1] = (double) 1754;
      doubleArray0[2] = (double) 1754;
      doubleArray0[3] = 1770.66721;
      doubleArray0[4] = (double) 1754;
      doubleArray0[5] = 1886.593896551935;
      doubleArray0[6] = (double) 1754;
      doubleArray0[7] = (double) 1754;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.getNorm();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-214.37100278471);
      doubleArray0[2] = (-953.903);
      doubleArray0[3] = (-1350.79);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-1350.79));
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      arrayRealVector0.mapAdd((-2165.495081));
      arrayRealVector0.getMaxIndex();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      arrayRealVector2.getMinValue();
      arrayRealVector0.iterator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1504.2);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1963.780148621967);
      doubleArray0[4] = 3610.5238331;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3361, Double.POSITIVE_INFINITY);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      // Undeclared exception!
      arrayRealVector1.getMaxValue();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-1997.6165031152261);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      int int0 = (-1);
      try { 
        realVector0.getSubVector((-1), 188);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.mapAdd((-3033.474049121));
      arrayRealVector2.getMaxValue();
      arrayRealVector2.set((-3033.474049121));
      arrayRealVector1.toString();
      arrayRealVector1.checkIndex(1);
      arrayRealVector2.unitize();
      RealVector.Entry realVector_Entry0 = arrayRealVector1.new Entry();
      realVector_Entry0.getIndex();
      arrayRealVector1.getLInfNorm();
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-3.141592653589793)).when(realVectorChangingVisitor0).end();
      doReturn((-3033.474049121), (-3.141592653589793)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector1.walkInDefaultOrder(realVectorChangingVisitor0);
      int int1 = 1853;
      try { 
        arrayRealVector0.checkVectorDimensions(1853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,853
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      arrayRealVector1.mapAdd((-3033.474049121));
      arrayRealVector0.getMaxValue();
      arrayRealVector1.toString();
      arrayRealVector1.checkIndex(1);
      try { 
        arrayRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = 880.39;
      doubleArray0[3] = 880.39;
      doubleArray0[4] = (-1253.289825996514);
      doubleArray0[5] = 0.0;
      Double[] doubleArray1 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      arrayRealVector1.unitize();
      RealVector.unmodifiableRealVector(arrayRealVector1);
      double double1 = new Double((-1253.289825996514));
      ArrayRealVector arrayRealVector2 = new ArrayRealVector();
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector2);
      arrayRealVector0.getLInfDistance(realVector0);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
      try { 
        arrayRealVector2.cosine(arrayRealVector3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1812.7722562616627);
      doubleArray0[1] = 2909.5;
      doubleArray0[2] = 4289.980141373747;
      doubleArray0[3] = (-750.119136);
      doubleArray0[4] = 9.086660081726823E-80;
      doubleArray0[5] = (-1336.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      double double0 = arrayRealVector0.getEntry(5);
      assertEquals((-1336.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 2.586214542388916;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      int int0 = 1;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(1);
      arrayRealVector0.append(arrayRealVector1);
      RealVector realVector0 = arrayRealVector0.mapDivide(2.586214542388916);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-253.52)).when(realVectorPreservingVisitor0).end();
      realVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
      realVector0.getMinIndex();
      int int1 = (-822);
      try { 
        arrayRealVector0.setEntry((-822), 3493.703174234);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-822)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2421.48;
      doubleArray0[2] = (-1037.57);
      doubleArray0[3] = (-4557.99);
      doubleArray0[4] = 965.4;
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      arrayRealVector0.sparseIterator();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      arrayRealVector0.mapAddToSelf((-1120.414155641));
      try { 
        arrayRealVector1.setSubVector((-1706), arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,706)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(Double.NaN);
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.5);
      doubleArray0[3] = double3;
      Double.max((double) doubleArray0[3], (double) doubleArray0[3]);
      Double double4 = new Double((-207.5096));
      Double.sum(1544.5895624819, (-2176.37192549));
      doubleArray0[4] = double4;
      Double.sum(0.5, (-2176.37192549));
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      Double.min((double) doubleArray0[1], Double.NaN);
      doubleArray0[6] = double6;
      Double double7 = new Double(Double.NEGATIVE_INFINITY);
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      doubleArray0[8] = double8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      Double.sum((double) doubleArray0[5], (-2176.37192549));
      int int0 = 0;
      int int1 = 277;
      try { 
        arrayRealVector1.checkVectorDimensions(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 18 != 9
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-3761.29171));
      double double1 = new Double((-3761.29171));
      doubleArray0[0] = double0;
      double double2 = Double.NEGATIVE_INFINITY;
      double double3 = 897.3747983;
      Double.min(Double.NEGATIVE_INFINITY, 897.3747983);
      int int0 = 1311;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1311);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      RealVector realVector1 = arrayRealVector0.append(realVector0);
      try { 
        realVector1.getDistance(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,622 != 1,311
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.586214542388916;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      int int0 = 1;
      arrayRealVector0.append(arrayRealVector0);
      RealVector realVector0 = arrayRealVector0.mapDivide(2.586214542388916);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(realVectorPreservingVisitor0).end();
      realVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
      realVector0.getMinIndex();
      int int1 = (-822);
      try { 
        arrayRealVector0.setEntry((-822), 3493.703174234);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-822)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(5312.5680102);
      Double.max(0.006, 5312.5680102);
      doubleArray0[0] = double0;
      Double double1 = new Double(5312.5680102);
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      Double double2 = new Double(1.0);
      doubleArray0[3] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        arrayRealVector0.walkInOptimizedOrder((RealVectorChangingVisitor) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3787.1173085662);
      doubleArray0[1] = 2831.7024;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = (-1201.6807375);
      doubleArray0[6] = 1886.593896551935;
      doubleArray0[7] = (-1585.408767534059);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(6.283185307179586).when(realVectorChangingVisitor0).end();
      doReturn(20.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      arrayRealVector0.getL1Norm();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      arrayRealVector1.getNorm();
      arrayRealVector1.iterator();
      try { 
        arrayRealVector0.add(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 16
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.mapAdd((-3033.474049121));
      arrayRealVector2.getMaxValue();
      arrayRealVector2.set((-3033.474049121));
      arrayRealVector1.toString();
      arrayRealVector1.checkIndex(1);
      arrayRealVector2.unitize();
      RealVector.Entry realVector_Entry0 = arrayRealVector1.new Entry();
      realVector_Entry0.getIndex();
      arrayRealVector1.getLInfNorm();
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector1.walkInDefaultOrder(realVectorChangingVisitor0);
      int int1 = 1853;
      try { 
        arrayRealVector0.checkVectorDimensions(1853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,853
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1020);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      double double0 = arrayRealVector0.getDistance(arrayRealVector1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.586214542388916;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      int int0 = 1;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(1);
      arrayRealVector0.append(arrayRealVector1);
      RealVector realVector0 = arrayRealVector0.mapDivide(2.586214542388916);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      realVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
      realVector0.getMinIndex();
      int int1 = (-822);
      try { 
        arrayRealVector0.setEntry((-822), 3493.703174234);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-822)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 24;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(24);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = (double) 24;
      doubleArray0[3] = (double) 24;
      doubleArray0[4] = (double) 24;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapSubtract(4529.28416378505);
      Cosh cosh0 = new Cosh();
      arrayRealVector1.map(cosh0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector();
      realVector0.mapSubtract(0.0);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0);
      arrayRealVector3.toString();
      realVector0.ebeDivide(arrayRealVector3);
      arrayRealVector1.iterator();
      try { 
        arrayRealVector0.add(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24 != 5
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2832.6564635306227;
      doubleArray0[1] = 1398.7872122355;
      doubleArray0[2] = 1994.6;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(1398.7872122355).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(1398.7872122355, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 3603;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3603, 3603);
      arrayRealVector0.getLInfNorm();
      double double0 = (-1855.0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      RealVector realVector1 = realVector0.combine(3603.0, (-1855.0), arrayRealVector0);
      realVector1.append((double) 3603);
      realVector1.getDimension();
      // Undeclared exception!
      arrayRealVector0.subtract(realVector0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.combineToSelf((-946.4516383), (-946.4516383), realVector0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1574.29178394)).when(realVectorPreservingVisitor0).end();
      RealVector realVector1 = arrayRealVector1.mapMultiply((-946.4516383));
      RealVector realVector2 = RealVector.unmodifiableRealVector(realVector0);
      realVector2.isNaN();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(realVector1);
      realVector1.dotProduct(arrayRealVector2);
      arrayRealVector0.getDistance(arrayRealVector1);
      arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1574.29178394);
      doubleArray1[1] = (-1574.29178394);
      arrayRealVector1.set(20.0);
      doubleArray1[2] = (-946.4516383);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, doubleArray1);
      try { 
        arrayRealVector3.combine((-601.885351935), 0.0, arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4505.8959740779;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      int int0 = 0;
      arrayRealVector0.setSubVector(0, (RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      arrayRealVector0.ebeDivide(arrayRealVector1);
      // Undeclared exception!
      try { 
        arrayRealVector0.combine(Double.NEGATIVE_INFINITY, 4505.8959740779, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3787.1173085662);
      doubleArray0[1] = 2831.7024;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = (-1201.6807375);
      doubleArray0[6] = 1886.593896551935;
      doubleArray0[7] = (-1585.408767534059);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1190.79627472603)).when(realVectorChangingVisitor0).end();
      doReturn((-3787.1173085662)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      arrayRealVector0.getL1Norm();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      Iterator<RealVector.Entry> iterator0 = arrayRealVector1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      arrayRealVector1.walkInOptimizedOrder(realVectorChangingVisitor0);
      int int0 = 991;
      try { 
        arrayRealVector0.checkIndices(991, 991);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (991)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 24;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(24);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = (double) 24;
      doubleArray0[3] = (double) 24;
      doubleArray0[4] = (double) 24;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapSubtract(4529.28416378505);
      Cosh cosh0 = new Cosh();
      arrayRealVector1.map(cosh0);
      try { 
        realVector0.ebeDivide(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 24
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 5093;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(5093);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      realVector_Entry0.setValue(756.10879703);
      realVector_Entry0.setIndex(5093);
      int int1 = 0;
      realVector_Entry0.setIndex(0);
      try { 
        arrayRealVector0.addToEntry(5093, (-694.416580376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (5,093)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector0);
      arrayRealVector0.iterator();
      arrayRealVector2.getLInfDistance(arrayRealVector1);
      arrayRealVector1.checkVectorDimensions(arrayRealVector2);
      arrayRealVector1.combine(0.0, 0.0, arrayRealVector2);
      ArrayRealVector arrayRealVector3 = null;
      try {
        arrayRealVector3 = new ArrayRealVector((-147));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      arrayRealVector1.getMinIndex();
      arrayRealVector1.getMaxValue();
      PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
      try {
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty polynomials coefficients array
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(90, Double.NaN);
      arrayRealVector1.getMaxValue();
      arrayRealVector1.append((RealVector) arrayRealVector0);
      try { 
        arrayRealVector1.ebeDivide(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 90 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(Double.NaN);
      doubleArray0[0] = double0;
      Double double1 = new Double(1569.33);
      doubleArray0[1] = double1;
      Double double2 = new Double(1151.6744573);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        arrayRealVector0.getL1Distance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      arrayRealVector0.getMinValue();
      arrayRealVector0.getDimension();
      try { 
        arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-953.903);
      doubleArray0[3] = (-1350.79);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-1350.79));
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      double double0 = arrayRealVector0.getMinValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
      try { 
        arrayRealVector2.cosine(arrayRealVector1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-246.3979543196972);
      doubleArray0[1] = (-1001.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 807.46241;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 733.47;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = arrayRealVector0.getSubVector(0, 0);
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.combineToSelf((-946.4516383), (-946.4516383), realVector0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      RealVector realVector1 = arrayRealVector1.mapMultiply((-946.4516383));
      RealVector realVector2 = RealVector.unmodifiableRealVector(realVector0);
      realVector2.isNaN();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(realVector1);
      realVector1.dotProduct(arrayRealVector2);
      arrayRealVector0.getDistance(arrayRealVector1);
      arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      arrayRealVector1.set(20.0);
      doubleArray1[2] = (-946.4516383);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, doubleArray1);
      try { 
        arrayRealVector3.combine((-601.885351935), 0.0, arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(6.283185307179586);
      doubleArray0[0] = double0;
      Double double1 = new Double(3284.85061);
      doubleArray0[1] = double1;
      Double double2 = new Double((-61.772929412));
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((-499.0));
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      arrayRealVector0.getMinIndex();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) doubleArray0[4];
      doubleArray1[3] = (-61.772929412);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, false);
      try { 
        arrayRealVector0.ebeMultiply(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-55.73131671928986));
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.POSITIVE_INFINITY);
      doubleArray0[1] = double1;
      Double double2 = new Double(1373.5345994572);
      doubleArray0[2] = double2;
      Double.sum(6.283185307179586, (-387.0));
      Double double3 = new Double((double) doubleArray0[1]);
      Double.sum((double) doubleArray0[2], 0.0);
      Double.min(1373.5345994572, (double) doubleArray0[2]);
      doubleArray0[3] = double3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.append((double) doubleArray0[1]);
      realVector0.mapSubtract(Double.POSITIVE_INFINITY);
      int int0 = 1;
      arrayRealVector0.getSubVector(1, 1);
      arrayRealVector0.isNaN();
      realVector0.isNaN();
      Double.sum(Double.NEGATIVE_INFINITY, (double) doubleArray0[2]);
      int int1 = 753;
      try { 
        arrayRealVector0.setEntry(753, (double) doubleArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (753)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-997.297127);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-212.0795576);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
      try { 
        arrayRealVector2.getLInfDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 5
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = 0.0;
      int int0 = 0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(0, 0.0);
      RealVector realVector0 = arrayRealVector0.combineToSelf(0.0, 0.0, arrayRealVector1);
      ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeDivide(realVector0);
      Log log0 = new Log();
      arrayRealVector2.map(log0);
      // Undeclared exception!
      try { 
        arrayRealVector2.sparseIterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2116, 2116);
      arrayRealVector0.unitVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combine(4082.41714, 821.5902077989093, arrayRealVector1);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      arrayRealVector2.walkInDefaultOrder(realVectorPreservingVisitor0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector1.walkInDefaultOrder(realVectorChangingVisitor0, (-2057), (-1040));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-2,057)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RealVector realVector0 = RealVector.unmodifiableRealVector((RealVector) null);
      // Undeclared exception!
      try { 
        realVector0.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      double double0 = arrayRealVector1.getDistance(arrayRealVector0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3787.1173085662);
      doubleArray0[1] = 2831.7024;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 20.0;
      double double1 = (-1201.6807375);
      doubleArray0[5] = (-1201.6807375);
      doubleArray0[6] = 1886.593896551935;
      doubleArray0[7] = (-1585.408767534059);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      int int0 = 0;
      arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      arrayRealVector0.getL1Norm();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      arrayRealVector1.iterator();
      try { 
        arrayRealVector0.add(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 16
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-771.152999212857);
      doubleArray0[2] = (-528.9239);
      doubleArray0[3] = 69.084793;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      arrayRealVector1.getLInfNorm();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      arrayRealVector0.set((-1.0));
      int int0 = 1;
      try { 
        arrayRealVector1.walkInDefaultOrder(realVectorPreservingVisitor0, (-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1553.398);
      doubleArray0[2] = (-2292.72695);
      doubleArray0[3] = 559.8207908141877;
      doubleArray0[4] = (-326.481050728625);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealVector realVector0 = arrayRealVector0.add(arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1226.9872230732;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-2.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      Sqrt sqrt0 = new Sqrt();
      ArrayRealVector arrayRealVector1 = arrayRealVector0.map(sqrt0);
      arrayRealVector0.mapMultiplyToSelf(1226.9872230732);
      RealVector realVector0 = arrayRealVector1.copy();
      RealVector realVector1 = realVector0.mapSubtractToSelf(0.0);
      try { 
        realVector1.walkInOptimizedOrder((RealVectorChangingVisitor) null, 786, 2537);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (786)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1176.76877582644;
      doubleArray0[2] = (-2.0);
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.toString();
      arrayRealVector0.getMaxIndex();
      try { 
        arrayRealVector0.addToEntry(87, 20.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (87)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = 880.39;
      doubleArray0[3] = 880.39;
      doubleArray0[4] = (-1253.289825996514);
      doubleArray0[5] = 0.0;
      Double[] doubleArray1 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      arrayRealVector1.unitize();
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector1);
      realVector0.getLInfNorm();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
      RealVector realVector1 = RealVector.unmodifiableRealVector(arrayRealVector2);
      try { 
        arrayRealVector0.getLInfDistance(realVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 12
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      arrayRealVector0.getNorm();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        arrayRealVector1.sparseIterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
      arrayRealVector1.equals("");
      arrayRealVector2.checkVectorDimensions(arrayRealVector0);
      arrayRealVector0.setSubVector(0, (RealVector) arrayRealVector2);
      arrayRealVector2.getNorm();
      arrayRealVector2.dotProduct(arrayRealVector1);
      RealVector realVector0 = arrayRealVector0.mapAddToSelf(0.0);
      realVector0.iterator();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      arrayRealVector1.walkInDefaultOrder(realVectorPreservingVisitor0);
      int int1 = (-67);
      try { 
        arrayRealVector1.addToEntry((-67), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-67)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.addToEntry(1980, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,980)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3291.1861017211);
      doubleArray0[2] = 470.3206178568624;
      doubleArray0[3] = (-1035.42284568004);
      doubleArray0[4] = 120.0;
      doubleArray0[5] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.hashCode();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      RealVector realVector0 = arrayRealVector1.mapDivide(470.3206178568624);
      realVector0.dotProduct(arrayRealVector1);
      try { 
        arrayRealVector0.getL1Distance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 12
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 120.0;
      doubleArray0[0] = 120.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.getLInfNorm();
      arrayRealVector0.mapMultiply(Double.NaN);
      arrayRealVector0.toArray();
      int int0 = 1;
      double double1 = (-154.88476);
      try { 
        arrayRealVector0.addToEntry(1, (-154.88476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1088.7);
      doubleArray0[1] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        arrayRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      arrayRealVector0.append(arrayRealVector1);
      arrayRealVector1.combine(1, 1, arrayRealVector0);
      arrayRealVector0.getMinIndex();
      try { 
        arrayRealVector1.getEntry(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      doubleArray0[0] = double0;
      Double double1 = new Double(2.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double(221.06902);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(Double.NEGATIVE_INFINITY);
      doubleArray0[7] = double7;
      Double double8 = new Double(5480.68);
      doubleArray0[8] = double8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      // Undeclared exception!
      try { 
        realVector0.mapMultiplyToSelf((-2250.2338249393));
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-989.2916);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, doubleArray0);
      arrayRealVector2.unitize();
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector2.getLInfDistance(realVector0);
      try { 
        arrayRealVector3.setEntry(1565, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,565)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(1248.64986218);
      doubleArray0[1] = double1;
      Double double2 = new Double(1248.64986218);
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf(1248.64986218);
      doubleArray0[3] = double3;
      Double double4 = new Double(3721.4);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((-2.0));
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[0]);
      doubleArray0[7] = double7;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      try { 
        arrayRealVector0.getSubVector(123, 182);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (123)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1525.98803038;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-531.363);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      try { 
        arrayRealVector0.checkVectorDimensions(1800);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 1,800
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 991;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(991, 991);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      arrayRealVector1.toString();
      arrayRealVector0.append((RealVector) arrayRealVector1);
      int int1 = 49;
      try { 
        arrayRealVector0.getSubVector(991, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (991)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2288.1118104759);
      doubleArray0[1] = 3431.2012586357096;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-202.207371606332);
      doubleArray0[4] = (-417.2731);
      doubleArray0[5] = 2230.2620215;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector3.walkInOptimizedOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2288.1118104759);
      doubleArray0[1] = 3431.2012586357096;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-202.207371606332);
      doubleArray0[4] = (-417.2731);
      doubleArray0[5] = (-202.207371606332);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-202.207371606332)).when(realVectorChangingVisitor0).end();
      doReturn(3431.2012586357096).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector3.walkInOptimizedOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals((-202.207371606332), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.map((UnivariateFunction) null);
      double double0 = 0.0;
      RealVector realVector0 = arrayRealVector0.mapDivideToSelf(0.0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, doubleArray0);
      arrayRealVector2.append(arrayRealVector1);
      // Undeclared exception!
      try { 
        realVector0.outerProduct(arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-962.13552961);
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-2743.25927286));
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      Iterator<RealVector.Entry> iterator0 = arrayRealVector2.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.mapAdd((-3033.474049121));
      arrayRealVector2.getMaxValue();
      arrayRealVector1.toString();
      arrayRealVector1.checkIndex(1);
      try { 
        arrayRealVector2.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      try { 
        arrayRealVector0.projection(arrayRealVector1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2165.495081);
      doubleArray0[1] = 3493.703174234;
      doubleArray0[2] = (-1867.9934083713);
      doubleArray0[3] = (-841.2390537808);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.006;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      double double0 = arrayRealVector0.getMaxValue();
      assertEquals(3493.703174234, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1176.76877582644;
      doubleArray0[2] = 1176.76877582644;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.toString();
      arrayRealVector0.getMaxIndex();
      try { 
        arrayRealVector0.addToEntry(87, 20.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (87)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 3180.91;
      doubleArray0[5] = (-362.76);
      doubleArray0[6] = 1826.81772;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3180.91;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-362.76);
      doubleArray1[4] = 1826.81772;
      doubleArray1[5] = 0.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1);
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0, arrayRealVector2);
      RealVector realVector0 = arrayRealVector3.mapAdd((-362.76));
      assertNotSame(arrayRealVector3, realVector0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(4659.151158933211);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-218.6125604);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.5);
      doubleArray0[3] = 1728.27604;
      doubleArray0[4] = (-3482.466915);
      doubleArray0[5] = 456.373771075;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3436, 0.0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        arrayRealVector1.projection(arrayRealVector0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(120, 1.0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        arrayRealVector0.projection(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 120 != 240
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapMultiply(1.0E-12);
      realVector0.mapDivide((-1.0));
      realVector0.set(0.006);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.006;
      doubleArray1[2] = 0.006;
      doubleArray1[3] = 0.006;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[9];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[0] = polynomialFunction0;
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialFunction polynomialFunction2 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[2] = polynomialFunction2;
      PolynomialFunction polynomialFunction3 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[3] = polynomialFunction3;
      PolynomialFunction polynomialFunction4 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[4] = polynomialFunction4;
      PolynomialFunction polynomialFunction5 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[5] = polynomialFunction5;
      PolynomialFunction polynomialFunction6 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[6] = polynomialFunction6;
      PolynomialFunction polynomialFunction7 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[7] = polynomialFunction7;
      PolynomialFunction polynomialFunction8 = new PolynomialFunction(doubleArray1);
      polynomialFunctionArray0[8] = polynomialFunction8;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray1, polynomialFunctionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      arrayRealVector0.append((RealVector) arrayRealVector1);
      int int0 = (-4377);
      try { 
        arrayRealVector1.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      try { 
        realVector0.checkVectorDimensions((-60));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -60
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      arrayRealVector0.getL1Norm();
      arrayRealVector0.isInfinite();
      try { 
        arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-462.221);
      doubleArray0[1] = 2379.844;
      doubleArray0[2] = 2448.48644352;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 60.958940530009;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.5;
      doubleArray0[7] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        arrayRealVector0.checkIndices((-2321), (-2321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-2,321)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1471.85800593063));
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.006);
      doubleArray0[4] = double4;
      Double.sum((-279.0739), (double) doubleArray0[4]);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.006;
      doubleArray1[1] = (double) doubleArray0[4];
      doubleArray1[2] = (double) doubleArray0[1];
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = (double) doubleArray0[1];
      doubleArray1[6] = (double) doubleArray0[2];
      doubleArray1[7] = (double) doubleArray0[3];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1, true);
      try { 
        arrayRealVector0.setSubVector(0, arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (7)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1502.2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealVector realVector0 = arrayRealVector1.mapMultiplyToSelf(1502.2);
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      arrayRealVector1.dotProduct(arrayRealVector0);
      arrayRealVector0.append((RealVector) arrayRealVector1);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 64;
      int int1 = (-1008);
      try { 
        arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0, 64, (-1008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (64)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      RealVector realVector0 = arrayRealVector0.mapMultiply(Double.NEGATIVE_INFINITY);
      arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      arrayRealVector0.getLInfNorm();
      int int0 = 36;
      RealVector realVector1 = realVector0.combine(0.0, Double.NEGATIVE_INFINITY, arrayRealVector0);
      realVector1.getNorm();
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double((-2484.431812931));
      doubleArray1[0] = double0;
      Double double1 = new Double((-667.5926));
      doubleArray1[1] = double1;
      Double double2 = new Double((-51.4374501));
      doubleArray1[2] = double2;
      Double double3 = new Double((-51.4374501));
      doubleArray1[3] = double3;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
      try { 
        realVector0.combineToSelf(Double.NEGATIVE_INFINITY, 0.0, arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4175.61;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1833.901976495);
      doubleArray0[3] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        arrayRealVector0.checkIndices(3952, 3952);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (3,952)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapMultiply((-0.5));
      realVector0.equals(arrayRealVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector((RealVector) arrayRealVector1, arrayRealVector1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.5);
      doubleArray0[1] = (double) (-1032);
      doubleArray0[2] = (double) (-1032);
      doubleArray0[3] = (-0.5);
      doubleArray0[4] = (double) (-1032);
      doubleArray0[5] = (double) (-1032);
      doubleArray0[6] = (double) (-1032);
      doubleArray0[7] = (double) (-1032);
      try { 
        arrayRealVector2.setSubVector((-1032), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,032)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        arrayRealVector1.walkInOptimizedOrder((RealVectorChangingVisitor) null, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial row 1 after final row 0
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 5177;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(5177, 2006.3);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      RealVector realVector0 = arrayRealVector0.append((-2907.642687699));
      RealVector realVector1 = realVector0.mapDivideToSelf(4051.985792733);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      realVector1.walkInDefaultOrder(realVectorChangingVisitor0);
      try { 
        realVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2652.995320988;
      doubleArray0[1] = 120.0;
      doubleArray0[2] = 892.13;
      doubleArray0[3] = (-3512.1393143893993);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3512.1393143893993);
      doubleArray1[1] = (-3512.1393143893993);
      doubleArray1[2] = (-3512.1393143893993);
      doubleArray1[3] = 892.13;
      doubleArray1[4] = 2652.995320988;
      doubleArray1[5] = 120.0;
      doubleArray1[6] = 892.13;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      arrayRealVector1.sparseIterator();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      try { 
        arrayRealVector1.checkIndex(458);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (458)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.sparseIterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-214.37100278471);
      doubleArray0[2] = (-953.903);
      doubleArray0[3] = (-1350.79);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-1350.79));
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      double double0 = arrayRealVector2.getMinValue();
      assertEquals((-1350.79), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      realVector_Entry0.setIndex(0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        arrayRealVector0.outerProduct(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.mapSubtract((-2084.17861));
      try { 
        realVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.0);
      doubleArray0[2] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      arrayRealVector0.unitize();
      arrayRealVector0.toArray();
      arrayRealVector0.getLInfNorm();
      try { 
        arrayRealVector0.checkIndex(199);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (199)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.586214542388916;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      int int0 = 1;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(1);
      ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
      RealVector realVector0 = arrayRealVector0.mapDivide(2.586214542388916);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(2.586214542388916).when(realVectorPreservingVisitor0).end();
      realVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
      realVector0.getMinIndex();
      arrayRealVector2.unitize();
      int int1 = (-822);
      realVector0.setEntry(1, 5.458481186294964E-36);
      try { 
        arrayRealVector0.setEntry((-822), 3493.703174234);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-822)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      arrayRealVector0.getMinValue();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      RealVectorPreservingVisitor realVectorPreservingVisitor1 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor1, (-1917), (-1815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,917)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3375.07871);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 1760;
      int int1 = (-984);
      try { 
        arrayRealVector0.ebeMultiply(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1504.2);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1964.13083222717);
      doubleArray0[4] = 3610.5238331;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3361);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      double double0 = arrayRealVector1.getMaxValue();
      RealVector.unmodifiableRealVector(arrayRealVector1);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-244.2088618)).when(realVectorPreservingVisitor0).end();
      double double1 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1504.2);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1964.13083222717);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3610.5238331;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3361);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        arrayRealVector1.ebeMultiply(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,366 != 3,361
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(Double.NaN);
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.5);
      doubleArray0[3] = double3;
      Double.max((double) doubleArray0[3], (double) doubleArray0[3]);
      Double double4 = new Double((-207.5096));
      Double.sum(1544.5895624819, (-2176.37192549));
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      Double.min((double) doubleArray0[1], Double.NaN);
      doubleArray0[6] = double6;
      Double double7 = new Double(Double.NEGATIVE_INFINITY);
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      doubleArray0[8] = double8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      Double.sum((double) doubleArray0[5], (-2176.37192549));
      try { 
        arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (277)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 1024, 1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,048 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      arrayRealVector0.checkVectorDimensions(realVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(realVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      arrayRealVector2.mapAdd((-3033.474049121));
      arrayRealVector2.getMaxValue();
      arrayRealVector2.set((-3033.474049121));
      arrayRealVector1.toString();
      arrayRealVector1.checkIndex(1);
      arrayRealVector2.unitize();
      RealVector.Entry realVector_Entry0 = arrayRealVector1.new Entry();
      realVector_Entry0.getIndex();
      realVector_Entry0.getValue();
      realVector_Entry0.setValue(0.0);
      arrayRealVector1.getLInfNorm();
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(realVectorChangingVisitor0).end();
      doReturn(0.052318163216114044, (-584.154367)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector1.walkInDefaultOrder(realVectorChangingVisitor0);
      int int1 = 1853;
      try { 
        arrayRealVector0.checkVectorDimensions(1853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,853
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2421.48;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4557.99);
      doubleArray0[4] = 965.4;
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      arrayRealVector0.sparseIterator();
      try { 
        arrayRealVector1.setSubVector((-1706), arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,706)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = Double.NaN;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      arrayRealVector0.getEntry(0);
      arrayRealVector0.set(0.0);
      int int0 = 2147;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, doubleArray1);
      try { 
        arrayRealVector0.cosine(arrayRealVector1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }
}
