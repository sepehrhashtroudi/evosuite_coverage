/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:22:06 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.ConjugateGradient;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.IterativeLinearSolver;
import org.apache.commons.math3.linear.JacobiPreconditioner;
import org.apache.commons.math3.linear.RealLinearOperator;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.SymmLQ;
import org.apache.commons.math3.util.Incrementor;
import org.apache.commons.math3.util.IterationManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IterativeLinearSolver_ESTest extends IterativeLinearSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(1, 1, false);
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(1, (-832.0));
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(314, (-258.397619934735), true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(314, 314);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(227, 1.0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 227 != 314
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      IterativeLinearSolver.checkParameters(array2DRowRealMatrix0, arrayRealVector0, arrayRealVector0);
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(368, 1960.0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = conjugateGradient0.solveInPlace(diagonalMatrix0, arrayRealVector0, arrayRealVector0);
      assertSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(1972);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(array2DRowRealMatrix0);
      RealVector realVector0 = symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0, true);
      IterationManager iterationManager0 = symmLQ0.getIterationManager();
      assertEquals(0, iterationManager0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-3134), (-3134), false);
      IterationManager iterationManager0 = symmLQ0.getIterationManager();
      assertEquals((-3134), iterationManager0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-463.22);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      SymmLQ symmLQ0 = new SymmLQ(3918, (-133.864853519), false);
      symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      IterationManager iterationManager0 = symmLQ0.getIterationManager();
      assertEquals(3918, iterationManager0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(299, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 299, true);
      // Undeclared exception!
      conjugateGradient0.solveInPlace(jacobiPreconditioner0, arrayRealVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(449, 449, true);
      try { 
        conjugateGradient0.solveInPlace(jacobiPreconditioner0, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (449) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(3331, 1196.2234538101713, false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        symmLQ0.solveInPlace(diagonalMatrix0, arrayRealVector1, arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 5
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager((-620), incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-1989.4377404604309), false);
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) null, arrayRealVector0, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(239);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(239, 24);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 239, true);
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        conjugateGradient0.solveInPlace(array2DRowRealMatrix0, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (239x24) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      SymmLQ symmLQ0 = new SymmLQ(55, 55, false);
      // Undeclared exception!
      try { 
        symmLQ0.solveInPlace(jacobiPreconditioner0, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(1090, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 895.192581487138, false);
      // Undeclared exception!
      conjugateGradient0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient((-1), (-1), true);
      double[] doubleArray0 = new double[2];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      try { 
        conjugateGradient0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(1751);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 1751, false);
      double[] doubleArray0 = new double[2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2349.7);
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(170, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.7214844226837158, true);
      // Undeclared exception!
      try { 
        conjugateGradient0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.ConjugateGradient", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager((-515), incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, true);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(3, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-331.212552242214), false);
      // Undeclared exception!
      conjugateGradient0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      SymmLQ symmLQ0 = new SymmLQ((-957), (-957), false);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-957) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 1247.78604, true);
      double[] doubleArray0 = new double[4];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(662);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 662 != 4
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, false);
      double[] doubleArray0 = new double[2];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      try { 
        conjugateGradient0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager((-4768), incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-4768), true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4768);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      // Undeclared exception!
      try { 
        conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.ConjugateGradient", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(239);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(239, 24);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 239, true);
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        conjugateGradient0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (239x24) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      IterationManager iterationManager0 = new IterationManager(305);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-1.0), true);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(1959, 1959, true);
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      try { 
        IterativeLinearSolver.checkParameters(jacobiPreconditioner0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0.0);
      try { 
        IterativeLinearSolver.checkParameters(array2DRowRealMatrix0, arrayRealVector0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x8) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        IterativeLinearSolver.checkParameters(jacobiPreconditioner0, arrayRealVector0, arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(239);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 239, false);
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(517);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 517 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(239, 24);
      double[] doubleArray0 = new double[5];
      SymmLQ symmLQ0 = new SymmLQ(522, 24.0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (239x24) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager((-4768), incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-4768), true);
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      RealVector realVector0 = conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
  }
}
