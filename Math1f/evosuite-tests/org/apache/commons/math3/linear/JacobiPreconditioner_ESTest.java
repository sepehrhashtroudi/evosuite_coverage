/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:38:08 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.JacobiPreconditioner;
import org.apache.commons.math3.linear.RealLinearOperator;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JacobiPreconditioner_ESTest extends JacobiPreconditioner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
      try { 
        JacobiPreconditioner.create(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x5) linear operator
         //
         verifyException("org.apache.commons.math3.linear.JacobiPreconditioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-794.6379166));
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      RealVector realVector0 = jacobiPreconditioner0.operate(arrayRealVector1);
      assertFalse(realVector0.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getRowDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getColumnDimension();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      JacobiPreconditioner jacobiPreconditioner1 = JacobiPreconditioner.create(jacobiPreconditioner0);
      assertFalse(jacobiPreconditioner1.equals((Object)jacobiPreconditioner0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      // Undeclared exception!
      try { 
        jacobiPreconditioner0.operate((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.JacobiPreconditioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(934);
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(diagonalMatrix0);
      // Undeclared exception!
      JacobiPreconditioner.create(jacobiPreconditioner0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JacobiPreconditioner.create((RealLinearOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.JacobiPreconditioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        JacobiPreconditioner.create(array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JacobiPreconditioner jacobiPreconditioner0 = null;
      try {
        jacobiPreconditioner0 = new JacobiPreconditioner((double[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getColumnDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getRowDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        jacobiPreconditioner0.operate(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        JacobiPreconditioner.create(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.JacobiPreconditioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      RealLinearOperator realLinearOperator0 = jacobiPreconditioner0.sqrt();
      JacobiPreconditioner jacobiPreconditioner1 = JacobiPreconditioner.create(realLinearOperator0);
      assertEquals(1, jacobiPreconditioner1.getRowDimension());
  }
}
