/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:12:04 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BiDiagonalTransformer;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BiDiagonalTransformer_ESTest extends BiDiagonalTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (-720.7947030848289);
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      boolean boolean0 = biDiagonalTransformer0.isUpperBiDiagonal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = biDiagonalTransformer0.getV();
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 120.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)biDiagonalTransformer0.getU();
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2607.684);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(realMatrix0);
      RealMatrix realMatrix1 = biDiagonalTransformer0.getU();
      assertEquals(2, realMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
      double[] doubleArray1 = biDiagonalTransformer0.getSecondaryDiagonalRef();
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiDiagonalTransformer biDiagonalTransformer0 = null;
      try {
        biDiagonalTransformer0 = new BiDiagonalTransformer((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BiDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = null;
      try {
        biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BiDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = null;
      try {
        biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(189, 8);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(189, 494);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1124.9);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[5];
      doubleArray0[8] = doubleArray0[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
      boolean boolean0 = biDiagonalTransformer0.isUpperBiDiagonal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      boolean boolean0 = biDiagonalTransformer0.isUpperBiDiagonal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2607.684);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(realMatrix0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)biDiagonalTransformer0.getV();
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = biDiagonalTransformer0.getV();
      assertEquals(5, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
      biDiagonalTransformer0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)biDiagonalTransformer0.getV();
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
      RealMatrix realMatrix0 = biDiagonalTransformer0.getB();
      assertEquals(8, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = biDiagonalTransformer0.getB();
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      biDiagonalTransformer0.getB();
      RealMatrix realMatrix0 = biDiagonalTransformer0.getB();
      assertTrue(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = biDiagonalTransformer0.getU();
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(array2DRowRealMatrix0);
      biDiagonalTransformer0.getU();
      RealMatrix realMatrix0 = biDiagonalTransformer0.getU();
      assertEquals(1, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2607.684);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(realMatrix0);
      double[] doubleArray1 = biDiagonalTransformer0.getSecondaryDiagonalRef();
      assertArrayEquals(new double[] {9616674.630733084}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(diagonalMatrix0);
      double[][] doubleArray1 = biDiagonalTransformer0.getHouseholderVectorsRef();
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2607.684);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      BiDiagonalTransformer biDiagonalTransformer0 = new BiDiagonalTransformer(realMatrix0);
      double[] doubleArray1 = biDiagonalTransformer0.getMainDiagonalRef();
      assertArrayEquals(new double[] {(-9616674.630733084), 0.0}, doubleArray1, 0.01);
  }
}
