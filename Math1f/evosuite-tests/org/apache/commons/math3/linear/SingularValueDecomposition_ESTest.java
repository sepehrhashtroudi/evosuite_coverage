/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:02:39 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DecompositionSolver;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecomposition_ESTest extends SingularValueDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      double double0 = singularValueDecomposition0.getConditionNumber();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(4, 4);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = singularValueDecomposition0.getCovariance(0);
      assertEquals(4, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      double double0 = singularValueDecomposition0.getNorm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = 3.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      double double0 = singularValueDecomposition0.getInverseConditionNumber();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2145.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      double double0 = singularValueDecomposition0.getInverseConditionNumber();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(899);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SingularValueDecomposition singularValueDecomposition0 = null;
      try {
        singularValueDecomposition0 = new SingularValueDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SingularValueDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      SingularValueDecomposition singularValueDecomposition0 = null;
      try {
        singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math3.linear.SingularValueDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.006;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      int int0 = singularValueDecomposition0.getRank();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(4, 4);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      int int0 = singularValueDecomposition0.getRank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(20);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      RealMatrix realMatrix0 = singularValueDecomposition0.getVT();
      assertEquals(20, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      singularValueDecomposition0.getUT();
      RealMatrix realMatrix0 = singularValueDecomposition0.getUT();
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(4, 4);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = singularValueDecomposition0.getU();
      assertEquals(4, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(20);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      RealMatrix realMatrix0 = singularValueDecomposition0.getV();
      assertEquals(20, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 386.995878236;
      doubleArray0[1] = (-1841.208003);
      doubleArray0[2] = 2817.86749087;
      doubleArray0[3] = 2019.11125246;
      doubleArray0[4] = (-5960.2438972206);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      DecompositionSolver decompositionSolver0 = singularValueDecomposition0.getSolver();
      assertTrue(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 386.995878236;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      DecompositionSolver decompositionSolver0 = singularValueDecomposition0.getSolver();
      assertEquals(1, singularValueDecomposition0.getRank());
      assertEquals(386.995878236, singularValueDecomposition0.getNorm(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      // Undeclared exception!
      try { 
        singularValueDecomposition0.getCovariance(4012.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cutoff singular value is 4,012, should be at most 0
         //
         verifyException("org.apache.commons.math3.linear.SingularValueDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1841.208003);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      assertEquals(0.0, singularValueDecomposition0.getInverseConditionNumber(), 0.01);
      
      RealMatrix realMatrix0 = singularValueDecomposition0.getCovariance(1356.494112);
      assertEquals(5, realMatrix0.getColumnDimension());
      
      RealMatrix realMatrix1 = singularValueDecomposition0.getVT();
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getS();
      RealMatrix realMatrix0 = singularValueDecomposition0.getS();
      assertNotNull(realMatrix0);
      assertEquals(5, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3374.98212568509);
      doubleArray0[1] = (double) 307;
      doubleArray0[4] = (double) 307;
      doubleArray0[6] = (double) 307;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(realMatrix0);
      assertEquals(3.3016940748625718E7, singularValueDecomposition0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = 3.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      double double0 = singularValueDecomposition0.getConditionNumber();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      double[] doubleArray1 = singularValueDecomposition0.getSingularValues();
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(array2DRowRealMatrix0);
      double double0 = singularValueDecomposition0.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SingularValueDecomposition singularValueDecomposition0 = new SingularValueDecomposition(diagonalMatrix0);
      singularValueDecomposition0.getSolver();
      singularValueDecomposition0.getCovariance((-1706.7978805076957));
      singularValueDecomposition0.getSolver();
      // Undeclared exception!
      singularValueDecomposition0.getSolver();
  }
}
