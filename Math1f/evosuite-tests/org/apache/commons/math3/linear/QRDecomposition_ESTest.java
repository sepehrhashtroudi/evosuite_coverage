/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:10:04 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DecompositionSolver;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.QRDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QRDecomposition_ESTest extends QRDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealVector realVector0 = array2DRowRealMatrix0.getRowVector(0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(realVector0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix0, 0.0);
      RealMatrix realMatrix1 = qRDecomposition0.getH();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(2, realMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0, 0.0);
      RealMatrix realMatrix0 = qRDecomposition0.getQT();
      assertEquals(5, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0, (-1667.628377795169));
      RealMatrix realMatrix0 = qRDecomposition0.getR();
      assertNotNull(realMatrix0);
      assertEquals(3, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1332.4);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0, (-3634.4));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)qRDecomposition0.getH();
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0, 0.0);
      double[][] doubleArray1 = new double[4][0];
      qRDecomposition0.performHouseholderReflection(0, doubleArray1);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      double[][] doubleArray1 = new double[1][0];
      qRDecomposition0.decompose(doubleArray1);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0, (-3634.4));
      double[][] doubleArray1 = new double[4][9];
      // Undeclared exception!
      try { 
        qRDecomposition0.performHouseholderReflection(52, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math3.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(2700, 2700);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0, 1.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition((RealMatrix) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(120, 120);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = qRDecomposition0.getQT();
      assertEquals(7, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      RealMatrix realMatrix0 = qRDecomposition0.getQ();
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = qRDecomposition0.getQT();
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertTrue(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0);
      qRDecomposition0.getH();
      RealMatrix realMatrix0 = qRDecomposition0.getH();
      assertEquals(6, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1038.884517405;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0, (-0.5));
      RealMatrix realMatrix0 = qRDecomposition0.getQT();
      assertEquals(1, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      QRDecomposition qRDecomposition0 = new QRDecomposition(diagonalMatrix0);
      qRDecomposition0.getQ();
      RealMatrix realMatrix0 = qRDecomposition0.getQ();
      assertNotNull(realMatrix0);
      assertEquals(7, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix0);
      RealMatrix realMatrix1 = qRDecomposition0.getR();
      assertTrue(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      qRDecomposition0.getR();
      RealMatrix realMatrix0 = qRDecomposition0.getR();
      assertNotNull(realMatrix0);
      assertTrue(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      QRDecomposition qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
      DecompositionSolver decompositionSolver0 = qRDecomposition0.getSolver();
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }
}
