/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:13:38 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.JacobiPreconditioner;
import org.apache.commons.math3.linear.RealLinearOperator;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.SymmLQ;
import org.apache.commons.math3.util.Incrementor;
import org.apache.commons.math3.util.IterationManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SymmLQ_ESTest extends SymmLQ_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 2766.4529205548833);
      RealVector realVector0 = jacobiPreconditioner0.operate(arrayRealVector0);
      RealVector realVector1 = symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, realVector0);
      assertNotSame(realVector1, arrayRealVector0);
      assertTrue(symmLQ0.getCheck());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 2766.4529205548833);
      RealVector realVector0 = jacobiPreconditioner0.operate(arrayRealVector0);
      symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, realVector0);
      assertFalse(symmLQ0.getCheck());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(101, (-4534.7166602), false);
      double[] doubleArray0 = new double[3];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      JacobiPreconditioner jacobiPreconditioner1 = JacobiPreconditioner.create(jacobiPreconditioner0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner1, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (101) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(123, (-4534.7166602), false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4534.7166602);
      doubleArray0[1] = (double) 123;
      doubleArray0[2] = (double) 123;
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0);
      assertFalse(symmLQ0.getCheck());
      assertEquals(2.056365518829544E7, realVector0.getLInfNorm(), 0.01);
      assertEquals(4538.051695198661, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(46);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2310.29, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = 2310.29;
      doubleArray0[2] = 2310.29;
      doubleArray0[4] = 2310.29;
      doubleArray0[5] = 2310.29;
      doubleArray0[6] = (double) 46;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, realVector0, true, 2310.29);
      assertEquals(2.4494897427831774, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2, iterationManager0.getIterations());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(123, (-4534.7166602), true);
      boolean boolean0 = symmLQ0.getCheck();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 2766.4529205548833);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(49);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-608.0326308936), false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(49, 798.299735225739);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 49 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(2);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2, false);
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealVector) null, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(3126, 27);
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (3,126x27) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(79, 0.0, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(array2DRowRealMatrix0);
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0, false, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(1158, 0.0, false);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2287, 1);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) blockRealMatrix0, (RealLinearOperator) blockRealMatrix0, (RealVector) null, (RealVector) null, false, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(2540, 2540, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(183, 2540);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(266);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, realVector0, false, 2615.4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (183x2,540) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(194, (-2707.25322589403), true);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(194);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(194, 202.80381539);
      // Undeclared exception!
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0, true, (-2707.25322589403));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(880, 489.43992941, false);
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(880);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 880 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-1659), (-1659), false);
      double[] doubleArray0 = new double[2];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(880, 489.43992941, false);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(880);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(880);
      // Undeclared exception!
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0.0, true);
      double[] doubleArray0 = new double[4];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, true, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(4518, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 4518, true);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(4518);
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, false, (double) 4518);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4,518
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(123, (-4534.7166602), false);
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, false);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, false, 41.56850110275516);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x3) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(194, (-2707.25322589403), true);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(194);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(194);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, true, (-2707.25322589403));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager((-1180));
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2795.2943, true);
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) null, true, 2795.2943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager((-1));
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-1058.97080476285), false);
      double[] doubleArray0 = new double[3];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager((-1691));
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2576025.0, false);
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        symmLQ0.solve((RealLinearOperator) null, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(2181, 2181, false);
      double[] doubleArray0 = new double[6];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 6
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0, false);
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(854, 725.655773347, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(854, 854);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(193);
      // Undeclared exception!
      symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, realVector0, true, (-466.3));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-541), Double.NEGATIVE_INFINITY, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, false, 923.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-541) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector1, true, 1886.6082175064);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0, false);
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector1, true, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (5x6) linear operator
         //
         verifyException("org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0.0, false);
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) null, true, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-3713), (-3713), false);
      double[] doubleArray0 = new double[9];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-3,713) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(array2DRowRealMatrix0);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(236);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 236, false);
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (5x1) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(161, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 161, false);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(161, 161);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(161, 161);
      // Undeclared exception!
      symmLQ0.solve((RealLinearOperator) blockRealMatrix0, (RealLinearOperator) blockRealMatrix0, (RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(1716);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 1716, false);
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 8
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0.0, false);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1297, (-1702.161029));
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x5) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-207), (-207), true);
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SymmLQ symmLQ0 = null;
      try {
        symmLQ0 = new SymmLQ((IterationManager) null, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 2766.4529205548833);
      symmLQ0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0, false, 1.4958495808769274E-53);
      assertFalse(symmLQ0.getCheck());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(123, (-4534.7166602), true);
      double[] doubleArray0 = new double[3];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0, false, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (123) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(46);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2310.29, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = 2310.29;
      doubleArray0[2] = 2310.29;
      doubleArray0[4] = 2310.29;
      doubleArray0[5] = 2310.29;
      doubleArray0[7] = 2310.29;
      doubleArray0[8] = 2310.29;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = symmLQ0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, realVector0);
      assertEquals(2, iterationManager0.getIterations());
      assertEquals(2.6457513110645894, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(194, (-2707.25322589403), true);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(194);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(194, 194);
      RealVector realVector0 = symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, true, (-2707.25322589403));
      assertEquals(0.9980992172911299, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(46);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2310.29, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 2310.29;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, true, 2310.29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition number {1} is too high 
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(101, (-4534.7166602), false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4534.7166602);
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = (double) 101;
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      assertFalse(symmLQ0.getCheck());
      assertEquals(4534.7166602, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2.0563660248698723E7, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(46);
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2310.29, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = 2310.29;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, true, 2310.29);
      assertEquals(2, iterationManager0.getIterations());
      assertEquals(8.214244106628653E19, realVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(101, (-4534.7166602), false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4534.7166602);
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = (double) 101;
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.SymmLQ$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(2050, 3.725290298461914E-9, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(194, (-2707.25322589403), true);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(194);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(194, 194);
      // Undeclared exception!
      try { 
        symmLQ0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, true, (-2707.25322589403));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(123, (-4534.7166602), false);
      boolean boolean0 = symmLQ0.getCheck();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(3036, 0.0, false);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3036, 16);
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) blockRealMatrix0, (RealLinearOperator) blockRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (3,036x16) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-981), 2.7553817452272217E-6, false);
      double[] doubleArray0 = new double[7];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      try { 
        symmLQ0.solve((RealLinearOperator) jacobiPreconditioner0, (RealVector) null, true, (-981.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-1), 0.0, true);
      double[][] doubleArray0 = new double[1][5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      try { 
        symmLQ0.solve((RealLinearOperator) array2DRowRealMatrix0, realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x5) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }
}
