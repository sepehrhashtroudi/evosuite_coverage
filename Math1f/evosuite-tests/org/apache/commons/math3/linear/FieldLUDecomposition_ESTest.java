/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:19:22 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.apache.commons.math3.linear.AbstractFieldMatrix;
import org.apache.commons.math3.linear.Array2DRowFieldMatrix;
import org.apache.commons.math3.linear.BlockFieldMatrix;
import org.apache.commons.math3.linear.FieldDecompositionSolver;
import org.apache.commons.math3.linear.FieldLUDecomposition;
import org.apache.commons.math3.linear.FieldMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldLUDecomposition_ESTest extends FieldLUDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction[] bigFractionArray0 = new BigFraction[9];
      bigFractionArray0[0] = bigFraction0;
      Field<BigFraction> field0 = AbstractFieldMatrix.extractField(bigFractionArray0);
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(field0);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      int[] intArray0 = fieldLUDecomposition0.getPivot();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      // Undeclared exception!
      try { 
        fieldLUDecomposition0.getU();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      // Undeclared exception!
      try { 
        fieldLUDecomposition0.getP();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex[] complexArray0 = new Complex[1];
      Complex complex0 = Complex.ZERO;
      complexArray0[0] = complex0;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(field0);
      FieldLUDecomposition<Complex> fieldLUDecomposition0 = new FieldLUDecomposition<Complex>(array2DRowFieldMatrix0);
      // Undeclared exception!
      try { 
        fieldLUDecomposition0.getL();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      FractionField fractionField0 = fraction0.getField();
      BlockFieldMatrix<Fraction> blockFieldMatrix0 = new BlockFieldMatrix<Fraction>(fractionField0, 2780, 2780);
      FieldLUDecomposition<Fraction> fieldLUDecomposition0 = new FieldLUDecomposition<Fraction>(blockFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>((Field<BigFraction>) null);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = null;
      try {
        fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      FractionField fractionField0 = fraction0.getField();
      Fraction[] fractionArray0 = new Fraction[0];
      Array2DRowFieldMatrix<Fraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Fraction>(fractionField0, fractionArray0);
      FieldLUDecomposition<Fraction> fieldLUDecomposition0 = null;
      try {
        fieldLUDecomposition0 = new FieldLUDecomposition<Fraction>(array2DRowFieldMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0, 1183, 1183);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      BigFraction bigFraction1 = fieldLUDecomposition0.getDeterminant();
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction[][] fractionArray0 = new Fraction[1][8];
      Fraction[] fractionArray1 = new Fraction[1];
      Fraction fraction0 = Fraction.ONE;
      fractionArray1[0] = fraction0;
      fractionArray0[0] = fractionArray1;
      BlockFieldMatrix<Fraction> blockFieldMatrix0 = new BlockFieldMatrix<Fraction>(fractionArray0);
      FieldLUDecomposition<Fraction> fieldLUDecomposition0 = new FieldLUDecomposition<Fraction>(blockFieldMatrix0);
      Fraction fraction1 = fieldLUDecomposition0.getDeterminant();
      assertNotSame(fraction1, fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, 1, 1);
      FieldLUDecomposition<Complex> fieldLUDecomposition0 = new FieldLUDecomposition<Complex>(array2DRowFieldMatrix0);
      FieldMatrix<Complex> fieldMatrix0 = fieldLUDecomposition0.getP();
      assertNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction[][] bigFractionArray0 = new BigFraction[1][3];
      BigFraction[] bigFractionArray1 = new BigFraction[1];
      BigFraction bigFraction0 = new BigFraction((-1.0), 1159);
      bigFractionArray1[0] = bigFraction0;
      bigFractionArray0[0] = bigFractionArray1;
      Field<BigFraction> field0 = AbstractFieldMatrix.extractField(bigFractionArray0);
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(field0, bigFractionArray0);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      FieldMatrix<BigFraction> fieldMatrix0 = fieldLUDecomposition0.getP();
      FieldMatrix<BigFraction> fieldMatrix1 = fieldLUDecomposition0.getP();
      assertSame(fieldMatrix1, fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction[][] fractionArray0 = new Fraction[1][8];
      Fraction[] fractionArray1 = new Fraction[1];
      Fraction fraction0 = Fraction.ONE;
      fractionArray1[0] = fraction0;
      fractionArray0[0] = fractionArray1;
      BlockFieldMatrix<Fraction> blockFieldMatrix0 = new BlockFieldMatrix<Fraction>(fractionArray0);
      FieldLUDecomposition<Fraction> fieldLUDecomposition0 = new FieldLUDecomposition<Fraction>(blockFieldMatrix0);
      FieldMatrix<Fraction> fieldMatrix0 = fieldLUDecomposition0.getU();
      FieldMatrix<Fraction> fieldMatrix1 = fieldLUDecomposition0.getU();
      assertSame(fieldMatrix1, fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, 1, 1);
      FieldLUDecomposition<Complex> fieldLUDecomposition0 = new FieldLUDecomposition<Complex>(array2DRowFieldMatrix0);
      FieldMatrix<Complex> fieldMatrix0 = fieldLUDecomposition0.getL();
      assertNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction[][] fractionArray0 = new Fraction[1][8];
      Fraction[] fractionArray1 = new Fraction[1];
      Fraction fraction0 = Fraction.ONE;
      fractionArray1[0] = fraction0;
      fractionArray0[0] = fractionArray1;
      BlockFieldMatrix<Fraction> blockFieldMatrix0 = new BlockFieldMatrix<Fraction>(fractionArray0);
      FieldLUDecomposition<Fraction> fieldLUDecomposition0 = new FieldLUDecomposition<Fraction>(blockFieldMatrix0);
      FieldMatrix<Fraction> fieldMatrix0 = fieldLUDecomposition0.getL();
      FieldMatrix<Fraction> fieldMatrix1 = fieldLUDecomposition0.getL();
      assertSame(fieldMatrix1, fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0, 1183, 1183);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      FieldMatrix<BigFraction> fieldMatrix0 = fieldLUDecomposition0.getU();
      assertNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      BigFraction[] bigFractionArray0 = new BigFraction[6];
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0, bigFractionArray0);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = null;
      try {
        fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (6x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.FieldLUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction[][] bigFractionArray0 = new BigFraction[1][3];
      BigFraction[] bigFractionArray1 = new BigFraction[1];
      BigFraction bigFraction0 = new BigFraction((-1.0), 1133);
      bigFractionArray1[0] = bigFraction0;
      bigFractionArray0[0] = bigFractionArray1;
      Field<BigFraction> field0 = AbstractFieldMatrix.extractField(bigFractionArray0);
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(field0, bigFractionArray0);
      FieldLUDecomposition<BigFraction> fieldLUDecomposition0 = new FieldLUDecomposition<BigFraction>(array2DRowFieldMatrix0);
      int[] intArray0 = fieldLUDecomposition0.getPivot();
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction[][] fractionArray0 = new Fraction[1][8];
      Fraction[] fractionArray1 = new Fraction[1];
      Fraction fraction0 = Fraction.ONE;
      fractionArray1[0] = fraction0;
      fractionArray0[0] = fractionArray1;
      BlockFieldMatrix<Fraction> blockFieldMatrix0 = new BlockFieldMatrix<Fraction>(fractionArray0);
      FieldLUDecomposition<Fraction> fieldLUDecomposition0 = new FieldLUDecomposition<Fraction>(blockFieldMatrix0);
      FieldDecompositionSolver<Fraction> fieldDecompositionSolver0 = fieldLUDecomposition0.getSolver();
      assertTrue(fieldDecompositionSolver0.isNonSingular());
  }
}
