/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:46:37 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Atan;
import org.apache.commons.math3.analysis.function.Constant;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.analysis.function.Logistic;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RealVectorChangingVisitor;
import org.apache.commons.math3.linear.RealVectorPreservingVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayRealVector_ESTest extends ArrayRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 120;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(120, 133.613367);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = arrayRealVector0.getNorm();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1463.661101802327, double1, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(120);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(120, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combine(3.953806005373127E-272, (-1275.35), arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(120, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(120, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      int int1 = arrayRealVector2.getMinIndex();
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(120, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(120, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(int1 == int0);
      assertEquals(119, int1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      double double2 = arrayRealVector0.getLInfDistance(realVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      double double3 = arrayRealVector1.getLInfDistance(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(120, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(133.613367, double3, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      
      double double4 = 603.0;
      double double5 = arrayRealVector2.getDistance(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(120, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(120, arrayRealVector1.getDimension());
      assertEquals(120, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(1463.661101802327, double5, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      // Undeclared exception!
      try { 
        realVector0.unitize();
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 17;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, 17);
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(17);
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(17, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf(17, 17, arrayRealVector0);
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(17, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(17, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector0.append((RealVector) arrayRealVector1);
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(17, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(34, realVector0.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      arrayRealVector0.unitize();
      assertEquals(17, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 3);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(3);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf(3, 3, arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      ArrayRealVector arrayRealVector3 = (ArrayRealVector)arrayRealVector0.append((RealVector) arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(6, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      arrayRealVector0.unitize();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      
      double double0 = arrayRealVector0.getDistance(arrayRealVector2);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertEquals(14.588457268119896, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      arrayRealVector3.addToEntry(0, 3);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(6, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      int int0 = 635;
      int int1 = 38;
      ArrayRealVector arrayRealVector4 = new ArrayRealVector(3);
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(3, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector4);
      
      Acos acos0 = new Acos();
      assertNotNull(acos0);
      
      ArrayRealVector arrayRealVector5 = arrayRealVector3.mapToSelf(acos0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(6, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector5.isNaN());
      assertFalse(arrayRealVector5.isInfinite());
      assertEquals(6, arrayRealVector5.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertSame(arrayRealVector3, arrayRealVector5);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector5, arrayRealVector4);
      assertNotSame(arrayRealVector5, arrayRealVector0);
      assertNotSame(arrayRealVector5, arrayRealVector2);
      assertSame(arrayRealVector5, arrayRealVector3);
      assertNotSame(arrayRealVector5, arrayRealVector1);
      
      try { 
        arrayRealVector0.getEntry(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (3)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 796.062212063948;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1198.33593;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAddToSelf((-1.0));
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      
      boolean boolean0 = realVector0.isNaN();
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeDivide(realVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      String string0 = arrayRealVector1.toString();
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(string0);
      assertEquals("{1; 1; (NaN); 1; 1; (NaN); 1; 1; 1}", string0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double0 = arrayRealVector0.getL1Norm();
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(1999.398142063948, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      
      RealVector realVector1 = arrayRealVector1.mapAddToSelf(0.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, realVector1.getDimension());
      assertTrue(realVector1.isNaN());
      assertFalse(realVector1.isInfinite());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(realVector1);
      assertNotSame(realVector1, realVector0);
      assertNotSame(realVector1, arrayRealVector0);
      assertSame(realVector1, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, realVector1);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector1);
      
      RealVector realVector2 = arrayRealVector1.mapSubtractToSelf((-1238.9883));
      assertEquals(9, doubleArray0.length);
      assertTrue(realVector2.isNaN());
      assertEquals(9, realVector2.getDimension());
      assertFalse(realVector2.isInfinite());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {796.062212063948, 0.0, 1.0, 0.0, (-1.0), 1.0, 1198.33593, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(realVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector2.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertFalse(realVector0.equals((Object)realVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(realVector2);
      assertNotSame(realVector2, arrayRealVector0);
      assertSame(realVector2, realVector1);
      assertSame(realVector2, arrayRealVector1);
      assertNotSame(realVector2, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector2);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, realVector1);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, realVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector1);
      assertSame(arrayRealVector1, realVector2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1397.5947455798;
      doubleArray1[1] = 1156.43322;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(6, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2487.13604)).when(realVectorChangingVisitor0).end();
      doReturn(1156.43322).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.addToEntry(0, 1397.5947455798);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      double double0 = arrayRealVector2.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(6, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals((-2487.13604), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      try { 
        arrayRealVector0.getDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector1.setSubVector(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals((-1.0), double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double1 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(919035.664896, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn((-345.82153), (double)0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double2 = arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector2.mapMultiplyToSelf(2384.2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, realVector0);
      assertSame(realVector0, arrayRealVector2);
      assertSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunctionLagrangeForm0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      ArrayRealVector arrayRealVector4 = arrayRealVector3.ebeMultiply(arrayRealVector2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertNotNull(arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, realVector0);
      
      arrayRealVector2.checkIndex(0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertSame(arrayRealVector2, realVector0);
      
      RealVector realVector1 = arrayRealVector4.mapAddToSelf((-1.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(realVector1.isInfinite());
      assertEquals(2, realVector1.getDimension());
      assertFalse(realVector1.isNaN());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(realVector1.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)arrayRealVector2));
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector3));
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertNotNull(realVector1);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector2);
      assertSame(realVector1, arrayRealVector4);
      assertNotSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, arrayRealVector3);
      assertNotSame(realVector1, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, realVector1);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector1);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertSame(arrayRealVector4, realVector1);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, realVector0);
      
      arrayRealVector1.setEntry(0, 0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertSame(arrayRealVector1, realVector0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector1.setSubVector(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(9.684172421525468E-8).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(9.684172421525468E-8, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      double double1 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(919035.664896, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(realVectorChangingVisitor0).end();
      doReturn(0.0, (-1.0)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double2 = arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector2.mapMultiplyToSelf(2384.2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector0);
      assertSame(realVector0, arrayRealVector1);
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunctionLagrangeForm0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      
      ArrayRealVector arrayRealVector4 = arrayRealVector3.ebeMultiply(arrayRealVector2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      
      ArrayRealVector arrayRealVector5 = arrayRealVector4.ebeDivide(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector5.isInfinite());
      assertEquals(2, arrayRealVector5.getDimension());
      assertFalse(arrayRealVector5.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector5.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector5.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector5.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector5);
      assertNotSame(arrayRealVector5, arrayRealVector0);
      assertNotSame(arrayRealVector5, realVector0);
      assertNotSame(arrayRealVector5, arrayRealVector1);
      assertNotSame(arrayRealVector5, arrayRealVector3);
      assertNotSame(arrayRealVector5, arrayRealVector2);
      assertNotSame(arrayRealVector5, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector5);
      assertSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector5);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector5);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      
      arrayRealVector4.checkIndex(0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector5);
      assertSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector5);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector5);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      
      RealVector realVector1 = arrayRealVector4.mapAddToSelf((-1.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, realVector1.getDimension());
      assertFalse(realVector1.isInfinite());
      assertFalse(realVector1.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(realVector1.equals((Object)arrayRealVector5));
      assertFalse(realVector1.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector3));
      assertFalse(realVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertNotNull(realVector1);
      assertNotSame(realVector1, arrayRealVector5);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector0);
      assertSame(realVector1, arrayRealVector4);
      assertNotSame(realVector1, realVector0);
      assertNotSame(realVector1, arrayRealVector3);
      assertNotSame(realVector1, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector5);
      assertSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, realVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector5);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, realVector1);
      assertNotSame(arrayRealVector4, arrayRealVector5);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertSame(arrayRealVector4, realVector1);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      
      RealVector.Entry realVector_Entry0 = realVector0.new Entry();
      assertEquals(2, doubleArray0.length);
      assertEquals(0, realVector_Entry0.getIndex());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)realVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector3));
      assertFalse(realVector0.equals((Object)realVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector4));
      assertTrue(realVector0.equals((Object)arrayRealVector5));
      assertNotNull(realVector_Entry0);
      
      boolean boolean0 = realVector0.equals(realVector_Entry0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, realVector_Entry0.getIndex());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector5));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)realVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector3));
      assertFalse(realVector0.equals((Object)realVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector4));
      assertTrue(realVector0.equals((Object)arrayRealVector5));
      assertFalse(boolean0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector5);
      assertSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, realVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector3);
      assertNotSame(realVector0, arrayRealVector5);
      assertNotSame(realVector0, realVector1);
      assertNotSame(realVector0, arrayRealVector4);
      assertSame(realVector0, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-386.0735491));
      assertNotNull(double0);
      assertEquals((-386.0735491), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1416.656843133498);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1416.656843133498, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1416.656843133498);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1416.656843133498, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double double3 = Double.sum((double) doubleArray0[2], 3838.66801112171);
      assertEquals(3, doubleArray0.length);
      assertEquals(5255.324854255208, double3, 0.01);
      
      double[] doubleArray1 = new double[4];
      double double4 = Double.sum((-386.0735491), 6.537034810260226E-9);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-386.07354909346293), double4, 0.01);
      
      doubleArray1[0] = (double) doubleArray0[2];
      double double5 = Double.max((-386.0735491), 1416.656843133498);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(1416.656843133498, double5, 0.01);
      
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = 1416.656843133498;
      doubleArray1[3] = (double) doubleArray0[0];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1416.656843133498, (-386.0735491), 1416.656843133498, (-386.0735491)}, doubleArray1, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double double6 = arrayRealVector1.getLInfNorm();
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1416.656843133498, (-386.0735491), 1416.656843133498, (-386.0735491)}, doubleArray1, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(1416.656843133498, double6, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapDivideToSelf((double) doubleArray0[1]);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(7, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1416.656843133498, (-386.0735491), 1416.656843133498, (-386.0735491)}, doubleArray1, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      boolean boolean0 = arrayRealVector1.isInfinite();
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1416.656843133498, (-386.0735491), 1416.656843133498, (-386.0735491)}, doubleArray1, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(boolean0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.walkInDefaultOrder((RealVectorChangingVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 912;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(912, 0.0);
      assertEquals(912, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double double0 = 0.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(912, 0.0);
      assertEquals(912, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.ebeDivide(arrayRealVector0);
      assertEquals(912, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(912, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(912, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      double double1 = arrayRealVector0.dotProduct(arrayRealVector1);
      assertEquals(912, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(912, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      boolean boolean0 = arrayRealVector2.equals(arrayRealVector1);
      assertEquals(912, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(912, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(912, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(boolean0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      boolean boolean1 = arrayRealVector1.isInfinite();
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(912, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 912;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 912;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(920, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(912, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {912.0, 0.0, 0.0, 912.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      
      try { 
        arrayRealVector0.ebeDivide(arrayRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 912 != 920
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1865.328765718828));
      assertNotNull(double0);
      assertEquals((-1865.328765718828), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1865.328765718828), (double)double1, 0.01);
      
      doubleArray0[1] = double0;
      Double double2 = new Double((-2.0));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-2.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapSubtract(120.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector2.copy();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(3, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      
      double double3 = arrayRealVector0.getDistance(arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertEquals(0.0, double3, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double4 = arrayRealVector3.dotProduct(arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(3, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(6958906.808436252, double4, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 853;
      double double0 = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(853, 0.0);
      assertEquals(853, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 853;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 853;
      double double1 = arrayRealVector0.getNorm();
      assertEquals(853, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(853, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(859, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 853.0, 0.0, 853.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
      assertEquals(6, doubleArray0.length);
      assertEquals(853, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(859, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1718, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {0.0, 853.0, 0.0, 853.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(853, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(859, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1718, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2571, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertArrayEquals(new double[] {0.0, 853.0, 0.0, 853.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector3);
      
      // Undeclared exception!
      try { 
        arrayRealVector3.walkInOptimizedOrder((RealVectorPreservingVisitor) null, 853, 853);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(realVectorChangingVisitor0).end();
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1.0), double0, 0.01);
      
      double[] doubleArray0 = arrayRealVector0.getDataRef();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      Sigmoid sigmoid0 = new Sigmoid((-1.0), (-1.0));
      assertNotNull(sigmoid0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(sigmoid0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(0, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      
      ArrayRealVector arrayRealVector4 = arrayRealVector3.combineToSelf((-1.0), (-1243.98618071), arrayRealVector2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(0, arrayRealVector3.getDimension());
      assertEquals(0, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      
      RealVector realVector0 = arrayRealVector1.append((-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(1, realVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(realVector0.equals((Object)arrayRealVector3));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector4));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(realVector0, arrayRealVector3);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector4);
      
      // Undeclared exception!
      try { 
        arrayRealVector3.outerProduct(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(874);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapSubtract(146.95);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, realVector0.getDimension());
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combineToSelf(2056.1145953, 0.0, realVector0);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, realVector0.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      double double0 = arrayRealVector2.getNorm();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, realVector0.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(874, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      int int0 = arrayRealVector2.getMinIndex();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, realVector0.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(873, int0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      RealVector realVector1 = arrayRealVector2.mapAdd(1067.395781240524);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, realVector0.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertEquals(874, realVector1.getDimension());
      assertFalse(realVector1.isNaN());
      assertFalse(realVector1.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector2));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, realVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector1);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(realVector1, realVector0);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, arrayRealVector2);
      
      double double1 = arrayRealVector0.getL1Norm();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector1.copy();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(874, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, realVector1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(874, arrayRealVector3.getDimension());
      assertEquals(874, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isInfinite());
      assertFalse(arrayRealVector4.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)realVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)realVector1));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector4);
      
      boolean boolean0 = arrayRealVector0.equals(arrayRealVector4);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(874, arrayRealVector3.getDimension());
      assertEquals(874, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isInfinite());
      assertFalse(arrayRealVector4.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)realVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)realVector1));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector2));
      assertTrue(boolean0);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, realVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, realVector1);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 873;
      doubleArray0[5] = (double) 874;
      doubleArray0[6] = 1067.395781240524;
      arrayRealVector3.setSubVector(139, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(874, arrayRealVector3.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 873.0, 874.0, 1067.395781240524}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, realVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      
      boolean boolean1 = arrayRealVector0.isInfinite();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector2);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      arrayRealVector0.setSubVector(874, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double[] doubleArray0 = new Double[19];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0E-12);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0E-12, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals((-1.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(19, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals(1.0E-12, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      assertEquals(19, doubleArray0.length);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      assertEquals((-1.0), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector1.setSubVector(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2331.414505)).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals((-2331.414505), double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      double double1 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(919035.664896, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arrayRealVector2.walkInOptimizedOrder((RealVectorChangingVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      arrayRealVector0.setSubVector(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.combineToSelf((-957.664), 0.0, arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2331.414505)).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertEquals((-2331.414505), double0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      double double1 = arrayRealVector0.getLInfDistance(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapMultiplyToSelf(2384.2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(realVector0, arrayRealVector0);
      assertSame(realVector0, arrayRealVector1);
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunctionLagrangeForm0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector0, realVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, realVector0);
      
      arrayRealVector1.checkIndex(0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector0, realVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector0);
      
      RealVector realVector1 = realVector0.mapAddToSelf(0.0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(2, realVector1.getDimension());
      assertFalse(realVector1.isNaN());
      assertFalse(realVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(realVector0.equals((Object)arrayRealVector2));
      assertTrue(realVector1.equals((Object)arrayRealVector2));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector0, realVector1);
      assertSame(arrayRealVector0, realVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, realVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertSame(realVector0, realVector1);
      assertSame(realVector0, arrayRealVector0);
      assertSame(realVector0, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector2);
      assertSame(realVector1, arrayRealVector0);
      assertSame(realVector1, realVector0);
      assertSame(realVector1, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(941);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      double double0 = new Double(0);
      assertEquals(0.0, double0, 0.01);
      
      RealVector realVector0 = arrayRealVector0.mapMultiply(941);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(941, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      RealVector realVector1 = arrayRealVector0.mapMultiplyToSelf(941);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector1.isNaN());
      assertEquals(941, realVector1.getDimension());
      assertFalse(realVector1.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(realVector1.equals((Object)realVector0));
      assertNotNull(realVector1);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector1, realVector0);
      assertSame(realVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector0.checkIndices(0, 0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      RealVectorChangingVisitor realVectorChangingVisitor1 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(2857.656854).when(realVectorChangingVisitor1).end();
      doReturn((double)0).when(realVectorChangingVisitor1).visit(anyInt() , anyDouble());
      double double1 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor1, 0, 0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2857.656854, double1, 0.01);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(980.8183659415994).when(realVectorPreservingVisitor0).end();
      double double2 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(980.8183659415994, double2, 0.01);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      double[] doubleArray0 = arrayRealVector0.toArray();
      assertEquals(941, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(doubleArray0);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 2458;
      double double0 = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2458, 0.0);
      assertEquals(2458, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(2458, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(4916, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
      assertEquals(2458, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(4916, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(9832, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      Double[] doubleArray0 = new Double[6];
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double(1061.662);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1061.662, (double)double4, 0.01);
      
      doubleArray0[3] = double4;
      Double double5 = new Double(1.0);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      assertEquals(1.0, (double)double5, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double(1.8729003560057785E-88);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals(1.8729003560057785E-88, (double)double6, 0.01);
      
      doubleArray0[5] = double6;
      ArrayRealVector arrayRealVector3 = null;
      try {
        arrayRealVector3 = new ArrayRealVector(doubleArray0, (-4086), 2458);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4086
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(400.0).when(realVectorChangingVisitor0).end();
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(400.0, double0, 0.01);
      
      int int0 = arrayRealVector0.getDimension();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, int0);
      
      boolean boolean0 = arrayRealVector0.equals("empty string for imaginary character");
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(boolean0);
      
      double double1 = arrayRealVector0.getLInfNorm();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapAdd(1286.04976205497);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0, realVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      
      arrayRealVector0.checkVectorDimensions(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      RealVector realVector1 = RealVector.unmodifiableRealVector(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double2 = (-1925.1927);
      double double3 = arrayRealVector1.getMinValue();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 400.0;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 400.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector2);
      
      // Undeclared exception!
      try { 
        realVector0.outerProduct(arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1303);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1303, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.append((double) 0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1303, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1304, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(44.4582377).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 9, 9);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1303, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertEquals(44.4582377, double0, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      
      try { 
        arrayRealVector0.walkInOptimizedOrder((RealVectorChangingVisitor) null, 0, (-4145));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-4,145)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2340.7976719)).when(realVectorChangingVisitor0).end();
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-2340.7976719), double0, 0.01);
      
      int int0 = arrayRealVector0.getDimension();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, int0);
      
      boolean boolean0 = arrayRealVector0.equals("empty string for imaginary character");
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(boolean0);
      
      double double1 = arrayRealVector0.getLInfNorm();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapAdd(1286.04976205497);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      arrayRealVector0.checkVectorDimensions(arrayRealVector1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      RealVector realVector1 = RealVector.unmodifiableRealVector(arrayRealVector1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double2 = arrayRealVector1.getMinValue();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combine(0.0, (-1925.1927), realVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)realVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      double double3 = arrayRealVector0.getL1Distance(arrayRealVector1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector0.add(realVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(0, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)realVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector3);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      try { 
        arrayRealVector3.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(941);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)941).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941.0, double0, 0.01);
      
      RealVector realVector0 = arrayRealVector0.mapMultiply(941);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isNaN());
      assertEquals(941, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      RealVector realVector1 = arrayRealVector0.mapMultiplyToSelf(941);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, realVector1.getDimension());
      assertFalse(realVector1.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(realVector1.equals((Object)realVector0));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(realVector1, realVector0);
      assertSame(realVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(941, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      
      arrayRealVector0.checkIndices(0, 0);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      
      RealVectorChangingVisitor realVectorChangingVisitor1 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2.9535446262017846E-9)).when(realVectorChangingVisitor1).end();
      doReturn(0.0).when(realVectorChangingVisitor1).visit(anyInt() , anyDouble());
      double double1 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor1, 0, 0);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2.9535446262017846E-9), double1, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double2 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      
      double[] doubleArray0 = arrayRealVector0.toArray();
      assertEquals(941, doubleArray0.length);
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(doubleArray0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector1.setSubVector(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2331.414505)).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals((-2331.414505), double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double1 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(919035.664896, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn((-1.0), 3547.667).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double2 = arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector2.mapMultiplyToSelf(2384.2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, realVector0);
      assertSame(realVector0, arrayRealVector2);
      assertSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunctionLagrangeForm0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      
      ArrayRealVector arrayRealVector4 = arrayRealVector3.ebeMultiply(arrayRealVector2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector4);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      
      arrayRealVector4.checkIndex(0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      
      RealVector realVector1 = arrayRealVector4.mapAddToSelf((-1.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(realVector1.isInfinite());
      assertEquals(2, realVector1.getDimension());
      assertFalse(realVector1.isNaN());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(2, arrayRealVector2.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(2, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector4.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(realVector1.equals((Object)arrayRealVector2));
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector3));
      assertFalse(realVector1.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertNotNull(realVector1);
      assertSame(realVector1, arrayRealVector4);
      assertNotSame(realVector1, arrayRealVector2);
      assertNotSame(realVector1, realVector0);
      assertNotSame(realVector1, arrayRealVector3);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, realVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector1);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertSame(arrayRealVector4, realVector1);
      assertNotSame(arrayRealVector4, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3747.925896702729;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3747.925896702729, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Double[] doubleArray1 = new Double[1];
      int int0 = arrayRealVector0.getMinIndex();
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3747.925896702729, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(15, int0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeMultiply(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {3747.925896702729, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      try { 
        arrayRealVector0.checkVectorDimensions(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAddToSelf(0.0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      
      Logistic logistic0 = new Logistic((-154.7921), 0.0, (-154.7921), 0.0, 4421.8935897588, 4421.8935897588);
      assertNotNull(logistic0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.map(logistic0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-154.7921)).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals((-154.7921), double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(524.926).when(realVectorChangingVisitor0).end();
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(524.926, double0, 0.01);
      
      double[] doubleArray0 = arrayRealVector0.getDataRef();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      Sigmoid sigmoid0 = new Sigmoid(524.926, 524.926);
      assertNotNull(sigmoid0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.map(sigmoid0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector2.combineToSelf((-1.0), (-1243.98618071), arrayRealVector1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector0.append(524.926);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector3));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector3);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      
      // Undeclared exception!
      try { 
        arrayRealVector2.outerProduct(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1397.5947455798;
      doubleArray1[1] = 1156.43322;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(6, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(1156.43322).when(realVectorChangingVisitor0).end();
      doReturn(1156.43322).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.addToEntry(0, 1397.5947455798);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      double double0 = arrayRealVector2.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(6, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertEquals(1156.43322, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      try { 
        arrayRealVector0.getDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-112.162775294);
      doubleArray0[1] = 3977.9531268024657;
      doubleArray0[2] = 3977.9531268024657;
      doubleArray0[3] = 885.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(126);
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(132, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-112.162775294), 3977.9531268024657, 3977.9531268024657, 885.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(132, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(138, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {(-112.162775294), 3977.9531268024657, 3977.9531268024657, 885.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(4.62608152166211E-167).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector2.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(6, doubleArray0.length);
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(132, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(138, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {(-112.162775294), 3977.9531268024657, 3977.9531268024657, 885.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(4.62608152166211E-167, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAddToSelf(0.0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, realVector_Entry0.getIndex());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realVector_Entry0);
      
      double double0 = realVector_Entry0.getValue();
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, realVector_Entry0.getIndex());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      
      boolean boolean0 = arrayRealVector0.equals(realVector_Entry0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, realVector_Entry0.getIndex());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertSame(arrayRealVector0, realVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(realVector0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double1 = arrayRealVector1.getL1Distance(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      int int0 = (-667);
      double double2 = 0.0;
      int int1 = (-1480);
      try { 
        arrayRealVector1.checkIndices((-667), (-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-667)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3258.18193229123);
      doubleArray0[1] = (-347.8224065396);
      doubleArray0[2] = (-2458.2474890038);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-3258.18193229123), (-347.8224065396), (-2458.2474890038)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Sigmoid sigmoid0 = new Sigmoid();
      assertNotNull(sigmoid0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.mapToSelf(sigmoid0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-3258.18193229123), (-347.8224065396), (-2458.2474890038)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, (ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-636);
      int int1 = 0;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-636), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combineToSelf(0, 0, arrayRealVector1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2108.4519);
      doubleArray0[1] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2108.4519), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2108.4519), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(1377);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1377, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapDivide(0.0);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1377, arrayRealVector1.getDimension());
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(1377, realVector0.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      
      int int0 = arrayRealVector0.getMaxIndex();
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2108.4519), 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertEquals(1, int0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      
      Iterator<RealVector.Entry> iterator0 = arrayRealVector0.iterator();
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2108.4519), 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertNotNull(iterator0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      
      try { 
        arrayRealVector1.getSubVector((-260), (-631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of elements should be positive (-631)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1428.4612948724175;
      doubleArray0[1] = (-2136.506);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      int int0 = arrayRealVector0.getMinIndex();
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      Acos acos0 = new Acos();
      assertNotNull(acos0);
      
      double double0 = acos0.value(0.0);
      assertEquals(1.5707963267948966, double0, 0.01);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.map(acos0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      double double1 = arrayRealVector2.getL1Norm();
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      double double2 = arrayRealVector0.getMinValue();
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-2136.506), double2, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      String string0 = arrayRealVector0.toString();
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotNull(string0);
      assertEquals("{1,428.4612948724; -2,136.506; 0; 0; 0; (NaN); 0}", string0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      double double3 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double4 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, double4, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertTrue(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(7, arrayRealVector3.getDimension());
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      
      ArrayRealVector arrayRealVector4 = arrayRealVector1.add(arrayRealVector3);
      assertEquals(7, doubleArray0.length);
      assertTrue(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(7, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(7, arrayRealVector4.getDimension());
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1428.4612948724175, (-2136.506), 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 3);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(3);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf(3, 3, arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.append((RealVector) arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(6, realVector0.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      arrayRealVector0.unitize();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      double double0 = arrayRealVector0.getDistance(arrayRealVector2);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertEquals(14.588457268119896, double0, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      realVector0.addToEntry(0, 3);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(6, realVector0.getDimension());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      int int1 = 635;
      int int2 = 38;
      try { 
        arrayRealVector0.getSubVector(635, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (635)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector1.setSubVector(0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      double double1 = arrayRealVector0.getLInfDistance(arrayRealVector1);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(919035.664896, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double2 = arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector2.mapMultiplyToSelf(2384.2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(2, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector0);
      assertSame(realVector0, arrayRealVector1);
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunctionLagrangeForm0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      
      ArrayRealVector arrayRealVector4 = arrayRealVector3.ebeMultiply(arrayRealVector2);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertFalse(arrayRealVector4.isNaN());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector4.equals((Object)realVector0));
      assertNotNull(arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      
      arrayRealVector4.checkIndex(0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertFalse(arrayRealVector4.isNaN());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector4.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector4.equals((Object)realVector0));
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      
      RealVector realVector1 = arrayRealVector4.mapAddToSelf((-1.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(realVector1.isNaN());
      assertFalse(realVector1.isInfinite());
      assertEquals(2, realVector1.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertEquals(2, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertFalse(arrayRealVector4.isNaN());
      assertEquals(2, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-957.664), (-1.0)}, doubleArray0, 0.01);
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)arrayRealVector2));
      assertFalse(realVector1.equals((Object)arrayRealVector3));
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)realVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertNotNull(realVector1);
      assertNotSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector2);
      assertSame(realVector1, arrayRealVector4);
      assertNotSame(realVector1, arrayRealVector3);
      assertNotSame(realVector1, realVector0);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, realVector1);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector1);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertSame(arrayRealVector4, realVector1);
      assertNotSame(arrayRealVector4, realVector0);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector4, arrayRealVector3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-132.0);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray2 = arrayRealVector0.getDataRef();
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0, 1, 1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      arrayRealVector0.addToEntry(0, 1.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray2, false);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-132.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.append((RealVector) arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(12, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-132.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combine(0.0, 1.0, arrayRealVector1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(6, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-132.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, realVector0);
      
      arrayRealVector0.addToEntry(0, 1.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      boolean boolean0 = arrayRealVector2.equals(realVector0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(12, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(6, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {1.0, 0.0, (-132.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.0, 0.0, (-132.0), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, realVector0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3529.986301;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {3529.986301}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      RealVector realVector0 = arrayRealVector0.getSubVector(0, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0, realVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1941.482977795118));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1941.482977795118), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1941.482977795118));
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1941.482977795118), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals((-1941.482977795118), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals((-1941.482977795118), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1263.010007023112);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals(1263.010007023112, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotNull(double7);
      assertEquals(0.0, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotNull(double8);
      assertEquals(0.0, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(9, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector0.append((RealVector) arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(18, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      RealVector realVector1 = null;
      // Undeclared exception!
      try { 
        arrayRealVector1.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-57.1852859768);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-57.1852859768)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAddToSelf((-57.1852859768));
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {(-57.1852859768)}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, realVector_Entry0.getIndex());
      assertArrayEquals(new double[] {(-57.1852859768)}, doubleArray0, 0.01);
      assertNotNull(realVector_Entry0);
      
      boolean boolean0 = arrayRealVector0.equals(realVector_Entry0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, realVector_Entry0.getIndex());
      assertArrayEquals(new double[] {(-57.1852859768)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertSame(arrayRealVector0, realVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(realVector0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-57.1852859768)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double0 = arrayRealVector1.getL1Distance(arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-57.1852859768)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(114.3705719536, double0, 0.01);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      int int0 = (-667);
      double double1 = 0.0;
      int int1 = (-1480);
      try { 
        arrayRealVector1.checkIndices((-667), (-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-667)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 9;
      int int1 = (-1413);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, 9, (-1413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      int int0 = 0;
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double double1 = arrayRealVector1.getL1Distance(arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      try { 
        arrayRealVector1.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 376;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(376, 376);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertNotNull(realVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.combineToSelf(376, 376, realVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(376, arrayRealVector1.getDimension());
      assertNotNull(arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      
      double double0 = arrayRealVector0.getNorm();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertEquals(5482764.700176727, double0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      int int1 = arrayRealVector0.hashCode();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertFalse(int1 == int0);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      int int2 = arrayRealVector0.getMinIndex();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertFalse(int2 == int0);
      assertEquals(375, int2);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      int int3 = arrayRealVector0.getMaxIndex();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(376, arrayRealVector0.getDimension());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(375, int3);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      try { 
        realVector0.getSubVector(376, 375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (376)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(1898.325608898);
      assertNotNull(double0);
      assertEquals(1898.325608898, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1695.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1695.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1695.0);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(1695.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1695.0);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals(1695.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals(0.0, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[4]);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      assertEquals(1695.0, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.combineToSelf(0.0, (-1280.499812638898), (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1729.07734503;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      String string0 = arrayRealVector0.toString();
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      Iterator<RealVector.Entry> iterator0 = arrayRealVector0.iterator();
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(iterator0);
      
      RealVector realVector0 = arrayRealVector0.mapDivide((-615.9761696));
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.combine((-3003.35354), 0.0, realVector0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.ebeDivide(realVector0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)realVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      RealVector realVector1 = realVector0.mapDivide(0.0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector1.isInfinite());
      assertEquals(0, realVector1.getDimension());
      assertFalse(realVector1.isNaN());
      assertArrayEquals(new double[] {1729.07734503, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector2));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector1.equals((Object)realVector0));
      assertTrue(realVector1.equals((Object)arrayRealVector2));
      assertTrue(realVector1.equals((Object)arrayRealVector0));
      assertTrue(realVector1.equals((Object)arrayRealVector1));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, realVector1);
      assertNotSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, realVector0);
      assertNotSame(realVector1, arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = null;
      try {
        arrayRealVector3 = new ArrayRealVector((Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1083.9);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 1, 1);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-1083.9), Double.POSITIVE_INFINITY, 20.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertEquals(4, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {(-1083.9), Double.POSITIVE_INFINITY, 20.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      int int0 = (-964);
      try { 
        arrayRealVector0.checkIndices((-964), 1316);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-964)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1397.5947455798;
      doubleArray1[1] = 1156.43322;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(6, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.addToEntry(0, 1397.5947455798);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      double double0 = arrayRealVector2.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(6, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1397.5947455798, 1156.43322}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      try { 
        arrayRealVector0.getDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 192;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192, 1185.0);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      String string0 = arrayRealVector0.toString();
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(string0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(192, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.subtract(arrayRealVector1);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(192, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(192, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector0, false);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(192, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      
      double double1 = arrayRealVector3.getDistance(arrayRealVector0);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(192, arrayRealVector3.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      try { 
        arrayRealVector3.getSubVector(273, 273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (273)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.subtract(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      String string0 = arrayRealVector2.toString();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      int int0 = 494;
      int int1 = 0;
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, true);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(0, arrayRealVector3.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector3);
      
      try { 
        arrayRealVector3.addToEntry(0, 221.93558);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-2181);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((-2181));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1251);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1251, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.map(atan0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1251, arrayRealVector0.getDimension());
      assertEquals(1251, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double0 = arrayRealVector0.getL1Distance(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1251, arrayRealVector0.getDimension());
      assertEquals(1251, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double double1 = arrayRealVector0.getLInfNorm();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1251, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      Constant constant0 = new Constant(0.0);
      assertNotNull(constant0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1251;
      PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
      try {
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array sizes should have difference 1 (2 != 2 + 1)
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1264.69861);
      doubleArray0[2] = (-2.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, (-1264.69861), (-2.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getLInfNorm();
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, (-1264.69861), (-2.0)}, doubleArray0, 0.01);
      assertEquals(1264.69861, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.006;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 493.4955671706;
      doubleArray0[4] = 120.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.006, 0.0, (-1.0), 493.4955671706, 120.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.addToEntry((-440), (-2647.04036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-440)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.addToEntry(2048, 2048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (2,048)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.map(exp0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double[] doubleArray0 = null;
      int int0 = 576;
      int int1 = 1;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((Double[]) null, 576, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-2513);
      int int1 = 285;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((Double[]) null, (-2513), 285);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 9;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(9, 9);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapMultiply(0.0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      double double0 = arrayRealVector0.getNorm();
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertEquals(27.0, double0, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      
      arrayRealVector0.unitize();
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertNotSame(arrayRealVector0, realVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.append(arrayRealVector0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(18, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, realVector0);
      
      try { 
        arrayRealVector2.getLInfDistance(realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 18 != 9
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1391.0823977;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 2424.48;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1166.27935335;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 991;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(991);
      assertEquals(991, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 991;
      doubleArray0[1] = (double) 991;
      doubleArray0[2] = (double) 991;
      doubleArray0[3] = (double) 991;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {991.0, 991.0, 991.0, 991.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)arrayRealVector0.outerProduct(arrayRealVector1);
      assertEquals(7, doubleArray0.length);
      assertEquals(991, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(991, blockRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {991.0, 991.0, 991.0, 991.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(blockRealMatrix0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      doubleArray0[4] = (double) 991;
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        arrayRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, realVector_Entry0.getIndex());
      assertNotNull(realVector_Entry0);
      
      boolean boolean0 = arrayRealVector0.equals(realVector_Entry0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, realVector_Entry0.getIndex());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2715.7244667);
      doubleArray0[6] = (-2715.7244667);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2720.3037704016515);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-2715.7244667), (-2715.7244667), 0.0, (-2720.3037704016515)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.combine((-2715.7244667), 0.0, arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        arrayRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1314.1;
      doubleArray0[1] = 12.762464798;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {1314.1, 12.762464798}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {1314.1, 12.762464798}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double double0 = 0.0;
      try { 
        arrayRealVector1.combineToSelf(0.0, 0.0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      int int0 = 166;
      try { 
        arrayRealVector0.checkVectorDimensions(166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 166
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3044.1433676218503);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, (-3044.1433676218503)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, (-3044.1433676218503)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector1.getDistance(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2607.627468547862;
      doubleArray0[1] = 2272.37562145;
      doubleArray0[2] = 984.37;
      doubleArray0[3] = (-2717.75336915);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      ArrayRealVector arrayRealVector0 = null;
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 283;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(283);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(283, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(283, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(283, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector1.checkVectorDimensions(283);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(283, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(283, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf(1.0, 0.0, arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(283, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(283, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(283, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector2.combine(0.0, 602.7095834263855, arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(283, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(283, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(283, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(283, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      int int1 = 0;
      double double0 = arrayRealVector1.getEntry(0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(283, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(283, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector1, arrayRealVector2);
      
      ArrayRealVector arrayRealVector4 = null;
      try {
        arrayRealVector4 = new ArrayRealVector((-2550));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 167.55910479232307;
      doubleArray0[2] = (-1620.818455943);
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (-929.316);
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0, 167.55910479232307, (-1620.818455943), (-2.0), (-929.316), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1.0, 167.55910479232307, (-1620.818455943), (-2.0), (-929.316), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combine(167.55910479232307, 1.0, arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(0, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {1.0, 167.55910479232307, (-1620.818455943), (-2.0), (-929.316), 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      int int0 = arrayRealVector0.getDimension();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(8, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.add(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, (-3.141592653589793));
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double double0 = arrayRealVector0.dotProduct(arrayRealVector1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      try { 
        arrayRealVector0.getEntry(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1004.9697728061391);
      doubleArray0[1] = 1930.5441923008366;
      doubleArray0[2] = (-3679.331745016804);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-1004.9697728061391), 1930.5441923008366, (-3679.331745016804)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-1004.9697728061391), 1930.5441923008366, (-3679.331745016804)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double double0 = arrayRealVector0.getMaxValue();
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-1004.9697728061391), 1930.5441923008366, (-3679.331745016804)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(1930.5441923008366, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      arrayRealVector0.unitize();
      assertEquals(3, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-0.2350882239570195), 0.4516038369704188, (-0.8606901308777334)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = null;
      try {
        arrayRealVector2 = new ArrayRealVector((RealVector) null, arrayRealVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = arrayRealVector0.isNaN();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(boolean0);
      
      double double0 = arrayRealVector0.getMaxValue();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = (-2222);
      try { 
        arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0, (-2222), (-2222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-2,222)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 37;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(37);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(74, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      Iterator<RealVector.Entry> iterator0 = arrayRealVector1.iterator();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(74, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(iterator0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(74, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(37, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(74, array2DRowRealMatrix0.getRowDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(array2DRowRealMatrix0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      double[] doubleArray0 = arrayRealVector0.toArray();
      assertEquals(37, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(doubleArray0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector1.append((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(74, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(111, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      double double0 = 1.0;
      arrayRealVector1.set(1.0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(37, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(74, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      try { 
        arrayRealVector1.getL1Distance(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 74 != 37
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 412.7921;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 412.7921}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(2, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 412.7921}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.getL1Distance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 749.054237668333;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4583.04992910421;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {749.054237668333, (-1.0), 0.0, 4583.04992910421}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getL1Norm();
      assertEquals(4, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {749.054237668333, (-1.0), 0.0, 4583.04992910421}, doubleArray0, 0.01);
      assertEquals(10666.208333545086, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {1.0E-12, (-2.0), 1.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(10, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {1.0E-12, (-2.0), 1.0, 3.141592653589793, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.setSubVector(0, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (9)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 486.627456;
      doubleArray0[3] = (-4387.066510494783);
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((ArrayRealVector) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2033.6499);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1379.27577855);
      double double0 = 412.265482513154;
      doubleArray0[3] = 412.265482513154;
      doubleArray0[4] = 927.29575;
      doubleArray0[5] = (-1086.67584);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2033.6499), 0.0, (-1379.27577855), 412.265482513154, 927.29575, (-1086.67584)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      int int0 = 0;
      RealVector realVector0 = arrayRealVector0.append((-673.82));
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(7, realVector0.getDimension());
      assertArrayEquals(new double[] {(-2033.6499), 0.0, (-1379.27577855), 412.265482513154, 927.29575, (-1086.67584)}, doubleArray0, 0.01);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      double double1 = arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 0, 1);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2033.6499), 0.0, (-1379.27577855), 412.265482513154, 927.29575, (-1086.67584)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2033.6499), 0.0, (-1379.27577855), 412.265482513154, 927.29575, (-1086.67584)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(boolean0);
      assertNotSame(arrayRealVector0, realVector0);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1086.67584);
      doubleArray1[1] = (Double) 412.265482513154;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.ebeDivide(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((double[]) null, arrayRealVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-339.7);
      doubleArray0[0] = (-339.7);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-339.7)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try { 
        arrayRealVector0.append((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1609.97827281167;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 220.97;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(3.141592653589793);
      assertNotNull(double0);
      assertEquals(3.141592653589793, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(3.141592653589793, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-898.02));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-898.02), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double double4 = Double.min(3.141592653589793, 3.141592653589793);
      assertEquals(3.141592653589793, double4, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      try { 
        arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, (-909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1303);
      assertEquals(1303, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.append((double) 0);
      assertEquals(1303, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isInfinite());
      assertEquals(1304, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0, 9, 9);
      assertEquals(1303, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      
      try { 
        arrayRealVector0.walkInOptimizedOrder((RealVectorChangingVisitor) null, 0, (-4145));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-4,145)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      RealVector realVector0 = arrayRealVector0.mapMultiply(909.968);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      try { 
        arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[0];
      String string0 = arrayRealVector0.toString();
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(string0);
      assertEquals("{0}", string0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.ebeDivide(arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(1, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      try { 
        arrayRealVector2.setSubVector(165, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (165)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1694.9362;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector0.checkVectorDimensions(arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertArrayEquals(new double[] {0.0, 1694.9362, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      
      try { 
        arrayRealVector0.checkVectorDimensions(arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 14
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = null;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(116, 116);
      assertEquals(116, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(0);
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      // Undeclared exception!
      try { 
        arrayRealVector1.outerProduct(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 196;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(196, (-1475.96493312785));
      assertEquals(196, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(196, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(196, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector0.projection(arrayRealVector1);
      assertEquals(196, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(196, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(196, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      // Undeclared exception!
      arrayRealVector1.outerProduct(arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1731.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2161.4195802015356;
      doubleArray0[4] = 492.0;
      double double0 = (-420.836);
      doubleArray0[5] = (-420.836);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2.0);
      doubleArray0[8] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {1731.0, 2.0, 0.0, 2161.4195802015356, 492.0, (-420.836), 0.0, (-2.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Iterator<RealVector.Entry> iterator0 = arrayRealVector0.iterator();
      assertEquals(9, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {1731.0, 2.0, 0.0, 2161.4195802015356, 492.0, (-420.836), 0.0, (-2.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(iterator0);
      
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        arrayRealVector0.outerProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 192;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 192;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals(192, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double double0 = arrayRealVector0.dotProduct(arrayRealVector1);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals(192, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      doubleArray0[1] = (double) 192;
      doubleArray0[2] = (double) 192;
      // Undeclared exception!
      arrayRealVector0.outerProduct(arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2945.6961497083;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-0.5);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 2945.6961497083, 0.0, 0.0, (-0.5)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(20, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 2945.6961497083, 0.0, 0.0, (-0.5)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = null;
      try {
        arrayRealVector2 = new ArrayRealVector((RealVector) null, arrayRealVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((-2367), (-2367));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      int int0 = (-1595);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1595), (-1595));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(2, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.subtract(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.006;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.006}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.006}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.006}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      double double0 = arrayRealVector0.getNorm();
      assertEquals(1, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.006}, doubleArray0, 0.01);
      assertEquals(0.006, double0, 0.01);
      assertSame(doubleArray0, doubleArray1);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(756, 0.006);
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(756, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.subtract(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 756
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(874);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapSubtract(146.95);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(874, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.combineToSelf(2056.1145953, 0.0, realVector0);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isNaN());
      assertEquals(874, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertNotNull(arrayRealVector2);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      double double0 = arrayRealVector2.getNorm();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(874, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertEquals(0.0, double0, 0.01);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      int int0 = arrayRealVector2.getMinIndex();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(874, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertEquals(873, int0);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      
      RealVector realVector1 = arrayRealVector2.mapAdd(1067.395781240524);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(874, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertEquals(874, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(realVector1.isNaN());
      assertEquals(874, realVector1.getDimension());
      assertFalse(realVector1.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)realVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector1.equals((Object)arrayRealVector1));
      assertFalse(realVector1.equals((Object)arrayRealVector2));
      assertNotNull(realVector1);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(realVector0, realVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, realVector1);
      assertNotSame(arrayRealVector2, realVector0);
      assertSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(realVector1, realVector0);
      assertNotSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, arrayRealVector1);
      assertNotSame(realVector1, arrayRealVector2);
      
      double double1 = arrayRealVector0.getL1Norm();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector1.copy();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(874, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector1));
      assertNotNull(arrayRealVector3);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, realVector1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 873;
      doubleArray0[5] = (double) 874;
      doubleArray0[6] = 1067.395781240524;
      arrayRealVector3.setSubVector(139, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(874, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(874, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 873.0, 874.0, 1067.395781240524}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)realVector1));
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, realVector1);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(boolean0);
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      arrayRealVector0.setSubVector(874, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(874, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2490.7133;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1139.39706277957;
      doubleArray0[7] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 2490.7133, 0.0, 1139.39706277957, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 2490.7133, 0.0, 1139.39706277957, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      arrayRealVector0.setSubVector(0, (RealVector) arrayRealVector1);
      assertEquals(8, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 2490.7133, 0.0, 1139.39706277957, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1865.328765718828));
      assertNotNull(double0);
      assertEquals((-1865.328765718828), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1865.328765718828), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-2.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      RealVector realVector0 = arrayRealVector1.mapSubtract(120.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(3, realVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = arrayRealVector2.copy();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(3, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(3, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertFalse(arrayRealVector2.equals((Object)realVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)realVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      
      double double3 = arrayRealVector0.getDistance(arrayRealVector1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)realVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)realVector0));
      assertEquals(0.0, double3, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-112.162775294);
      doubleArray0[1] = 3977.9531268024657;
      doubleArray0[2] = 904.9;
      doubleArray0[3] = 885.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(126);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(132, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {(-112.162775294), 3977.9531268024657, 904.9, 885.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(132, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(138, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {(-112.162775294), 3977.9531268024657, 904.9, 885.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector2.walkInOptimizedOrder(realVectorPreservingVisitor0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(126, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(132, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(138, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {(-112.162775294), 3977.9531268024657, 904.9, 885.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(941);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
      
      RealVector realVector0 = arrayRealVector0.mapMultiply(941);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertFalse(realVector0.isNaN());
      assertEquals(941, realVector0.getDimension());
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      
      RealVector realVector1 = arrayRealVector0.mapMultiplyToSelf(941);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertEquals(941, realVector1.getDimension());
      assertFalse(realVector1.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)realVector0));
      assertTrue(realVector1.equals((Object)realVector0));
      assertNotNull(realVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertSame(arrayRealVector0, realVector1);
      assertSame(realVector1, arrayRealVector0);
      assertNotSame(realVector1, realVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertEquals(941, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector1));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      assertNotSame(arrayRealVector1, realVector1);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      
      arrayRealVector0.checkIndices(0, 0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      
      RealVectorChangingVisitor realVectorChangingVisitor1 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor1).end();
      doReturn(0.0).when(realVectorChangingVisitor1).visit(anyInt() , anyDouble());
      double double1 = arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor1, 0, 0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double2 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
      
      double[] doubleArray0 = arrayRealVector0.toArray();
      assertEquals(941, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(941, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotNull(doubleArray0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = arrayRealVector0.mapAddToSelf(0.0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertSame(arrayRealVector0, realVector0);
      assertSame(realVector0, arrayRealVector0);
      
      Logistic logistic0 = new Logistic((-154.7921), 0.0, (-154.7921), 0.0, 4421.8935897588, 4421.8935897588);
      assertNotNull(logistic0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.map(logistic0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector1.equals((Object)realVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, realVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      double double0 = arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2898.51213;
      doubleArray0[1] = 361.508;
      doubleArray0[2] = (-361.84498072);
      doubleArray0[3] = 0.5;
      doubleArray0[4] = (-2601.751764);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {2898.51213, 361.508, (-361.84498072), 0.5, (-2601.751764), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(14, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {2898.51213, 361.508, (-361.84498072), 0.5, (-2601.751764), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector1.setSubVector((-1528), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,528)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2021.1);
      doubleArray0[0] = (-2021.1);
      int int0 = (-1292);
      int int1 = (-1);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1292), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1830.392363886153);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(9, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1830.392363886153), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(9, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(9, arrayRealVector3.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1830.392363886153), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      
      boolean boolean0 = arrayRealVector3.equals(arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(9, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(9, arrayRealVector3.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1830.392363886153), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(boolean0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 190;
      int int1 = arrayRealVector0.getMaxIndex();
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(4, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      double double0 = arrayRealVector2.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      assertEquals(4, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(4, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (-1778.49738);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {2.0, 1.0E-12, (-1778.49738), Double.NaN, 0.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector1.isNaN());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {2.0, 1.0E-12, (-1778.49738), Double.NaN, 0.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.append(arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isNaN());
      assertTrue(arrayRealVector1.isNaN());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(36, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector2.isNaN());
      assertArrayEquals(new double[] {2.0, 1.0E-12, (-1778.49738), Double.NaN, 0.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(1, 782.02);
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(1, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector3);
      
      RealVector realVector0 = arrayRealVector0.append((RealVector) arrayRealVector3);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertFalse(arrayRealVector3.isNaN());
      assertEquals(1, arrayRealVector3.getDimension());
      assertTrue(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertEquals(19, realVector0.getDimension());
      assertArrayEquals(new double[] {2.0, 1.0E-12, (-1778.49738), Double.NaN, 0.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector3));
      assertFalse(realVector0.equals((Object)arrayRealVector1));
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.equals((Object)arrayRealVector2));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, realVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector3);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      
      try { 
        arrayRealVector0.getSubVector(1, 3761);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (3,761)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2563.48660266);
      doubleArray0[1] = 7.321238022013781E-8;
      doubleArray0[2] = (-4699.1236);
      doubleArray0[3] = (-1250.65);
      doubleArray0[4] = (-1991.3746856643738);
      doubleArray0[5] = (-557.4);
      doubleArray0[6] = 275.7080134;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2563.48660266), 7.321238022013781E-8, (-4699.1236), (-1250.65), (-1991.3746856643738), (-557.4), 275.7080134}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {(-2563.48660266), 7.321238022013781E-8, (-4699.1236), (-1250.65), (-1991.3746856643738), (-557.4), 275.7080134}, doubleArray0, 0.01);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(14, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-2563.48660266), 7.321238022013781E-8, (-4699.1236), (-1250.65), (-1991.3746856643738), (-557.4), 275.7080134}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 7.321238022013781E-8;
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(1, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector3);
      
      ArrayRealVector arrayRealVector4 = new ArrayRealVector((RealVector) arrayRealVector2, arrayRealVector3);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(14, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(1, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(15, arrayRealVector4.getDimension());
      assertArrayEquals(new double[] {(-2563.48660266), 7.321238022013781E-8, (-4699.1236), (-1250.65), (-1991.3746856643738), (-557.4), 275.7080134}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector4);
      
      ArrayRealVector arrayRealVector5 = arrayRealVector4.append(arrayRealVector1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(14, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(1, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector4.isNaN());
      assertFalse(arrayRealVector4.isInfinite());
      assertEquals(15, arrayRealVector4.getDimension());
      assertFalse(arrayRealVector5.isInfinite());
      assertFalse(arrayRealVector5.isNaN());
      assertEquals(22, arrayRealVector5.getDimension());
      assertArrayEquals(new double[] {(-2563.48660266), 7.321238022013781E-8, (-4699.1236), (-1250.65), (-1991.3746856643738), (-557.4), 275.7080134}, doubleArray0, 0.01);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector3));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector3));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector4.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector4));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector5.equals((Object)arrayRealVector3));
      assertNotNull(arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector4);
      assertNotSame(arrayRealVector0, arrayRealVector3);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector5);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector4);
      assertNotSame(arrayRealVector1, arrayRealVector3);
      assertNotSame(arrayRealVector1, arrayRealVector5);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector3);
      assertNotSame(arrayRealVector2, arrayRealVector5);
      assertNotSame(arrayRealVector2, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector4);
      assertNotSame(arrayRealVector3, arrayRealVector2);
      assertNotSame(arrayRealVector3, arrayRealVector0);
      assertNotSame(arrayRealVector3, arrayRealVector1);
      assertNotSame(arrayRealVector3, arrayRealVector5);
      assertNotSame(arrayRealVector4, arrayRealVector0);
      assertNotSame(arrayRealVector4, arrayRealVector3);
      assertNotSame(arrayRealVector4, arrayRealVector1);
      assertNotSame(arrayRealVector4, arrayRealVector5);
      assertNotSame(arrayRealVector4, arrayRealVector2);
      assertNotSame(arrayRealVector5, arrayRealVector4);
      assertNotSame(arrayRealVector5, arrayRealVector2);
      assertNotSame(arrayRealVector5, arrayRealVector1);
      assertNotSame(arrayRealVector5, arrayRealVector0);
      assertNotSame(arrayRealVector5, arrayRealVector3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      RealVector realVector0 = arrayRealVector2.append((RealVector) arrayRealVector1);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(0, arrayRealVector2.getDimension());
      assertEquals(0, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
      assertFalse(realVector0.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertTrue(realVector0.equals((Object)arrayRealVector2));
      assertTrue(realVector0.equals((Object)arrayRealVector1));
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, realVector0);
      assertNotSame(arrayRealVector2, realVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector2);
      assertNotSame(realVector0, arrayRealVector1);
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2286.874312575);
      doubleArray0[1] = 5006.953085;
      doubleArray0[2] = 880.0;
      doubleArray0[3] = 2604.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2286.874312575), 5006.953085, 880.0, 2604.5}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double0 = arrayRealVector0.getNorm();
      assertEquals(4, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-2286.874312575), 5006.953085, 880.0, 2604.5}, doubleArray0, 0.01);
      assertEquals(8701.401446537953, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RealVector realVector0 = null;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 298.5071733;
      doubleArray0[1] = (-1367.88575);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1180.0;
      doubleArray0[4] = 1569.37092758442;
      doubleArray0[5] = 1241.0870817542814;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {298.5071733, (-1367.88575), 0.0, 1180.0, 1569.37092758442, 1241.0870817542814}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 120.0;
      doubleArray0[1] = (-547.0871);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2399.33135;
      doubleArray0[4] = 2205.824555;
      doubleArray0[5] = 1496.65847;
      doubleArray0[6] = (-684.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {120.0, (-547.0871), 0.0, 2399.33135, 2205.824555, 1496.65847, (-684.1)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1806.106);
      doubleArray1[2] = 2205.824555;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 2942.7367962547;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-684.1);
      doubleArray1[7] = (-435.62875290963717);
      doubleArray1[8] = 0.0;
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector(doubleArray1, 1366, 1366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,732 is larger than the maximum (9)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.5);
      doubleArray0[2] = (-96.90775);
      doubleArray0[3] = 11.96298944;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, (-0.5), (-96.90775), 11.96298944}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      int int0 = arrayRealVector0.getDimension();
      assertEquals(4, doubleArray0.length);
      assertEquals(8, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, (-0.5), (-96.90775), 11.96298944}, doubleArray0, 0.01);
      assertEquals(8, int0);
      
      int int1 = 2030;
      try { 
        arrayRealVector0.setEntry(2030, 3115.4474767507);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (2,030)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      try { 
        arrayRealVector0.setEntry((-3014), (-3014));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-3,014)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-491.107);
      doubleArray0[1] = 2.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 845.0;
      doubleArray0[4] = 1.0E-12;
      double double1 = 442.78116;
      doubleArray0[5] = 442.78116;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 244.8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-491.107), 2.0, 0.0, 845.0, 1.0E-12, 442.78116, 0.0, 0.0, 244.8}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {(-491.107), 2.0, 0.0, 845.0, 1.0E-12, 442.78116, 0.0, 0.0, 244.8}, doubleArray0, 0.01);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(36, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {(-491.107), 2.0, 0.0, 845.0, 1.0E-12, 442.78116, 0.0, 0.0, 244.8}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector2);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertFalse(arrayRealVector2.isInfinite());
      assertEquals(36, arrayRealVector2.getDimension());
      assertEquals(72, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertFalse(arrayRealVector3.isInfinite());
      assertArrayEquals(new double[] {(-491.107), 2.0, 0.0, 845.0, 1.0E-12, 442.78116, 0.0, 0.0, 244.8}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector3);
      
      try { 
        arrayRealVector0.dotProduct(arrayRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 72
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-959.41811726319);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {(-959.41811726319)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector();
      assertEquals(0, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      try { 
        arrayRealVector0.add(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotNull(arrayRealVector2);
      
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector2, arrayRealVector0);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector2.isInfinite());
      assertFalse(arrayRealVector2.isNaN());
      assertEquals(2, arrayRealVector2.getDimension());
      assertFalse(arrayRealVector3.isInfinite());
      assertEquals(3, arrayRealVector3.getDimension());
      assertFalse(arrayRealVector3.isNaN());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector3.equals((Object)arrayRealVector2));
      assertNotNull(arrayRealVector3);
      
      try { 
        arrayRealVector2.ebeMultiply(arrayRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(701.81122);
      assertNotNull(double0);
      assertEquals(701.81122, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.5);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.5, (double)double2, 0.01);
      
      double double3 = Double.sum(1135.8, (-1.0));
      assertEquals(1134.8, double3, 0.01);
      
      double double4 = Double.max((-3645.72), 701.81122);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(701.81122, double4, 0.01);
      
      doubleArray0[2] = double2;
      Double double5 = new Double((double) doubleArray0[2]);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      assertEquals(0.5, (double)double5, 0.01);
      
      doubleArray0[3] = double5;
      int int0 = 0;
      double double6 = Double.sum((double) doubleArray0[3], (double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals((-0.5), double6, 0.01);
      
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 1999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,999 is larger than the maximum (4)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2579);
      arrayRealVector0.mapDivide(0.0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.walkInDefaultOrder(realVectorChangingVisitor0);
      try { 
        arrayRealVector0.checkVectorDimensions((-1524));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,579 != -1,524
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      arrayRealVector0.set((-629.9702962177275));
      arrayRealVector0.hashCode();
      RealVector realVector0 = arrayRealVector0.append(0.0);
      assertEquals(11, realVector0.getDimension());
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-22.788);
      doubleArray0[1] = 3.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      arrayRealVector1.append((-869.0));
      Object object0 = new Object();
      arrayRealVector1.equals(object0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      
      arrayRealVector1.mapAddToSelf(3.0);
      boolean boolean0 = arrayRealVector1.isNaN();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double(1.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[1]);
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[4]);
      doubleArray0[7] = double7;
      double double8 = 0.0;
      Double.isFinite(0.0);
      Double double9 = new Double(0.0);
      doubleArray0[8] = double9;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        arrayRealVector0.setSubVector(134, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      try { 
        arrayRealVector1.setSubVector(1761, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,761)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      Double.isFinite((-1.0));
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector(doubleArray1, 1820, 1820);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,640 is larger than the maximum (1)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.dotProduct(arrayRealVector1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      arrayRealVector1.append(0.0);
      ArrayRealVector arrayRealVector2 = arrayRealVector0.add(arrayRealVector1);
      arrayRealVector0.ebeMultiply(arrayRealVector2);
      try { 
        arrayRealVector0.getSubVector(336, 62);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (336)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 171.13;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      // Undeclared exception!
      try { 
        arrayRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1613.09317;
      doubleArray0[1] = 10.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.copy();
      assertEquals(2, arrayRealVector2.getDimension());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(784);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      arrayRealVector0.getMinValue();
      arrayRealVector0.getL1Norm();
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
      try { 
        arrayRealVector1.getDistance(arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,568 != 2,352
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((ArrayRealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1899);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        arrayRealVector1.add(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,798 != 1,899
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(134);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.copy();
      assertEquals(134, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 235, 283);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 518 is larger than the maximum (2)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.141592653589793);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        arrayRealVector0.getLInfDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertEquals(1, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.checkIndices(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 912;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(912, (-2144.88633845));
      double double0 = 0.0;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(912, 0.0);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.ebeDivide(arrayRealVector0);
      arrayRealVector0.dotProduct(arrayRealVector1);
      arrayRealVector2.equals(arrayRealVector1);
      arrayRealVector1.isInfinite();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 912;
      doubleArray0[1] = (-2144.88633845);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 912;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2144.88633845);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(doubleArray0, arrayRealVector1);
      try { 
        arrayRealVector0.ebeDivide(arrayRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 912 != 920
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      int int0 = 0;
      arrayRealVector1.setSubVector(0, doubleArray0);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2331.414505)).when(realVectorPreservingVisitor0).end();
      arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      arrayRealVector0.getLInfDistance(arrayRealVector1);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      arrayRealVector2.mapMultiplyToSelf(2384.2);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      arrayRealVector3.ebeMultiply(arrayRealVector2);
      // Undeclared exception!
      try { 
        PolynomialFunctionLagrangeForm.verifyInterpolationArray((double[]) null, doubleArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-935.0);
      doubleArray0[1] = (-1545.1860541163771);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      int int0 = 180;
      try { 
        arrayRealVector0.checkIndex(180);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (180)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 3;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3, 3);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(3);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf(3, 3, arrayRealVector0);
      RealVector realVector0 = arrayRealVector0.append((RealVector) arrayRealVector1);
      arrayRealVector0.unitize();
      arrayRealVector0.getDistance(arrayRealVector2);
      realVector0.addToEntry(0, 3);
      int int1 = 643;
      int int2 = 38;
      try { 
        arrayRealVector0.getSubVector(643, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (643)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-957.664);
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      arrayRealVector1.setSubVector(0, doubleArray0);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combineToSelf((-957.664), (-1.0), arrayRealVector0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(realVectorPreservingVisitor0).end();
      arrayRealVector1.walkInOptimizedOrder(realVectorPreservingVisitor0);
      arrayRealVector0.getLInfDistance(arrayRealVector1);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(realVectorChangingVisitor0).end();
      doReturn(0.0, (-1.0)).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0);
      RealVector realVector0 = arrayRealVector2.mapMultiplyToSelf(2384.2);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(polynomialFunctionLagrangeForm0);
      ArrayRealVector arrayRealVector4 = arrayRealVector3.ebeMultiply(arrayRealVector2);
      arrayRealVector4.ebeDivide(arrayRealVector0);
      arrayRealVector4.checkIndex(0);
      arrayRealVector4.mapAddToSelf((-1.0));
      RealVector.Entry realVector_Entry0 = realVector0.new Entry();
      realVector0.equals(realVector_Entry0);
      try { 
        arrayRealVector1.getEntry(140);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (140)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1397.5947455798;
      doubleArray1[1] = 1156.43322;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector1);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(442413.375).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      arrayRealVector0.addToEntry(0, 1397.5947455798);
      arrayRealVector2.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      try { 
        arrayRealVector0.getDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-57.1852859768);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = arrayRealVector0.mapAddToSelf((-57.1852859768));
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      realVector_Entry0.setIndex(119);
      arrayRealVector0.equals(realVector_Entry0);
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract(realVector0);
      arrayRealVector1.getL1Distance(arrayRealVector0);
      int int0 = (-667);
      double double0 = 0.0;
      realVector0.outerProduct(arrayRealVector0);
      int int1 = (-1480);
      try { 
        arrayRealVector1.checkIndices((-667), (-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-667)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1, 1);
      boolean boolean0 = false;
      int int1 = (-1579);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1579);
      doubleArray0[1] = (double) (-1579);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1579);
      doubleArray0[5] = (double) (-1579);
      try { 
        arrayRealVector0.setSubVector((-1579), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,579)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(196);
      Double double0 = new Double(196);
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertFalse(boolean0);
      
      arrayRealVector0.setEntry(9, 196);
      arrayRealVector0.getDataRef();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      double double1 = arrayRealVector1.getLInfNorm();
      assertEquals(196.0, double1, 0.01);
      
      ArrayRealVector arrayRealVector2 = arrayRealVector1.combine((-572.2), 9, arrayRealVector1);
      Sinh sinh0 = new Sinh();
      ArrayRealVector arrayRealVector3 = arrayRealVector0.map(sinh0);
      String string0 = arrayRealVector3.toString();
      assertEquals("{0; 0; 0; 0; 0; 0; 0; 0; 0; 6,617,416,307,822,852,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0}", string0);
      
      arrayRealVector0.iterator();
      arrayRealVector3.iterator();
      double double2 = arrayRealVector1.getLInfDistance(arrayRealVector1);
      ArrayRealVector arrayRealVector4 = arrayRealVector2.add(arrayRealVector1);
      assertEquals(196, arrayRealVector4.getDimension());
      
      double double3 = arrayRealVector4.getLInfDistance(arrayRealVector3);
      assertEquals(6.617416307822852E84, double3, 0.01);
      
      double double4 = arrayRealVector1.getDistance(arrayRealVector0);
      assertEquals(double4, double2, 0.01);
      
      arrayRealVector0.combine(0.0, (-572.2), arrayRealVector2);
      arrayRealVector4.addToEntry(0, 0.0);
      double double5 = arrayRealVector2.getEntry(0);
      assertEquals(0.0, double5, 0.01);
      
      arrayRealVector3.mapSubtractToSelf((-649.04));
      arrayRealVector4.copy();
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.isInfinite());
  }
}
