/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:09:52 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.linear.AbstractFieldMatrix;
import org.apache.commons.math3.linear.Array2DRowFieldMatrix;
import org.apache.commons.math3.linear.ArrayFieldVector;
import org.apache.commons.math3.linear.BlockFieldMatrix;
import org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor;
import org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor;
import org.apache.commons.math3.linear.FieldMatrix;
import org.apache.commons.math3.linear.FieldMatrixChangingVisitor;
import org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;
import org.apache.commons.math3.linear.FieldVector;
import org.apache.commons.math3.util.Decimal64;
import org.apache.commons.math3.util.Decimal64Field;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockFieldMatrix_ESTest extends BlockFieldMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[4];
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      decimal64Array0[0] = decimal64_0;
      Field<Decimal64> field0 = AbstractFieldMatrix.extractField(decimal64Array0);
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 6, 6);
      try { 
        blockFieldMatrix0.preMultiply(decimal64Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      blockFieldMatrix0.subtract((FieldMatrix<Decimal64>) blockFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      blockFieldMatrix0.add((FieldMatrix<Decimal64>) blockFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      DefaultFieldMatrixPreservingVisitor<Decimal64> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Decimal64>(decimal64_0);
      try { 
        blockFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Decimal64>) defaultFieldMatrixPreservingVisitor0, 21, 121, 199, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (21)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      DefaultFieldMatrixChangingVisitor<Decimal64> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Decimal64>(decimal64_0);
      try { 
        blockFieldMatrix0.walkInRowOrder((FieldMatrixChangingVisitor<Decimal64>) defaultFieldMatrixChangingVisitor0, 0, 36, 0, 1491);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (36)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NAN;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 1403, 706);
      DefaultFieldMatrixPreservingVisitor<Decimal64> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Decimal64>(decimal64_0);
      try { 
        blockFieldMatrix0.walkInOptimizedOrder((FieldMatrixPreservingVisitor<Decimal64>) defaultFieldMatrixPreservingVisitor0, 706, (-1), (-4563), 205);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-1)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[7];
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 26);
      DefaultFieldMatrixChangingVisitor<Decimal64> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Decimal64>(decimal64Array0[3]);
      try { 
        blockFieldMatrix0.walkInOptimizedOrder((FieldMatrixChangingVisitor<Decimal64>) defaultFieldMatrixChangingVisitor0, 3, (-2079), 26, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (3)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[6][2];
      Decimal64[] decimal64Array1 = new Decimal64[9];
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      Field<Decimal64> field0 = AbstractFieldMatrix.extractField(decimal64Array0);
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 56, 56);
      Array2DRowFieldMatrix<Decimal64> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Decimal64>(decimal64Array0[0]);
      try { 
        blockFieldMatrix0.subtract((FieldMatrix<Decimal64>) array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 9x1 but expected 56x56
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      ArrayFieldVector<Decimal64> arrayFieldVector0 = new ArrayFieldVector<Decimal64>(decimal64Array1);
      try { 
        blockFieldMatrix0.setColumnVector(1499, arrayFieldVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (1,499)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.ZERO;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 481, 481);
      Decimal64[] decimal64Array0 = new Decimal64[0];
      try { 
        blockFieldMatrix0.setColumn(1447, decimal64Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (1,447)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[18];
      Decimal64 decimal64_0 = Decimal64.ZERO;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      try { 
        blockFieldMatrix0.multiply(blockFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 18
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 1, 61);
      // Undeclared exception!
      try { 
        blockFieldMatrix0.multiply((BlockFieldMatrix<Decimal64>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 36, 36);
      try { 
        blockFieldMatrix0.getSubMatrix(36, 36, 36, 1413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (36)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 36, 36);
      try { 
        blockFieldMatrix0.getRowMatrix(36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (36)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      try { 
        blockFieldMatrix0.getRow(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (3)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      try { 
        blockFieldMatrix0.getColumnVector(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (5)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 36, 36);
      try { 
        blockFieldMatrix0.getColumnMatrix(36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (36)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 1426, 1426);
      // Undeclared exception!
      blockFieldMatrix0.add(blockFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][4];
      Decimal64[] decimal64Array1 = new Decimal64[3];
      Decimal64 decimal64_0 = Decimal64.ZERO;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      Field<Decimal64> field0 = AbstractFieldMatrix.extractField(decimal64Array1);
      BlockFieldMatrix<Decimal64> blockFieldMatrix1 = new BlockFieldMatrix<Decimal64>(field0, 36, 1892);
      try { 
        blockFieldMatrix0.add(blockFieldMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 36x1,892 but expected 1x3
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[2][3];
      Decimal64[] decimal64Array1 = new Decimal64[8];
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      Field<Decimal64> field0 = AbstractFieldMatrix.extractField(decimal64Array0);
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 8, 36);
      // Undeclared exception!
      try { 
        blockFieldMatrix0.add((BlockFieldMatrix<Decimal64>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[0][4];
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFractionField bigFractionField0 = bigFraction0.getField();
      BlockFieldMatrix<BigFraction> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<BigFraction>(bigFractionField0, (-1109), 36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-1,109)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>((Field<Decimal64>) null, 227, 227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[5][9];
      Decimal64[] decimal64Array1 = new Decimal64[9];
      Decimal64 decimal64_0 = Decimal64.ZERO;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(0, 0, decimal64Array0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[0][8];
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(245, 245, decimal64Array0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][8];
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(0, 1094, decimal64Array0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      blockFieldMatrix0.setColumn(0, decimal64Array1);
      assertEquals(1, blockFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.POSITIVE_INFINITY;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 34, 34);
      // Undeclared exception!
      blockFieldMatrix0.multiply(blockFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      FieldMatrix<Decimal64> fieldMatrix0 = blockFieldMatrix0.copy();
      assertNotNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[8][2];
      Complex[] complexArray1 = new Complex[9];
      complexArray0[0] = complexArray1;
      try { 
        BlockFieldMatrix.toBlocksLayout(complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[8][2];
      // Undeclared exception!
      try { 
        BlockFieldMatrix.toBlocksLayout(complexArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(925, 1499, decimal64Array0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,296
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 1, 1);
      Decimal64 decimal64_0 = Decimal64.ONE;
      try { 
        blockFieldMatrix0.setEntry((-250), (-1439), decimal64_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-250)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][6];
      Decimal64[] decimal64Array1 = new Decimal64[9];
      Decimal64 decimal64_0 = Decimal64.ONE;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      int int0 = blockFieldMatrix0.getRowDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[14];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(925, 925, decimal64Array0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 14 != 1,296
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      DefaultFieldMatrixPreservingVisitor<Decimal64> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Decimal64>(decimal64_0);
      Decimal64 decimal64_1 = blockFieldMatrix0.walkInOptimizedOrder((FieldMatrixPreservingVisitor<Decimal64>) defaultFieldMatrixPreservingVisitor0);
      assertFalse(decimal64_1.isNaN());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      DefaultFieldMatrixChangingVisitor<Decimal64> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Decimal64>(decimal64_0);
      Decimal64 decimal64_1 = blockFieldMatrix0.walkInOptimizedOrder((FieldMatrixChangingVisitor<Decimal64>) defaultFieldMatrixChangingVisitor0);
      assertEquals(1, decimal64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      DefaultFieldMatrixPreservingVisitor<Decimal64> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Decimal64>(decimal64_0);
      Decimal64 decimal64_1 = blockFieldMatrix0.walkInRowOrder((FieldMatrixPreservingVisitor<Decimal64>) defaultFieldMatrixPreservingVisitor0);
      assertEquals((byte)1, decimal64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][5];
      Decimal64[] decimal64Array1 = new Decimal64[3];
      Decimal64 decimal64_0 = new Decimal64(575.167042978);
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      try { 
        blockFieldMatrix0.preMultiply(decimal64Array1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      assertEquals(3, blockFieldMatrix0.getColumnDimension());
      
      blockFieldMatrix0.transpose();
      assertEquals(3, blockFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      assertEquals(3, blockFieldMatrix0.getRowDimension());
      
      Decimal64[] decimal64Array0 = blockFieldMatrix0.getColumn(0);
      assertEquals(3, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      FieldMatrix<Decimal64> fieldMatrix0 = blockFieldMatrix0.getColumnMatrix(0);
      assertNotNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      try { 
        blockFieldMatrix0.setRowMatrix(0, blockFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 3x3 but expected 1x3
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64[] decimal64Array0 = blockFieldMatrix0.getRow(0);
      Decimal64[][] decimal64Array1 = new Decimal64[3][0];
      decimal64Array1[0] = decimal64Array0;
      try { 
        blockFieldMatrix0.setSubMatrix(decimal64Array1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64[] decimal64Array0 = blockFieldMatrix0.getRow(0);
      Decimal64[][] decimal64Array1 = new Decimal64[3][0];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      decimal64Array1[2] = decimal64Array0;
      blockFieldMatrix0.setSubMatrix(decimal64Array1, 0, 0);
      assertEquals(3, blockFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64[][] decimal64Array0 = new Decimal64[3][0];
      try { 
        blockFieldMatrix0.setSubMatrix(decimal64Array0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 1, 1);
      Decimal64[][] decimal64Array0 = blockFieldMatrix0.getData();
      assertEquals(1, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      BlockFieldMatrix<Decimal64> blockFieldMatrix1 = blockFieldMatrix0.multiply(blockFieldMatrix0);
      assertTrue(blockFieldMatrix1.equals((Object)blockFieldMatrix0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      FieldMatrix<Decimal64> fieldMatrix0 = blockFieldMatrix0.scalarMultiply(decimal64_0);
      assertNotNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      FieldMatrix<Decimal64> fieldMatrix0 = blockFieldMatrix0.scalarAdd(decimal64_0);
      assertNotNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      BlockFieldMatrix<Decimal64> blockFieldMatrix1 = blockFieldMatrix0.subtract(blockFieldMatrix0);
      assertTrue(blockFieldMatrix1.equals((Object)blockFieldMatrix0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      BlockFieldMatrix<Decimal64> blockFieldMatrix1 = blockFieldMatrix0.add(blockFieldMatrix0);
      assertTrue(blockFieldMatrix1.equals((Object)blockFieldMatrix0));
      assertNotSame(blockFieldMatrix1, blockFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Decimal64 decimal64_0 = Decimal64.NEGATIVE_INFINITY;
      Field<Decimal64> field0 = decimal64_0.getField();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(field0, 36, 36);
      // Undeclared exception!
      blockFieldMatrix0.power(36);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[9];
      decimal64Array0[1] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][9];
      Decimal64[] decimal64Array1 = new Decimal64[4];
      Decimal64 decimal64_0 = Decimal64.ONE;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      try { 
        blockFieldMatrix0.addToEntry(166, 166, decimal64_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (166)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      FieldVector<Decimal64> fieldVector0 = blockFieldMatrix0.getColumnVector(0);
      assertEquals(3, blockFieldMatrix0.getRowDimension());
      assertEquals(3, fieldVector0.getDimension());
      
      blockFieldMatrix0.setColumnVector(0, fieldVector0);
      assertEquals(3, blockFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[1][1];
      Decimal64[] decimal64Array1 = new Decimal64[1];
      Decimal64 decimal64_0 = Decimal64.NAN;
      decimal64Array1[0] = decimal64_0;
      decimal64Array0[0] = decimal64Array1;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
      FieldMatrix<Decimal64> fieldMatrix0 = blockFieldMatrix0.createMatrix(925, 925);
      assertNotNull(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      try { 
        blockFieldMatrix0.setRowMatrix((-1), (FieldMatrix<Decimal64>) blockFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-1)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      try { 
        blockFieldMatrix0.multiplyEntry(373, 0, decimal64_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (373)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      try { 
        blockFieldMatrix0.setColumnMatrix(0, blockFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 3x3 but expected 3x1
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>((Decimal64[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Decimal64Field decimal64Field0 = Decimal64Field.getInstance();
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Field0, 3, 3);
      Decimal64 decimal64_0 = Decimal64.ONE;
      DefaultFieldMatrixChangingVisitor<Decimal64> defaultFieldMatrixChangingVisitor0 = new DefaultFieldMatrixChangingVisitor<Decimal64>(decimal64_0);
      blockFieldMatrix0.walkInColumnOrder((FieldMatrixChangingVisitor<Decimal64>) defaultFieldMatrixChangingVisitor0);
      assertEquals(3, blockFieldMatrix0.getColumnDimension());
      assertEquals(3, blockFieldMatrix0.getRowDimension());
  }
}
