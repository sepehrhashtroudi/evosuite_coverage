/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:05:32 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.math.MathContext;
import java.text.ParsePosition;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.dfp.Dfp;
import org.apache.commons.math3.dfp.DfpField;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.apache.commons.math3.linear.AbstractFieldMatrix;
import org.apache.commons.math3.linear.AnyMatrix;
import org.apache.commons.math3.linear.Array2DRowFieldMatrix;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.FieldMatrix;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealMatrixFormat;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.util.BigReal;
import org.apache.commons.math3.util.BigRealField;
import org.apache.commons.math3.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatrixUtils_ESTest extends MatrixUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MatrixUtils.createColumnRealMatrix(doubleArray0);
      MatrixUtils.createRealMatrix(1271, 1271);
      try { 
        MatrixUtils.createColumnFieldMatrix((Dfp[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction[] bigFractionArray0 = new BigFraction[7];
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFractionArray0[0] = bigFraction0;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFractionArray0[1] = bigFraction1;
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      bigFractionArray0[2] = bigFraction2;
      BigFraction bigFraction3 = BigFraction.TWO;
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      bigFractionArray0[4] = bigFraction4;
      BigFraction bigFraction5 = BigFraction.ONE_QUARTER;
      bigFractionArray0[5] = bigFraction5;
      bigFractionArray0[6] = bigFraction2;
      FieldMatrix<BigFraction> fieldMatrix0 = MatrixUtils.createFieldDiagonalMatrix(bigFractionArray0);
      // Undeclared exception!
      try { 
        MatrixUtils.bigFractionMatrixToRealMatrix(fieldMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 385.68;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.1914734393460718E-8);
      doubleArray0[3] = 0.527290940284729;
      RealMatrix realMatrix0 = MatrixUtils.createColumnRealMatrix(doubleArray0);
      int int0 = 368;
      try { 
        MatrixUtils.checkRowIndex(realMatrix0, 368);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (368)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Dfp[] dfpArray0 = new Dfp[0];
      try { 
        MatrixUtils.createRowFieldMatrix(dfpArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-19);
      RealMatrix realMatrix0 = MatrixUtils.createColumnRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        MatrixUtils.blockInverse(realMatrix0, 25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.checkSubtractionCompatible((AnyMatrix) null, (AnyMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dfp[] dfpArray0 = new Dfp[2];
      Dfp[][] dfpArray1 = new Dfp[5][6];
      dfpArray1[0] = dfpArray0;
      dfpArray1[1] = dfpArray0;
      dfpArray1[2] = dfpArray0;
      dfpArray1[3] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[7];
      dfpArray1[4] = dfpArray2;
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldMatrix(dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      FractionField fractionField0 = fraction0.getField();
      FractionField.getInstance();
      int int0 = 1271;
      FieldMatrix<Fraction> fieldMatrix0 = MatrixUtils.createFieldIdentityMatrix((Field<Fraction>) fractionField0, 1271);
      // Undeclared exception!
      MatrixUtils.fractionMatrixToRealMatrix(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 263.746;
      doubleArray0[3] = 1.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      MatrixUtils.checkSubtractionCompatible(diagonalMatrix0, diagonalMatrix0);
      RealMatrix realMatrix0 = MatrixUtils.createRealIdentityMatrix(996);
      MatrixUtils.checkColumnIndex(realMatrix0, 0);
      BigReal[][] bigRealArray0 = new BigReal[0][0];
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldMatrix(bigRealArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction[][] bigFractionArray0 = new BigFraction[1][0];
      BigFraction[] bigFractionArray1 = new BigFraction[6];
      BigFraction bigFraction0 = new BigFraction(498.86105304759);
      bigFractionArray1[0] = bigFraction0;
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFractionArray1[1] = bigFraction1;
      BigFraction bigFraction2 = new BigFraction((-240));
      bigFractionArray1[2] = bigFraction2;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      bigFractionArray1[3] = bigFraction3;
      BigFraction bigFraction4 = BigFraction.ONE;
      bigFractionArray1[4] = bigFraction4;
      BigFraction bigFraction5 = BigFraction.getReducedFraction((byte)0, 598);
      bigFractionArray1[5] = bigFraction5;
      bigFractionArray0[0] = bigFractionArray1;
      Field<BigFraction> field0 = AbstractFieldMatrix.extractField(bigFractionArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.modPow(bigInteger1, bigInteger1);
      MatrixUtils.createFieldMatrix(field0, 4096, (int) 90);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 1398.9;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 2812.4746729;
      doubleArray0[6] = (-191.2453067943924);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      int int0 = 2342;
      int[] intArray0 = new int[4];
      intArray0[0] = 2342;
      intArray0[1] = 2342;
      intArray0[2] = 2342;
      intArray0[3] = 2342;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      try { 
        diagonalMatrix0.copySubMatrix((int[]) null, intArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1958.340606502;
      doubleArray0[1] = 113.99;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getColumnMatrix(0);
      MatrixUtils.checkRowIndex(realMatrix0, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MatrixUtils.createColumnRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Dfp[] dfpArray0 = new Dfp[0];
      try { 
        MatrixUtils.createColumnFieldMatrix(dfpArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 970;
      int int1 = 2254;
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldMatrix((Field<Dfp>) null, 970, 2254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2453.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-5218.4130400042);
      RealVector realVector0 = MatrixUtils.createRealVector(doubleArray0);
      realVector0.getMinIndex();
      RealMatrix realMatrix0 = MatrixUtils.createRealIdentityMatrix(74);
      MatrixUtils.checkAdditionCompatible(realMatrix0, realMatrix0);
      // Undeclared exception!
      try { 
        MatrixUtils.deserializeRealMatrix(realVector0, "[", (ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 602;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(602, 602);
      int int1 = 499;
      int[] intArray0 = new int[3];
      intArray0[0] = 499;
      intArray0[1] = 499;
      intArray0[2] = 499;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1933.326;
      doubleArray1[1] = (double) 499;
      doubleArray1[2] = (double) 602;
      doubleArray1[3] = (double) 499;
      doubleArray1[4] = (double) 602;
      doubleArray1[5] = (-1127.2);
      doubleArray1[6] = (double) 499;
      doubleArray0[0] = doubleArray1;
      try { 
        array2DRowRealMatrix0.copySubMatrix(intArray0, intArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 1x7 but expected 3x3
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.checkAdditionCompatible((AnyMatrix) null, (AnyMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFractionField bigFractionField0 = BigFractionField.getInstance();
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(bigFractionField0);
      // Undeclared exception!
      try { 
        MatrixUtils.bigFractionMatrixToRealMatrix(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction[] fractionArray0 = new Fraction[2];
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fractionArray0[0] = fraction0;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      fraction0.multiply((-3992));
      fraction1.multiply(fraction0);
      fractionArray0[1] = fraction1;
      MatrixUtils.createRowFieldMatrix(fractionArray0);
      RealMatrix realMatrix0 = null;
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      arrayRealVector0.mapSubtract(333.0);
      try { 
        MatrixUtils.solveLowerTriangularSystem((RealMatrix) null, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnyMatrix anyMatrix0 = null;
      int[] intArray0 = new int[2];
      intArray0[0] = 278;
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        MatrixUtils.checkSubMatrixIndex((AnyMatrix) null, intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1825.746671481317);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1596, 0.0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      // Undeclared exception!
      try { 
        MatrixUtils.serializeRealVector(arrayRealVector1, (ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.fractionMatrixToRealMatrix((FieldMatrix<Fraction>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-235.5196811021);
      doubleArray0[2] = 320.48513784;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-49.02);
      RealMatrix realMatrix0 = MatrixUtils.createRealDiagonalMatrix(doubleArray0);
      int[] intArray0 = new int[0];
      try { 
        MatrixUtils.checkSubMatrixIndex((AnyMatrix) realMatrix0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty selected row index array
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        MatrixUtils.createFieldMatrix((Complex[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 144;
      try { 
        array2DRowRealMatrix0.getColumnMatrix(144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (144)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MatrixUtils.createRealMatrix(1581, 1581);
      MatrixUtils.createRealIdentityMatrix(1581);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1581);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-cTjj!I^", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream1);
      MatrixUtils.serializeRealVector(arrayRealVector0, objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getOne();
      complexArray0[0] = complex0;
      double double0 = 3457.292367;
      double double1 = 886.8145144051;
      Complex complex1 = Complex.valueOf(3457.292367, 886.8145144051);
      complex0.tanh();
      complexArray0[1] = complex1;
      Complex complex2 = Complex.NaN;
      complexArray0[2] = complex2;
      Complex complex3 = complexField0.getOne();
      complex3.toString();
      complex3.cos();
      complex3.exp();
      complex0.sinh();
      complex3.cos();
      complexArray0[3] = complex3;
      MatrixUtils.createFieldVector(complexArray0);
      try { 
        MatrixUtils.createFieldVector((Fraction[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        MatrixUtils.createFieldVector((BigReal[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-826.963312);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1829.76280530111);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 805.488668;
      doubleArray0[7] = 1139.2024102009;
      doubleArray0[8] = 1677.14810008558;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      MatrixUtils.checkAdditionCompatible(diagonalMatrix0, diagonalMatrix0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-267.5471183904);
      doubleArray0[1] = 930.45;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = (-4403.881543906426);
      doubleArray0[6] = 1539.34;
      RealMatrix realMatrix0 = MatrixUtils.createColumnRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.0, 0.0, 1539.34);
      arrayRealVector0.mapToSelf(harmonicOscillator0);
      try { 
        MatrixUtils.solveUpperTriangularSystem(realMatrix0, arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (7x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      try { 
        array2DRowRealMatrix0.getColumnMatrix(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (0)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction[] fractionArray0 = new Fraction[7];
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      fractionArray0[0] = fraction0;
      Fraction fraction1 = Fraction.ONE;
      fractionArray0[1] = fraction1;
      Fraction fraction2 = Fraction.THREE_QUARTERS;
      fractionArray0[2] = fraction2;
      Fraction fraction3 = Fraction.FOUR_FIFTHS;
      fractionArray0[3] = fraction3;
      Fraction fraction4 = new Fraction(1.0);
      fractionArray0[4] = fraction4;
      Fraction fraction5 = Fraction.ONE_THIRD;
      fractionArray0[5] = fraction5;
      Fraction fraction6 = new Fraction((-1.0));
      fractionArray0[6] = fraction6;
      Field<Fraction> field0 = AbstractFieldMatrix.extractField(fractionArray0);
      Array2DRowFieldMatrix<Fraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Fraction>(field0);
      // Undeclared exception!
      try { 
        MatrixUtils.fractionMatrixToRealMatrix(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1895.9100651686322);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1821.83691823;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-3810.402494093);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      RealMatrix realMatrix0 = diagonalMatrix0.createMatrix(445, 445);
      try { 
        MatrixUtils.solveUpperTriangularSystem(realMatrix0, (RealVector) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 445 != 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 120.0;
      doubleArray0[1] = (-1236.79);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-239.10070418568742);
      doubleArray0[4] = 66.2145;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1381.66192068;
      doubleArray0[7] = (-2423.7538);
      RealMatrix realMatrix0 = MatrixUtils.createColumnRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        MatrixUtils.checkSymmetric(realMatrix0, 20.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (8x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        MatrixUtils.createColumnRealMatrix((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 2140;
      MatrixUtils.createRealIdentityMatrix(2140);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MatrixUtils.createRealDiagonalMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealMatrix realMatrix0 = MatrixUtils.createRealMatrix(187, 187);
      try { 
        MatrixUtils.checkSubMatrixIndex((AnyMatrix) realMatrix0, 187, 187, 185, 187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (187)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.createRealDiagonalMatrix((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      // Undeclared exception!
      try { 
        MatrixUtils.createRealMatrix(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnyMatrix anyMatrix0 = null;
      int int0 = 157;
      // Undeclared exception!
      try { 
        MatrixUtils.checkSubMatrixIndex((AnyMatrix) null, 157, 157, 157, 157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 886.329346;
      doubleArray0[1] = 610.0;
      doubleArray0[2] = 2305.7600069990285;
      doubleArray0[3] = (-550.9165109920862);
      RealMatrix realMatrix0 = MatrixUtils.createColumnRealMatrix(doubleArray0);
      try { 
        MatrixUtils.checkMultiplicationCompatible(realMatrix0, realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigReal[] bigRealArray0 = new BigReal[0];
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldDiagonalMatrix(bigRealArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-542.369);
      doubleArray0[5] = 1668.8898;
      MatrixUtils.createRealVector(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldIdentityMatrix((Field<Fraction>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1439.598);
      doubleArray0[1] = 803.044738019421;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 622.650056;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      MatrixUtils.createRealVector(doubleArray0);
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true);
      array2DRowRealMatrix0.operate(doubleArray0);
      int int0 = 0;
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
      try { 
        MatrixUtils.checkMultiplicationCompatible(realMatrix0, array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(17, 17);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix0.multiply(diagonalMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17 != 2
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[0][4];
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldMatrix(complexArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex[] complexArray0 = new Complex[4];
      complexArray0[0] = complex0;
      complex0.subtract(complex0);
      complexArray0[1] = complex0;
      complexArray0[2] = complex0;
      complexArray0[3] = complex0;
      MatrixUtils.createFieldDiagonalMatrix(complexArray0);
      try { 
        MatrixUtils.createRowRealMatrix((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldDiagonalMatrix((Dfp[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealMatrix realMatrix0 = null;
      // Undeclared exception!
      try { 
        MatrixUtils.checkSymmetric((RealMatrix) null, (-896.3924));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction.getReducedFraction(1508, 1508);
      FractionField fractionField0 = fraction0.getField();
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldMatrix((Field<Fraction>) fractionField0, (-234), (-234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-234)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 687.6228;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1408.3190152363948;
      doubleArray0[3] = 0.006;
      doubleArray0[4] = (-392.1271);
      doubleArray0[5] = (-614.9542740987);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        MatrixUtils.serializeRealMatrix(diagonalMatrix0, (ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.checkMatrixIndex((AnyMatrix) null, (-380), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-363);
      // Undeclared exception!
      try { 
        MatrixUtils.createRealIdentityMatrix((-363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -363 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex[][] complexArray0 = new Complex[9][8];
      Complex[] complexArray1 = new Complex[1];
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      complexArray1[0] = complex0;
      complexArray0[0] = complexArray1;
      Complex[] complexArray2 = new Complex[3];
      complexArray2[0] = complex0;
      complexArray2[1] = complex0;
      complexArray2[2] = complex0;
      complexArray0[1] = complexArray2;
      Complex[] complexArray3 = new Complex[5];
      complexArray3[0] = complex0;
      complexArray3[1] = complex0;
      complexArray3[2] = complex0;
      complexArray3[3] = complex0;
      complexArray3[4] = complex0;
      complexArray0[2] = complexArray3;
      Complex[] complexArray4 = new Complex[1];
      complexArray4[0] = complex0;
      complexArray0[3] = complexArray4;
      Complex[] complexArray5 = new Complex[0];
      complexArray0[4] = complexArray5;
      Complex[] complexArray6 = new Complex[2];
      complexArray6[0] = complex0;
      complexArray6[1] = complex0;
      complexArray0[5] = complexArray6;
      Complex[] complexArray7 = new Complex[4];
      complexArray7[0] = complex0;
      complexArray7[1] = complex0;
      complexArray7[2] = complex0;
      Complex complex1 = Complex.I;
      complexArray7[3] = complex1;
      complexArray0[6] = complexArray7;
      Complex[] complexArray8 = new Complex[4];
      complexArray8[0] = complex1;
      Complex complex2 = Complex.ONE;
      complexArray8[1] = complex2;
      complexArray8[2] = complex1;
      complexArray8[3] = complex0;
      complexArray0[7] = complexArray8;
      Complex[] complexArray9 = new Complex[9];
      complexArray9[0] = complex1;
      complexArray9[1] = complex1;
      complexArray9[2] = complex2;
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complexArray9[3] = complex3;
      complexArray9[4] = complex0;
      Complex complex4 = new Complex(0.0, (-3007.50286445));
      complexArray9[5] = complex4;
      complexArray9[6] = complex0;
      complexArray9[7] = complex2;
      complexArray9[8] = complex2;
      complexArray0[8] = complexArray9;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldIdentityMatrix(field0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFractionField bigFractionField0 = bigFraction0.getField();
      int int0 = (-674);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldMatrix((Field<BigFraction>) bigFractionField0, (-674), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-674)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      try { 
        MatrixUtils.createRowRealMatrix((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigRealField bigRealField0 = BigRealField.getInstance();
      BigRealField.getInstance();
      BigRealField.getInstance();
      BigRealField.getInstance();
      BigRealField.getInstance();
      BigRealField.getInstance();
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldIdentityMatrix((Field<BigReal>) bigRealField0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1440.42632306);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3480.3711803;
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 923.260692;
      doubleArray0[7] = (-1382.8729989592);
      doubleArray0[8] = 0.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      RealMatrix realMatrix0 = diagonalMatrix0.copy();
      MatrixUtils.checkSymmetric(realMatrix0, 0.0);
      MatrixUtils.createColumnRealMatrix(doubleArray0);
      Fraction[][] fractionArray0 = new Fraction[6][5];
      Fraction[] fractionArray1 = new Fraction[9];
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fractionArray1[0] = fraction0;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      fractionArray1[1] = fraction1;
      Fraction fraction2 = Fraction.FOUR_FIFTHS;
      fractionArray1[2] = fraction2;
      Fraction fraction3 = Fraction.TWO;
      fractionArray1[3] = fraction3;
      Fraction fraction4 = new Fraction(6);
      fractionArray1[4] = fraction4;
      Fraction fraction5 = new Fraction((-3393.0));
      fractionArray1[5] = fraction5;
      Fraction fraction6 = Fraction.ONE_QUARTER;
      fractionArray1[6] = fraction6;
      FractionField fractionField0 = FractionField.getInstance();
      Fraction fraction7 = fractionField0.getZero();
      fractionArray1[7] = fraction7;
      Fraction fraction8 = Fraction.TWO_QUARTERS;
      fractionArray1[8] = fraction8;
      fractionArray0[0] = fractionArray1;
      Fraction[] fractionArray2 = new Fraction[0];
      fractionArray0[1] = fractionArray2;
      Fraction[] fractionArray3 = new Fraction[3];
      fractionArray3[0] = fraction2;
      Fraction fraction9 = new Fraction((-252.92522750255));
      fractionArray3[1] = fraction9;
      fractionArray3[2] = fraction7;
      fractionArray0[2] = fractionArray3;
      Fraction[] fractionArray4 = new Fraction[8];
      fractionArray4[0] = fraction3;
      fractionArray4[1] = fraction0;
      fractionArray4[2] = fraction1;
      fractionArray4[3] = fraction5;
      fractionArray4[4] = fraction7;
      fractionArray4[5] = fraction7;
      fractionArray4[6] = fraction7;
      fractionArray4[7] = fraction0;
      fractionArray0[3] = fractionArray4;
      Fraction[] fractionArray5 = new Fraction[6];
      fractionArray5[0] = fraction8;
      fractionArray5[1] = fraction0;
      fractionArray5[2] = fraction8;
      fractionArray5[3] = fraction9;
      fractionArray5[4] = fraction0;
      fractionArray5[5] = fraction2;
      fractionArray0[4] = fractionArray5;
      Fraction[] fractionArray6 = new Fraction[4];
      fractionArray6[0] = fraction5;
      Fraction fraction10 = Fraction.ONE;
      fractionArray6[1] = fraction10;
      fractionArray6[2] = fraction0;
      fractionArray6[3] = fraction6;
      fractionArray0[5] = fractionArray6;
      try { 
        MatrixUtils.createFieldMatrix(fractionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-129.0);
      doubleArray1[1] = (-2.0);
      doubleArray1[2] = 1106.7;
      doubleArray1[3] = -0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3662.909611127034;
      doubleArray1[6] = 1203.5338;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = -0.0;
      doubleArray2[1] = 1106.7;
      doubleArray2[2] = (-2.0);
      doubleArray2[3] = 3662.909611127034;
      doubleArray2[4] = 3662.909611127034;
      doubleArray2[5] = 3662.909611127034;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 3662.909611127034;
      doubleArray3[1] = 1106.7;
      doubleArray3[2] = (-129.0);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = -0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = -0.0;
      doubleArray5[1] = (-2.0);
      doubleArray5[2] = 3662.909611127034;
      doubleArray5[3] = 1203.5338;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 3662.909611127034;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1203.5338;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-2.0);
      doubleArray7[1] = -0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1555.3481;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (-129.0);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1555.3481;
      doubleArray8[4] = (-129.0);
      doubleArray8[5] = 1203.5338;
      doubleArray8[6] = 1106.7;
      doubleArray0[7] = doubleArray8;
      try { 
        MatrixUtils.createRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 8
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MatrixUtils.createRealVector(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 395.985739805;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = (-1.0);
      RealMatrix realMatrix0 = MatrixUtils.createRealDiagonalMatrix(doubleArray0);
      MatrixUtils.checkSymmetric(realMatrix0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction[][] fractionArray0 = new Fraction[1][4];
      Fraction[] fractionArray1 = new Fraction[5];
      Fraction fraction0 = new Fraction((-4395.147209391438));
      fractionArray1[0] = fraction0;
      Fraction fraction1 = Fraction.ONE_HALF;
      fractionArray1[1] = fraction1;
      Fraction fraction2 = Fraction.ONE_HALF;
      fractionArray1[2] = fraction2;
      Fraction fraction3 = new Fraction((-2127.8));
      fractionArray1[3] = fraction3;
      Fraction fraction4 = Fraction.THREE_QUARTERS;
      fractionArray1[4] = fraction4;
      fractionArray0[0] = fractionArray1;
      MatrixUtils.createFieldMatrix(fractionArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1637.89);
      doubleArray2[1] = (-1818.374234);
      doubleArray2[2] = 1142.1991377655252;
      doubleArray2[3] = (-670.345423);
      doubleArray2[4] = 898.05045;
      doubleArray2[5] = 598.953612;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1637.89);
      doubleArray3[1] = (-1637.89);
      doubleArray3[2] = 598.953612;
      doubleArray3[3] = (-1637.89);
      doubleArray3[4] = (-1818.374234);
      doubleArray0[2] = doubleArray3;
      try { 
        MatrixUtils.createRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FractionField fractionField0 = FractionField.getInstance();
      int int0 = 4096;
      Array2DRowFieldMatrix<Fraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Fraction>(fractionField0, 4096, 4096);
      // Undeclared exception!
      MatrixUtils.fractionMatrixToRealMatrix(array2DRowFieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatrixUtils.createRealMatrix((-1), 1399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RealMatrixFormat realMatrixFormat0 = new RealMatrixFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      realMatrixFormat0.parse("a:!", parsePosition0);
      // Undeclared exception!
      try { 
        MatrixUtils.isSymmetric((RealMatrix) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigRealField bigRealField0 = BigRealField.getInstance();
      BigRealField.getInstance();
      BigRealField.getInstance();
      BigRealField.getInstance();
      // Undeclared exception!
      try { 
        MatrixUtils.createFieldIdentityMatrix((Field<BigReal>) bigRealField0, (-1300));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction[] fractionArray0 = new Fraction[6];
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fractionArray0[0] = fraction0;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      fractionArray0[1] = fraction1;
      Fraction fraction2 = Fraction.ONE_QUARTER;
      fractionArray0[2] = fraction2;
      Fraction fraction3 = Fraction.ONE_HALF;
      fractionArray0[3] = fraction3;
      Fraction fraction4 = Fraction.MINUS_ONE;
      fractionArray0[4] = fraction4;
      Fraction fraction5 = Fraction.THREE_QUARTERS;
      fractionArray0[5] = fraction5;
      FieldMatrix<Fraction> fieldMatrix0 = MatrixUtils.createRowFieldMatrix(fractionArray0);
      MatrixUtils.fractionMatrixToRealMatrix(fieldMatrix0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction[] fractionArray0 = new Fraction[3];
      Fraction fraction0 = Fraction.ZERO;
      fractionArray0[0] = fraction0;
      Fraction fraction1 = Fraction.ONE;
      fractionArray0[1] = fraction1;
      Fraction fraction2 = Fraction.TWO;
      fraction2.add(fraction1);
      Fraction fraction3 = Fraction.THREE_QUARTERS;
      fraction2.add(fraction3);
      fractionArray0[2] = fraction2;
      MatrixUtils.createFieldVector(fractionArray0);
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      RealMatrix realMatrix0 = diagonalMatrix0.copy();
      try { 
        MatrixUtils.checkSubMatrixIndex((AnyMatrix) realMatrix0, 0, 306, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (0)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 27;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(27);
      arrayRealVector0.checkVectorDimensions(27);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      RealVector realVector0 = arrayRealVector1.mapAdd(27);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      int int1 = 5906;
      int int2 = 1791;
      arrayRealVector0.outerProduct(realVector0);
      try { 
        MatrixUtils.checkMatrixIndex(realMatrix0, 5906, 1791);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (5,906)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 3340;
      RealMatrix realMatrix0 = MatrixUtils.createRealIdentityMatrix(3340);
      // Undeclared exception!
      MatrixUtils.checkSymmetric(realMatrix0, 3340);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1981.66731421774);
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1367.2601257;
      doubleArray0[4] = (-2022.2);
      RealMatrix realMatrix0 = MatrixUtils.createRowRealMatrix(doubleArray0);
      MatrixUtils.checkSubtractionCompatible(realMatrix0, realMatrix0);
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction[][] bigFractionArray0 = new BigFraction[4][9];
      BigFraction[] bigFractionArray1 = new BigFraction[7];
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFractionArray1[0] = bigFraction0;
      long long0 = 0L;
      BigFraction bigFraction1 = new BigFraction(0L);
      bigFractionArray1[1] = bigFraction1;
      BigFraction bigFraction2 = new BigFraction((double) 0L);
      bigFractionArray1[2] = bigFraction2;
      BigFraction bigFraction3 = BigFraction.TWO_QUARTERS;
      bigFractionArray1[3] = bigFraction3;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = new BigFraction(bigInteger0);
      bigFractionArray1[4] = bigFraction4;
      BigFraction bigFraction5 = new BigFraction(0L);
      bigFractionArray1[5] = bigFraction5;
      BigFraction bigFraction6 = BigFraction.THREE_QUARTERS;
      bigFractionArray1[6] = bigFraction6;
      bigFractionArray0[0] = bigFractionArray1;
      BigFraction[] bigFractionArray2 = new BigFraction[9];
      bigFractionArray2[0] = bigFraction1;
      bigFractionArray2[1] = bigFraction1;
      BigFraction bigFraction7 = BigFraction.TWO_THIRDS;
      bigFractionArray2[2] = bigFraction7;
      bigFractionArray2[3] = bigFraction5;
      bigFractionArray2[4] = bigFraction6;
      bigFractionArray2[5] = bigFraction3;
      bigFractionArray2[6] = bigFraction5;
      bigFractionArray2[7] = bigFraction1;
      bigFractionArray2[8] = bigFraction5;
      bigFractionArray0[1] = bigFractionArray2;
      BigFraction[] bigFractionArray3 = new BigFraction[3];
      bigFractionArray3[0] = bigFraction4;
      bigFractionArray3[1] = bigFraction1;
      bigFractionArray3[2] = bigFraction3;
      bigFractionArray0[2] = bigFractionArray3;
      BigFraction[] bigFractionArray4 = new BigFraction[6];
      bigFractionArray4[0] = bigFraction3;
      BigFraction bigFraction8 = new BigFraction(bigInteger0);
      bigFractionArray4[1] = bigFraction8;
      bigFractionArray4[2] = bigFraction0;
      bigFractionArray4[3] = bigFraction1;
      bigFractionArray4[4] = bigFraction7;
      bigFractionArray4[5] = bigFraction6;
      bigFractionArray0[3] = bigFractionArray4;
      Field<BigFraction> field0 = AbstractFieldMatrix.extractField(bigFractionArray0);
      BigFraction[][] bigFractionArray5 = new BigFraction[1][2];
      bigFractionArray5[0] = bigFractionArray3;
      Array2DRowFieldMatrix<BigFraction> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<BigFraction>(field0, bigFractionArray5, true);
      Array2DRowRealMatrix array2DRowRealMatrix0 = MatrixUtils.bigFractionMatrixToRealMatrix(array2DRowFieldMatrix0);
      try { 
        array2DRowRealMatrix0.getSubMatrix(0, 0, (-2206), (-2206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (-2,206)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Dfp[][] dfpArray0 = new Dfp[1][2];
      Dfp[] dfpArray1 = new Dfp[8];
      DfpField dfpField0 = new DfpField(86);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2463.126549518361;
      doubleArray0[1] = (-701.0779210107692);
      double double0 = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-695.01875609713);
      doubleArray0[4] = 0.0;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 472.17;
      doubleArray0[7] = 0.0;
      MatrixUtils.createRealDiagonalMatrix(doubleArray0);
      Complex[] complexArray0 = new Complex[0];
      try { 
        AbstractFieldMatrix.extractField(complexArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DfpField dfpField0 = new DfpField(279);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction[] fractionArray0 = new Fraction[8];
      Fraction fraction0 = Fraction.ONE_THIRD;
      fractionArray0[0] = fraction0;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      fractionArray0[1] = fraction1;
      Fraction fraction2 = Fraction.ONE_HALF;
      fractionArray0[2] = fraction2;
      Fraction fraction3 = Fraction.THREE_FIFTHS;
      fractionArray0[3] = fraction3;
      Fraction fraction4 = Fraction.MINUS_ONE;
      fraction1.getField();
      fraction1.negate();
      fractionArray0[4] = fraction4;
      fraction0.abs();
      Fraction fraction5 = Fraction.ONE;
      fractionArray0[5] = fraction5;
      Fraction fraction6 = Fraction.TWO_QUARTERS;
      fractionArray0[6] = fraction6;
      Fraction fraction7 = Fraction.TWO_FIFTHS;
      fractionArray0[7] = fraction7;
      FieldMatrix<Fraction> fieldMatrix0 = MatrixUtils.createColumnFieldMatrix(fractionArray0);
      MatrixUtils.fractionMatrixToRealMatrix(fieldMatrix0);
      RealMatrix realMatrix0 = MatrixUtils.createRealIdentityMatrix(2159);
      MatrixUtils.checkMultiplicationCompatible(realMatrix0, realMatrix0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2159;
      intArray0[1] = 2159;
      intArray0[2] = 0;
      try { 
        MatrixUtils.checkSubMatrixIndex((AnyMatrix) realMatrix0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (2,159)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '8';
      charArray0[3] = '\\';
      charArray0[4] = 'z';
      int int0 = 379;
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, 379, 379, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[8];
      Decimal64 decimal64_0 = Decimal64.ZERO;
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = Decimal64.NEGATIVE_INFINITY;
      decimal64Array0[1] = decimal64_1;
      Decimal64 decimal64_2 = Decimal64.NAN;
      decimal64_0.scalb(0);
      decimal64Array0[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(0.0);
      decimal64Array0[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(0.0);
      decimal64Array0[4] = decimal64_4;
      Decimal64 decimal64_5 = Decimal64.ONE;
      decimal64Array0[5] = decimal64_5;
      Decimal64 decimal64_6 = Decimal64.NAN;
      decimal64_0.exp();
      decimal64Array0[6] = decimal64_6;
      Decimal64 decimal64_7 = new Decimal64(0.0);
      decimal64_7.signum();
      decimal64Array0[7] = decimal64_7;
      MatrixUtils.createFieldVector(decimal64Array0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      RealMatrix realMatrix0 = MatrixUtils.createColumnRealMatrix(doubleArray0);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
  }
}
