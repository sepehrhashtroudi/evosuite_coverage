/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:55:43 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.function.Atanh;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SchurTransformer_ESTest extends SchurTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 522.5985897386;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      Atanh atanh0 = new Atanh();
      arrayRealVector0.mapToSelf(atanh0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(realMatrix0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
         verifyException("org.apache.commons.math3.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      RealMatrix realMatrix0 = diagonalMatrix0.createMatrix(4181, 4181);
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1095.107686983;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      schurTransformer0.getP();
      RealMatrix realMatrix1 = schurTransformer0.getP();
      assertNotSame(realMatrix0, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(realMatrix0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
         verifyException("org.apache.commons.math3.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1095.107686983;
      doubleArray0[3] = (-3821.0);
      doubleArray0[4] = 452.7696050968964;
      doubleArray0[5] = 1810.9;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1095.107686983;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      schurTransformer0.getT();
      RealMatrix realMatrix1 = schurTransformer0.getT();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1095.107686983;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      schurTransformer0.getPT();
      RealMatrix realMatrix1 = schurTransformer0.getPT();
      assertNotSame(realMatrix0, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (5x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(diagonalMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
