/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:11:33 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.apache.commons.math3.linear.AbstractFieldMatrix;
import org.apache.commons.math3.linear.Array2DRowFieldMatrix;
import org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor;
import org.apache.commons.math3.linear.FieldMatrix;
import org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;
import org.apache.commons.math3.linear.SparseFieldMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SparseFieldMatrix_ESTest extends SparseFieldMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex[] complexArray0 = new Complex[5];
      Complex complex0 = new Complex((-5112.43890163));
      complexArray0[0] = complex0;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(field0, 423, 423);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.multiplyEntry(6, (-1200), complexArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (-1,200)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3172, 3172);
      DefaultFieldMatrixPreservingVisitor<Complex> defaultFieldMatrixPreservingVisitor0 = new DefaultFieldMatrixPreservingVisitor<Complex>(complex0);
      // Undeclared exception!
      sparseFieldMatrix0.walkInColumnOrder((FieldMatrixPreservingVisitor<Complex>) defaultFieldMatrixPreservingVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex[] complexArray0 = new Complex[1];
      Complex complex0 = Complex.valueOf((-296.53394589), (-296.53394589));
      complexArray0[0] = complex0;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(field0);
      int int0 = sparseFieldMatrix0.getRowDimension();
      assertEquals(0, int0);
      assertEquals(0, sparseFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0);
      int int0 = sparseFieldMatrix0.getColumnDimension();
      assertEquals(0, int0);
      assertEquals(0, sparseFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 1, 1);
      sparseFieldMatrix0.createMatrix(1, 1);
      assertEquals(1, sparseFieldMatrix0.getRowDimension());
      assertEquals(1, sparseFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2113.42));
      ComplexField complexField0 = complex0.getField();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.setEntry(1581, 1581, complex0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,581)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.getEntry(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3172, 3172);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.addToEntry(574, 3172, complex0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (3,172)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<Complex>((SparseFieldMatrix<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SparseFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0);
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(array2DRowFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<Complex>((FieldMatrix<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.SparseFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, (-4126), 1351);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-4,126)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<Complex>((Field<Complex>) null, 4, 4066);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<Complex>((Field<Complex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex[][] complexArray0 = new Complex[1][1];
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(complexField0, complexArray0);
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(array2DRowFieldMatrix0);
      SparseFieldMatrix<Complex> sparseFieldMatrix1 = new SparseFieldMatrix<Complex>(sparseFieldMatrix0);
      assertEquals(1, sparseFieldMatrix1.getColumnDimension());
      assertEquals(1, sparseFieldMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3172, 3172);
      int int0 = sparseFieldMatrix0.getRowDimension();
      assertEquals(3172, int0);
      assertEquals(3172, sparseFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3571, 863);
      int int0 = sparseFieldMatrix0.getColumnDimension();
      assertEquals(3571, sparseFieldMatrix0.getRowDimension());
      assertEquals(863, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3172, 3172);
      sparseFieldMatrix0.multiplyEntry(0, 0, complex0);
      assertEquals(3172, sparseFieldMatrix0.getRowDimension());
      assertEquals(3172, sparseFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      Complex complex0 = complexField0.getZero();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3571, 863);
      sparseFieldMatrix0.addToEntry(863, 0, complex0);
      assertEquals(3571, sparseFieldMatrix0.getRowDimension());
      assertEquals(863, sparseFieldMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3571, 863);
      sparseFieldMatrix0.copy();
      assertEquals(863, sparseFieldMatrix0.getColumnDimension());
      assertEquals(3571, sparseFieldMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0);
      SparseFieldMatrix<Complex> sparseFieldMatrix1 = null;
      try {
        sparseFieldMatrix1 = new SparseFieldMatrix<Complex>(sparseFieldMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = Complex.ZERO;
      complexArray0[0] = complex0;
      Field<Complex> field0 = AbstractFieldMatrix.extractField(complexArray0);
      Array2DRowFieldMatrix<Complex> array2DRowFieldMatrix0 = new Array2DRowFieldMatrix<Complex>(field0, complexArray0);
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(array2DRowFieldMatrix0);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.createMatrix(32, (-293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-293)
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComplexField complexField0 = ComplexField.getInstance();
      SparseFieldMatrix<Complex> sparseFieldMatrix0 = new SparseFieldMatrix<Complex>(complexField0, 3172, 3172);
      Complex complex0 = sparseFieldMatrix0.getEntry(0, 0);
      sparseFieldMatrix0.setEntry(0, 344, complex0);
      assertEquals(3172, sparseFieldMatrix0.getRowDimension());
      assertEquals(3172, sparseFieldMatrix0.getColumnDimension());
  }
}
