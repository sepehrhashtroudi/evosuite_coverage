/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:39:12 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.ConjugateGradient;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.JacobiPreconditioner;
import org.apache.commons.math3.linear.RealLinearOperator;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.util.Incrementor;
import org.apache.commons.math3.util.IterationManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConjugateGradient_ESTest extends ConjugateGradient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(81, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 81, false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 81;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      conjugateGradient0.solve((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      assertEquals(1, iterationManager0.getIterations());
      assertFalse(conjugateGradient0.getCheck());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(32);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, false);
      boolean boolean0 = conjugateGradient0.getCheck();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(1, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, false);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(blockRealMatrix0);
      RealVector realVector0 = blockRealMatrix0.getRowVector(1);
      // Undeclared exception!
      conjugateGradient0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) blockRealMatrix0, realVector0, realVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(3103, 3103, true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.070189719723892E8;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      // Undeclared exception!
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, realVector0, realVector0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.linear.RealVector$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1362, 120.0, false);
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 8
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(239, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, false);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[4];
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(239, 0.0);
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray1, true);
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) blockRealMatrix0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x7) linear operator
         //
         verifyException("org.apache.commons.math3.linear.IterativeLinearSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(0, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, true);
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) array2DRowRealMatrix0, (RealLinearOperator) array2DRowRealMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = null;
      try {
        conjugateGradient0 = new ConjugateGradient((IterationManager) null, (-165.421880401402), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager(81, incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 81, false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 81;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = arrayRealVector0.unitVector();
      conjugateGradient0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) diagonalMatrix0, realVector0, (RealVector) arrayRealVector0);
      assertEquals(2, iterationManager0.getIterations());
      assertFalse(arrayRealVector0.equals((Object)realVector0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(1701);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1701, 0.0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1701, 0.0, false);
      conjugateGradient0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealLinearOperator) null, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      assertFalse(conjugateGradient0.getCheck());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(32);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 1798.475526099;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = (double) 32;
      doubleArray0[7] = (double) 32;
      doubleArray0[8] = (-781.7056285374924);
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.ConjugateGradient", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(32);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 1798.475526099;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 1637;
      doubleArray0[5] = (double) 1637;
      doubleArray0[6] = (double) 32;
      doubleArray0[7] = (double) 1637;
      doubleArray0[8] = (-781.7056285374924);
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non positive definite linear operator
         //
         verifyException("org.apache.commons.math3.linear.ConjugateGradient", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IterationManager iterationManager0 = new IterationManager(32);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, 0.0, true);
      double[] doubleArray0 = new double[9];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      try { 
        conjugateGradient0.solveInPlace((RealLinearOperator) jacobiPreconditioner0, (RealLinearOperator) jacobiPreconditioner0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (32) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(1362, 120.0, false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1362;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      conjugateGradient0.solveInPlace((RealLinearOperator) diagonalMatrix0, (RealVector) arrayRealVector0, (RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Incrementor.MaxCountExceededCallback incrementor_MaxCountExceededCallback0 = mock(Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IterationManager iterationManager0 = new IterationManager((-4543), incrementor_MaxCountExceededCallback0);
      ConjugateGradient conjugateGradient0 = new ConjugateGradient(iterationManager0, (-4543), true);
      boolean boolean0 = conjugateGradient0.getCheck();
      assertTrue(boolean0);
  }
}
