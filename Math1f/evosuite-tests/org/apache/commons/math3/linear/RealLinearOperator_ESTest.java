/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:17:27 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.JacobiPreconditioner;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealLinearOperator_ESTest extends RealLinearOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(24);
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(diagonalMatrix0);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3, 24);
      RealVector realVector0 = blockRealMatrix0.getRowVector(0);
      RealVector realVector1 = jacobiPreconditioner0.operate(realVector0);
      assertTrue(realVector1.isNaN());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      JacobiPreconditioner jacobiPreconditioner0 = JacobiPreconditioner.create(array2DRowRealMatrix0);
      int int0 = jacobiPreconditioner0.getRowDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1, 11);
      int int0 = array2DRowRealMatrix0.getRowDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = array2DRowRealMatrix0.getColumnDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(11, 11);
      int int0 = blockRealMatrix0.getColumnDimension();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(806);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(806);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      // Undeclared exception!
      diagonalMatrix0.operate(realVector0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 3);
      BlockRealMatrix blockRealMatrix1 = new BlockRealMatrix(3, 24);
      RealVector realVector0 = blockRealMatrix1.getRowVector(0);
      try { 
        blockRealMatrix0.operate(realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24 != 3
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(1533);
      // Undeclared exception!
      try { 
        diagonalMatrix0.operate((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(785);
      boolean boolean0 = diagonalMatrix0.isTransposable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(1303);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1303);
      try { 
        diagonalMatrix0.operateTranspose(arrayRealVector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealLinearOperator", e);
      }
  }
}
