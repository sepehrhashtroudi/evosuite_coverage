/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 21:15:32 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DecompositionSolver;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.EigenDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecomposition_ESTest extends EigenDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1053.77967437232);
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, (-2106.6450988));
      // Undeclared exception!
      try { 
        eigenDecomposition0.getSquareRoot();
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(1);
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(diagonalMatrix0);
      assertEquals(0.0, eigenDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 3519.39514);
      double double0 = eigenDecomposition0.getRealEigenvalue(0);
      assertEquals(0.8090169943749473, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      double double0 = eigenDecomposition0.getImagEigenvalue(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-486.62);
      doubleArray0[2] = (-2157.51301707);
      doubleArray0[3] = 151.325231221;
      doubleArray0[5] = 1796.11213;
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 0.0);
      double double0 = eigenDecomposition0.getDeterminant();
      assertEquals(3.77418268211164E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[2] = (-2.0);
      doubleArray0[4] = (-2596.8861570537);
      doubleArray0[5] = (-521.762199);
      doubleArray0[7] = 2896.0;
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, (-2.0));
      double double0 = eigenDecomposition0.getDeterminant();
      assertEquals((-2.34074975584646624E17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, (-2039.303233));
      // Undeclared exception!
      try { 
        eigenDecomposition0.getRealEigenvalue(597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 597
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        eigenDecomposition0.getEigenvector((-301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -301
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      boolean boolean0 = eigenDecomposition0.hasComplexEigenvalues();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      eigenDecomposition0.getVT();
      RealMatrix realMatrix0 = eigenDecomposition0.getVT();
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, (-2106.6450988));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecomposition0.getV();
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = eigenDecomposition0.getSquareRoot();
      RealMatrix realMatrix1 = eigenDecomposition0.getV();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (2x1) matrix
         //
         verifyException("org.apache.commons.math3.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(array2DRowRealMatrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-12;
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 0.0);
      assertEquals(-0.0, eigenDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1064.26590694;
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray1, (-974.4028275));
      assertEquals(-0.0, eigenDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        eigenDecomposition0.getSquareRoot();
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      double double0 = eigenDecomposition0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 3519.39514);
      DecompositionSolver decompositionSolver0 = eigenDecomposition0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 3519.39514);
      eigenDecomposition0.getD();
      RealMatrix realMatrix0 = eigenDecomposition0.getD();
      assertEquals(2, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition(blockRealMatrix0, 1868.3144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non square (1x5) matrix
         //
         verifyException("org.apache.commons.math3.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 3519.39514);
      double[] doubleArray1 = eigenDecomposition0.getImagEigenvalues();
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 3519.39514);
      // Undeclared exception!
      try { 
        eigenDecomposition0.getImagEigenvalue((-663));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -663
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      RealVector realVector0 = eigenDecomposition0.getEigenvector(0);
      assertEquals(3, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0);
      double[] doubleArray1 = eigenDecomposition0.getRealEigenvalues();
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(diagonalMatrix0, (-29.828651700748743));
      assertEquals(0.0, eigenDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      EigenDecomposition eigenDecomposition0 = new EigenDecomposition(doubleArray0, doubleArray0, 3519.39514);
      double double0 = eigenDecomposition0.getRealEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EigenDecomposition eigenDecomposition0 = null;
      try {
        eigenDecomposition0 = new EigenDecomposition((RealMatrix) null, (-419.15283));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.EigenDecomposition", e);
      }
  }
}
