/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 07:06:54 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.function.Identity;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RealVectorChangingVisitor;
import org.apache.commons.math3.linear.RealVectorPreservingVisitor;
import org.apache.commons.math3.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4269, (-1497));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = null;
      try {
        openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1355.67;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);
      openMapRealVector1.append(1.0E-12);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(1.0E-12);
      openMapRealVector2.mapMultiply(1.0E-12);
      openMapRealVector2.sparseIterator();
      openMapRealVector2.isNaN();
      openMapRealVector1.getMaxValue();
      RealVector realVector0 = openMapRealVector2.combine(1.0E-12, (-1140.8295908617567), openMapRealVector1);
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.ebeDivide(openMapRealVector1);
      openMapRealVector4.mapDivideToSelf(1355.67);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((-126)).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(232.3303933);
      openMapRealVector3.setSubVector(0, openMapRealVector1);
      openMapRealVector4.append((RealVector) openMapRealVector3);
      realVector0.getL1Distance((RealVector) openMapRealVector3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, Double.NaN);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      openMapRealVector1.getMinIndex();
      openMapRealVector0.getMinValue();
      openMapRealVector1.getL1Distance(openMapRealVector0);
      openMapRealVector1.getLInfDistance(openMapRealVector0);
      openMapRealVector1.set(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[1] = (double) 0;
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector2.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setIndex(0);
      openMapRealVector_OpenMapEntry0.getValue();
      openMapRealVector0.getDistance(openMapRealVector1);
      try { 
        openMapRealVector2.setSubVector(0, realVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1355.67;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);
      openMapRealVector1.append(1.0E-12);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(1.0E-12);
      openMapRealVector2.mapMultiply(1.0E-12);
      openMapRealVector2.sparseIterator();
      openMapRealVector2.isNaN();
      openMapRealVector1.getMaxValue();
      openMapRealVector2.combine(1.0E-12, (-1140.8295908617567), openMapRealVector1);
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.ebeDivide(openMapRealVector1);
      openMapRealVector4.mapDivideToSelf(1355.67);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((-126)).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(232.3303933);
      openMapRealVector3.setSubVector(0, openMapRealVector1);
      openMapRealVector1.getDistance(openMapRealVector2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1270;
      int int1 = 78;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1270, 78);
      double[] doubleArray0 = new double[5];
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)1270).when(realVectorChangingVisitor0).end();
      doReturn((double)78).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 303, 303);
      doubleArray0[1] = (double) 1270;
      doubleArray0[2] = (double) 1270;
      doubleArray0[3] = (double) 78;
      RealVector realVector0 = openMapRealVector0.mapDivideToSelf(1270.0);
      openMapRealVector0.sparseIterator();
      openMapRealVector0.set(1.0E-12);
      realVector0.combine(78, 303, openMapRealVector0);
      // Undeclared exception!
      openMapRealVector0.getLInfDistance(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      int int0 = 3270;
      int int1 = 2147482478;
      OpenMapRealVector openMapRealVector1 = null;
      try {
        openMapRealVector1 = new OpenMapRealVector(3270, 2147482478, 2147482478);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1270, 78);
      double[] doubleArray0 = new double[5];
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)1270).when(realVectorChangingVisitor0).end();
      doReturn((double)78).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 303, 303);
      doubleArray0[1] = (double) 1270;
      doubleArray0[2] = (double) 1270;
      doubleArray0[3] = (double) 78;
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(1270.0);
      openMapRealVector0.sparseIterator();
      openMapRealVector0.set(1.0E-12);
      openMapRealVector0.setEntry(78, 1270);
      openMapRealVector1.unitVector();
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(1270).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(2951.678752144);
      openMapRealVector0.dotProduct(openMapRealVector0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,270)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-3351.0858919769476));
      doubleArray0[0] = double0;
      Double double1 = new Double(3274.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1096.66810121));
      doubleArray0[2] = double2;
      Double double3 = new Double(828.39257700794);
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0E-12);
      doubleArray0[4] = double4;
      Double double5 = new Double(1.0E-12);
      doubleArray0[5] = double5;
      Double double6 = new Double(2779.396346);
      doubleArray0[6] = double6;
      Double.min((double) doubleArray0[2], 828.39257700794);
      Double.sum(2779.396346, 1.0E-12);
      Double.sum(1355.67, (-616.76524251));
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4533.20648635957);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeDivide(openMapRealVector0);
      openMapRealVector1.ebeMultiply(openMapRealVector2);
      try { 
        openMapRealVector1.getEntry(1207);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,207)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3600), (-3600));
      openMapRealVector0.mapDivide(1.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(arrayRealVector0);
      openMapRealVector1.dotProduct(openMapRealVector0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1631.0;
      doubleArray0[1] = 1.0E-12;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, true);
      arrayRealVector0.append(arrayRealVector1);
      arrayRealVector0.append(arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      openMapRealVector1.subtract((RealVector) arrayRealVector2);
      Object object0 = new Object();
      openMapRealVector0.equals(object0);
      try { 
        openMapRealVector0.getEntry(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector0.dotProduct(openMapRealVector1);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd((-1607.9701139));
      openMapRealVector2.equals(openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((-1087), 2495, (-1686.0));
      try { 
        openMapRealVector0.add(openMapRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -1,087
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double.max((-1.0), (double) doubleArray0[0]);
      Double double4 = new Double((-2061.2174262));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double((-1.0));
      Double.sum(Double.NaN, (double) doubleArray0[4]);
      Double.isFinite(0.0);
      doubleArray0[6] = double6;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealVector realVector0 = openMapRealVector0.mapMultiplyToSelf((double) doubleArray0[5]);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealVector realVector1 = RealVector.unmodifiableRealVector(realVector0);
      openMapRealVector0.dotProduct(openMapRealVector1);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.unitVector();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      openMapRealVector0.getLInfDistance(openMapRealVector2);
      openMapRealVector0.getLInfDistance(realVector1);
      openMapRealVector2.subtract((RealVector) openMapRealVector1);
      openMapRealVector2.add((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 32;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(32, 32, 32);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(441.9725987033);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-212.9504998));
      doubleArray0[2] = double2;
      Double double3 = new Double((-212.9504998));
      doubleArray0[3] = double3;
      Double double4 = new Double((-212.9504998));
      doubleArray0[4] = double4;
      Double double5 = new Double((-3931.88));
      doubleArray0[5] = double5;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-212.9504998));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      openMapRealVector0.dotProduct(openMapRealVector0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1631.0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 1253;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1253, 1253);
      openMapRealVector0.getDimension();
      RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(realVector0);
      openMapRealVector1.getMaxValue();
      // Undeclared exception!
      openMapRealVector1.cosine(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(238, 5147.418005592157);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 238);
      openMapRealVector0.getSparsity();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 275;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(275);
      int int1 = (-665);
      openMapRealVector0.getL1Norm();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(275, (-665), (-665));
      RealVector realVector0 = openMapRealVector1.add((RealVector) openMapRealVector0);
      openMapRealVector0.getL1Distance(openMapRealVector1);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      openMapRealVector0.getMaxIndex();
      openMapRealVector0.walkInOptimizedOrder(realVectorChangingVisitor0);
      openMapRealVector0.ebeDivide(realVector0);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide(openMapRealVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 33).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn((double)0, 0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector_OpenMapEntry0.setIndex((-691));
      openMapRealVector_OpenMapEntry0.getValue();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.mapAdd(0.0);
      openMapRealVector0.add(openMapRealVector1);
      openMapRealVector_OpenMapEntry0.getValue();
      openMapRealVector_OpenMapEntry0.setIndex((-155));
      openMapRealVector_OpenMapEntry0.setIndex((-155));
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (33)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(266, (-130.022598048571));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 266;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) 266;
      doubleArray0[3] = (-130.022598048571);
      doubleArray0[4] = (-130.022598048571);
      doubleArray0[5] = 4279.37;
      doubleArray0[6] = 1.0E-12;
      doubleArray0[7] = (-130.022598048571);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.append((RealVector) openMapRealVector1);
      double double0 = 1064.0380507;
      try { 
        openMapRealVector0.setEntry(1037, 2408.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,037)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(arrayRealVector0);
      openMapRealVector1.dotProduct(openMapRealVector0);
      double double0 = 1631.0;
      ArrayRealVector arrayRealVector1 = null;
      try {
        arrayRealVector1 = new ArrayRealVector((-246), 1631.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector_OpenMapEntry0.setIndex(0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      openMapRealVector_OpenMapSparseIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 4970;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4970, 4970);
      openMapRealVector0.isInfinite();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      // Undeclared exception!
      openMapRealVector0.mapAdd(4970);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((Double[]) null, 1459.73409309711);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(0);
      double double0 = 1.0E-12;
      openMapRealVector1.checkVectorDimensions(openMapRealVector0);
      openMapRealVector0.isDefaultValue(1.0E-12);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      openMapRealVector2.walkInDefaultOrder(realVectorPreservingVisitor0, 0, 0);
      openMapRealVector1.equals(openMapRealVector2);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        openMapRealVector1.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-435);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-435), 0, (-435));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.append(openMapRealVector1);
      openMapRealVector0.getMinValue();
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        openMapRealVector0.cosine((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(169.67040644162);
      doubleArray0[0] = double0;
      Double.min(1.0E-12, (-1.0));
      Double double1 = new Double(1934.0);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      openMapRealVector1.addToEntry(1, (-401.00404987039));
      openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      Double.min(1.0E-12, (-4379.537));
      openMapRealVector1.append(openMapRealVector0);
      openMapRealVector0.setEntry(0, 870.6531477497);
      Object object0 = new Object();
      openMapRealVector0.equals(object0);
      try { 
        openMapRealVector1.setEntry((-1012), 1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,012)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(255, 255);
      openMapRealVector0.isInfinite();
      openMapRealVector0.isInfinite();
      openMapRealVector0.sparseIterator();
      int int0 = 32;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(32);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      openMapRealVector2.setEntry(255, 1.0E-12);
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector0.append(openMapRealVector3);
      try { 
        openMapRealVector0.setEntry((-1742), 1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,742)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1355.67;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);
      openMapRealVector1.append(1.0E-12);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(1.0E-12);
      openMapRealVector2.mapMultiply(1.0E-12);
      openMapRealVector2.sparseIterator();
      openMapRealVector2.isNaN();
      openMapRealVector1.getMaxValue();
      openMapRealVector2.combine(1.0E-12, (-1140.8295908617567), openMapRealVector1);
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.ebeDivide(openMapRealVector1);
      openMapRealVector4.mapDivideToSelf(1355.67);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(232.3303933);
      openMapRealVector3.setSubVector(0, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 120.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      int int0 = 32;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 32);
      openMapRealVector1.mapSubtractToSelf(32);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((-2810.992092716));
      try { 
        openMapRealVector1.setSubVector(32, openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (33)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 3186.134103529306);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, Double.NaN);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.subtract(openMapRealVector0);
      openMapRealVector2.getLInfDistance(openMapRealVector0);
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.ebeDivide(openMapRealVector1);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 1.0E-12;
      Double double0 = new Double(1.0E-12);
      doubleArray1[1] = double0;
      openMapRealVector4.mapMultiply(3186.134103529306);
      Double.isFinite(967.4908);
      openMapRealVector2.hashCode();
      OpenMapRealVector openMapRealVector5 = new OpenMapRealVector(doubleArray1, 0.0);
      try { 
        openMapRealVector1.getLInfDistance(openMapRealVector5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double.max((-1.0), (double) doubleArray0[0]);
      Double double4 = new Double((-2061.2174262));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double((-1.0));
      Double.sum(Double.NaN, (double) doubleArray0[4]);
      Double.isFinite(0.0);
      doubleArray0[6] = double6;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealVector realVector0 = openMapRealVector0.mapMultiplyToSelf((double) doubleArray0[5]);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealVector realVector1 = RealVector.unmodifiableRealVector(realVector0);
      openMapRealVector0.dotProduct(openMapRealVector1);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.unitVector();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.hasNext();
      openMapRealVector0.getLInfDistance(openMapRealVector2);
      openMapRealVector0.getLInfDistance(realVector1);
      openMapRealVector2.subtract((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2370.767);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      arrayRealVector1.cosine(arrayRealVector0);
      arrayRealVector1.append(1.0E-12);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      int int0 = 0;
      arrayRealVector1.setEntry(0, 20.0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      Double.isFinite((double) doubleArray0[0]);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector_OpenMapEntry0.getValue();
      arrayRealVector1.toString();
      openMapRealVector0.cosine(arrayRealVector1);
      openMapRealVector0.equals(openMapRealVector_OpenMapEntry0);
      Double.max(0, (-9.06552));
      Double.sum(0.0, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-3354.7467115988193);
      doubleArray0[2] = (-305.38882057);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector2);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      arrayRealVector1.getMinIndex();
      openMapRealVector1.getDistance((RealVector) arrayRealVector2);
      openMapRealVector1.copy();
      try { 
        openMapRealVector1.ebeMultiply(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 30 != 20
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3274, 0.5);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector1.mapAddToSelf(3274);
      // Undeclared exception!
      openMapRealVector1.isNaN();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-524.079);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.isDefaultValue(0.0);
      int int0 = (-1);
      int int1 = 37;
      // Undeclared exception!
      try { 
        openMapRealVector0.append((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      OpenMapRealVector openMapRealVector1 = null;
      try {
        openMapRealVector1 = new OpenMapRealVector((OpenMapRealVector) null, 1614);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-114));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);
      openMapRealVector2.set(0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1438.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1954.4636568392;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (-2012.48);
      doubleArray0[6] = (-1674.5152616499156);
      doubleArray0[7] = (-2847.39490127);
      doubleArray0[8] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      doReturn(0.0).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.getMinIndex();
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0, 2205);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector1.getL1Distance(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      openMapRealVector0.walkInOptimizedOrder(realVectorPreservingVisitor0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      openMapRealVector0.isNaN();
      openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 777;
      int int1 = (-2450);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(777, (-2450));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(777);
      openMapRealVector0.subtract((RealVector) openMapRealVector1);
      // Undeclared exception!
      try { 
        openMapRealVector0.set(Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1233.317604));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1233.317604));
      doubleArray0[1] = double1;
      Double.sum(3310.0, 10.0);
      Double double2 = new Double(10.0);
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double.isFinite(10.0);
      openMapRealVector0.toArray();
      Double.isFinite((-1283.978821189426));
      Double.min(0.0, 1.0E-12);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append((-1233.317604));
      try { 
        openMapRealVector2.getDistance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0, 125);
      try { 
        openMapRealVector0.add(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 31 != 0
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RealVector realVector0 = null;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[5] = double5;
      Double double6 = new Double(147.06871232991148);
      doubleArray0[6] = double6;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector0.dotProduct(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0.0);
      openMapRealVector0.mapAddToSelf(0);
      try { 
        openMapRealVector0.walkInOptimizedOrder((RealVectorPreservingVisitor) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(961.3834822556161);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      doubleArray0[5] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[6] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[7] = double6;
      Double double7 = new Double((double) doubleArray0[6]);
      doubleArray0[8] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector0.getL1Distance(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1);
      openMapRealVector0.getMinValue();
      openMapRealVector0.checkVectorDimensions(1);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.0);
      openMapRealVector1.hashCode();
      openMapRealVector1.checkVectorDimensions(openMapRealVector0);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 1, (-792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(0.0, 0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector_OpenMapEntry0.setIndex((-691));
      openMapRealVector_OpenMapEntry0.getValue();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.mapAdd(0.0);
      openMapRealVector0.add(openMapRealVector1);
      openMapRealVector_OpenMapEntry0.getValue();
      openMapRealVector_OpenMapEntry0.setIndex((-155));
      openMapRealVector_OpenMapEntry0.setIndex((-155));
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply(arrayRealVector0);
      arrayRealVector0.set(0.0);
      try { 
        openMapRealVector2.checkVectorDimensions((-331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != -331
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      openMapRealVector0.add(openMapRealVector1);
      openMapRealVector0.isNaN();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1271.504429183;
      doubleArray0[2] = (-2373.84);
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-902.675);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.mapAddToSelf(0.0);
      try { 
        openMapRealVector0.getSubVector(0, 844);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (843)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      openMapRealVector0.copy();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2154.32203);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double.max(0.0, 0.5);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1055.905181193));
      openMapRealVector0.isNaN();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 45);
      try { 
        openMapRealVector1.subtract((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 50 != 5
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-2824);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2824));
      ArrayRealVector arrayRealVector0 = null;
      openMapRealVector0.getMaxValue();
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 65.7225752;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1296.4713887);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1082.8991);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);
      openMapRealVector2.ebeMultiply(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1090.6466));
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1927), 2517, (-1090.6466));
      openMapRealVector1.getNorm();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      openMapRealVector1.getDimension();
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      openMapRealVector2.walkInOptimizedOrder(realVectorChangingVisitor0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(openIntToDoubleHashMap_Iterator0).key();
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getValue();
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector2.getSparsity();
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapAddToSelf((-113.55912017));
      try { 
        openMapRealVector3.checkVectorDimensions(187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,926 != 187
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
      openMapRealVector0.getDimension();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      doubleArray0[0] = double0;
      Double double1 = new Double((-2518.6891));
      doubleArray0[1] = double1;
      Double double2 = new Double((-2518.6891));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      Double double4 = new Double(Double.NEGATIVE_INFINITY);
      doubleArray0[4] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getSparsity();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.isNaN();
      openMapRealVector0.getMinIndex();
      openMapRealVector0.toArray();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, (-1), 0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      // Undeclared exception!
      try { 
        arrayRealVector1.outerProduct(arrayRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(439);
      openMapRealVector0.copy();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1422.9986);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 120.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.hashCode();
      RealVector.Entry realVector_Entry0 = openMapRealVector0.new Entry();
      openMapRealVector0.equals(realVector_Entry0);
      openMapRealVector0.set(0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((-1112.4106967));
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAddToSelf((-294.91097));
      openMapRealVector0.combineToSelf(0.0, 0.0, openMapRealVector2);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.ebeDivide(openMapRealVector0);
      openMapRealVector3.unitVector();
      RealVector realVector0 = openMapRealVector0.combine(1.0E-12, (-261.295434016264), openMapRealVector3);
      openMapRealVector2.sparseIterator();
      openMapRealVector1.outerProduct(realVector0);
      try { 
        openMapRealVector1.getSubVector(31, 361);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (31)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      openMapRealVector0.mapToSelf((UnivariateFunction) null);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(32);
      RealVector.Entry realVector_Entry0 = arrayRealVector0.new Entry();
      openMapRealVector0.equals(realVector_Entry0);
      try { 
        openMapRealVector0.checkIndex((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3955.791184036;
      doubleArray0[1] = (-1458.5716);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-2034.18);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 459.224122);
      openMapRealVector0.mapDivideToSelf(0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((-1458.5716));
      openMapRealVector3.set(1.0E-12);
      try { 
        openMapRealVector2.dotProduct(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      openMapRealVector0.getMaxValue();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.isInfinite();
      openMapRealVector1.subtract(openMapRealVector0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.hasNext();
      openMapRealVector0.isDefaultValue(1.0);
      openMapRealVector1.getMaxIndex();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1795;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1795);
      try { 
        openMapRealVector0.getEntry(1795);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,795)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-1285.449306215));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1285.449306215);
      doubleArray0[4] = 1.0E-12;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      try { 
        openMapRealVector0.subtract((RealVector) arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.getL1Norm();
      openMapRealVector0.subtract(openMapRealVector1);
      openMapRealVector1.isInfinite();
      openMapRealVector1.subtract((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((Double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      openMapRealVector0.checkVectorDimensions(0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-402), 382, 382);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorPreservingVisitor0).end();
      openMapRealVector0.walkInDefaultOrder(realVectorPreservingVisitor0);
      try { 
        openMapRealVector0.getDistance(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -402
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(383, 383, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 383;
      doubleArray0[1] = (double) 383;
      double double0 = 1.0;
      doubleArray0[2] = 1.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 3.141592653589793);
      arrayRealVector0.mapSubtract(383);
      Double[] doubleArray1 = new Double[0];
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray1);
      arrayRealVector0.equals(openMapRealVector2);
      arrayRealVector0.ebeMultiply(openMapRealVector1);
      try { 
        openMapRealVector0.getDistance((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 383 != 3
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4033.24400935);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1134.5048107130428;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-168.2));
      openMapRealVector0.unitize();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 0.0;
      openMapRealVector1.add((RealVector) openMapRealVector0);
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
      try {
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array sizes should have difference 1 (5 != 5 + 1)
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-4071), 0);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(1.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 32;
      int int1 = (-183);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(32, (-183));
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.setValue((-183));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(514.4878713558);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(1854.441546929);
      doubleArray0[4] = double4;
      Double double5 = new Double(1854.441546929);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[5]);
      doubleArray0[6] = double6;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(31, 31, 483.4307833811267);
      try { 
        openMapRealVector0.ebeMultiply(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 31
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
      Asinh asinh0 = new Asinh();
      openMapRealVector0.mapToSelf(asinh0);
      // Undeclared exception!
      try { 
        openMapRealVector0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1308), (-1163), 2714.9348);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-1163));
      try { 
        openMapRealVector0.ebeMultiply(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,308 != -2,471
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(971.92);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(822.7482900976);
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[7]);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.setEntry(0, 0.0);
      openMapRealVector1.sparseIterator();
      openMapRealVector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(29);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(openIntToDoubleHashMap_Iterator0).value();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getValue();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) 1.0E-12;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) (-1.0);
      doubleArray1[4] = (Double) 1.0E-12;
      doubleArray1[5] = (Double) 1.0E-12;
      doubleArray1[6] = (Double) (-1.0);
      doubleArray1[7] = (Double) 1.0E-12;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      arrayRealVector0.setSubVector(0, doubleArray0);
      try { 
        openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      int int0 = (-84);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-84));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVectorChangingVisitor0).end();
      openMapRealVector2.walkInDefaultOrder(realVectorChangingVisitor0);
      try { 
        openMapRealVector2.ebeDivide(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -84 != 0
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-545), (-674), (-674));
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-674);
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = (double) (-674);
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = 0.006;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 1.0E-12;
      doubleArray1[7] = 1.0E-12;
      doubleArray1[8] = (double) (-545);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      try { 
        openMapRealVector0.getLInfDistance(arrayRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -545 != 9
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector1.ebeDivide(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2652);
      doubleArray0[6] = 1.0E-12;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0E-12;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      try { 
        openMapRealVector2.getLInfDistance(arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1075.56929);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      Double.max(1951.0, 4215.34);
      doubleArray0[3] = double3;
      Double double4 = new Double(Double.POSITIVE_INFINITY);
      doubleArray0[4] = double4;
      Double double5 = new Double(1075.56929);
      Double.max(1075.56929, (-232.631));
      doubleArray0[5] = double5;
      Double double6 = new Double(464.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double.isFinite(0.0);
      Double double8 = new Double(120.0);
      doubleArray0[8] = double8;
      Double.isFinite(1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 38;
      int int1 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(38, 0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 1368.3636152140064;
      doubleArray0[4] = (-2646.34);
      doubleArray0[5] = 213.125629153;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        openMapRealVector0.add((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(238, 5147.418005592157);
      openMapRealVector0.append((double) 238);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1396, 0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      openMapRealVector1.subtract((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-308.0));
      doubleArray0[0] = double0;
      Double double1 = new Double((-308.0));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double((-534.210391720847));
      Double.sum((-4279.83404), (double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.5));
      Double.isFinite(Double.NaN);
      Double.sum(0.0, 1716.02539807526);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(83, 2283.1865534);
      Double.sum(0.006, (-1.0));
      Double.isFinite((-4843.17395657));
      try { 
        openMapRealVector0.add((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 83
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealVector realVector0 = RealVector.unmodifiableRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(realVector0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      try { 
        openMapRealVector1.setSubVector((-1), openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(276, 153);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.getIndex();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(22, 22);
      openMapRealVector0.mapDivide(22);
      openMapRealVector0.getDimension();
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 22);
      try { 
        openMapRealVector0.getDistance(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 22 != 3
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2222.66);
      doubleArray0[0] = double0;
      Double double1 = new Double(2222.66);
      doubleArray0[1] = double1;
      Double double2 = new Double(2222.66);
      doubleArray0[2] = double2;
      Double double3 = new Double(Double.NaN);
      doubleArray0[3] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[2]);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0);
      openMapRealVector1.getMaxIndex();
      try { 
        openMapRealVector0.subtract(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 502.3944934158;
      doubleArray0[1] = 298.89704363943696;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-690.4621705112538);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      int int0 = 0;
      openMapRealVector0.addToEntry(0, 2768.8974003783187);
      int int1 = (-215);
      openMapRealVector0.mapAdd(0.0);
      try { 
        openMapRealVector0.getSubVector((-1), (-215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.hasNext();
      try { 
        openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      openMapRealVector0.getMaxIndex();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector1.dotProduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(210, (-1831), 210);
      try { 
        openMapRealVector0.dotProduct(openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 210
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-278.10269337461193));
      doubleArray0[0] = double0;
      Double double1 = new Double(1371.12041);
      doubleArray0[1] = double1;
      Double double2 = new Double(1371.12041);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-278.10269337461193));
      openMapRealVector0.mapAdd((-902.7118166101737));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), 0);
      openMapRealVector0.mapAdd((-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.append((double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      try { 
        openMapRealVector0.setSubVector((-551), openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-551)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0, 20.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      openMapRealVector0.isDefaultValue(0);
      try { 
        openMapRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-60);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-60), (-3976.747));
      openMapRealVector0.unitVector();
      openMapRealVector0.mapDivide((-0.5));
      try { 
        openMapRealVector0.addToEntry((-60), 1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-60)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(243, 243, 243);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      openMapRealVector0.getSparsity();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-578411501), 1389, 1389);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1250, 0);
      openMapRealVector0.append((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1010.3));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector1.append(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      openMapRealVector0.getL1Norm();
      openMapRealVector0.isNaN();
      openMapRealVector0.toArray();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      openMapRealVector2.getDistance(openMapRealVector0);
      openMapRealVector2.isNaN();
      try { 
        openMapRealVector2.setEntry(1351, 4479.821938260265);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,351)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      openMapRealVector0.isNaN();
      RealVector realVector0 = RealVector.unmodifiableRealVector(openMapRealVector0);
      openMapRealVector0.getL1Distance(realVector0);
      openMapRealVector0.combineToSelf((-1221.9657610399), 829.776705, realVector0);
      double double0 = 1746.259044626613;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1746.259044626613);
      try { 
        openMapRealVector1.projection(realVector0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(21);
      openMapRealVector0.getMaxIndex();
      double double0 = (-2563.604118236488);
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(0);
      try { 
        openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 21 != 0
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      openMapRealVector0.set((-1909.9285471116732));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0, 0);
      openMapRealVector0.getL1Distance(openMapRealVector1);
      try { 
        openMapRealVector0.getSubVector(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1113.586641119591);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1087.46647575);
      openMapRealVector0.setEntry(0, (-1113.586641119591));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1332, 1332);
      try { 
        openMapRealVector0.getL1Distance(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,332
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
      openMapRealVector0.getDistance((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1777.06227382);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.sparseIterator();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1802.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2914.1520579701582));
      Double[] doubleArray1 = new Double[0];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);
      try { 
        openMapRealVector0.dotProduct(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(2054.393566915);
      doubleArray0[0] = double0;
      Double double1 = new Double(2785.16200779721);
      doubleArray0[1] = double1;
      Double double2 = new Double(1074.7301408252824);
      doubleArray0[2] = double2;
      Double double3 = new Double(2054.393566915);
      doubleArray0[3] = double3;
      Double double4 = new Double(1.8378411489E-6);
      doubleArray0[4] = double4;
      Double double5 = new Double((-4507.317128458611));
      doubleArray0[5] = double5;
      Double double6 = new Double(Double.NaN);
      doubleArray0[6] = double6;
      Double double7 = new Double(1074.7301408252824);
      doubleArray0[7] = double7;
      Double double8 = new Double((-4507.317128458611));
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 464.0);
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((-3200));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-2627.08040787));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2627.08040787));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double(1.7914185523986816);
      doubleArray0[3] = double3;
      Double double4 = new Double(1.7914185523986816);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      doubleArray0[5] = double5;
      Double double6 = new Double((-2627.08040787));
      doubleArray0[6] = double6;
      Double double7 = new Double(1.7914185523986816);
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (double) doubleArray0[3];
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (-421.26801332956);
      doubleArray1[5] = (double) doubleArray0[2];
      doubleArray1[6] = (double) doubleArray0[3];
      doubleArray1[7] = (double) doubleArray0[1];
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray1);
      openMapRealVector0.append((RealVector) arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(3270, 3270, 3270, 2147482478, (-1286)).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      openMapRealVector0.mapDivide(2147482478);
      openMapRealVector_OpenMapEntry0.setIndex(0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      openMapRealVector_OpenMapEntry0.getIndex();
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      openMapRealVector_OpenMapEntry0.setValue(1.0E-12);
      openMapRealVector1.add(openMapRealVector0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      openMapRealVector_OpenMapSparseIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4291, 4291);
      try { 
        openMapRealVector0.getSubVector((-1084), 814);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1,084)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      int int0 = 51;
      int int1 = 1471;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1471);
      RealVectorPreservingVisitor realVectorPreservingVisitor0 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 726.3447034631672;
      RealVectorPreservingVisitor realVectorPreservingVisitor1 = mock(RealVectorPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        arrayRealVector0.walkInDefaultOrder(realVectorPreservingVisitor1, 1471, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,471)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1355.67;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1355.67);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(openMapRealVector0);
      openMapRealVector1.append(1.0E-12);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapAdd(1.0E-12);
      openMapRealVector2.mapMultiply(1.0E-12);
      openMapRealVector2.sparseIterator();
      openMapRealVector2.isNaN();
      openMapRealVector1.getMaxValue();
      RealVector realVector0 = openMapRealVector2.combine(1.0E-12, (-1140.8295908617567), openMapRealVector1);
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.ebeDivide(openMapRealVector1);
      openMapRealVector4.mapDivideToSelf(1355.67);
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((-126)).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(232.3303933);
      openMapRealVector3.setSubVector(0, openMapRealVector1);
      openMapRealVector4.append((RealVector) openMapRealVector3);
      realVector0.getL1Distance((RealVector) openMapRealVector3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1117.4));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1117.4));
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      Double.max((double) doubleArray0[1], (-174.133488));
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1117.4));
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      doubleArray0[6] = double6;
      Double double7 = new Double((-1117.4));
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      openMapRealVector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-1.0));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
      openMapRealVector0.getLInfNorm();
      openMapRealVector1.hashCode();
      Identity identity0 = new Identity();
      openMapRealVector1.map(identity0);
      // Undeclared exception!
      try { 
        openMapRealVector1.outerProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-3485.0));
      Double.isFinite((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      doubleArray0[3] = double3;
      Double.sum((double) doubleArray0[1], (double) doubleArray0[1]);
      doubleArray0[4] = doubleArray0[3];
      Double.max((double) doubleArray0[3], (double) doubleArray0[3]);
      Double double4 = new Double((double) doubleArray0[4]);
      Double.min((double) doubleArray0[2], (double) doubleArray0[3]);
      doubleArray0[5] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[2]);
      Double.isFinite((-414.143462));
      int int0 = 166;
      Double.max(0.0, 0.0);
      try { 
        openMapRealVector0.getSubVector(166, 166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (166)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2341.658283897));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      Double.max(0.0, Double.NaN);
      doubleArray0[1] = double1;
      Double double2 = new Double((-4670.9874));
      Double.min((-4670.9874), (-4670.9874));
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      Double.min((-2341.658283897), 1.0);
      Double.isFinite(0.0);
      openMapRealVector0.subtract(openMapRealVector1);
      try { 
        openMapRealVector0.addToEntry((-1), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math3.linear.RealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1270, 78);
      double[] doubleArray0 = new double[5];
      RealVectorChangingVisitor realVectorChangingVisitor0 = mock(RealVectorChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)1270).when(realVectorChangingVisitor0).end();
      doReturn((double)78).when(realVectorChangingVisitor0).visit(anyInt() , anyDouble());
      openMapRealVector0.walkInDefaultOrder(realVectorChangingVisitor0, 303, 303);
      doubleArray0[1] = (double) 1270;
      doubleArray0[2] = (double) 1270;
      doubleArray0[3] = (double) 78;
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(1270.0);
      openMapRealVector0.sparseIterator();
      openMapRealVector0.set(1.0E-12);
      openMapRealVector0.getLInfDistance(openMapRealVector0);
      openMapRealVector0.setEntry(78, 1270);
      openMapRealVector1.unitVector();
      OpenIntToDoubleHashMap.Iterator openIntToDoubleHashMap_Iterator0 = mock(OpenIntToDoubleHashMap.Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(openIntToDoubleHashMap_Iterator0).key();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(openIntToDoubleHashMap_Iterator0);
      openMapRealVector_OpenMapEntry0.setValue(2951.678752144);
      openMapRealVector_OpenMapEntry0.setValue(0.0);
      openMapRealVector0.dotProduct(openMapRealVector0);
      // Undeclared exception!
      openMapRealVector0.getDistance(openMapRealVector0);
  }
}
