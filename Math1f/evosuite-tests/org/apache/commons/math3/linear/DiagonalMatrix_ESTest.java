/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:53:10 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiagonalMatrix_ESTest extends DiagonalMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      diagonalMatrix0.multiplyEntry(0, 0, 0.0);
      assertFalse(diagonalMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      diagonalMatrix0.multiplyEntry(0, 0, (-1.0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      diagonalMatrix0.multiplyEntry(2187, (-539), 2187);
      assertFalse(diagonalMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      diagonalMatrix0.addToEntry(0, 225, 0);
      assertFalse(diagonalMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2717.2344590141665);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true);
      RealMatrix realMatrix0 = diagonalMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      assertEquals(1, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      RealMatrix realMatrix0 = diagonalMatrix0.power(225);
      assertTrue(realMatrix0.equals((Object)diagonalMatrix0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 3.141592653589793;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      DiagonalMatrix diagonalMatrix1 = diagonalMatrix0.subtract(diagonalMatrix0);
      assertEquals(3, diagonalMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(doubleArray0, false);
      DiagonalMatrix diagonalMatrix2 = diagonalMatrix1.subtract(diagonalMatrix0);
      assertTrue(diagonalMatrix2.equals((Object)diagonalMatrix1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      DiagonalMatrix diagonalMatrix1 = diagonalMatrix0.add(diagonalMatrix0);
      assertNotSame(diagonalMatrix0, diagonalMatrix1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      DiagonalMatrix diagonalMatrix1 = (DiagonalMatrix)diagonalMatrix0.power(225);
      DiagonalMatrix diagonalMatrix2 = diagonalMatrix0.add(diagonalMatrix1);
      assertTrue(diagonalMatrix2.equals((Object)diagonalMatrix1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      try { 
        diagonalMatrix0.createMatrix((-363), 1670);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -363 != 1,670
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      diagonalMatrix0.setEntry(0, 0, 1.0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      double[] doubleArray1 = diagonalMatrix0.preMultiply(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = diagonalMatrix0.preMultiply((RealVector) arrayRealVector0);
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      double[] doubleArray1 = diagonalMatrix0.operate(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[] doubleArray1 = diagonalMatrix0.operate(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      int int0 = diagonalMatrix0.getRowDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double double0 = diagonalMatrix0.getEntry(0, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[] doubleArray1 = diagonalMatrix0.getDataRef();
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      double[][] doubleArray1 = diagonalMatrix0.getData();
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      int int0 = diagonalMatrix0.getColumnDimension();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      RealMatrix realMatrix0 = diagonalMatrix0.createMatrix(1355, 1355);
      assertEquals(1355, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      DiagonalMatrix diagonalMatrix1 = diagonalMatrix0.add(diagonalMatrix0);
      assertEquals(0, diagonalMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(290);
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(doubleArray0, true);
      try { 
        diagonalMatrix0.subtract(diagonalMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 290x290 but expected 2x2
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        diagonalMatrix0.subtract((DiagonalMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      double[] doubleArray1 = new double[0];
      try { 
        diagonalMatrix0.preMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(278);
      // Undeclared exception!
      try { 
        diagonalMatrix0.preMultiply((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      try { 
        diagonalMatrix0.multiplyEntry(1506, 1506, (-740.97794940337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,506)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(427);
      try { 
        diagonalMatrix0.multiply((RealMatrix) diagonalMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 427
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        diagonalMatrix0.multiply((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(1);
      try { 
        diagonalMatrix0.multiply(diagonalMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        diagonalMatrix0.multiply((DiagonalMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      try { 
        diagonalMatrix0.getEntry(570, 570);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (570)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(192);
      try { 
        diagonalMatrix0.addToEntry(192, 0, 1390.9981);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,390.998 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(2);
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(doubleArray0);
      try { 
        diagonalMatrix0.add(diagonalMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 2x2 but expected 7x7
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        diagonalMatrix0.add((DiagonalMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = null;
      try {
        diagonalMatrix0 = new DiagonalMatrix((double[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = null;
      try {
        diagonalMatrix0 = new DiagonalMatrix((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(1);
      try { 
        diagonalMatrix0.setEntry(1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double double0 = diagonalMatrix0.getEntry(1, 1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      DiagonalMatrix diagonalMatrix1 = diagonalMatrix0.multiply(diagonalMatrix0);
      assertTrue(diagonalMatrix1.equals((Object)diagonalMatrix0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      DiagonalMatrix diagonalMatrix1 = diagonalMatrix0.multiply(diagonalMatrix0);
      assertNotSame(diagonalMatrix0, diagonalMatrix1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      try { 
        diagonalMatrix0.createMatrix(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      int int0 = diagonalMatrix0.getColumnDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(801);
      double[] doubleArray0 = new double[3];
      try { 
        diagonalMatrix0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 801 != 3
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      int int0 = diagonalMatrix0.getRowDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      double[] doubleArray1 = diagonalMatrix0.getDataRef();
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      try { 
        diagonalMatrix0.setEntry((-1869), (-364), 1590.33118994);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,590.331 is larger than the maximum (0)
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) (-421.5);
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) (-1.0);
      doubleArray1[8] = (Double) (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      try { 
        diagonalMatrix0.preMultiply((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        diagonalMatrix0.preMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      diagonalMatrix0.multiplyEntry(0, 52, 0.0);
      assertEquals(2, diagonalMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      diagonalMatrix0.addToEntry(0, 0, (-2080.018220203055));
      double double0 = diagonalMatrix0.getEntry(0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-2080.018220203055), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      RealMatrix realMatrix0 = diagonalMatrix0.subtract(diagonalMatrix0);
      assertEquals(8, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[][] doubleArray1 = diagonalMatrix0.getData();
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = diagonalMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      assertTrue(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      try { 
        diagonalMatrix0.createMatrix(0, (-84));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -84
         //
         verifyException("org.apache.commons.math3.linear.DiagonalMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DiagonalMatrix diagonalMatrix0 = null;
      try {
        diagonalMatrix0 = new DiagonalMatrix((-1320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,320 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      RealMatrix realMatrix0 = diagonalMatrix0.copy();
      assertTrue(realMatrix0.equals((Object)diagonalMatrix0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[] doubleArray1 = diagonalMatrix0.preMultiply(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }
}
