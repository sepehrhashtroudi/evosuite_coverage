/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 06:51:07 GMT 2022
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor;
import org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealMatrixChangingVisitor;
import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockRealMatrix_ESTest extends BlockRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3, 3);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      try { 
        blockRealMatrix0.walkInRowOrder((RealMatrixChangingVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 19;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(19, 19);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(19, blockRealMatrix0.getColumnDimension());
      assertEquals(19, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double double0 = (-3286.1264943);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(19);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(19, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      RealVector realVector0 = blockRealMatrix0.preMultiply((RealVector) arrayRealVector0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(19, blockRealMatrix0.getColumnDimension());
      assertEquals(19, blockRealMatrix0.getRowDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(19, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(realVector0.isNaN());
      assertEquals(19, realVector0.getDimension());
      assertFalse(realVector0.isInfinite());
      assertNotNull(realVector0);
      assertNotSame(arrayRealVector0, realVector0);
      assertNotSame(realVector0, arrayRealVector0);
      assertTrue(realVector0.equals((Object)arrayRealVector0));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      try { 
        blockRealMatrix0.walkInOptimizedOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0, (-2446), 19, (-2446), (-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-2,446)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[][] doubleArray1 = BlockRealMatrix.toBlocksLayout(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 148;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(148, 148);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix1 = new BlockRealMatrix(52, 148);
      assertEquals(148, blockRealMatrix1.getColumnDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(52, blockRealMatrix1.getRowDimension());
      assertNotNull(blockRealMatrix1);
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 52;
      BlockRealMatrix blockRealMatrix2 = (BlockRealMatrix)blockRealMatrix1.scalarMultiply(0);
      assertEquals(148, blockRealMatrix1.getColumnDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(52, blockRealMatrix1.getRowDimension());
      assertEquals(52, blockRealMatrix2.getRowDimension());
      assertFalse(blockRealMatrix2.isTransposable());
      assertEquals(148, blockRealMatrix2.getColumnDimension());
      assertNotNull(blockRealMatrix2);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertNotSame(blockRealMatrix1, blockRealMatrix2);
      assertNotSame(blockRealMatrix2, blockRealMatrix0);
      assertNotSame(blockRealMatrix2, blockRealMatrix1);
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix2.equals((Object)blockRealMatrix0));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix3 = blockRealMatrix1.transpose();
      assertEquals(148, blockRealMatrix1.getColumnDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(52, blockRealMatrix1.getRowDimension());
      assertEquals(52, blockRealMatrix3.getColumnDimension());
      assertEquals(148, blockRealMatrix3.getRowDimension());
      assertFalse(blockRealMatrix3.isTransposable());
      assertNotNull(blockRealMatrix3);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertNotSame(blockRealMatrix1, blockRealMatrix2);
      assertNotSame(blockRealMatrix1, blockRealMatrix3);
      assertNotSame(blockRealMatrix3, blockRealMatrix0);
      assertNotSame(blockRealMatrix3, blockRealMatrix1);
      assertNotSame(blockRealMatrix3, blockRealMatrix2);
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix2));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        blockRealMatrix1.addToEntry(52, 52, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (52)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 224;
      int int1 = 85;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(224, 85);
      assertEquals(85, blockRealMatrix0.getColumnDimension());
      assertEquals(224, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        blockRealMatrix0.getColumnMatrix(224);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (224)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1393;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1393, 1393);
      assertEquals(1393, blockRealMatrix0.getRowDimension());
      assertEquals(1393, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int[] intArray0 = new int[8];
      double double0 = blockRealMatrix0.getTrace();
      assertEquals(1393, blockRealMatrix0.getRowDimension());
      assertEquals(1393, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      intArray0[0] = 52;
      intArray0[1] = 1393;
      try { 
        blockRealMatrix0.getRowVector(1393);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,393)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2040.2067030377896);
      doubleArray1[3] = 0.006;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
      
      BlockRealMatrix blockRealMatrix1 = new BlockRealMatrix(doubleArray0);
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(5, blockRealMatrix1.getColumnDimension());
      assertEquals(1, blockRealMatrix1.getRowDimension());
      assertNotNull(blockRealMatrix1);
      assertTrue(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix2 = blockRealMatrix0.subtract((RealMatrix) blockRealMatrix1);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(5, blockRealMatrix1.getColumnDimension());
      assertEquals(1, blockRealMatrix1.getRowDimension());
      assertFalse(blockRealMatrix2.isTransposable());
      assertEquals(5, blockRealMatrix2.getColumnDimension());
      assertEquals(1, blockRealMatrix2.getRowDimension());
      assertNotNull(blockRealMatrix2);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix2);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertNotSame(blockRealMatrix1, blockRealMatrix2);
      assertNotSame(blockRealMatrix2, blockRealMatrix1);
      assertNotSame(blockRealMatrix2, blockRealMatrix0);
      assertTrue(blockRealMatrix0.equals((Object)blockRealMatrix1));
      assertTrue(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix2.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix2.equals((Object)blockRealMatrix0));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      try { 
        blockRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 114, 114, (-156), 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (114)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2984.948228682597);
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      try { 
        blockRealMatrix0.preMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2097;
      int int1 = 2258;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2097, 2258);
      assertEquals(2097, blockRealMatrix0.getRowDimension());
      assertEquals(2258, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2097;
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      // Undeclared exception!
      blockRealMatrix0.walkInRowOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      // Undeclared exception!
      try { 
        BlockRealMatrix.toBlocksLayout(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 51;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(51, 51);
      assertEquals(51, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(51, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int1 = 281;
      int int2 = 249;
      try { 
        blockRealMatrix0.getColumnVector(249);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (249)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(52, 52);
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      double double0 = blockRealMatrix0.walkInRowOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
      
      double double1 = blockRealMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0);
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      try { 
        blockRealMatrix0.setColumnMatrix(35, array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 0x0 but expected 52x1
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(52, 52);
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      double double0 = blockRealMatrix0.walkInRowOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
      
      double double1 = blockRealMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0);
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      try { 
        blockRealMatrix0.setRow(35, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 148;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(148, 148);
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix1 = blockRealMatrix0.copy();
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(148, blockRealMatrix1.getColumnDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(148, blockRealMatrix1.getRowDimension());
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 52;
      intArray0[1] = 52;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) 52;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      try { 
        blockRealMatrix1.preMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 148
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(4, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      int int0 = 717;
      int int1 = 0;
      try { 
        blockRealMatrix0.walkInOptimizedOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0, 1911, 717, 717, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,911)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1268;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1268, 1268);
      assertEquals(1268, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1268, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        blockRealMatrix0.getColumn(1268);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (1,268)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-0.5);
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (-2007.6681);
      doubleArray1[3] = 1600.01782991;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(4, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        blockRealMatrix0.setColumnMatrix(964, array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (964)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-2430.0901659947);
      doubleArray1[2] = 3736.06;
      doubleArray1[3] = 298.00972;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (-0.5);
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(6, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
      
      int int0 = 0;
      int int1 = 0;
      try { 
        blockRealMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 2, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (2)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-762);
      int int1 = 1208;
      // Undeclared exception!
      try { 
        BlockRealMatrix.createBlocksLayout((-762), 1208);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 148;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(148, 148);
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix1 = blockRealMatrix0.copy();
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(148, blockRealMatrix1.getColumnDimension());
      assertEquals(148, blockRealMatrix1.getRowDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 52;
      intArray0[1] = 52;
      // Undeclared exception!
      blockRealMatrix1.scalarMultiply(52);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1393;
      double[][] doubleArray0 = BlockRealMatrix.createBlocksLayout(1393, 1393);
      assertNotNull(doubleArray0);
      assertEquals(729, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,704 != 2,132
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(775, 775);
      assertEquals(775, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(775, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 52;
      doubleArray1[1] = (double) 52;
      doubleArray1[2] = (double) 52;
      doubleArray1[3] = (double) 52;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 775;
      doubleArray2[1] = (-2317.98737263);
      doubleArray2[2] = (double) 775;
      doubleArray2[3] = (double) 775;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 775;
      doubleArray3[1] = (-2317.98737263);
      doubleArray3[2] = (double) 52;
      doubleArray3[3] = (double) 52;
      doubleArray3[4] = (double) 52;
      doubleArray3[5] = (-2317.98737263);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 52;
      doubleArray4[1] = (double) 775;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 775;
      doubleArray5[1] = (-1185.136791222287);
      doubleArray5[2] = (double) 775;
      doubleArray5[3] = (double) 52;
      doubleArray0[4] = doubleArray5;
      try { 
        blockRealMatrix0.setSubMatrix(doubleArray0, 775, 775);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (775)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-2525);
      double[][] doubleArray0 = BlockRealMatrix.createBlocksLayout((-2525), (-2525));
      assertNotNull(doubleArray0);
      assertEquals(2209, doubleArray0.length);
      
      int int1 = 0;
      int int2 = 0;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(0, 0, doubleArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1434;
      double[][] doubleArray0 = new double[0][1];
      boolean boolean0 = true;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(1434, 1434, doubleArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 4024;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(4024, 4024);
      assertEquals(4024, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(4024, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int1 = 0;
      try { 
        blockRealMatrix0.setEntry(4024, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (4,024)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(183, 183);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(183, blockRealMatrix0.getRowDimension());
      assertEquals(183, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        blockRealMatrix0.setEntry(183, 183, 183);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (183)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix1 = blockRealMatrix0.scalarAdd(0.0);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(2, blockRealMatrix1.getRowDimension());
      assertEquals(2, blockRealMatrix1.getColumnDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertTrue(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3, 3);
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      try { 
        blockRealMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1013;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1013, 1013);
      assertEquals(1013, blockRealMatrix0.getRowDimension());
      assertEquals(1013, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int1 = 3413;
      try { 
        blockRealMatrix0.getRowMatrix(3413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (3,413)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        blockRealMatrix0.add((BlockRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 119;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(119, 119);
      assertEquals(119, blockRealMatrix0.getColumnDimension());
      assertEquals(119, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      try { 
        blockRealMatrix0.subtract((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(1, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 58;
      try { 
        blockRealMatrix0.getRow(58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (58)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 52;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(52, 52);
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int1 = 0;
      double double0 = blockRealMatrix0.getEntry(0, 0);
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        blockRealMatrix0.getSubMatrix((-1), (-1), 52, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-1)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(9, 9);
      assertEquals(9, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(9, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double double0 = blockRealMatrix0.getEntry(0, 0);
      assertEquals(9, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(9, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int0 = 263;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 52;
      doubleArray1[2] = (-867.77531);
      doubleArray1[3] = (double) 263;
      doubleArray1[4] = (double) 52;
      doubleArray1[5] = (double) 52;
      doubleArray1[6] = (double) 263;
      doubleArray1[7] = (double) 9;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix1 = null;
      try {
        blockRealMatrix1 = new BlockRealMatrix(263, (-935), doubleArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -935 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(783, 783);
      assertEquals(783, blockRealMatrix0.getRowDimension());
      assertEquals(783, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        blockRealMatrix0.getSubMatrix(783, 268, (-2861), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (783)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(236, 236);
      assertEquals(236, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(236, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int0 = 1;
      try { 
        blockRealMatrix0.multiplyEntry(1, 236, (-3626.098694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (236)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1433.44;
      doubleArray1[1] = (-803.44);
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = (-3.141592653589793);
      doubleArray1[4] = 1493.89897475725;
      doubleArray1[5] = 293.8160735;
      doubleArray1[6] = (-2531.083084052993);
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 142.29554393214;
      doubleArray2[1] = 293.8160735;
      doubleArray2[2] = (-3.141592653589793);
      doubleArray2[3] = 1433.44;
      doubleArray2[4] = 1493.89897475725;
      doubleArray2[5] = (-2531.083084052993);
      doubleArray2[6] = 293.8160735;
      doubleArray2[7] = 1433.44;
      doubleArray0[1] = doubleArray2;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertEquals(8, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 52;
      doubleArray3[1] = 293.8160735;
      doubleArray3[2] = 1493.89897475725;
      doubleArray3[3] = (double) 52;
      doubleArray3[4] = (-3.141592653589793);
      doubleArray3[5] = 142.29554393214;
      doubleArray3[6] = (-1.0);
      try { 
        blockRealMatrix0.operate(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 130;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(130, 130);
      assertEquals(130, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(130, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      assertEquals(0.0, defaultRealMatrixPreservingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixPreservingVisitor0);
      
      try { 
        blockRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 130, 130, 998, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (130)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = BlockRealMatrix.createBlocksLayout(0, 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2, 2);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(2, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 52;
      doubleArray0[2] = doubleArray3;
      try { 
        BlockRealMatrix.toBlocksLayout(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1727;
      int int1 = 170;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1727, 170);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1727, blockRealMatrix0.getRowDimension());
      assertEquals(170, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      blockRealMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 610;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(610, 610, (double[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1277);
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix((-1277), (-1277), (double[][]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,277 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1065.42997021701);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2040.2067030377896);
      doubleArray1[3] = 0.006;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      try { 
        blockRealMatrix0.walkInRowOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0, 142, 168, 142, 168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (142)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-939);
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix((-939), (-939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -939 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(2, 2, doubleArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 2269;
      int int1 = 52;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2269, 52);
      assertEquals(2269, blockRealMatrix0.getRowDimension());
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int2 = 102;
      try { 
        blockRealMatrix0.getEntry(2269, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (2,269)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 20.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 10.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 20.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 20.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 10.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 10.0;
      doubleArray3[5] = (-1404.5);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1588;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(1588, 3223, doubleArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2,704
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(52, 52);
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertNotNull(defaultRealMatrixChangingVisitor0);
      
      double double0 = blockRealMatrix0.walkInRowOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
      assertEquals(52, blockRealMatrix0.getRowDimension());
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(0.0, defaultRealMatrixChangingVisitor0.end(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int int0 = 35;
      try { 
        blockRealMatrix0.getEntry(52, 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (52)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 28;
      doubleArray1[1] = (double) 28;
      doubleArray1[2] = (double) 28;
      doubleArray1[3] = (double) 28;
      doubleArray1[4] = (double) 28;
      doubleArray1[5] = (double) 28;
      doubleArray1[6] = (double) 28;
      doubleArray1[7] = (double) 28;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 28;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 937.397476335;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-105.02639395497);
      doubleArray4[2] = (double) 28;
      doubleArray4[3] = 937.397476335;
      doubleArray4[4] = (double) 28;
      doubleArray4[5] = 937.397476335;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(28, 28, doubleArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 784
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 148;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(148, 148);
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix1 = blockRealMatrix0.copy();
      assertEquals(148, blockRealMatrix0.getRowDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(148, blockRealMatrix0.getColumnDimension());
      assertEquals(148, blockRealMatrix1.getRowDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(148, blockRealMatrix1.getColumnDimension());
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      blockRealMatrix1.scalarMultiply(0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 221;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 221;
      doubleArray3[1] = (double) 221;
      doubleArray3[2] = (double) 3;
      doubleArray3[3] = (-1629.52);
      doubleArray3[4] = (double) 221;
      doubleArray3[5] = (double) 221;
      doubleArray3[6] = (double) 221;
      doubleArray3[7] = (double) 221;
      doubleArray3[8] = (double) 221;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 221;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = (double) 221;
      doubleArray4[3] = (-1629.52);
      doubleArray4[4] = (-1629.52);
      doubleArray4[5] = (double) 221;
      doubleArray4[6] = 1726.94178;
      doubleArray4[7] = (double) 3;
      doubleArray4[8] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1726.94178;
      doubleArray5[2] = 998.975;
      doubleArray3[8] = 1726.94178;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 1726.94178;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 1726.94178;
      doubleArray6[1] = (double) 221;
      doubleArray6[2] = (-1629.52);
      doubleArray6[3] = (double) 3;
      doubleArray6[4] = (-1629.52);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (double) 3;
      doubleArray7[1] = 1726.94178;
      doubleArray7[2] = (double) 3;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 1726.94178;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (-1629.52);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 998.975;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 998.975;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 0.0;
      doubleArray0[8] = doubleArray9;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(3, 221, doubleArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 156
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-151.5597232);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = blockRealMatrix0.getColumn(0);
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-151.5597232)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(332, 332);
      assertEquals(332, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(332, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-3);
      doubleArray1[1] = (double) 119;
      doubleArray1[2] = (double) 119;
      doubleArray1[3] = (double) 119;
      doubleArray1[4] = (double) 52;
      doubleArray1[5] = 567.0;
      doubleArray1[6] = (double) 332;
      doubleArray1[7] = (double) 52;
      doubleArray0[0] = doubleArray1;
      int int0 = 140;
      int int1 = 54;
      blockRealMatrix0.multiplyEntry(140, 54, 0.0);
      assertEquals(332, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(332, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      BlockRealMatrix blockRealMatrix1 = null;
      try {
        blockRealMatrix1 = new BlockRealMatrix((-3), 119, doubleArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix((-367), (-367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -367 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(241, 2852);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor1 = new DefaultRealMatrixPreservingVisitor();
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      // Undeclared exception!
      blockRealMatrix0.getData();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3066.81670407;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3066.81670407;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 3066.81670407;
      doubleArray3[1] = 3066.81670407;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 3066.81670407;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 3066.81670407;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 219;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2975, 219);
      blockRealMatrix0.getRowMatrix(219);
      try { 
        blockRealMatrix0.getRow((-750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-750)
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1393;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1393, 1393);
      blockRealMatrix0.getTrace();
      // Undeclared exception!
      blockRealMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 0;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.linear.AbstractRealMatrix", e);
      }
  }
}
