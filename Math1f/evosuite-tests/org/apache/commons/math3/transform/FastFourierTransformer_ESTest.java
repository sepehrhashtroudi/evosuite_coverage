/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:31:26 GMT 2022
 */

package org.apache.commons.math3.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.transform.DftNormalization;
import org.apache.commons.math3.transform.FastFourierTransformer;
import org.apache.commons.math3.transform.TransformType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastFourierTransformer_ESTest extends FastFourierTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.9999999997127567;
      Complex[] complexArray0 = fastFourierTransformer0.transform(doubleArray0, transformType0);
      assertEquals(2, complexArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-730.52115857);
      TransformType transformType0 = TransformType.FORWARD;
      Complex[] complexArray0 = fastFourierTransformer0.transform(doubleArray0, transformType0);
      assertEquals(2, complexArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray0[1] = doubleArray1;
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.INVERSE;
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[8];
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complexArray0[0] = complex0;
      Complex complex1 = Complex.ONE;
      complexArray0[1] = complex1;
      complexArray0[2] = complexArray0[0];
      complexArray0[3] = complex1;
      complexArray0[4] = complexArray0[1];
      complexArray0[5] = complex1;
      complexArray0[6] = complexArray0[5];
      complexArray0[7] = complexArray0[1];
      TransformType transformType0 = TransformType.INVERSE;
      Complex[] complexArray1 = fastFourierTransformer0.transform(complexArray0, transformType0);
      assertFalse(complexArray1.equals((Object)complexArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      TransformType transformType0 = TransformType.FORWARD;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-0.7071067811865475), (-0.7071067811865475), (-3637.2212225));
      Complex[] complexArray0 = fastFourierTransformer0.transform((UnivariateFunction) harmonicOscillator0, (-3637.2212225), 5.390620378060543E-9, 4, transformType0);
      assertEquals(4, complexArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace((double[][]) null, dftNormalization0, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[6];
      Complex complex0 = Complex.ZERO;
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      complexArray0[2] = complexArray0[0];
      complexArray0[3] = complex0;
      complexArray0[4] = complexArray0[3];
      complexArray0[5] = complexArray0[0];
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(complexArray0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[9];
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((double[]) null, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Power power0 = new Power(1.5436243140740602);
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      fastFourierTransformer0.transform((UnivariateFunction) power0, 1.5436243140740602, 2171.9929573275817, 2103, transformType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Power power0 = new Power(2.0);
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((UnivariateFunction) power0, 2.0, 2.0, 0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of sample is not positive: 0
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Asinh asinh0 = new Asinh();
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((UnivariateFunction) asinh0, (-3.141592653589793), (-3.141592653589793), 680, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3.142 is larger than, or equal to, the maximum (-3.142)
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((UnivariateFunction) null, (-2421.329059056042), 786.6476, 22, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      TransformType transformType0 = TransformType.INVERSE;
      FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      TransformType transformType0 = TransformType.FORWARD;
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization0, transformType0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      double[][] doubleArray0 = new double[2][3];
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      TransformType transformType0 = TransformType.INVERSE;
      FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization0, transformType0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[1];
      Complex complex0 = Complex.valueOf(0.0, 2163.6);
      complexArray0[0] = complex0;
      TransformType transformType0 = TransformType.FORWARD;
      Complex[] complexArray1 = fastFourierTransformer0.transform(complexArray0, transformType0);
      assertEquals(1, complexArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      double[][] doubleArray0 = new double[7][4];
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[4];
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(complexArray0, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      Exp exp0 = new Exp();
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((UnivariateFunction) exp0, 0.0, 4.888792154132158E-111, 674, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 674 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math3.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex complex0 = new Complex((-2.0));
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.mdfft(complex0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
