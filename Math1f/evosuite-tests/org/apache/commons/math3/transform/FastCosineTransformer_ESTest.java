/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:30:31 GMT 2022
 */

package org.apache.commons.math3.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Abs;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.transform.DctNormalization;
import org.apache.commons.math3.transform.FastCosineTransformer;
import org.apache.commons.math3.transform.TransformType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastCosineTransformer_ESTest extends FastCosineTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-5002.93);
      double[] doubleArray1 = fastCosineTransformer0.fct(doubleArray0);
      assertArrayEquals(new double[] {(-2501.465), 2501.465}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[5];
      TransformType transformType0 = TransformType.INVERSE;
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      Sinc sinc0 = new Sinc(false);
      TransformType transformType0 = TransformType.FORWARD;
      double[] doubleArray0 = fastCosineTransformer0.transform((UnivariateFunction) sinc0, (-389.0322631), 1.0, 5, transformType0);
      assertArrayEquals(new double[] {0.0016658471446026574, (-0.002219820171760746), 0.0025682473526596216, (-0.007867545170546102), 0.009726939451627493}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastCosineTransformer0.transform((double[]) null, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      Abs abs0 = new Abs();
      try { 
        fastCosineTransformer0.transform((UnivariateFunction) abs0, 0.0, 3.141592653589793, 407, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 407 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math3.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1207.4789;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      fastCosineTransformer0.transform((UnivariateFunction) polynomialFunction0, 1207.4789, 1603.7642704, 3724, transformType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      Sinh sinh0 = new Sinh();
      TransformType transformType0 = TransformType.INVERSE;
      try { 
        fastCosineTransformer0.transform((UnivariateFunction) sinh0, (-1.0), (-1.0), 168, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is larger than, or equal to, the maximum (-1)
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastCosineTransformer0.transform((UnivariateFunction) null, (-1033.2005169602), 1207.4789, 7, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[6];
      try { 
        fastCosineTransformer0.fct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math3.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      // Undeclared exception!
      try { 
        fastCosineTransformer0.fct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      TransformType transformType0 = TransformType.FORWARD;
      double[] doubleArray0 = new double[14];
      try { 
        fastCosineTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 14 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math3.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[3];
      TransformType transformType0 = TransformType.FORWARD;
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      try { 
        fastCosineTransformer0.transform((UnivariateFunction) null, 0.0, 0.8109631538391113, (-1221), transformType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of sample is not positive: -1,221
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }
}
