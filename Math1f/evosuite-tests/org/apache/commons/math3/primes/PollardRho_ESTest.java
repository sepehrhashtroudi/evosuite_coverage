/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:13:35 GMT 2022
 */

package org.apache.commons.math3.primes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.primes.PollardRho;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PollardRho_ESTest extends PollardRho_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PollardRho.gcdPositive(0, (-1283));
      PollardRho.gcdPositive((-3619), (-3619));
      // Undeclared exception!
      try { 
        PollardRho.primeFactors((-1283));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PollardRho.primeFactors(413);
      PollardRho.primeFactors(413);
      PollardRho.rhoBrent(413);
      PollardRho.primeFactors(413);
      PollardRho.gcdPositive((-3032), (-3032));
      PollardRho.primeFactors(2030);
      PollardRho.primeFactors(413);
      int int0 = (-643);
      // Undeclared exception!
      PollardRho.gcdPositive((-3032), (-643));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PollardRho.primeFactors(342);
      PollardRho.rhoBrent(342);
      PollardRho.primeFactors(342);
      int int0 = 27;
      PollardRho.gcdPositive(18, 27);
      PollardRho.primeFactors(9);
      PollardRho.rhoBrent(9);
      // Undeclared exception!
      PollardRho.rhoBrent((-1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      PollardRho.gcdPositive(0, 1708);
      PollardRho.primeFactors(1708);
      // Undeclared exception!
      try { 
        PollardRho.rhoBrent(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math3.primes.PollardRho", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      PollardRho.primeFactors(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3344;
      PollardRho.rhoBrent(3344);
      PollardRho.gcdPositive(3344, 3344);
      PollardRho.primeFactors(3344);
      PollardRho.primeFactors(4);
      PollardRho.gcdPositive(3344, 3344);
      PollardRho.gcdPositive(3682, 3344);
      PollardRho.rhoBrent(3682);
      PollardRho.rhoBrent(2);
      // Undeclared exception!
      PollardRho.gcdPositive(4, (-1257));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1217;
      PollardRho.gcdPositive(0, 1217);
      PollardRho.primeFactors(2273);
      int int1 = (-1);
      // Undeclared exception!
      PollardRho.rhoBrent((-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1104;
      PollardRho.primeFactors(1104);
      PollardRho.primeFactors(1104);
      int int1 = (-2803);
      // Undeclared exception!
      PollardRho.rhoBrent((-2803));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = PollardRho.gcdPositive(0, (-371));
      assertEquals((-371), int0);
      
      int int1 = PollardRho.gcdPositive((-371), (-371));
      assertTrue(int1 == int0);
      assertEquals((-371), int1);
      
      int int2 = PollardRho.gcdPositive(0, (-371));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-371), int2);
      
      int int3 = 3079;
      // Undeclared exception!
      PollardRho.gcdPositive((-371), 3079);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = PollardRho.gcdPositive(0, 0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      PollardRho.primeFactors(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2351;
      List<Integer> list0 = PollardRho.primeFactors(2351);
      assertTrue(list0.contains(int0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      int int1 = 740;
      int int2 = PollardRho.rhoBrent(740);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(20, int2);
      
      int int3 = 2;
      int int4 = PollardRho.rhoBrent(2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(2, int4);
      
      int int5 = 0;
      int int6 = PollardRho.gcdPositive(0, 2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertEquals(2, int6);
      
      int int7 = 1;
      List<Integer> list1 = PollardRho.primeFactors(1);
      assertFalse(list1.contains(int2));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      // Undeclared exception!
      PollardRho.rhoBrent(2351);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 355;
      int int1 = PollardRho.gcdPositive(355, 355);
      assertTrue(int1 == int0);
      assertEquals(355, int1);
      
      int int2 = (-4952);
      // Undeclared exception!
      try { 
        PollardRho.primeFactors((-4952));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 148;
      PollardRho.gcdPositive(148, 148);
      int int1 = (-1);
      // Undeclared exception!
      PollardRho.gcdPositive(148, (-1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        PollardRho.primeFactors((-2486));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = PollardRho.gcdPositive((-1237), (-1237));
      assertEquals((-1237), int0);
      
      PollardRho.gcdPositive(2072, 0);
      int int1 = PollardRho.rhoBrent(2072);
      assertEquals(4, int1);
  }
}
