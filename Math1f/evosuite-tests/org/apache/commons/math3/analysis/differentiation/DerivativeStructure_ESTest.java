/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:00:12 GMT 2022
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DerivativeStructure_ESTest extends DerivativeStructure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      double[] doubleArray0 = new double[4];
      try { 
        derivativeStructure0.compose(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.copySign((-1109.388196718255));
      assertEquals(-0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow((double) 15, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.divide((-3.141592653589793));
      assertEquals((-0.3183098861837907), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(3, 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, 13, 13, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 is larger than, or equal to, the maximum (0)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.toRadians();
      assertEquals(34.64478565208744, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1.0));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.toRadians();
      assertEquals((-0.017453292519943295), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1196);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.toRadians();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.toDegrees();
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.toDegrees();
      assertEquals(114.59155902616465, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.toDegrees();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      double double0 = derivativeStructure0.taylor((double[]) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      double[] doubleArray0 = new double[6];
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      double double0 = derivativeStructure1.taylor(doubleArray0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.tanh();
      assertEquals((-0.9640275800758169), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.tanh();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.tan();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.tan();
      assertEquals(6.4027983448444035, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.subtract(derivativeStructure0);
      assertEquals(4639.6206751892405, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.subtract(derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.subtract(691.3);
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
      assertEquals(5319.589657601747, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.subtract((double) 2);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.subtract((double) 0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertEquals((-740.0), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sqrt();
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sqrt();
      assertEquals(40.70626487409524, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.sinh();
      assertEquals(1.1752011936438014, derivativeStructure2.getReal(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 15, doubleArray0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sinh();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sinh();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1.0));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.sin();
      assertEquals(0.9877659459927356, derivativeStructure2.getReal(), 0.01);
      assertEquals((-1.0), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sin();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sin();
      assertEquals((-0.46758529345626), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      derivativeStructure0.signum();
      assertEquals((-4250.34083785428), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(3, 3, 3);
      derivativeStructure0.signum();
      assertEquals(3.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.scalb(12);
      assertEquals(2.4620604037536755E7, derivativeStructure2.getValue(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.scalb(0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 1764.9298);
      long long0 = derivativeStructure0.round();
      assertEquals(1765L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      long long0 = derivativeStructure1.round();
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      derivativeStructure0.rint();
      assertEquals(1657.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cos();
      DerivativeStructure derivativeStructure2 = derivativeStructure0.remainder(derivativeStructure1);
      assertEquals((-0.34711480002710826), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.remainder(derivativeStructure0);
      assertEquals(Double.NaN, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.remainder(derivativeStructure0);
      assertEquals(-0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(3, 3, 3);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.remainder((double) 3);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.reciprocal();
      assertEquals((-5.20347185985118E-4), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.reciprocal();
      assertEquals(Double.NaN, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.reciprocal();
      assertEquals(0.5, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(derivativeStructure0);
      assertEquals(Double.NaN, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(8);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(2);
      assertEquals(2.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(4.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      DerivativeStructure derivativeStructure2 = DerivativeStructure.pow(2064.3834954, derivativeStructure1);
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(923.7781393896945);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      assertEquals(-0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.multiply(derivativeStructure0);
      assertEquals(1657.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(2745649.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.multiply(3);
      assertEquals(5955.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.multiply(109);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.multiply(56);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.multiply((-297.218));
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
      assertEquals((-297.218), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.multiply(0.0);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add((-1109.388196718255));
      DerivativeStructure derivativeStructure2 = derivativeStructure1.log1p();
      assertEquals(Double.NaN, derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log1p();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow((double) 0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.log10();
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure1));
      assertEquals(1985.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 55);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log();
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[9];
      derivativeStructureArray0[0] = derivativeStructure0;
      derivativeStructureArray0[1] = derivativeStructure0;
      derivativeStructureArray0[2] = derivativeStructure0;
      derivativeStructureArray0[3] = derivativeStructure0;
      derivativeStructureArray0[4] = derivativeStructure0;
      derivativeStructureArray0[5] = derivativeStructure0;
      derivativeStructureArray0[6] = derivativeStructure0;
      derivativeStructureArray0[7] = derivativeStructure0;
      derivativeStructureArray0[8] = derivativeStructure0;
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructureArray0, derivativeStructureArray0);
      assertEquals(1.625885751413864E8, derivativeStructure1.getValue(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1196);
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[7];
      derivativeStructureArray0[0] = derivativeStructure0;
      derivativeStructureArray0[1] = derivativeStructure0;
      derivativeStructureArray0[2] = derivativeStructure0;
      derivativeStructureArray0[3] = derivativeStructure0;
      derivativeStructureArray0[4] = derivativeStructure0;
      derivativeStructureArray0[5] = derivativeStructure0;
      derivativeStructureArray0[6] = derivativeStructure0;
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructureArray0, derivativeStructureArray0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(1657.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      DerivativeStructure derivativeStructure2 = derivativeStructure0.linearCombination(derivativeStructure1, derivativeStructure1, derivativeStructure0, derivativeStructure1, derivativeStructure0, derivativeStructure1);
      assertEquals((-2.0), derivativeStructure1.getValue(), 0.01);
      assertEquals((-4.0), derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      DerivativeStructure derivativeStructure2 = DerivativeStructure.atan2(derivativeStructure1, derivativeStructure0);
      DerivativeStructure derivativeStructure3 = derivativeStructure1.add(derivativeStructure2);
      DerivativeStructure derivativeStructure4 = derivativeStructure2.linearCombination(derivativeStructure3, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(2.0, derivativeStructure0.getValue(), 0.01);
      assertEquals((-1.5707963267948966), derivativeStructure4.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(3.613079447586364E7, derivativeStructure1.getValue(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure0.linearCombination((-1.0), derivativeStructure0, 0.0, derivativeStructure1, (-1766.574686708), derivativeStructure0, 4275.0, derivativeStructure1);
      assertEquals(1.50156239455025E7, derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination((-1.0), derivativeStructure0, 0.0, derivativeStructure0, (-1766.574686708), derivativeStructure0, 4275.0, derivativeStructure0);
      assertEquals((-4818754.4409315055), derivativeStructure1.getValue(), 0.01);
      assertEquals((-1921.79380793), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(3489.52, derivativeStructure0, 3489.52, derivativeStructure0, 2.4895682334899902, derivativeStructure0, 2069.727907, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add((-1109.388196718255));
      DerivativeStructure derivativeStructure2 = derivativeStructure1.linearCombination(0.0, derivativeStructure1, (-3.141592653589793), derivativeStructure1, 0.0, derivativeStructure1);
      assertEquals(3485.245808789298, derivativeStructure2.getValue(), 0.01);
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination((double) 0, derivativeStructure0, (double) 0, derivativeStructure0, 0.0, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure2 = derivativeStructure0.linearCombination(0.0, derivativeStructure1, (double) 0, derivativeStructure1, (double) 7, derivativeStructure1);
      DerivativeStructure derivativeStructure3 = derivativeStructure1.linearCombination((double) (-740), derivativeStructure2, 1105.5, derivativeStructure0);
      assertEquals(3833200.0, derivativeStructure3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure2 = derivativeStructure1.linearCombination((double) (-740), derivativeStructure0, 1105.5, derivativeStructure0);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals((-740.0), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      double double0 = derivativeStructure0.getValue();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      int[] intArray0 = new int[0];
      double double0 = derivativeStructure0.getPartialDerivative(intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      int[] intArray0 = new int[0];
      double double0 = derivativeStructure1.getPartialDerivative(intArray0);
      assertEquals(6010.889657601747, double0, 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      int int0 = derivativeStructure0.getOrder();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      derivativeStructure0.getFreeParameters();
      assertEquals(1657.0, derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.remainder((double) 0);
      int int0 = derivativeStructure1.getExponent();
      assertEquals(1024, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.floor();
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.floor();
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.expm1();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.expm1();
      assertEquals(6.38905609893065, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.expm1();
      assertEquals((-1.0), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.exp();
      assertEquals(7.38905609893065, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1.0));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.exp();
      assertEquals(0.36787944117144233, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add((-1109.388196718255));
      DerivativeStructure derivativeStructure2 = derivativeStructure0.divide(derivativeStructure1);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertEquals((-1109.388196718255), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.divide(derivativeStructure0);
      assertEquals((-1.4142135623730951), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.divide(derivativeStructure0);
      assertEquals(2.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(1.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add((-1109.388196718255));
      DerivativeStructure derivativeStructure2 = derivativeStructure1.divide(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.divide((-1629.60279233141));
      assertEquals(-0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.createConstant(0);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.createConstant(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cosh();
      assertEquals(1.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cos();
      assertEquals((-0.4161468365471424), derivativeStructure1.getReal(), 0.01);
      assertEquals(2.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.copySign(derivativeStructure0);
      assertEquals(1657.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      DerivativeStructure derivativeStructure2 = DerivativeStructure.atan2(derivativeStructure1, derivativeStructure0);
      DerivativeStructure derivativeStructure3 = derivativeStructure2.ceil();
      assertEquals(-0.0, derivativeStructure3.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.ceil();
      assertEquals((-4250.0), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1.0));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.cbrt();
      DerivativeStructure derivativeStructure3 = derivativeStructure0.linearCombination((-1.0), derivativeStructure0, (-24.5), derivativeStructure2);
      assertEquals((-26.50032018357964), derivativeStructure3.getReal(), 0.01);
      assertEquals(1.4142135623730951, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cbrt();
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atanh();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = DerivativeStructure.atan2(derivativeStructure1, derivativeStructure1);
      assertEquals(2717.8268672592408, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.7853981633974483, derivativeStructure2.getValue(), 0.01);
      assertEquals((-1921.79380793), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 10);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.atan2(derivativeStructure0, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atan2(derivativeStructure0);
      assertEquals(0.7853981633974483, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atan2(derivativeStructure0);
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1.0));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.atan();
      assertEquals(0.9553166181245093, derivativeStructure2.getValue(), 0.01);
      assertEquals((-1.0), derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1657, 0, 0, 1657);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.asinh();
      assertEquals(8.10591128903965, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.asinh();
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure2.getValue(), 0.01);
      assertNotSame(derivativeStructure2, derivativeStructure1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.asinh();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 55);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.asin();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.asin();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow((double) 15, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.add(derivativeStructure0);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertEquals(1.0, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add(derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add(0.0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add((double) 15);
      assertEquals(15.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.acosh();
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure1));
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.acosh();
      assertEquals(Double.NaN, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.acosh();
      assertEquals(Double.NaN, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow((double) 13, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.acos();
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(1.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.acos();
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(1.5707963267948966, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1571);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.abs();
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(13, 0, (-740), (-740));
      try { 
        derivativeStructure0.subtract(derivativeStructure1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 13
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      // Undeclared exception!
      try { 
        derivativeStructure0.pow((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DerivativeStructure.pow(Double.POSITIVE_INFINITY, (DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 3290.387462);
      // Undeclared exception!
      try { 
        derivativeStructure0.linearCombination((DerivativeStructure[]) null, (DerivativeStructure[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 239);
      double[] doubleArray0 = new double[3];
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[5];
      derivativeStructureArray0[0] = derivativeStructure0;
      derivativeStructureArray0[1] = derivativeStructure0;
      derivativeStructureArray0[2] = derivativeStructure0;
      derivativeStructureArray0[3] = derivativeStructure0;
      derivativeStructureArray0[4] = derivativeStructure0;
      try { 
        derivativeStructure0.linearCombination(doubleArray0, derivativeStructureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, 2, 0);
      try { 
        derivativeStructure1.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure1, derivativeStructure0, derivativeStructure0, derivativeStructure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(13, 0, (-740), (-740));
      try { 
        derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure1, derivativeStructure1, derivativeStructure0, derivativeStructure0, derivativeStructure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 13
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, 0, (-740), (-740));
      try { 
        derivativeStructure1.linearCombination((-1793.63993), derivativeStructure0, Double.NaN, derivativeStructure1, 187.97924897, derivativeStructure0, 0.0, derivativeStructure1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, 0);
      try { 
        DerivativeStructure.hypot(derivativeStructure1, derivativeStructure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        DerivativeStructure.hypot((DerivativeStructure) null, (DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(838, 0, 0.0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, 838, 0);
      try { 
        derivativeStructure0.hypot(derivativeStructure1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 838 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 0);
      int[] intArray0 = new int[4];
      try { 
        derivativeStructure0.getPartialDerivative(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 15
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0.0);
      // Undeclared exception!
      try { 
        derivativeStructure0.compose((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 838, 0);
      // Undeclared exception!
      derivativeStructure0.atanh();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 603);
      // Undeclared exception!
      DerivativeStructure.atan2(derivativeStructure0, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, 2, 0);
      try { 
        DerivativeStructure.atan2(derivativeStructure0, derivativeStructure1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        DerivativeStructure.atan2((DerivativeStructure) null, (DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 529, (-5538.13287));
      // Undeclared exception!
      derivativeStructure0.asin();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 1, 1);
      // Undeclared exception!
      try { 
        derivativeStructure0.add((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1286, 2006, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, 0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(Integer.MAX_VALUE, (-2875), doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, (-349), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -349
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(15, 9, 9, 0.0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(Integer.MAX_VALUE, 861, 3, 0.24248650670051575);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(3, (-3047), (-3047), 4.965949736284733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3047
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2788, 2, 2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure((-1241), 0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1241
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(316, 316);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure((-428), (-428));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -428
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = null;
      try {
        derivativeStructure1 = new DerivativeStructure((-2151.8), derivativeStructure0, Double.POSITIVE_INFINITY, derivativeStructure0, 3.0, (DerivativeStructure) null, 8, derivativeStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0.0, (DerivativeStructure) null, 0.0, (DerivativeStructure) null, 0.0, (DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(838, 0, 0.0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, 838, 0);
      DerivativeStructure derivativeStructure2 = null;
      try {
        derivativeStructure2 = new DerivativeStructure((-2009.54470821), derivativeStructure1, (-1645.841920828), derivativeStructure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 838
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.rootN(2);
      DerivativeStructure derivativeStructure3 = derivativeStructure2.hypot(derivativeStructure0);
      assertEquals(Double.NaN, derivativeStructure3.getReal(), 0.01);
      assertNotSame(derivativeStructure3, derivativeStructure2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.hypot(derivativeStructure0);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.scalb(12);
      assertEquals((-1.740939607185113E7), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.abs();
      assertSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.negate();
      assertEquals(1921.79380793, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.multiply(Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1503, 0, 0.0);
      double[] doubleArray0 = derivativeStructure0.getAllDerivatives();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, derivativeStructure0, 1139.87, derivativeStructure0);
      assertEquals(0, derivativeStructure1.getOrder());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.rootN(0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      double double0 = derivativeStructure0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.multiply(derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atan2(derivativeStructure0);
      assertEquals((-2.356194490192345), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1921.79380793));
      derivativeStructure0.getOrder();
      assertEquals((-1921.79380793), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      Field<DerivativeStructure> field0 = derivativeStructure0.getField();
      assertNotNull(field0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.add((-1109.388196718255));
      DerivativeStructure derivativeStructure2 = derivativeStructure1.cbrt();
      assertEquals((-10.352085421435822), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      int int0 = derivativeStructure0.getFreeParameters();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sinh();
      boolean boolean0 = derivativeStructure1.equals(derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      boolean boolean0 = derivativeStructure0.equals(derivativeStructure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      Object object0 = new Object();
      boolean boolean0 = derivativeStructure0.equals(object0);
      assertEquals(2.0, derivativeStructure0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[3];
      derivativeStructureArray0[0] = derivativeStructure0;
      derivativeStructureArray0[1] = derivativeStructure0;
      derivativeStructureArray0[2] = derivativeStructure0;
      // Undeclared exception!
      try { 
        derivativeStructure0.linearCombination((double[]) null, derivativeStructureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      double[] doubleArray0 = new double[2];
      try { 
        derivativeStructure0.compose(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      double[] doubleArray0 = new double[8];
      DerivativeStructure derivativeStructure1 = derivativeStructure0.compose(doubleArray0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(0);
      DerivativeStructure derivativeStructure2 = derivativeStructure0.hypot(derivativeStructure1);
      assertSame(derivativeStructure2, derivativeStructure1);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.remainder((double) 0);
      DerivativeStructure derivativeStructure2 = derivativeStructure0.hypot(derivativeStructure1);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(Double.NaN, derivativeStructure2.getValue(), 0.01);
      assertNotSame(derivativeStructure2, derivativeStructure1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.expm1();
      DerivativeStructure derivativeStructure3 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertEquals(6010.889657601747, derivativeStructure1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure3.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.copySign((double) 4);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.copySign(derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.copySign(derivativeStructure0);
      assertEquals((-4250.34083785428), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cos();
      DerivativeStructure derivativeStructure2 = derivativeStructure1.log10();
      DerivativeStructure derivativeStructure3 = derivativeStructure2.abs();
      assertEquals(0.05357330286004475, derivativeStructure3.getValue(), 0.01);
      assertEquals(1985.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow(0.0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = DerivativeStructure.hypot(derivativeStructure1, derivativeStructure0);
      assertSame(derivativeStructure2, derivativeStructure1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure2 = derivativeStructure0.linearCombination(0.0, derivativeStructure1, (double) 0, derivativeStructure1, (double) 7, derivativeStructure1);
      DerivativeStructure derivativeStructure3 = derivativeStructure2.copySign(0.0);
      assertEquals(5180.0, derivativeStructure3.getReal(), 0.01);
      assertEquals((-5180.0), derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.divide(0.0);
      assertEquals(Double.NaN, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, 0, 0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is larger than, or equal to, the maximum (0)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(13, 0, (-740), (-740));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atan();
      assertEquals((-1.5694449762661347), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.tan();
      assertEquals((-2.185039863261519), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(derivativeStructure0);
      DerivativeStructure derivativeStructure2 = DerivativeStructure.hypot(derivativeStructure1, derivativeStructure0);
      assertEquals(Double.NaN, derivativeStructure1.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure2.getValue(), 0.01);
      assertNotSame(derivativeStructure2, derivativeStructure1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.pow(0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.copySign((-1.608884086544153E-8));
      assertEquals((-1.0), derivativeStructure2.getValue(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log();
      assertEquals(0.6931471805599453, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cos();
      assertEquals((-0.9727414916591139), derivativeStructure1.getReal(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      double[] doubleArray0 = new double[9];
      double double0 = derivativeStructure0.taylor(doubleArray0);
      assertEquals(1985.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, derivativeStructure0, 0, derivativeStructure0, 0, derivativeStructure0);
      assertEquals((-4250.34083785428), derivativeStructure0.getReal(), 0.01);
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      derivativeStructure0.rint();
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 1, 1);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cosh();
      assertEquals(1.5430806348152437, derivativeStructure1.getValue(), 0.01);
      assertEquals(1.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      derivativeStructure0.floor();
      assertEquals(1985.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      // Undeclared exception!
      try { 
        derivativeStructure0.getPartialDerivative((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.signum();
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.createConstant((-4250.34083785428));
      assertEquals((-4250.34083785428), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log10();
      assertEquals(Double.NaN, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.log1p();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 15, doubleArray0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.cbrt();
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0, derivativeStructure0);
      assertEquals(2.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(12.0, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(10.0, (DerivativeStructure) null, 10.0, (DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      derivativeStructure0.hashCode();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.subtract(derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atanh();
      assertEquals((-4250.34083785428), derivativeStructure0.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.linearCombination((double) (-740), derivativeStructure0, 1105.5, derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      // Undeclared exception!
      try { 
        derivativeStructure0.remainder((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.tanh();
      assertEquals(0.9640275800758169, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = new DerivativeStructure((-4250.34083785428), derivativeStructure0, 936.621913575649, derivativeStructure0, 0.0, derivativeStructure0, 3.0, derivativeStructure0);
      assertEquals(1.4071683846518457E7, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 7);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.atan();
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure0.copySign(derivativeStructure1);
      assertEquals(6010.889657601747, derivativeStructure1.getReal(), 0.01);
      assertEquals(4250.34083785428, derivativeStructure2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 2, 2);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.ceil();
      assertEquals(2.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(2.0, derivativeStructure0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-4250.34083785428));
      DerivativeStructure derivativeStructure1 = derivativeStructure0.sinh();
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1985, 0, 1985);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.asin();
      assertEquals(1985.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = derivativeStructure0.hypot(derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2, 0, 0.0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow(0.0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure0.subtract(derivativeStructure1);
      DerivativeStructure derivativeStructure3 = derivativeStructure0.linearCombination(derivativeStructure0, derivativeStructure0, derivativeStructure2, derivativeStructure1, derivativeStructure1, derivativeStructure2, derivativeStructure2, derivativeStructure2);
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure1));
      assertEquals((-1.0), derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      long long0 = derivativeStructure0.round();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      int int0 = derivativeStructure0.getExponent();
      assertEquals((-1023), int0);
  }
}
