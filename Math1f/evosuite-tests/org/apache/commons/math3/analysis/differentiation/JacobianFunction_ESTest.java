/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:00:53 GMT 2022
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.differentiation.JacobianFunction;
import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JacobianFunction_ESTest extends JacobianFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[0];
      MultivariateDifferentiableVectorFunction multivariateDifferentiableVectorFunction0 = mock(MultivariateDifferentiableVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(derivativeStructureArray0).when(multivariateDifferentiableVectorFunction0).value(any(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class));
      JacobianFunction jacobianFunction0 = new JacobianFunction(multivariateDifferentiableVectorFunction0);
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = jacobianFunction0.value(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[1];
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(9.51955, 9.51955, 9.51955).when(derivativeStructure0).getPartialDerivative(any(int[].class));
      derivativeStructureArray0[0] = derivativeStructure0;
      MultivariateDifferentiableVectorFunction multivariateDifferentiableVectorFunction0 = mock(MultivariateDifferentiableVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(derivativeStructureArray0).when(multivariateDifferentiableVectorFunction0).value(any(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class));
      JacobianFunction jacobianFunction0 = new JacobianFunction(multivariateDifferentiableVectorFunction0);
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = jacobianFunction0.value(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[1];
      MultivariateDifferentiableVectorFunction multivariateDifferentiableVectorFunction0 = mock(MultivariateDifferentiableVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(derivativeStructureArray0).when(multivariateDifferentiableVectorFunction0).value(any(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[].class));
      JacobianFunction jacobianFunction0 = new JacobianFunction(multivariateDifferentiableVectorFunction0);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        jacobianFunction0.value(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.JacobianFunction", e);
      }
  }
}
