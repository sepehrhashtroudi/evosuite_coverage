/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 23:52:15 GMT 2022
 */

package org.apache.commons.math3.analysis.integration.gauss;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Constant;
import org.apache.commons.math3.analysis.function.Identity;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.analysis.function.Ulp;
import org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SymmetricGaussIntegrator_ESTest extends SymmetricGaussIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-513.1);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 900.6515729196574;
      doubleArray0[4] = 3883.1743;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
      Acos acos0 = new Acos();
      double double0 = symmetricGaussIntegrator0.integrate(acos0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-513.1);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 900.6515729196574;
      doubleArray0[4] = 3883.1743;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
      Tan tan0 = new Tan();
      double double0 = symmetricGaussIntegrator0.integrate(tan0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
      Ulp ulp0 = new Ulp();
      double double0 = symmetricGaussIntegrator0.integrate(ulp0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 652.8;
      doubleArray0[1] = 2446.459208057179;
      doubleArray0[2] = 3036.0954500779;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
      Logit logit0 = new Logit();
      // Undeclared exception!
      try { 
        symmetricGaussIntegrator0.integrate(logit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 652.8 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-207.958807068);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        symmetricGaussIntegrator0.integrate((UnivariateFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[6];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray1);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>((double[]) null, (double[]) null);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-513.1);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 900.6515729196574;
      doubleArray0[4] = 3883.1743;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
      Constant constant0 = new Constant(1874.69);
      double double0 = symmetricGaussIntegrator0.integrate(constant0);
      assertEquals((-1918182.808), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Identity identity0 = new Identity();
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(doubleArray0, doubleArray0);
      double double0 = symmetricGaussIntegrator0.integrate(identity0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      double double0 = symmetricGaussIntegrator0.integrate(polynomialFunction0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(pair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = null;
      try {
        symmetricGaussIntegrator0 = new SymmetricGaussIntegrator(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
