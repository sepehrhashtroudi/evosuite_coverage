/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 23:41:28 GMT 2022
 */

package org.apache.commons.math3.analysis.integration.gauss;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;
import org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;
import org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussIntegratorFactory_ESTest extends GaussIntegratorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      GaussIntegrator gaussIntegrator0 = gaussIntegratorFactory0.legendreHighPrecision(1, 0.0, (-194.466569221919));
      assertEquals(1, gaussIntegrator0.getNumberOfPoints());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      gaussIntegratorFactory0.legendreHighPrecision(912, (double) 912, (double) 912);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      try { 
        gaussIntegratorFactory0.legendreHighPrecision((-1), (double) 974, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of points (-1)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      try { 
        gaussIntegratorFactory0.legendreHighPrecision(2, 185.532909571, 185.532909571);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (185.533 >= 185.533)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      gaussIntegratorFactory0.legendreHighPrecision(16);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      try { 
        gaussIntegratorFactory0.legendreHighPrecision((-339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of points (-339)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      gaussIntegratorFactory0.legendre(451, (double) 451, (double) 451);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      try { 
        gaussIntegratorFactory0.legendre((-2483), (-1.0), (double) (-2483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of points (-2,483)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      try { 
        gaussIntegratorFactory0.legendre(2, (double) 2, (-2765.574974766518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-582.857 >= -2,180.718)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      try { 
        gaussIntegratorFactory0.legendre(4769, (double) 4769, 0.0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      gaussIntegratorFactory0.legendre(16);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      try { 
        gaussIntegratorFactory0.legendre((-1442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of points (-1,442)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      gaussIntegratorFactory0.hermite(153);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      try { 
        gaussIntegratorFactory0.hermite(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of points (0)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      // Undeclared exception!
      try { 
        gaussIntegratorFactory0.hermite(2674);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      GaussIntegrator gaussIntegrator0 = gaussIntegratorFactory0.legendre(1, (double) 1, (double) 1);
      assertEquals(1, gaussIntegrator0.getNumberOfPoints());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      SymmetricGaussIntegrator symmetricGaussIntegrator0 = gaussIntegratorFactory0.hermite(1);
      assertEquals(1, symmetricGaussIntegrator0.getNumberOfPoints());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      GaussIntegrator gaussIntegrator0 = gaussIntegratorFactory0.legendreHighPrecision(1);
      assertEquals(1, gaussIntegrator0.getNumberOfPoints());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GaussIntegratorFactory gaussIntegratorFactory0 = new GaussIntegratorFactory();
      GaussIntegrator gaussIntegrator0 = gaussIntegratorFactory0.legendre(1);
      assertEquals(1, gaussIntegrator0.getNumberOfPoints());
  }
}
