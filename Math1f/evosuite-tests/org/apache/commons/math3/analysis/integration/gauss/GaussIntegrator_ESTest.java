/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 23:40:36 GMT 2022
 */

package org.apache.commons.math3.analysis.integration.gauss;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Abs;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Identity;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.function.Rint;
import org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussIntegrator_ESTest extends GaussIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Acos acos0 = new Acos();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = Double.NaN;
      doubleArray0[3] = (double) 120;
      doubleArray0[4] = Double.NaN;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      double double0 = gaussIntegrator0.integrate(acos0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      Rint rint0 = new Rint();
      double double0 = gaussIntegrator0.integrate(rint0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.2384658100355657E72;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      Identity identity0 = new Identity();
      double double0 = gaussIntegrator0.integrate(identity0);
      assertEquals(1.53379756262705E144, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1091.59855995);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      Abs abs0 = new Abs();
      double double0 = gaussIntegrator0.integrate(abs0);
      assertEquals((-1191587.4160849138), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 793.8472136517094;
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      double double0 = gaussIntegrator0.getWeight(0);
      assertEquals(793.8472136517094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3481.8226677);
      doubleArray0[2] = 1.0;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      double double0 = gaussIntegrator0.getWeight(0);
      assertEquals((-3481.8226677), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 793.8472136517094;
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      double double0 = gaussIntegrator0.getPoint(0);
      assertEquals(793.8472136517094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3481.8226677);
      doubleArray0[2] = 1.0;
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      double double0 = gaussIntegrator0.getPoint(0);
      assertEquals((-3481.8226677), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      Logit logit0 = new Logit(682.55077438, 1.0);
      // Undeclared exception!
      try { 
        gaussIntegrator0.integrate(logit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 out of [682.551, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        gaussIntegrator0.integrate((UnivariateFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      // Undeclared exception!
      try { 
        gaussIntegrator0.getWeight(120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(pair0);
      // Undeclared exception!
      try { 
        gaussIntegrator0.getPoint((-1962));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1962
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator(pair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray0);
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator(pair0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[8];
      Pair<double[], double[]> pair0 = new Pair<double[], double[]>(doubleArray0, doubleArray1);
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator(pair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 8
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      double double0 = gaussIntegrator0.getPoint(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      double double0 = gaussIntegrator0.getWeight(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GaussIntegrator gaussIntegrator0 = new GaussIntegrator(doubleArray0, doubleArray0);
      int int0 = gaussIntegrator0.getNumberOfPoints();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GaussIntegrator gaussIntegrator0 = null;
      try {
        gaussIntegrator0 = new GaussIntegrator((Pair<double[], double[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator", e);
      }
  }
}
