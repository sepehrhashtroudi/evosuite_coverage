/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:04:00 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Log;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Log_ESTest extends Log_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Log log0 = new Log();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 1);
      DerivativeStructure derivativeStructure1 = log0.value(derivativeStructure0);
      assertEquals(1024, derivativeStructure1.getExponent());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Log log0 = new Log();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(2190, 0, 779, 2190.0);
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0, derivativeStructure0, 2654.854934239, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = new DerivativeStructure(2190.0, derivativeStructure1, (-2738.551997609), derivativeStructure1, 0.0, derivativeStructure0, 2190.0, derivativeStructure0);
      DerivativeStructure derivativeStructure3 = DerivativeStructure.atan2(derivativeStructure0, derivativeStructure2);
      DerivativeStructure derivativeStructure4 = log0.value(derivativeStructure3);
      assertEquals(0, derivativeStructure4.getExponent());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Log log0 = new Log();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow(0.0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = log0.value(derivativeStructure1);
      assertNotSame(derivativeStructure1, derivativeStructure2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Log log0 = new Log();
      double double0 = log0.value(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Log log0 = new Log();
      double double0 = log0.value(1.2518336772918701);
      assertEquals(0.22460941823962444, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Log log0 = new Log();
      // Undeclared exception!
      try { 
        log0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Log", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Log log0 = new Log();
      double double0 = log0.value((double) 0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Log log0 = new Log();
      UnivariateFunction univariateFunction0 = log0.derivative();
      assertNotNull(univariateFunction0);
  }
}
