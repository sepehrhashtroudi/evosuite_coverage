/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:26:57 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sigmoid_ESTest extends Sigmoid_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(627, 0, (-532.7609));
      DerivativeStructure derivativeStructure1 = new DerivativeStructure(0.0, derivativeStructure0, (-4229.6011863887425), derivativeStructure0);
      sigmoid0.value(derivativeStructure1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sigmoid.Parametric sigmoid_Parametric0 = new Sigmoid.Parametric();
      double[] doubleArray0 = new double[1];
      try { 
        sigmoid_Parametric0.gradient(606.90436080035, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.analysis.function.Sigmoid$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sigmoid.Parametric sigmoid_Parametric0 = new Sigmoid.Parametric();
      double[] doubleArray0 = new double[2];
      sigmoid_Parametric0.gradient((-815.2163065016), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid((-3.912427573594197E-9), (-3.912427573594197E-9));
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(329, 0, 0, (-3.912427573594197E-9));
      sigmoid0.value(derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1);
      sigmoid0.value(derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      sigmoid0.value((-2149.9673));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid((-1763.6246205238), (-1763.6246205238));
      sigmoid0.value((double) 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      // Undeclared exception!
      try { 
        sigmoid0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Sigmoid", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid((-1763.6246205238), (-1763.6246205238));
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 235);
      // Undeclared exception!
      sigmoid0.value(derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0.4574742913246155);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.hypot(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = new DerivativeStructure(0.4574742913246155, derivativeStructure1, 0, derivativeStructure0, (-1471.957589977923), derivativeStructure1, 1.0, derivativeStructure1);
      DerivativeStructure derivativeStructure3 = sigmoid0.value(derivativeStructure2);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sigmoid.Parametric sigmoid_Parametric0 = new Sigmoid.Parametric();
      double[] doubleArray0 = new double[6];
      try { 
        sigmoid_Parametric0.value(3.0838987014395355E-121, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.analysis.function.Sigmoid$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sigmoid.Parametric sigmoid_Parametric0 = new Sigmoid.Parametric();
      try { 
        sigmoid_Parametric0.gradient(987.8916297674336, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.analysis.function.Sigmoid$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      UnivariateFunction univariateFunction0 = sigmoid0.derivative();
      assertNotNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid();
      double double0 = sigmoid0.value(987.8916297674336);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sigmoid.Parametric sigmoid_Parametric0 = new Sigmoid.Parametric();
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = sigmoid_Parametric0.gradient(1.4033570289611816, doubleArray0);
      assertArrayEquals(new double[] {0.19728394199860766, 0.8027160580013923}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sigmoid.Parametric sigmoid_Parametric0 = new Sigmoid.Parametric();
      double[] doubleArray0 = new double[2];
      double double0 = sigmoid_Parametric0.value(1.0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }
}
