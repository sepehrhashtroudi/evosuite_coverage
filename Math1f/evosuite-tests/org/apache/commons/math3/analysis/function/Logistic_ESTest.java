/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:22:34 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Logistic;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Logistic_ESTest extends Logistic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-1.0);
      try { 
        logistic_Parametric0.value((-1.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[7];
      try { 
        logistic_Parametric0.value(0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 2104.022;
      doubleArray0[5] = 2104.022;
      double[] doubleArray1 = logistic_Parametric0.gradient((-1282.5945), doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 1266.53294571;
      doubleArray0[5] = 1266.53294571;
      double[] doubleArray1 = logistic_Parametric0.gradient(1266.53294571, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, -0.0, 1.0, 0.0, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 917.5;
      double double0 = logistic_Parametric0.value((-9.598330731102836E-8), doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logistic logistic0 = new Logistic(249.40400993389, 9.420348186357043E-9, 9.420348186357043E-9, 9.420348186357043E-9, 0.0, 249.40400993389);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0.0);
      DerivativeStructure derivativeStructure1 = logistic0.value(derivativeStructure0);
      assertEquals(249.40400992446968, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logistic logistic0 = new Logistic((-4.7208848667217906E221), (-4.7208848667217906E221), (-4.7208848667217906E221), (-4.7208848667217906E221), (-4.7208848667217906E221), 1.2953605651855469);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = logistic0.value(derivativeStructure0);
      assertEquals((-9223372036854775808L), derivativeStructure1.round());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logistic logistic0 = new Logistic(0.0, 0.0, 1.6215758323669434, 657.48276068805, 873.0, 657.48276068805);
      double double0 = logistic0.value(873.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logistic logistic0 = new Logistic((-1.0), (-1.0), (-1.2489460589853119E153), (-1.2489460589853119E153), (-75.208462073541), 2.2937832658080656E27);
      double double0 = logistic0.value((-75.208462073541));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logistic logistic0 = new Logistic(1135.0, (-1011.1994), (-593.9205687), (-593.9205687), (-2136.0), 0.5579402446746826);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4, 4);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.atan2(derivativeStructure0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = logistic0.value(derivativeStructure1);
      // Undeclared exception!
      logistic0.value(derivativeStructure2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logistic logistic0 = new Logistic(249.40400993389, 9.420348186357043E-9, 9.420348186357043E-9, 9.420348186357043E-9, 0.0, 249.40400993389);
      // Undeclared exception!
      try { 
        logistic0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[1];
      try { 
        logistic_Parametric0.value(1944.27199, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      try { 
        logistic_Parametric0.gradient(0.0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logistic logistic0 = null;
      try {
        logistic0 = new Logistic((-3365.0), 927.42072493, 927.42072493, (-2070.81184666), (-605.5655019463685), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logistic logistic0 = new Logistic(0.0, 0.0, 0.0, 0.0, 861.11944981877, 861.11944981877);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = logistic0.value(derivativeStructure0);
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logistic logistic0 = new Logistic(1944.27199, 259.676751005, 1944.27199, 259.676751005, (-558.3497027), 1.1725710340687719E-255);
      UnivariateFunction univariateFunction0 = logistic0.derivative();
      assertNotNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logistic logistic0 = new Logistic(1944.27199, 259.676751005, 1944.27199, 259.676751005, (-558.3497027), 1.1725710340687719E-255);
      double double0 = logistic0.value(408.0);
      assertEquals(1944.2719900000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[6];
      try { 
        logistic_Parametric0.gradient((-558.3497027), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic$Parametric", e);
      }
  }
}
