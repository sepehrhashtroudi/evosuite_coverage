/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:36:58 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Logit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Logit_ESTest extends Logit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logit logit0 = new Logit();
      double double0 = logit0.value(2.2036094805348692E-9);
      assertEquals((-19.933169145841717), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logit logit0 = new Logit();
      try { 
        logit0.value(359.4311552514);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 359.431 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[1];
      try { 
        logit_Parametric0.value(382.8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1447.7916846504);
      double[] doubleArray1 = logit_Parametric0.gradient(0.0, doubleArray0);
      assertArrayEquals(new double[] {(-6.907071028256881E-4), Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logit logit0 = new Logit((-3553.653), 1.0);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(133, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow(1.3240710866573994E38, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = new DerivativeStructure((-1559.088293610911), derivativeStructure1, 0, derivativeStructure1, (-3553.653), derivativeStructure0, (-1559.088293610911), derivativeStructure1);
      DerivativeStructure derivativeStructure3 = logit0.value(derivativeStructure2);
      assertEquals((-1.9688836980383808), derivativeStructure3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logit logit0 = new Logit();
      double double0 = logit0.value(1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logit logit0 = new Logit((-3553.653), 1.0);
      double double0 = logit0.value((-3553.653));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logit logit0 = new Logit((-1934.0), 521.697443);
      // Undeclared exception!
      try { 
        logit0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logit logit0 = new Logit(0.0, 0.0);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 1, 0, 0);
      DerivativeStructure derivativeStructure1 = logit0.value(derivativeStructure0);
      assertEquals(Double.NaN, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logit logit0 = new Logit();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = logit0.value(derivativeStructure0);
      assertEquals(Double.NEGATIVE_INFINITY, derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logit logit0 = new Logit((-3553.653), 1.0);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(133, 0);
      DerivativeStructure derivativeStructure1 = logit0.value(derivativeStructure0);
      try { 
        logit0.value(derivativeStructure1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8.176 out of [-3,553.653, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logit logit0 = new Logit();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1394, 0.0);
      DerivativeStructure derivativeStructure1 = logit0.value(derivativeStructure0);
      assertEquals((-9223372036854775808L), derivativeStructure1.round());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logit logit0 = new Logit();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow(1563.0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = new DerivativeStructure((-1.0), derivativeStructure1, 3.0573102223682595E264, derivativeStructure0, (-1.0), derivativeStructure0, 0.0, derivativeStructure1);
      try { 
        logit0.value(derivativeStructure2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        logit_Parametric0.value(1.2312228679656982, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1.231 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1267.23186614916);
      double double0 = logit_Parametric0.value((-1267.23186614916), doubleArray0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[9];
      try { 
        logit_Parametric0.gradient(0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      try { 
        logit_Parametric0.gradient(0.0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logit logit0 = new Logit();
      UnivariateFunction univariateFunction0 = logit0.derivative();
      assertNotNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logit logit0 = new Logit(0.0, 0.0);
      try { 
        logit0.value((-1267.23186614916));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,267.232 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logit.Parametric logit_Parametric0 = new Logit.Parametric();
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = logit_Parametric0.gradient(2510.840383773061, doubleArray0);
      assertArrayEquals(new double[] {(-3.982730270162739E-4), (-3.982730270162739E-4)}, doubleArray1, 0.01);
  }
}
