/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:20:57 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HarmonicOscillator_ESTest extends HarmonicOscillator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-879.05), 0.0, 2.791031173360063E-281);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(3, 3, 951.7833973139461);
      DerivativeStructure derivativeStructure1 = harmonicOscillator0.value(derivativeStructure0);
      assertEquals((-879.05), derivativeStructure1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-2351.0), (-2351.0), (-2351.0));
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 1);
      DerivativeStructure derivativeStructure1 = harmonicOscillator0.value(derivativeStructure0);
      assertEquals((-1090.0221518325986), derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[0];
      try { 
        harmonicOscillator_Parametric0.value(0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1496.70430955011;
      doubleArray0[1] = 3449.1382317062066;
      double[] doubleArray1 = harmonicOscillator_Parametric0.gradient(1556.70786088, doubleArray0);
      assertArrayEquals(new double[] {(-0.11780629303650736), 2313707.106398788, 1486.282150005242}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1330.216637998;
      double[] doubleArray1 = harmonicOscillator_Parametric0.gradient(0.0, doubleArray0);
      assertArrayEquals(new double[] {(-0.24532100025490164), 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1.0);
      double double0 = harmonicOscillator_Parametric0.value((-2960.39514523), doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-811.9963530255878);
      double double0 = harmonicOscillator_Parametric0.value((-2960.39514523), doubleArray0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.375, (-1.0), 540.77584);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 0, 660.149914);
      DerivativeStructure derivativeStructure1 = harmonicOscillator0.value(derivativeStructure0);
      assertEquals(1.3749714264304027, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.0, 0.0, 0.0);
      double double0 = harmonicOscillator0.value(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.0, 1.0, 1.0);
      double double0 = harmonicOscillator0.value(1.7827257129423813E-8);
      assertEquals(0.54030229086702, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-1.0), 0.902267575263977, (-1.0));
      // Undeclared exception!
      try { 
        harmonicOscillator0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.HarmonicOscillator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.0, 0.0, 0.0);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 15);
      DerivativeStructure derivativeStructure1 = harmonicOscillator0.value(derivativeStructure0);
      assertEquals((-1023), derivativeStructure1.getExponent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[9];
      try { 
        harmonicOscillator_Parametric0.value(0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      try { 
        harmonicOscillator_Parametric0.gradient((-473.0), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.0, 0.0, 0.0);
      UnivariateFunction univariateFunction0 = harmonicOscillator0.derivative();
      assertNotNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-879.05), 0.0, 2.791031173360063E-281);
      double double0 = harmonicOscillator0.value((-186.9859));
      assertEquals((-879.05), double0, 0.01);
  }
}
