/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:32:09 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Tanh;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tanh_ESTest extends Tanh_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow((-5904.643), derivativeStructure0);
      DerivativeStructure derivativeStructure2 = new DerivativeStructure((-5904.643), derivativeStructure1, 0.0, derivativeStructure0, (-1634.0), derivativeStructure0);
      DerivativeStructure derivativeStructure3 = tanh0.value(derivativeStructure2);
      assertNotSame(derivativeStructure3, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 1, 1);
      DerivativeStructure derivativeStructure1 = tanh0.value(derivativeStructure0);
      assertEquals(0.7615941559557649, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0.0);
      DerivativeStructure derivativeStructure1 = tanh0.value(derivativeStructure0);
      assertNotSame(derivativeStructure0, derivativeStructure1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1859, 0);
      DerivativeStructure derivativeStructure1 = tanh0.value(derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      double double0 = tanh0.value(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      double double0 = tanh0.value((-1552.643));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 945);
      // Undeclared exception!
      tanh0.value(derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      // Undeclared exception!
      try { 
        tanh0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Tanh", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      double double0 = tanh0.value(676.5485793296363);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Tanh tanh0 = new Tanh();
      UnivariateFunction univariateFunction0 = tanh0.derivative();
      assertNotNull(univariateFunction0);
  }
}
