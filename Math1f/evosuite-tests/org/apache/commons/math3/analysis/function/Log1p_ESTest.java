/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:24:20 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Log1p;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Log1p_ESTest extends Log1p_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      double[] doubleArray0 = new double[1];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 900, doubleArray0);
      DerivativeStructure derivativeStructure1 = log1p0.value(derivativeStructure0);
      assertEquals(0, derivativeStructure1.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-1.0));
      DerivativeStructure derivativeStructure1 = log1p0.value(derivativeStructure0);
      assertEquals(0, derivativeStructure1.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 0, 0, 235.752151);
      DerivativeStructure derivativeStructure1 = log1p0.value(derivativeStructure0);
      DerivativeStructure derivativeStructure2 = log1p0.value(derivativeStructure1);
      assertEquals(2L, derivativeStructure2.round());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      double double0 = log1p0.value(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      double double0 = log1p0.value(9.252840189663807E-148);
      assertEquals(9.252840189663807E-148, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      double double0 = log1p0.value((-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      UnivariateFunction univariateFunction0 = log1p0.derivative();
      assertNotNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      // Undeclared exception!
      try { 
        log1p0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Log1p", e);
      }
  }
}
