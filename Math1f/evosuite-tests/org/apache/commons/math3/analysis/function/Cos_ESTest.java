/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:20:03 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Cos;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cos_ESTest extends Cos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Cos cos0 = new Cos();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(233, 0, 0, (-1369.87));
      DerivativeStructure derivativeStructure1 = new DerivativeStructure((-1369.87), derivativeStructure0, (-0.49999999999999994), derivativeStructure0, (-0.49999999999999994), derivativeStructure0, 0.034626724509364305, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = new DerivativeStructure((-1369.87), derivativeStructure0, 233, derivativeStructure1);
      DerivativeStructure derivativeStructure3 = cos0.value(derivativeStructure2);
      assertEquals(233, derivativeStructure3.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Cos cos0 = new Cos();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(233, 0, 0, (-1369.87));
      DerivativeStructure derivativeStructure1 = new DerivativeStructure((-1369.87), derivativeStructure0, (-0.49999999999999994), derivativeStructure0, (-0.49999999999999994), derivativeStructure0, 0.034626724509364305, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = cos0.value(derivativeStructure1);
      assertEquals(0, derivativeStructure2.getOrder());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Cos cos0 = new Cos();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, (-2.356194490192345));
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow((-2.356194490192345), derivativeStructure0);
      DerivativeStructure derivativeStructure2 = cos0.value(derivativeStructure1);
      assertEquals(Double.NaN, derivativeStructure2.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Cos cos0 = new Cos();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1, 1);
      DerivativeStructure derivativeStructure1 = cos0.value(derivativeStructure0);
      DerivativeStructure derivativeStructure2 = cos0.value(derivativeStructure1);
      assertEquals((-1), derivativeStructure2.getExponent());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Cos cos0 = new Cos();
      double double0 = cos0.value(2760.0);
      assertEquals((-0.11062692167321057), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Cos cos0 = new Cos();
      // Undeclared exception!
      try { 
        cos0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Cos", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Cos cos0 = new Cos();
      UnivariateFunction univariateFunction0 = cos0.derivative();
      assertNotNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Cos cos0 = new Cos();
      double double0 = cos0.value((-1644.87494239152));
      assertEquals(0.24855508217223007, double0, 0.01);
  }
}
