/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 00:40:39 GMT 2022
 */

package org.apache.commons.math3.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Power;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Power_ESTest extends Power_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Power power0 = new Power((-1.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(324, 0, doubleArray0);
      DerivativeStructure derivativeStructure1 = power0.value(derivativeStructure0);
      assertEquals(0, derivativeStructure1.getOrder());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Power power0 = new Power((-4851.52));
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(848, 0, 0, 0.0);
      DerivativeStructure derivativeStructure1 = power0.value(derivativeStructure0);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Power power0 = new Power((-1033.779));
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow((-1033.779), derivativeStructure0);
      DerivativeStructure derivativeStructure2 = power0.value(derivativeStructure1);
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Power power0 = new Power(1.0);
      double double0 = power0.value(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Power power0 = new Power((-1.0));
      double double0 = power0.value((-3210.633961129683));
      assertEquals((-3.114649667656737E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Power power0 = new Power((-431.890175139));
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 2966, (-431.890175139));
      DerivativeStructure derivativeStructure1 = power0.value(derivativeStructure0);
      power0.value(derivativeStructure1);
      power0.value(derivativeStructure1);
      // Undeclared exception!
      power0.value(derivativeStructure0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Power power0 = new Power((-1033.779));
      // Undeclared exception!
      try { 
        power0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.function.Power", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Power power0 = new Power(23.10895024675247);
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0);
      DerivativeStructure derivativeStructure1 = power0.value(derivativeStructure0);
      assertEquals((-1023), derivativeStructure1.getExponent());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Power power0 = new Power(23.10895024675247);
      double double0 = power0.value(23.10895024675247);
      assertEquals(3.277398079701206E31, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Power power0 = new Power((-431.890175139));
      UnivariateFunction univariateFunction0 = power0.derivative();
      assertNotNull(univariateFunction0);
  }
}
