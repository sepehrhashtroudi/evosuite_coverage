/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:51:09 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.MersenneTwister;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MersenneTwister_ESTest extends MersenneTwister_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1235L));
      assertNotNull(mersenneTwister0);
      
      int[] intArray0 = new int[3];
      int int0 = mersenneTwister0.next(26);
      assertEquals(36528299, int0);
      
      int int1 = mersenneTwister0.next(1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      intArray0[0] = 0;
      mersenneTwister0.clear();
      intArray0[1] = 0;
      double double0 = mersenneTwister0.nextDouble();
      assertEquals(0.2889237081148577, double0, 0.01);
      
      mersenneTwister0.setSeed(32);
      mersenneTwister0.setSeed(0L);
      intArray0[2] = 32;
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      mersenneTwister0.setSeed((long) 0);
      mersenneTwister0.setSeed(772L);
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int2 = mersenneTwister0.next(1);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      mersenneTwister0.setSeed(0L);
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      mersenneTwister0.setSeed((long) 32);
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {0, 0, 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      mersenneTwister0.setSeed(36528299);
      mersenneTwister0.setSeed(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      MersenneTwister mersenneTwister0 = null;
      try {
        mersenneTwister0 = new MersenneTwister(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mersenneTwister0.setSeed(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2693L);
      assertNotNull(mersenneTwister0);
      
      float float0 = mersenneTwister0.nextFloat();
      assertEquals(0.813146F, float0, 0.01F);
      
      mersenneTwister0.clear();
      float float1 = mersenneTwister0.nextFloat();
      assertEquals(0.682945F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      int int0 = mersenneTwister0.next(32);
      assertEquals((-58207851), int0);
      
      mersenneTwister0.setSeed((-58207851));
      mersenneTwister0.setSeed(32);
      mersenneTwister0.setSeed(2693L);
      mersenneTwister0.setSeed(18);
      mersenneTwister0.setSeed(2693L);
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertTrue(boolean0);
      
      long long0 = mersenneTwister0.nextLong(2693L);
      assertEquals(2355L, long0);
      
      mersenneTwister0.clear();
      float float2 = mersenneTwister0.nextFloat();
      assertEquals(0.14559889F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      mersenneTwister0.setSeed(2693L);
      int[] intArray0 = null;
      mersenneTwister0.setSeed(18);
      mersenneTwister0.setSeed((int[]) null);
      double double0 = mersenneTwister0.nextDouble();
      assertEquals(0.2656148816684638, double0, 0.01);
      
      mersenneTwister0.setSeed((-841));
      mersenneTwister0.setSeed((int[]) null);
      double double1 = mersenneTwister0.nextDouble();
      assertEquals(0.2656148816684638, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      mersenneTwister0.setSeed((-4547));
      mersenneTwister0.setSeed((int[]) null);
      mersenneTwister0.setSeed((int[]) null);
      mersenneTwister0.setSeed((int[]) null);
      mersenneTwister0.setSeed((int[]) null);
      // Undeclared exception!
      mersenneTwister0.setSeed(2355L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      mersenneTwister0.clear();
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertFalse(boolean0);
      
      mersenneTwister0.clear();
      int int0 = mersenneTwister0.next(1);
      assertEquals(1, int0);
      
      int int1 = mersenneTwister0.next(1);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-143);
      intArray0[1] = 2443;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertNotNull(mersenneTwister0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed((-143));
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.clear();
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      long long0 = mersenneTwister0.nextLong();
      assertEquals((-6708797639822566203L), long0);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed((-143));
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = mersenneTwister0.nextInt(2242);
      assertEquals(410, int0);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed((-3136L));
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = mersenneTwister0.nextBoolean();
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, intArray0.length);
      
      double double0 = mersenneTwister0.nextGaussian();
      assertEquals((-1.1305423728056814), double0, 0.01);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed((long) (-143));
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed((-6708797639822566203L));
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = mersenneTwister0.next(2443);
      assertEquals(1310, int1);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed(2443);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int2 = mersenneTwister0.next(2443);
      assertEquals(567, int2);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed((-681L));
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
      
      mersenneTwister0.setSeed(1812433253L);
      assertArrayEquals(new int[] {(-143), 2443}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1L);
      assertNotNull(mersenneTwister0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3728);
      intArray0[1] = 217;
      intArray0[2] = 0;
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {(-3728), 217, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = mersenneTwister0.next(15);
      assertEquals(22655, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1243L);
      assertNotNull(mersenneTwister0);
      
      mersenneTwister0.setSeed(1705L);
      int int0 = (-984);
      try { 
        mersenneTwister0.nextLong((long) (-984));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -984 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      long long0 = mersenneTwister0.nextLong();
      assertEquals(4899729490359568901L, long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)43;
      mersenneTwister0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)11, (byte)127}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      mersenneTwister0.setSeed(2);
      int int0 = mersenneTwister0.next(2);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 276;
      intArray0[4] = 1;
      intArray0[5] = 1;
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {1, 2, 2, 276, 1, 1, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      intArray0[6] = 1;
      mersenneTwister0.clear();
      intArray0[7] = 2;
      intArray0[8] = 2;
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {1, 2, 2, 276, 1, 1, 1, 2, 2}, intArray0);
      assertEquals(9, intArray0.length);
      
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {1, 2, 2, 276, 1, 1, 1, 2, 2}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int1 = mersenneTwister0.next(0);
      assertEquals((-1010155681), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      int[] intArray0 = new int[7];
      try { 
        mersenneTwister0.nextLong(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(104L);
      assertNotNull(mersenneTwister0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3379L);
      assertNotNull(mersenneTwister0);
      
      float float0 = mersenneTwister0.nextFloat();
      assertEquals(0.28524494F, float0, 0.01F);
      
      int int0 = mersenneTwister0.nextInt();
      assertEquals((-916620020), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-916620020);
      intArray0[1] = (-916620020);
      intArray0[2] = (-916620020);
      intArray0[3] = (-916620020);
      mersenneTwister0.setSeed(intArray0);
      assertArrayEquals(new int[] {(-916620020), (-916620020), (-916620020), (-916620020)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int1 = mersenneTwister0.next(0);
      assertEquals(1165564900, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1));
      long long0 = mersenneTwister0.nextLong();
      assertEquals((-4001699307210888657L), long0);
      
      mersenneTwister0.nextBoolean();
      mersenneTwister0.next((-1));
      mersenneTwister0.setSeed(1813046880);
      int int0 = mersenneTwister0.next(0);
      assertEquals(1869028543, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)81;
      mersenneTwister0.nextBytes(byteArray0);
      mersenneTwister0.nextBoolean();
      mersenneTwister0.setSeed(0);
      mersenneTwister0.setSeed((int) (byte)81);
      mersenneTwister0.setSeed((-1));
      int int1 = mersenneTwister0.next((-1));
      assertEquals(1681624535, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 954;
      intArray0[3] = (-1727483681);
      intArray0[4] = 2;
      intArray0[5] = (-227);
      mersenneTwister0.setSeed(intArray0);
      mersenneTwister0.setSeed((int[]) null);
  }
}
