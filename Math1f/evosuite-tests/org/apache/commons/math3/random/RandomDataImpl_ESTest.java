/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:35:39 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.NoSuchProviderException;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.distribution.BetaDistribution;
import org.apache.commons.math3.distribution.ChiSquaredDistribution;
import org.apache.commons.math3.distribution.EnumeratedRealDistribution;
import org.apache.commons.math3.distribution.IntegerDistribution;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.RealDistribution;
import org.apache.commons.math3.distribution.WeibullDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataImpl;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomDataImpl_ESTest extends RandomDataImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextBeta((-788.0), 490.7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, 0.097]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(jDKRandomGenerator0);
      int int0 = randomDataImpl0.nextZipf(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      WeibullDistribution weibullDistribution0 = new WeibullDistribution(1.0E-6, 1.0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextWeibull(1.0E-6, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      double double0 = randomDataImpl0.nextUniform((-1082.203), 3842.664443714128, false);
      assertEquals(1807.2439031300914, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well44497a well44497a0 = new Well44497a(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well44497a0);
      double double0 = randomDataImpl0.nextUniform((-2135.6753424), 0.0, true);
      assertEquals((-1875.544102825939), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-675L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      double double0 = randomDataImpl0.nextUniform(1.0E-6, (double) 1583510194);
      assertEquals(5.838238959259056E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextUniform((-2418.7), 0.0);
      assertEquals((-235.50938316912826), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      iSAACRandom0.next(407);
      iSAACRandom0.nextInt(407);
      iSAACRandom0.nextInt(13);
      double double0 = randomDataImpl0.nextChiSquare(3853.8);
      double double1 = randomDataImpl0.nextT(177);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(607L);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      double double0 = randomDataImpl0.nextT(607L);
      assertEquals((-0.5212236652507742), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      long long0 = randomDataImpl0.nextSecureLong(0L, 2177L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      long long0 = randomDataImpl0.nextSecureLong(0L, 4294967291L);
      assertEquals(16777216L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-5163L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937a0);
      long long0 = randomDataImpl0.nextSecureLong((-1L), 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well44497a well44497a0 = new Well44497a(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well44497a0);
      int int0 = randomDataImpl0.nextSecureInt(604, 918);
      assertEquals(604, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1408);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well44497a0);
      String string0 = randomDataImpl0.nextSecureHexString(1408);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(jDKRandomGenerator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      Object[] objectArray0 = randomDataImpl0.nextSample(linkedList0, 1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      long long0 = randomDataImpl0.nextPoisson(3.633404807819848E-9);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      int int0 = randomDataImpl0.nextPascal(1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      long long0 = randomDataImpl0.nextLong((-1L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937a0);
      long long0 = randomDataImpl0.nextLong(134L, 2211);
      assertEquals(1489L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      long long0 = randomDataImpl0.nextLong((-2324L), 546L);
      assertEquals((-1148L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-2644281811660520851L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      WeibullDistribution weibullDistribution0 = new WeibullDistribution(well1024a0, 1.3790154522394582E-163, 6.639677673630215E-36, 902.790438518006);
      double double0 = randomDataImpl0.nextInversionDeviate((RealDistribution) weibullDistribution0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-675L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      Well44497b well44497b0 = new Well44497b(0);
      ChiSquaredDistribution chiSquaredDistribution0 = new ChiSquaredDistribution(well44497b0, 1617.57998447795, 0);
      double double0 = randomDataImpl0.nextInversionDeviate((RealDistribution) chiSquaredDistribution0);
      assertEquals(1597.920025838459, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(5984);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well44497a0);
      NormalDistribution normalDistribution0 = new NormalDistribution(1.0, 5984);
      double double0 = randomDataImpl0.nextInversionDeviate((RealDistribution) normalDistribution0);
      assertEquals((-9901.210741456482), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937a0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = randomDataImpl0.nextInversionDeviate((IntegerDistribution) pascalDistribution0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well44497a0);
      int int0 = randomDataImpl0.nextInt((-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      int int0 = randomDataImpl0.nextInt(0, 1634);
      assertEquals(240, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      int int0 = randomDataImpl0.nextInt((-506), 0);
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      int int0 = randomDataImpl0.nextHypergeometric(1374, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      int int0 = randomDataImpl0.nextHypergeometric(4, 4, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextGaussian((-751), 1547.4446728343576);
      assertEquals((-1126.446300530552), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextGamma(7.675780395028194E-8, 7.675780395028194E-8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 3840;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      double double0 = randomDataImpl0.nextF(4.7131849857076246E-8, 639.53492063);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextF(4581.72, 4581.72);
      assertEquals(1.0390600898216986, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-675L));
      mersenneTwister0.nextInt();
      mersenneTwister0.nextBoolean();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      double double0 = randomDataImpl0.nextChiSquare(1.0E-9);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      double double0 = randomDataImpl0.nextCauchy(1.0, 1.0);
      assertEquals((-13.561321489250671), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      int int0 = randomDataImpl0.nextBinomial(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextBeta(2953.30356, 2953.30356);
      assertEquals(0.5084357184223112, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.setSecureAlgorithm("cCMj;/g+[z!JOAr{", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextZipf(0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (0)
         //
         verifyException("org.apache.commons.math3.distribution.ZipfDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextWeibull((-563.2453679), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (-563.245)
         //
         verifyException("org.apache.commons.math3.distribution.WeibullDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextT((-1468.601502095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,468.602)
         //
         verifyException("org.apache.commons.math3.distribution.TDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      try { 
        randomDataImpl0.nextSecureInt(1659, (-1696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1,659) must be strictly less than upper bound (-1,696)
         //
         verifyException("org.apache.commons.math3.distribution.UniformIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(607L);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      try { 
        randomDataImpl0.nextSecureHexString((-654));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-654)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(jDKRandomGenerator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        randomDataImpl0.nextSample(linkedList0, 2228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,228) exceeds collection size (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well512a0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextSample((Collection<?>) null, 3125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      randomDataImpl0.nextPoisson(1844501.786893578);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      try { 
        randomDataImpl0.nextPoisson((-1220.001528864981));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mean (-1,220.002)
         //
         verifyException("org.apache.commons.math3.distribution.PoissonDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      randomDataImpl0.nextPermutation(10000000, 10000000);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      try { 
        randomDataImpl0.nextPermutation(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // permutation size (0
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextPermutation((-14), 810);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // permutation size (810) exceeds permuation domain (-14)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      try { 
        randomDataImpl0.nextPascal((-1182), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,182)
         //
         verifyException("org.apache.commons.math3.distribution.PascalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well512a0);
      try { 
        randomDataImpl0.nextPascal(1927, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.PascalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-675L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(mersenneTwister0);
      Well44497b well44497b0 = new Well44497b((-11));
      ChiSquaredDistribution chiSquaredDistribution0 = new ChiSquaredDistribution(well44497b0, 1617.57998447795, (-11));
      // Undeclared exception!
      randomDataImpl0.nextInversionDeviate((RealDistribution) chiSquaredDistribution0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      BetaDistribution betaDistribution0 = new BetaDistribution((-1.0), (-1.0), (-602.39));
      try { 
        randomDataImpl0.nextInversionDeviate((RealDistribution) betaDistribution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, 0.097]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextInversionDeviate((RealDistribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(jDKRandomGenerator0);
      byte[] byteArray0 = new byte[3];
      jDKRandomGenerator0.nextBytes(byteArray0);
      jDKRandomGenerator0.nextBytes(byteArray0);
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2.147483647E9);
      // Undeclared exception!
      randomDataImpl0.nextInversionDeviate((IntegerDistribution) poissonDistribution0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3.166460039752169, 0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextInversionDeviate((IntegerDistribution) poissonDistribution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextInversionDeviate((IntegerDistribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextHypergeometric(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextHexString((-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-32,768)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextGaussian(1.0E-9, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well1024a0);
      try { 
        randomDataImpl0.nextGamma(0.0, 1.7976931348623157E308);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (0)
         //
         verifyException("org.apache.commons.math3.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well19937a well19937a0 = new Well19937a(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937a0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextF(4.6562769567905925E256, 4.6562769567905925E256);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value 0.5
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextF(4.9E-324, 163L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(jDKRandomGenerator0);
      // Undeclared exception!
      randomDataImpl0.nextExponential(3503.3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextExponential((-89.625318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mean (-89.625)
         //
         verifyException("org.apache.commons.math3.distribution.ExponentialDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      randomDataImpl0.nextChiSquare(1.8112388823726723E41);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextChiSquare((-1192.279863592734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (-596.14)
         //
         verifyException("org.apache.commons.math3.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextChiSquare(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.743, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextCauchy((-1315.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scale (0)
         //
         verifyException("org.apache.commons.math3.distribution.CauchyDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      try { 
        randomDataImpl0.nextBinomial((-512), (-2389.6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of trials (-512)
         //
         verifyException("org.apache.commons.math3.distribution.BinomialDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[9];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextBinomial(0, 3391.1600873);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,391.16 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.BinomialDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextBeta(1.3480763914637323E214, 1.3480763914637323E214);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value 0.5
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(randomAdaptor0);
      // Undeclared exception!
      try { 
        randomDataImpl0.nextBeta(0.6487176418304443, 0.6487176418304443);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomAdaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextUniform(1.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1) must be strictly less than upper bound (1)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      // Undeclared exception!
      randomDataImpl0.nextZipf(424, 424);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(iSAACRandom0);
      try { 
        randomDataImpl0.nextSecureLong(2559L, 126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (2,559) must be strictly less than upper bound (126)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextWeibull(1.2971474580647158, 1870);
      assertEquals(3588.6782520863753, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      try { 
        randomDataImpl0.nextF(0, 582.2233137612473);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextGaussian(0.0, 1);
      assertEquals(0.7889109535650662, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextUniform(1030.753, (double) 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1,030.753) must be strictly less than upper bound (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextExponential(505);
      assertEquals(196.75374195589686, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.setSecureAlgorithm("", ">]wOptK5,");
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((byte)1);
      int int0 = randomDataImpl0.nextInversionDeviate((IntegerDistribution) poissonDistribution0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      double double0 = randomDataImpl0.nextGamma(1343.8052071, 1343.8052071);
      assertEquals(1844501.786893578, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well512a0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 768;
      EnumeratedRealDistribution enumeratedRealDistribution0 = new EnumeratedRealDistribution(doubleArray0, doubleArray0);
      try { 
        randomDataImpl0.nextInversionDeviate((RealDistribution) enumeratedRealDistribution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [768, 768]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      int int0 = randomDataImpl0.nextSecureInt((-127), 0);
      assertEquals((-127), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      randomDataImpl0.reSeed();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      RandomDataGenerator randomDataGenerator0 = randomDataImpl0.getDelegate();
      assertNotNull(randomDataGenerator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      randomDataImpl0.reSeed((long) 198);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      try { 
        randomDataImpl0.nextLong(2278L, 2278L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (2,278) must be strictly less than upper bound (2,278)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      double double0 = randomDataImpl0.nextCauchy(4.9E-324, 198);
      assertEquals(189.76574810292146, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      randomDataImpl0.reSeedSecure();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      long long0 = randomDataImpl0.nextPoisson((byte)48);
      assertEquals(41L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1057L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937a0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        randomDataImpl0.nextSample(linkedList0, (-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-94)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextInt(1870, 1870);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1,870) must be strictly less than upper bound (1,870)
         //
         verifyException("org.apache.commons.math3.distribution.UniformIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      try { 
        randomDataImpl0.nextHypergeometric(269, 0, 1634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,634) must be less than or equal to population size (269)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well512a0);
      int int0 = randomDataImpl0.nextPascal(768, 0.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      randomDataImpl0.reSeedSecure((long) 198);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      int int0 = randomDataImpl0.nextBinomial(324, 1.0);
      assertEquals(324, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1057L));
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937a0);
      int[] intArray0 = randomDataImpl0.nextPermutation(825, 825);
      assertEquals(825, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      String string0 = randomDataImpl0.nextHexString(1683);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl((RandomGenerator) null);
      // Undeclared exception!
      randomDataImpl0.nextT(9.026991921214922E30);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = new RandomDataImpl();
      // Undeclared exception!
      randomDataImpl0.nextBeta(9.97728609663656E32, 9.97728609663656E32);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      RandomDataImpl randomDataImpl0 = new RandomDataImpl(well19937c0);
      // Undeclared exception!
      randomDataImpl0.nextSecureHexString(10000000);
  }
}
