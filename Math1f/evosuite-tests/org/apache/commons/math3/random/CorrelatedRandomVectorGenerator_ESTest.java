/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:51:54 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.NormalizedRandomGenerator;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.UniformRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CorrelatedRandomVectorGenerator_ESTest extends CorrelatedRandomVectorGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, false);
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(mersenneTwister0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, array2DRowRealMatrix0, 1716.259386782, gaussianRandomGenerator0);
      double[] doubleArray2 = correlatedRandomVectorGenerator0.nextVector();
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(17, 17);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.power(0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(realMatrix0, 0.0, (NormalizedRandomGenerator) null);
      NormalizedRandomGenerator normalizedRandomGenerator0 = correlatedRandomVectorGenerator0.getGenerator();
      assertNull(normalizedRandomGenerator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(diagonalMatrix0, (-1.0), (NormalizedRandomGenerator) null);
      // Undeclared exception!
      try { 
        correlatedRandomVectorGenerator0.nextVector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Well19937a well19937a0 = new Well19937a(0L);
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, array2DRowRealMatrix0, (-1519.0), uniformRandomGenerator0);
      well19937a0.index = (-424);
      // Undeclared exception!
      try { 
        correlatedRandomVectorGenerator0.nextVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -424
         //
         verifyException("org.apache.commons.math3.random.Well19937a", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(mersenneTwister0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, diagonalMatrix0, 0.0, uniformRandomGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value 0 at index 0
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Well19937c well19937c0 = new Well19937c(0);
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937c0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, (RealMatrix) null, (-3281.7252754), uniformRandomGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      int[] intArray0 = new int[4];
      Well19937a well19937a0 = new Well19937a(intArray0);
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, diagonalMatrix0, (-1630.9543611), uniformRandomGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      Well512a well512a0 = new Well512a();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well512a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(diagonalMatrix0, 0.0, uniformRandomGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value 0 at index 0
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(jDKRandomGenerator0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator((RealMatrix) null, (-1882.229209), gaussianRandomGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Well44497b well44497b0 = new Well44497b(1664525L);
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(well44497b0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(array2DRowRealMatrix0, (-1448.1705516727), gaussianRandomGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1024, 1550);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(randomAdaptor0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(blockRealMatrix0, (-2382.7), uniformRandomGenerator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(41);
      double[] doubleArray0 = new double[1];
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(well1024a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, diagonalMatrix0, 41, gaussianRandomGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 41
         //
         verifyException("org.apache.commons.math3.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Well19937a well19937a0 = new Well19937a();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, array2DRowRealMatrix0, (-1519.0), uniformRandomGenerator0);
      NormalizedRandomGenerator normalizedRandomGenerator0 = correlatedRandomVectorGenerator0.getGenerator();
      assertSame(normalizedRandomGenerator0, uniformRandomGenerator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Well19937a well19937a0 = new Well19937a();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, array2DRowRealMatrix0, (-1519.0), uniformRandomGenerator0);
      RealMatrix realMatrix0 = correlatedRandomVectorGenerator0.getRootMatrix();
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Well19937a well19937a0 = new Well19937a();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(well19937a0);
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, array2DRowRealMatrix0, (-1519.0), uniformRandomGenerator0);
      int int0 = correlatedRandomVectorGenerator0.getRank();
      assertEquals(1, int0);
  }
}
