/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:56:54 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.NoSuchProviderException;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomDataGenerator_ESTest extends RandomDataGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well512a well512a0 = new Well512a(255L);
      assertNotNull(well512a0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well512a0);
      assertNotNull(randomDataGenerator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        randomDataGenerator0.nextSample(linkedList0, (-1132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,132)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      assertNotNull(well44497b0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      
      int[] intArray0 = randomDataGenerator0.nextPermutation(3425, 396);
      assertNotNull(intArray0);
      assertEquals(396, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well19937c0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextUniform((-1760.0), (-1760.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (-1,760) must be strictly less than upper bound (-1,760)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextGaussian(3183.985347, (-2.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (-2)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      assertNotNull(well19937c0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well19937c0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextGaussian(0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextSecureLong(1L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1) must be strictly less than upper bound (1)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextSecureHexString((-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-63)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextLong(936, 936);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (936) must be strictly less than upper bound (936)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextHexString(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      assertNotNull(well44497b0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      
      int int0 = randomDataGenerator0.nextZipf(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      long long0 = randomDataGenerator0.nextPoisson(3.3310057014599044E-156);
      assertEquals(0L, long0);
      
      double double0 = randomDataGenerator0.nextWeibull(3.3310057014599044E-156, 772.22264124206);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      float float0 = jDKRandomGenerator0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(jDKRandomGenerator0);
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextWeibull(2505.031, 2505.031);
      assertEquals(2502.7816431665706, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0L);
      assertNotNull(well19937c0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well19937c0);
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextUniform(0.0, 0.5, false);
      assertEquals(0.3716208336680039, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextUniform((-1500.80465989273), (double) 40);
      assertEquals((-110.02850913112633), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 2614;
      intArray0[2] = 8;
      intArray0[5] = 19;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0, 2614, 8, 0, 0, 19, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(iSAACRandom0);
      assertNotNull(randomDataGenerator0);
      assertArrayEquals(new int[] {0, 2614, 8, 0, 0, 19, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      double double0 = randomDataGenerator0.nextT(8);
      assertEquals((-1.8508785985484084), double0, 0.01);
      assertArrayEquals(new int[] {0, 2614, 8, 0, 0, 19, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1926L));
      assertNotNull(well19937c0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well19937c0);
      assertNotNull(randomDataGenerator0);
      
      long long0 = randomDataGenerator0.nextSecureLong(0L, 2401L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      int int0 = randomDataGenerator0.nextSecureInt(221, 10000000);
      assertEquals(221, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      int int0 = randomDataGenerator0.nextSecureInt((-2522), 1340);
      assertEquals((-2522), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      int int0 = randomDataGenerator0.nextPascal(2888, 0.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well1024a0);
      assertNotNull(randomDataGenerator0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = randomDataGenerator0.nextInt((-420), 380);
      assertEquals((-42), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = randomDataGenerator0.nextInt((-420), 380);
      assertEquals(161, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(273L);
      assertNotNull(iSAACRandom0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(iSAACRandom0);
      assertNotNull(randomDataGenerator0);
      
      int int0 = randomDataGenerator0.nextHypergeometric(2364, 2364, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      assertNotNull(mersenneTwister0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(mersenneTwister0);
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextGamma(1, 1);
      assertEquals(0.2419008376513827, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      double double0 = well44497b0.nextGaussian();
      assertEquals(0.034803662419047414, double0, 0.01);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      
      double double1 = randomDataGenerator0.nextChiSquare(0.034803662419047414);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double0 = randomDataGenerator0.nextChiSquare(40);
      assertEquals(33.278555301528314, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextCauchy((-633.232296884592), 1.0E-9);
      assertEquals((-633.2322968814256), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      int int0 = randomDataGenerator0.nextBinomial(49, 1.0);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      randomDataGenerator0.reSeed((long) 1);
      double double0 = randomDataGenerator0.nextBeta(0.034803662419047414, 2.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1601);
      assertNotNull(mersenneTwister0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(mersenneTwister0);
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextBeta(1601, 1601);
      assertEquals(0.4945194368186848, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(273L);
      assertNotNull(iSAACRandom0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(iSAACRandom0);
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.setSecureAlgorithm("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-936));
      assertNotNull(well44497a0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497a0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextZipf((-936), (-936));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dimension (-936)
         //
         verifyException("org.apache.commons.math3.distribution.ZipfDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      try { 
        randomDataGenerator0.nextT(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.TDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      assertNotNull(well44497b0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      randomDataGenerator0.nextSecureHexString(10000000);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(iSAACRandom0);
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextSample((Collection<?>) null, 806);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      assertNotNull(randomAdaptor0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(randomAdaptor0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextPoisson((-1421.12345049591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mean (-1,421.123)
         //
         verifyException("org.apache.commons.math3.distribution.PoissonDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well512a0);
      assertNotNull(randomDataGenerator0);
      
      well512a0.index = 71;
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextPermutation(71, 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("org.apache.commons.math3.random.Well512a", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextPascal(221, 920L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 920 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.PascalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextHypergeometric((-159), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-159)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextHypergeometric(183, 2706, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,706) must be less than or equal to population size (183)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextGamma((-2782.1572317958307), (-2782.1572317958307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (-2,782.157)
         //
         verifyException("org.apache.commons.math3.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(jDKRandomGenerator0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextF((-710.02013825145), 2505.031);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-710.02)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1566083941L);
      assertNotNull(iSAACRandom0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(iSAACRandom0);
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextF(9.223372036854776E18, 9.223372036854776E18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.571, -1,840,912,861.847]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextExponential((-2829.031119027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mean (-2,829.031)
         //
         verifyException("org.apache.commons.math3.distribution.ExponentialDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextChiSquare((-224.58111575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (-112.291)
         //
         verifyException("org.apache.commons.math3.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextCauchy(4080L, (-1500.80465989273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scale (-1,500.805)
         //
         verifyException("org.apache.commons.math3.distribution.CauchyDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Well512a well512a0 = new Well512a(311);
      assertNotNull(well512a0);
      
      well512a0.index = 2395;
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well512a0);
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextCauchy(2395, 2395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2395
         //
         verifyException("org.apache.commons.math3.random.Well512a", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextBinomial((-752), (-752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of trials (-752)
         //
         verifyException("org.apache.commons.math3.distribution.BinomialDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextBinomial(1186, (-2481.7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,481.7 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.BinomialDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      // Undeclared exception!
      randomDataGenerator0.nextBeta(2147483647L, 2147483647L);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      RandomGenerator randomGenerator0 = randomDataGenerator0.getRandomGenerator();
      assertNotNull(randomGenerator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1601);
      assertNotNull(mersenneTwister0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(mersenneTwister0);
      assertNotNull(randomDataGenerator0);
      
      RandomGenerator randomGenerator0 = randomDataGenerator0.getRandomGenerator();
      assertSame(mersenneTwister0, randomGenerator0);
      assertSame(randomGenerator0, mersenneTwister0);
      assertNotNull(randomGenerator0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextUniform((double) (-1958L), 0.0, false);
      assertEquals((-190.65091670945264), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextUniform(2.0, 0.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (2) must be strictly less than upper bound (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        randomDataGenerator0.nextSample(linkedList0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (14) exceeds collection size (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      try { 
        randomDataGenerator0.nextSample(linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextPermutation(2200, (-5188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // permutation size (-5,188
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[8];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(iSAACRandom0);
      assertNotNull(synchronizedRandomGenerator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(synchronizedRandomGenerator0);
      assertNotNull(randomDataGenerator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      try { 
        randomDataGenerator0.nextPermutation((-825), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // permutation size (0) exceeds permuation domain (-825)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(4362L);
      assertNotNull(well19937c0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well19937c0);
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextUniform((-559.017), 0.0, true);
      assertEquals((-134.2822675630784), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextUniform(Double.NaN, 1127.99658232);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NaN is not allowed
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      double double0 = randomDataGenerator0.nextGaussian(832, 832);
      assertEquals(1488.3739133661352, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      long long0 = randomDataGenerator0.nextSecureLong(2147483647L, 9193070505571053912L);
      assertEquals(2164260863L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextSecureLong(1, (-188L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1) must be strictly less than upper bound (-188)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      assertNotNull(well44497a0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497a0);
      assertNotNull(randomDataGenerator0);
      
      long long0 = randomDataGenerator0.nextSecureLong((-562L), (-206));
      assertEquals((-562L), long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextSecureHexString(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (0)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      String string0 = randomDataGenerator0.nextSecureHexString(832);
      assertEquals("684f76c8e1e05c74a4bff39b7661037757ff46ab2fcbb68ceaf6ffd03dc0e65b7c3687fe0bd7f8116efce32d24d5174cd1c41eae0dd6879c8684e2c578ac62a31558f319ab491879f93845442f2e84574686bd65ca4835c9b1a338b93b79b59d314ad7dfd51d78a6d3c0ca1739445a98165786865b5ee1c86de3b234a1ebbaba459fadec5b303c6d12a28d3e57e174dc69afa7f2e084a1d349883618b837a07d0bd0bd0ececd4e0183b3fb3d09e75c93930407430e35638ceb8e8f981c67ba7aea20ff9a83e6bdddfa047e7c63bfa4c119bb1fb2a00411e136699565bd50b4d532a2b058e1fbff7cffa01be15a0a6a124523cbb0a2454ecc8ff4e5aa5f3abacae0838c1248ab89730a23b7fa483949d6107d3ddadfcefe2cc2af0a947dd2071977836dd7baf884a591251123593deb6fd9519724c600e6696d7b0841a8e819d83c2daa9da808b9f5f7f41199be68b5b6b3b514bc7d81231cdee9677f35d46bf7e620a254d66440e3d6a9e4c813a703e443606b699a959642bad582c737519d52db463b86ba9ec7aa878d3a006204bded0646a1b0ddcba7ae29e7c55477d9dbeb", string0);
      assertNotNull(string0);
      
      String string1 = randomDataGenerator0.nextSecureHexString(1842);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      long long0 = randomDataGenerator0.nextLong(1431, 4398046511103L);
      assertEquals(3193849670837L, long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      assertNotNull(well44497a0);
      
      boolean boolean0 = well44497a0.nextBoolean();
      assertFalse(boolean0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497a0);
      assertNotNull(randomDataGenerator0);
      
      double double0 = well44497a0.nextGaussian();
      assertEquals(1.2191395145313364, double0, 0.01);
      
      long long0 = randomDataGenerator0.nextLong((-217L), 9223372036854775807L);
      assertEquals(3495783378635076171L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      assertNotNull(iSAACRandom0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(iSAACRandom0);
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextLong(0L, (-815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (0) must be strictly less than upper bound (-815)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      assertNotNull(well44497a0);
      
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497a0);
      assertNotNull(randomDataGenerator0);
      
      long long0 = randomDataGenerator0.nextLong((-217L), 672L);
      assertEquals((-179L), long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      assertNotNull(randomDataGenerator0);
      
      try { 
        randomDataGenerator0.nextHexString((-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (-32,768)
         //
         verifyException("org.apache.commons.math3.random.RandomDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      String string0 = randomDataGenerator0.nextHexString(832);
      assertEquals("123e92670695ccc2eef367207a9c3d3c56a7650fb5f1112648547bfb48225fad9ca7ddfd3c9105c25c9fbba1c4b59609b4aa97690947529b53a63110d45f3552d550c4dc729ab02a9b3a20e0c9b586a07254ca10565b8fc57215a590b8a34edaa226ddb4a084412362a427d97c127db2fa12a5689772d6659060a8ed4ed6114dab55696cf1cbf9f0b0a3289dabb285b62f6f0aafc87d1e7046f5821b73076bfce8b7cec3454ceda6f25543324170f06b499f8d48a7330258f2fec6f9dcc9d5625093fac6fcb9fb166870644e13d31cd706d5e7d980b54d8113f2a2f65a41fd56c5cb0aabd5a06e37bd7c3b987586df49db1d2df5ef5235385b29e4cfc258b3dd22b4679db34022437c4504df59f15f81708c31ff5a338f4b0b8eafa6ba9ed3d7b3d9cd87ce04b8a2215938a28de7d48565185e03d5d2274f5e88a45df8cecd0a488d8b11478142f4db0c624252cd1227d38458a92a6710877e3f4a5c5ed2c4504f22db719dbde43c7892c546babfd8c1c20a6a3985acb985bd8ca120c9bdd51f3196467d2bbb34d41c8c3d88cac6d478970be66058c1e1d92f1f1d0413c6afe6", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      double double0 = randomDataGenerator0.nextUniform(0.5, 3495.1);
      assertEquals(3154.829982873926, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      randomDataGenerator0.reSeedSecure();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      randomDataGenerator0.reSeed();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      try { 
        randomDataGenerator0.nextPascal(0, 1.0E-9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (0)
         //
         verifyException("org.apache.commons.math3.distribution.PascalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      randomDataGenerator0.reSeedSecure((-2301L));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      try { 
        randomDataGenerator0.nextInt(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (0) must be strictly less than upper bound (0)
         //
         verifyException("org.apache.commons.math3.distribution.UniformIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      // Undeclared exception!
      randomDataGenerator0.nextZipf(1482, 1.34217729E8);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      int int0 = randomDataGenerator0.nextHypergeometric(3, 1, 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      double double0 = randomDataGenerator0.nextF(1520.91567129, 1.0E-9);
      assertEquals(11030.996863732655, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      randomDataGenerator0.nextBinomial(0, 0);
      double double0 = randomDataGenerator0.nextGaussian(0.0, 1.0E-12);
      assertEquals((-7.419797264556726E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      double double0 = randomDataGenerator0.nextExponential(3495.1);
      assertEquals(1361.7307000199112, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      double double0 = randomDataGenerator0.nextCauchy(1190L, 1190L);
      assertEquals(4958.08744730505, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      randomDataGenerator0.nextPoisson(2054.00321531);
      double double0 = randomDataGenerator0.nextUniform((double) 0, 2.220446049250313E-16);
      assertEquals(8.003043122201448E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well44497b0);
      double double0 = randomDataGenerator0.nextT(1);
      assertEquals(1.5822573125327117, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      // Undeclared exception!
      randomDataGenerator0.nextChiSquare(10000000);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      // Undeclared exception!
      try { 
        randomDataGenerator0.nextBeta(444.020588, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, 0.097]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-3136));
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(mersenneTwister0);
      try { 
        randomDataGenerator0.setSecureAlgorithm("8a", "number of interpolation points ({0})");
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Well512a well512a0 = new Well512a(1812433253L);
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator(well512a0);
      try { 
        randomDataGenerator0.nextSecureInt((-4631), (-4631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (-4,631) must be strictly less than upper bound (-4,631)
         //
         verifyException("org.apache.commons.math3.distribution.UniformIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator((RandomGenerator) null);
      try { 
        randomDataGenerator0.nextWeibull(1693.50319516, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scale (0)
         //
         verifyException("org.apache.commons.math3.distribution.WeibullDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      RandomDataGenerator randomDataGenerator0 = new RandomDataGenerator();
      double double0 = randomDataGenerator0.nextGamma(1.0E-9, 2.147483647E9);
      assertEquals(0.0, double0, 0.01);
  }
}
