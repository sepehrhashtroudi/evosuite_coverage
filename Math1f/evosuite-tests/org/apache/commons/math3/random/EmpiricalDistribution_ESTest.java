/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:41:50 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Path;
import java.util.List;
import org.apache.commons.math3.distribution.AbstractRealDistribution;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.random.EmpiricalDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataImpl;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
import org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
import org.apache.commons.math3.stat.descriptive.moment.Variance;
import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmpiricalDistribution_ESTest extends EmpiricalDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1464);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(statisticalSummary0);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertTrue(normalDistribution0.isSupportConnected());
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new double[] {1000.0, 1000.0, 1.0E-6, 1000.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(1.0E-6, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      boolean boolean0 = empiricalDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double1 = empiricalDistribution0.cumulativeProbability(622.20589);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double2 = empiricalDistribution0.getSupportUpperBound();
      assertEquals(1000.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double[] doubleArray1 = empiricalDistribution0.getUpperBounds();
      assertEquals(1464, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MockFile mockFile0 = new MockFile("|");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("gruhhn", "gruhhn", (File) mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("|", mockFile0.getName());
      assertEquals("|", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/|/gruhhn0gruhhn", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals("gruhhn0gruhhn", mockFile1.getName());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/|", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotNull(mockFile1);
      
      double double3 = empiricalDistribution0.getNextValue();
      assertEquals(1000.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double4 = empiricalDistribution0.sample();
      assertEquals(1000.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      int int0 = empiricalDistribution0.getBinCount();
      assertEquals(1464, int0);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1464);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(statisticalSummary0);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(normalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1000.0, 1000.0, 1.0E-6, 1000.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(1.0E-6, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      boolean boolean0 = empiricalDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double1 = empiricalDistribution0.cumulativeProbability(622.20589);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double2 = empiricalDistribution0.getSupportUpperBound();
      assertEquals(1000.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double[] doubleArray1 = empiricalDistribution0.getUpperBounds();
      assertEquals(1464, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      SummaryStatistics summaryStatistics2 = (SummaryStatistics)empiricalDistribution0.getSampleStats();
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(4L, summaryStatistics2.getN());
      assertEquals(749999.9985, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotNull(summaryStatistics2);
      
      Random.setNextRandom(1464);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1464);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(statisticalSummary0);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(normalDistribution0.isSupportConnected());
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1000.0, 1000.0, 1.0E-6, 1000.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(1.0E-6, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      boolean boolean0 = empiricalDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double1 = empiricalDistribution0.cumulativeProbability(1000.0);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double2 = empiricalDistribution0.getSupportUpperBound();
      assertEquals(1000.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double[] doubleArray1 = empiricalDistribution0.getUpperBounds();
      assertEquals(1464, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      NormalDistribution normalDistribution1 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(normalDistribution1.equals((Object)normalDistribution0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, normalDistribution1.getStandardDeviation(), 0.01);
      assertFalse(normalDistribution1.isSupportLowerBoundInclusive());
      assertFalse(normalDistribution1.isSupportUpperBoundInclusive());
      assertTrue(normalDistribution1.isSupportConnected());
      assertEquals(Double.NaN, normalDistribution1.getMean(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution1.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution1.getNumericalVariance(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution1.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution1.getNumericalMean(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(normalDistribution1, normalDistribution0);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well19937a0);
      assertEquals(1, intArray0.length);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      MockFile mockFile0 = new MockFile("org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter", "%FzCFy@KBPPUB%+q&");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("%FzCFy@KBPPUB%+q&", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter/%FzCFy@KBPPUB%+q&", mockFile0.toString());
      assertNotNull(path0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("%FzCFy@KBPPUB%+q&", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter/%FzCFy@KBPPUB%+q&", mockFile0.toString());
      
      empiricalDistribution0.load((File) mockFile0);
      assertEquals(1, intArray0.length);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("%FzCFy@KBPPUB%+q&", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter/%FzCFy@KBPPUB%+q&", mockFile0.toString());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      int int0 = empiricalDistribution0.getBinCount();
      assertEquals(1, intArray0.length);
      assertEquals(1000, int0);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      boolean boolean1 = empiricalDistribution0.isSupportUpperBoundInclusive();
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      boolean boolean2 = empiricalDistribution0.isLoaded();
      assertEquals(1, intArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      well19937a0.nextBytes(byteArray0);
      assertEquals(1, intArray0.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new int[] {1000}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-108), (byte)0, (byte) (-46), (byte) (-25)}, byteArray0);
      
      int int1 = empiricalDistribution0.getBinCount();
      assertEquals(1, intArray0.length);
      assertEquals(1000, int1);
      assertTrue(int1 == int0);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      int int2 = empiricalDistribution0.getBinCount();
      assertEquals(1, intArray0.length);
      assertEquals(1000, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      double double0 = empiricalDistribution0.cumulativeProbability((double) 1000);
      assertEquals(1, intArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      boolean boolean3 = empiricalDistribution0.isLoaded();
      assertEquals(1, intArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      SummaryStatistics summaryStatistics0 = (SummaryStatistics)empiricalDistribution0.getSampleStats();
      assertEquals(1, intArray0.length);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(summaryStatistics0);
      assertArrayEquals(new int[] {1000}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1464);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(statisticalSummary0);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertTrue(normalDistribution0.isSupportConnected());
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1000.0, 1000.0, 1.0E-6, 1000.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(1.0E-6, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      boolean boolean0 = empiricalDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double1 = empiricalDistribution0.cumulativeProbability(622.20589);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double2 = empiricalDistribution0.getSupportUpperBound();
      assertEquals(1000.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double[] doubleArray1 = empiricalDistribution0.getUpperBounds();
      assertEquals(1464, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MockFile mockFile0 = new MockFile("|");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("gruhhn", "gruhhn", (File) mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("|", mockFile0.getName());
      assertEquals("|", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("gruhhn0gruhhn", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/|", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/|/gruhhn0gruhhn", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotNull(mockFile1);
      
      empiricalDistribution0.load((File) mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("|", mockFile0.getName());
      assertEquals("|", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("gruhhn0gruhhn", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/|", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/|/gruhhn0gruhhn", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      try { 
        empiricalDistribution0.getNextValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no bin selected
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      float float0 = well512a0.nextFloat();
      assertEquals(0.54769087F, float0, 0.01F);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.4522462901393298, double0, 0.01);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well512a0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      Variance variance0 = new Variance(false);
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertFalse(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      
      summaryStatistics1.setSumsqImpl(variance0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertFalse(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      
      double double1 = summaryStatistics1.getMin();
      assertEquals(Double.NaN, double1, 0.01);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertTrue(normalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
      
      double[] doubleArray0 = empiricalDistribution0.getUpperBounds();
      assertEquals(1000, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(doubleArray0);
      
      empiricalDistribution0.reSeed(1463L);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double2 = empiricalDistribution0.cumulativeProbability(1941.9605119);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      boolean boolean0 = empiricalDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.density(Double.NaN);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1464);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(statisticalSummary0);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertTrue(normalDistribution0.isSupportConnected());
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new double[] {1000.0, 1000.0, 1.0E-6, 1000.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(0.0, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      boolean boolean0 = empiricalDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double1 = empiricalDistribution0.cumulativeProbability(622.20589);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double2 = empiricalDistribution0.getSupportUpperBound();
      assertEquals(1000.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double[] doubleArray1 = empiricalDistribution0.getUpperBounds();
      assertEquals(1464, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1464, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = 819.6936841807;
      doubleArray0[4] = (-745.70509);
      doubleArray0[5] = (-771.976091383049);
      empiricalDistribution0.load(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals((-771.976091383049), empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1.0E-6, 1000.0, 1000.0, 819.6936841807, (-745.70509), (-771.976091383049)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.cumulativeProbability((-771.976091383049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (0)
         //
         verifyException("org.apache.commons.math3.distribution.NormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = null;
      try {
        empiricalDistribution0 = new EmpiricalDistribution((RandomDataImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1387);
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((-1387), (RandomGenerator) null);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1387), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reSeed(0L);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1387), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double0 = empiricalDistribution0.probability((-594.0), (-594.0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1387), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double1 = empiricalDistribution0.probability((-1556.44233), (-2.0));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1387), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      File file0 = MockFile.createTempFile("a73n{3^", "a73n{3^");
      assertEquals("/tmp/a73n{3^0a73n{3^", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("a73n{3^0a73n{3^", file0.getName());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      double double2 = empiricalDistribution0.cumulativeProbability(702.8559600237405);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1387), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.load(file0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      boolean boolean0 = empiricalDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double0 = (-1.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1000;
      doubleArray0[0] = (double) 1000;
      doubleArray0[2] = 1.0;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new double[] {1000.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      double double1 = empiricalDistribution0.density((-1.0));
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double2 = 0.0;
      double double3 = empiricalDistribution0.cumulativeProbability(0.0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double[] doubleArray1 = empiricalDistribution0.getGeneratorUpperBounds();
      assertEquals(1000, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double4 = empiricalDistribution0.cumulativeProbability(0.0);
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      try { 
        MockURL.URL("'$?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: '$?
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      assertNotNull(well19937a0);
      
      long long0 = well19937a0.nextLong();
      assertEquals(6107729901709437166L, long0);
      
      int int0 = well19937a0.next((-2869));
      assertEquals(1951, int0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((-2869), well19937a0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals((-2869), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reseedRandomGenerator(1L);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals((-2869), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getUpperBounds();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(2741, well1024a0);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(2741, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reSeed(2741);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(2741, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2741;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 0.0;
      float float0 = well1024a0.nextFloat();
      assertEquals(0.79775643F, float0, 0.01F);
      
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1000;
      doubleArray0[6] = 1.0E-6;
      doubleArray0[7] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(2741, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(2741.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new double[] {2741.0, 1.0E-6, 1.0E-6, 0.0, 0.0, 1000.0, 1.0E-6, 1000.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(2741, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(2741.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double1 = empiricalDistribution0.getNumericalVariance();
      assertEquals(957635.1244920358, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(2741, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(2741.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      SummaryStatistics summaryStatistics0 = null;
      try {
        summaryStatistics0 = new SummaryStatistics((SummaryStatistics) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1000.0, 1.0E-6, 1000.0}, doubleArray0, 0.01);
      
      double double0 = empiricalDistribution0.density(1784.0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((RandomGenerator) null);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      doubleArray0[4] = 1.0E-6;
      double double0 = empiricalDistribution0.cumulativeProbability(1.0E-6);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      doubleArray0[5] = (double) 1000;
      doubleArray0[6] = (double) 1000;
      doubleArray0[7] = (double) 1000;
      doubleArray0[8] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new double[] {1000.0, 1000.0, 1.0E-6, 1.0E-6, 1.0E-6, 1000.0, 1000.0, 1000.0, 1000.0}, doubleArray0, 0.01);
      
      empiricalDistribution0.reseedRandomGenerator(1L);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double1 = empiricalDistribution0.cumulativeProbability(2595.0460090746);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      try { 
        empiricalDistribution0.inverseCumulativeProbability(6.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double double0 = (-1.0);
      double double1 = empiricalDistribution0.cumulativeProbability((-1.0));
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double[] doubleArray0 = new double[0];
      empiricalDistribution0.load(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.density((-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      boolean boolean0 = empiricalDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double0 = (-1.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = 1.0;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals((-1.0), empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {(-1.0), 1000.0, 1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.density((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (0)
         //
         verifyException("org.apache.commons.math3.distribution.NormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics1.getVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      boolean boolean0 = summaryStatistics0.equals(summaryStatistics2);
      assertTrue(boolean0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      
      summaryStatistics1.addValue(4478.45487);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getKernel(summaryStatistics1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (0)
         //
         verifyException("org.apache.commons.math3.distribution.NormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 3858;
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(3858, randomDataImpl0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(3858, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double double0 = 2296.18128844;
      double[] doubleArray0 = new double[4];
      double double1 = empiricalDistribution0.density(3858);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(3858, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      doubleArray0[0] = (-2.0);
      double double2 = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0E-6;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(3858, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-2.0), empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.5, (-1.0), 1.0E-6}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.cumulativeProbability(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      MockFile mockFile0 = new MockFile("org.apache.commons.math3.random.EmpiricalDistribution");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "_l3VA*wE+@@GZ%");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile("org.apache.commons.math3.random.EmpiricalDistribution", "org.apache.commons.math3.random.EmpiricalDistribution");
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution0org.apache.commons.math3.random.EmpiricalDistribution", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/org.apache.commons.math3.random.EmpiricalDistribution0org.apache.commons.math3.random.EmpiricalDistribution", file0.toString());
      assertTrue(file0.exists());
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("org.apache.commons.math3.random.EmpiricalDistribution", "Mj|e", (File) mockFile1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)mockFile1));
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isFile());
      assertEquals("_l3VA*wE+@@GZ%", mockFile1.getName());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution/_l3VA*wE+@@GZ%", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution1Mj|e", file1.getName());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution/_l3VA*wE+@@GZ%", file1.getParent());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution/_l3VA*wE+@@GZ%/org.apache.commons.math3.random.EmpiricalDistribution1Mj|e", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, file1);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, mockFile1);
      assertNotNull(file1);
      
      empiricalDistribution0.load(file1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)mockFile1));
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isFile());
      assertEquals("_l3VA*wE+@@GZ%", mockFile1.getName());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution/_l3VA*wE+@@GZ%", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals("org.apache.commons.math3.random.EmpiricalDistribution1Mj|e", file1.getName());
      assertEquals(0L, file1.length());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution/_l3VA*wE+@@GZ%", file1.getParent());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Math1f/org.apache.commons.math3.random.EmpiricalDistribution/_l3VA*wE+@@GZ%/org.apache.commons.math3.random.EmpiricalDistribution1Mj|e", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, file1);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, mockFile1);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(965);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double double0 = empiricalDistribution0.density(0.0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      StatisticalSummary statisticalSummary0 = empiricalDistribution0.getSampleStats();
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNull(statisticalSummary0);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertTrue(normalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotNull(normalDistribution0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((-790));
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals((-790), empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      int int0 = empiricalDistribution0.getBinCount();
      assertEquals((-790), int0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals((-790), empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((RandomGenerator) null);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      File file0 = MockFile.createTempFile("R2d}os1{e(Ya&Ej&Vu ", "R2d}os1{e(Ya&Ej&Vu ");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/R2d}os1{e(Ya&Ej&Vu 0R2d}os1{e(Ya&Ej&Vu ", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("R2d}os1{e(Ya&Ej&Vu 0R2d}os1{e(Ya&Ej&Vu ", file0.getName());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      empiricalDistribution0.load(file0);
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/R2d}os1{e(Ya&Ej&Vu 0R2d}os1{e(Ya&Ej&Vu ", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("R2d}os1{e(Ya&Ej&Vu 0R2d}os1{e(Ya&Ej&Vu ", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      empiricalDistribution0.reSeed((-1177L));
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      boolean boolean0 = empiricalDistribution0.isLoaded();
      assertTrue(boolean0);
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      empiricalDistribution0.reSeed((-1177L));
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      empiricalDistribution0.reseedRandomGenerator((-1177L));
      assertEquals(Double.NaN, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      try { 
        empiricalDistribution0.getNextValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no bin selected
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      Well1024a well1024a0 = new Well1024a(0);
      assertNotNull(well1024a0);
      
      long long0 = well1024a0.nextLong();
      assertEquals((-1624591149170593887L), long0);
      
      int int1 = well1024a0.next(1000);
      assertEquals(39, int1);
      assertFalse(int1 == int0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(0, well1024a0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getUpperBounds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      assertNotNull(mersenneTwister0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(0, mersenneTwister0);
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double double0 = 0.0;
      mersenneTwister0.setSeed(1000);
      double double1 = empiricalDistribution0.cumulativeProbability((-3039.435873279822));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double2 = mersenneTwister0.nextDouble();
      assertEquals(0.6535895795452851, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = empiricalDistribution0.cumulativeProbability(0.0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double4 = empiricalDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      try { 
        empiricalDistribution0.load((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      assertNotNull(well1024a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well1024a0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getGeneratorUpperBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1982, well1024a0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1982, empiricalDistribution0.getBinCount());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      try { 
        empiricalDistribution0.load((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(9223372036854775807L);
      assertNotNull(well1024a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well1024a0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double double0 = empiricalDistribution0.probability((double) 9223372036854775807L);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      well1024a0.index = 2160;
      String string0 = "$%uw;=cdO(m<";
      MockFile mockFile0 = new MockFile("$%uw;=cdO(m<");
      assertNotNull(mockFile0);
      
      try { 
        empiricalDistribution0.load((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((RandomGenerator) null);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      try { 
        empiricalDistribution0.load((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((RandomGenerator) null);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      try { 
        empiricalDistribution0.load((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(98);
      assertNotNull(iSAACRandom0);
      
      int int0 = iSAACRandom0.nextInt(98);
      assertEquals(50, int0);
      
      iSAACRandom0.setSeed((-1724L));
      iSAACRandom0.setSeed((int[]) null);
      int int1 = iSAACRandom0.nextInt(98);
      assertEquals(53, int1);
      assertFalse(int1 == int0);
      
      iSAACRandom0.clear();
      long long0 = iSAACRandom0.nextLong();
      assertEquals((-3784165390711180772L), long0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(98, iSAACRandom0);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = empiricalDistribution0.getUpperBounds();
      assertEquals(98, doubleArray0.length);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(doubleArray0);
      
      empiricalDistribution0.load(doubleArray0);
      assertEquals(98, doubleArray0.length);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double0 = empiricalDistribution0.getNumericalMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      float float0 = iSAACRandom0.nextFloat();
      assertEquals(0.4524927F, float0, 0.01F);
      
      List<SummaryStatistics> list0 = empiricalDistribution0.getBinStats();
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(list0.isEmpty());
      assertEquals(98, list0.size());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(list0);
      
      empiricalDistribution0.load(doubleArray0);
      assertEquals(98, doubleArray0.length);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double1 = iSAACRandom0.nextDouble();
      assertEquals(0.3494896833004142, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertNotNull(sumOfLogs0);
      
      SumOfLogs sumOfLogs1 = sumOfLogs0.copy();
      assertTrue(sumOfLogs1.equals((Object)sumOfLogs0));
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, sumOfLogs1.getN());
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertNotSame(sumOfLogs0, sumOfLogs1);
      assertNotSame(sumOfLogs1, sumOfLogs0);
      assertNotNull(sumOfLogs1);
      
      sumOfLogs0.setData(doubleArray0, 0, 0);
      assertEquals(98, doubleArray0.length);
      assertTrue(sumOfLogs0.equals((Object)sumOfLogs1));
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(sumOfLogs0, sumOfLogs1);
      
      summaryStatistics0.setSumsqImpl(sumOfLogs0);
      assertTrue(sumOfLogs0.equals((Object)sumOfLogs1));
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(sumOfLogs0, sumOfLogs1);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotNull(summaryStatistics2);
      
      boolean boolean0 = summaryStatistics1.equals(object0);
      assertFalse(boolean0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      
      double double2 = summaryStatistics1.getMin();
      assertEquals(Double.NaN, double2, 0.01);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      
      NormalDistribution normalDistribution0 = (NormalDistribution)empiricalDistribution0.getKernel(summaryStatistics1);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(normalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(normalDistribution0.isSupportConnected());
      assertEquals(Double.NaN, normalDistribution0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getStandardDeviation(), 0.01);
      assertFalse(normalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, normalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, normalDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1.0E-9, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY, 0.01);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotNull(normalDistribution0);
      
      double double3 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double4 = empiricalDistribution0.cumulativeProbability((-2088.254927));
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      List<SummaryStatistics> list1 = empiricalDistribution0.getBinStats();
      assertEquals(98, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(list1.isEmpty());
      assertEquals(98, list1.size());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.contains(summaryStatistics2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(242L);
      assertNotNull(well1024a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well1024a0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = (double) 1000;
      doubleArray0[4] = 1.0E-6;
      doubleArray0[5] = (double) 242L;
      doubleArray0[6] = (double) 1000;
      doubleArray0[7] = (double) 1000;
      doubleArray0[8] = 1.0E-6;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1000.0, 1.0E-6, 1000.0, 1000.0, 1.0E-6, 242.0, 1000.0, 1000.0, 1.0E-6}, doubleArray0, 0.01);
      
      List<SummaryStatistics> list0 = empiricalDistribution0.getBinStats();
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000.0, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isLoaded());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1000, list0.size());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      assertNotNull(well44497a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well44497a0);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      empiricalDistribution0.load(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertArrayEquals(new double[] {1.0E-6, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = empiricalDistribution0.getUpperBounds();
      assertEquals(1000, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      empiricalDistribution0.load(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0E-6, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = empiricalDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(0.0, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1978);
      assertNotNull(well1024a0);
      
      well1024a0.setSeed((long) 1978);
      boolean boolean0 = well1024a0.nextBoolean();
      assertFalse(boolean0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well1024a0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reseedRandomGenerator(1978);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      URI uRI0 = MockURI.aHttpURI;
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertNotNull(uRL0);
      
      try { 
        empiricalDistribution0.load(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double double0 = (-293.0340436);
      // Undeclared exception!
      try { 
        empiricalDistribution0.inverseCumulativeProbability(1.0E-9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 236;
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(236, randomDataImpl0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(236, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.reSeed(4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.load(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(965);
      assertNotNull(well44497a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(965, well44497a0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double double0 = empiricalDistribution0.cumulativeProbability((double) 965);
      assertEquals(0.0, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      long long0 = 0L;
      empiricalDistribution0.reseedRandomGenerator(0L);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(965, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      URL uRL1 = MockURL.URL(uRL0, "@<kQJtQ");
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.load(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(306);
      assertNotNull(well19937c0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      URI uRI0 = MockURI.aFTPURI;
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("ftp://foo.bar", uRL0.toExternalForm());
      assertEquals("ftp://foo.bar", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.load(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 852;
      intArray0[4] = 0;
      intArray0[5] = 1900;
      intArray0[6] = (-99516416);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0, 1, 0, 852, 0, 1900, (-99516416)}, intArray0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(iSAACRandom0);
      assertEquals(7, intArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      assertArrayEquals(new int[] {0, 1, 0, 852, 0, 1900, (-99516416)}, intArray0);
      
      int int0 = iSAACRandom0.nextInt();
      assertEquals(7, intArray0.length);
      assertEquals(2094709163, int0);
      assertArrayEquals(new int[] {0, 1, 0, 852, 0, 1900, (-99516416)}, intArray0);
      
      List<SummaryStatistics> list0 = empiricalDistribution0.getBinStats();
      assertEquals(7, intArray0.length);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(list0);
      assertArrayEquals(new int[] {0, 1, 0, 852, 0, 1900, (-99516416)}, intArray0);
      
      double double0 = empiricalDistribution0.getSupportUpperBound();
      assertEquals(7, intArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertArrayEquals(new int[] {0, 1, 0, 852, 0, 1900, (-99516416)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double double0 = 0.0;
      double double1 = empiricalDistribution0.density(0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      double double2 = 604.713872;
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getKernel(summaryStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      long long0 = 3L;
      // Undeclared exception!
      try { 
        empiricalDistribution0.reseedRandomGenerator(3L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((-3334));
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-3334), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reseedRandomGenerator((-3334));
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-3334), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      empiricalDistribution0.reseedRandomGenerator((-3334));
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-3334), empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(2669, randomDataImpl0);
      assertEquals(2669, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Well512a well512a0 = new Well512a((-2287));
      assertNotNull(well512a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well512a0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      well512a0.clear();
      double double0 = empiricalDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      boolean boolean0 = empiricalDistribution0.isLoaded();
      assertFalse(boolean0);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // distribution not loaded
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((-1926));
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1926), empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reSeed((-1926));
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-1926), empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      try { 
        empiricalDistribution0.getNextValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // distribution not loaded
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1.0E-6;
      long long0 = 0L;
      try { 
        empiricalDistribution0.inverseCumulativeProbability((-1671.26755263525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,671.268 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(4708);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(4708, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      empiricalDistribution0.reSeed(4708);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(4708, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      boolean boolean0 = empiricalDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(4708, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getNumericalMean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.apache.commons.math3.random.EmpiricalDistribution");
      assertFalse(boolean0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      try { 
        empiricalDistribution0.inverseCumulativeProbability((-269.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -269 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 0);
      assertNotNull(well19937c0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(0, well19937c0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      boolean boolean0 = empiricalDistribution0.isLoaded();
      assertFalse(boolean0);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1719L));
      assertNotNull(well44497a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well44497a0);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 2337.679459290484;
      try { 
        empiricalDistribution0.inverseCumulativeProbability(305.6508);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 305.651 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(230);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(230, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getNumericalMean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well44497b0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      List<SummaryStatistics> list0 = empiricalDistribution0.getBinStats();
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getGeneratorUpperBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-361));
      assertNotNull(iSAACRandom0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(iSAACRandom0);
      assertNotNull(synchronizedRandomGenerator0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution((-361), synchronizedRandomGenerator0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals((-361), empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      double double0 = empiricalDistribution0.density((-361));
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertEquals((-361), empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getNumericalVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0);
      assertNotNull(well19937a0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well19937a0);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertNotNull(empiricalDistribution0);
      
      double double0 = empiricalDistribution0.probability(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      double double1 = empiricalDistribution0.getSupportLowerBound();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      
      boolean boolean0 = empiricalDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertFalse(empiricalDistribution0.isLoaded());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1000, empiricalDistribution0.getBinCount());
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      try { 
        empiricalDistribution0.inverseCumulativeProbability(1784.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,784 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      assertNotNull(mersenneTwister0);
      
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(0, mersenneTwister0);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(empiricalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0, empiricalDistribution0.getBinCount());
      assertFalse(empiricalDistribution0.isLoaded());
      assertTrue(empiricalDistribution0.isSupportConnected());
      assertTrue(empiricalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, empiricalDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-6, AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(1000, EmpiricalDistribution.DEFAULT_BIN_COUNT);
      assertNotNull(empiricalDistribution0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      mersenneTwister0.setSeed(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1000}, intArray0);
      
      int int1 = 189;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1000;
      long long0 = mersenneTwister0.nextLong((long) 1000);
      assertEquals(930L, long0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.sample(1356);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // distribution not loaded
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      Well19937a well19937a0 = new Well19937a(intArray0);
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well19937a0);
      assertFalse(empiricalDistribution0.isLoaded());
      
      MockFile mockFile0 = new MockFile("org.apache.commons.math.random.EmpiricalDistribution$StreamDataAdapter", "%FzCFy@KBPPUB%+q&");
      mockFile0.toPath();
      mockFile0.createNewFile();
      empiricalDistribution0.load((File) mockFile0);
      empiricalDistribution0.getBinCount();
      empiricalDistribution0.isSupportUpperBoundInclusive();
      empiricalDistribution0.isLoaded();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      well19937a0.nextBytes(byteArray0);
      empiricalDistribution0.getBinCount();
      empiricalDistribution0.getBinCount();
      empiricalDistribution0.cumulativeProbability((double) 1000);
      empiricalDistribution0.isLoaded();
      assertEquals(1000, empiricalDistribution0.getBinCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      Well19937a well19937a0 = new Well19937a(intArray0);
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well19937a0);
      MockFile mockFile0 = new MockFile("org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter", "%FzCFy@KBPPUB%+q&");
      mockFile0.toPath();
      mockFile0.createNewFile();
      empiricalDistribution0.load((File) mockFile0);
      empiricalDistribution0.getBinCount();
      empiricalDistribution0.isSupportUpperBoundInclusive();
      empiricalDistribution0.isLoaded();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      empiricalDistribution0.reSeed(8L);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      well19937a0.nextBytes(byteArray0);
      empiricalDistribution0.getBinCount();
      empiricalDistribution0.getBinCount();
      empiricalDistribution0.cumulativeProbability((double) 1000);
      empiricalDistribution0.isLoaded();
      // Undeclared exception!
      try { 
        empiricalDistribution0.sample();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no bin selected
         //
         verifyException("org.apache.commons.math3.random.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(randomDataImpl0);
      empiricalDistribution0.inverseCumulativeProbability(0);
      // Undeclared exception!
      try { 
        empiricalDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      double double0 = (-293.0340436);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      doubleArray0[1] = (-293.0340436);
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = 1.0E-9;
      doubleArray0[4] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      // Undeclared exception!
      try { 
        empiricalDistribution0.inverseCumulativeProbability(1.0E-9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // standard deviation (0)
         //
         verifyException("org.apache.commons.math3.distribution.NormalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextFloat();
      well512a0.nextDouble();
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(well512a0);
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      Variance variance0 = new Variance(false);
      summaryStatistics1.setSumsqImpl(variance0);
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      double[] doubleArray0 = new double[0];
      summaryStatistics1.getMin();
      empiricalDistribution0.load(doubleArray0);
      empiricalDistribution0.getKernel(summaryStatistics1);
      empiricalDistribution0.getUpperBounds();
      empiricalDistribution0.reSeed(1463L);
      empiricalDistribution0.cumulativeProbability(1941.9605119);
      empiricalDistribution0.isSupportUpperBoundInclusive();
      empiricalDistribution0.density(Double.NaN);
      empiricalDistribution0.getKernel(summaryStatistics0);
      empiricalDistribution0.isSupportConnected();
      empiricalDistribution0.density(Double.NaN);
      empiricalDistribution0.getSupportLowerBound();
      empiricalDistribution0.getGeneratorUpperBounds();
      try { 
        MockURI.URI("org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter", "org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter", "URdi`.x)b$$hM", "URdi`.x)b$$hM");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter://org.apache.commons.math3.random.EmpiricalDistribution$DataAdapterURdi%60.x)b$$hM#URdi%60.x)b$$hM
         //
         verifyException("java.net.URI", e);
      }
  }
}
