/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:59:18 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.apache.commons.math3.random.SobolSequenceGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SobolSequenceGenerator_ESTest extends SobolSequenceGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(16);
      sobolSequenceGenerator0.skipTo((-2098));
      assertEquals((-2097), sobolSequenceGenerator0.getNextIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(11);
      sobolSequenceGenerator0.nextVector();
      int int0 = sobolSequenceGenerator0.getNextIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(9);
      sobolSequenceGenerator0.skipTo((-1377));
      int int0 = sobolSequenceGenerator0.getNextIndex();
      assertEquals((-1376), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator(1771, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 1000);
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator(1000, pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(472);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(11);
      sobolSequenceGenerator0.skipTo(0);
      assertEquals(1, sobolSequenceGenerator0.getNextIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(11);
      sobolSequenceGenerator0.skipTo(11);
      sobolSequenceGenerator0.nextVector();
      assertEquals(13, sobolSequenceGenerator0.getNextIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator(18, byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 18 out of [1, -1] range
         //
         verifyException("org.apache.commons.math3.random.SobolSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator((-1183), (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,183 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.SobolSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 52);
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator(52, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator(1552);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,552 out of [1, 1,000] range
         //
         verifyException("org.apache.commons.math3.random.SobolSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = null;
      try {
        sobolSequenceGenerator0 = new SobolSequenceGenerator(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 out of [1, 1,000] range
         //
         verifyException("org.apache.commons.math3.random.SobolSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SobolSequenceGenerator sobolSequenceGenerator0 = new SobolSequenceGenerator(11);
      int int0 = sobolSequenceGenerator0.getNextIndex();
      assertEquals(0, int0);
  }
}
