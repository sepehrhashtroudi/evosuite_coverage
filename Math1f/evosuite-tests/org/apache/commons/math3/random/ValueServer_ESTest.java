/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:54:36 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataImpl;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.ValueServer;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueServer_ESTest extends ValueServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      double[] doubleArray0 = new double[7];
      valueServer0.fill(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(5, valueServer0.getMode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      valueServer0.setSigma(106.3587689974);
      double double0 = valueServer0.getSigma();
      assertEquals(106.3587689974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      valueServer0.setSigma((-1490.818385210295));
      double double0 = valueServer0.getSigma();
      assertEquals((-1490.818385210295), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      valueServer0.setMu(580.1635475288359);
      double double0 = valueServer0.getNext();
      assertEquals(580.1635475288359, valueServer0.getMu(), 0.01);
      assertEquals(580.1635475288359, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      assertEquals(5, valueServer0.getMode());
      
      valueServer0.setMode(0);
      int int0 = valueServer0.getMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      double[] doubleArray0 = valueServer0.fill(0);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, valueServer0.getMode());
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2379L);
      ValueServer valueServer0 = new ValueServer(well1024a0);
      URL uRL0 = MockURL.getHttpExample();
      valueServer0.setValuesFileURL(uRL0);
      try { 
        valueServer0.resetReplayFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      ValueServer valueServer0 = new ValueServer(well44497b0);
      // Undeclared exception!
      try { 
        valueServer0.fill((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.ValueServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a((-1000L));
      ValueServer valueServer0 = new ValueServer(well512a0);
      valueServer0.setMode(153);
      try { 
        valueServer0.fill(1096);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unknown mode 153, known modes: DIGEST_MODE (0), REPLAY_MODE (1), UNIFORM_MODE (2), EXPONENTIAL_MODE (3), GAUSSIAN_MODE (4) and CONSTANT_MODE (5)
         //
         verifyException("org.apache.commons.math3.random.ValueServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      // Undeclared exception!
      try { 
        valueServer0.fill((-1127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.ValueServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0);
      ValueServer valueServer0 = new ValueServer(well19937a0);
      URL uRL0 = MockURL.getFileExample();
      valueServer0.setValuesFileURL(uRL0);
      // Undeclared exception!
      try { 
        valueServer0.computeDistribution(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer((RandomGenerator) null);
      valueServer0.setMode(0);
      try { 
        valueServer0.getNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // digest not initialized
         //
         verifyException("org.apache.commons.math3.random.ValueServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      valueServer0.setMode(1866);
      try { 
        valueServer0.getNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unknown mode 1,866, known modes: DIGEST_MODE (0), REPLAY_MODE (1), UNIFORM_MODE (2), EXPONENTIAL_MODE (3), GAUSSIAN_MODE (4) and CONSTANT_MODE (5)
         //
         verifyException("org.apache.commons.math3.random.ValueServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      try { 
        valueServer0.computeDistribution(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      ValueServer valueServer0 = new ValueServer(well1024a0);
      valueServer0.closeReplayFile();
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      // Undeclared exception!
      try { 
        valueServer0.resetReplayFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      ValueServer valueServer0 = new ValueServer(well1024a0);
      assertEquals(5, valueServer0.getMode());
      
      double[] doubleArray0 = valueServer0.fill(2093);
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
      assertEquals(2093, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      double double0 = valueServer0.getNext();
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, valueServer0.getMode());
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      double[] doubleArray0 = new double[8];
      valueServer0.setMode(0);
      try { 
        valueServer0.fill(doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // digest not initialized
         //
         verifyException("org.apache.commons.math3.random.ValueServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      valueServer0.setMu(6.283185307179586);
      double double0 = valueServer0.getMu();
      assertEquals(6.283185307179586, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      int int0 = valueServer0.getMode();
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      doReturn((-1171.03706993)).when(randomDataImpl0).nextUniform(anyDouble() , anyDouble());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      valueServer0.setMode(2);
      double double0 = valueServer0.getNext();
      assertEquals(2, valueServer0.getMode());
      assertEquals((-1171.03706993), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      valueServer0.getValuesFileURL();
      assertEquals(5, valueServer0.getMode());
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      valueServer0.reSeed(5284L);
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
      assertEquals(5, valueServer0.getMode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-730));
      ValueServer valueServer0 = new ValueServer(mersenneTwister0);
      valueServer0.getEmpiricalDistribution();
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(0.0, valueServer0.getMu(), 0.01);
      assertEquals(5, valueServer0.getMode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      try { 
        valueServer0.setValuesFileURL("Aw$o`qb7)Hem");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: Aw$o`qb7)Hem
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ValueServer valueServer0 = new ValueServer();
      double double0 = valueServer0.getSigma();
      assertEquals(0.0, valueServer0.getMu(), 0.01);
      assertEquals(5, valueServer0.getMode());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      double double0 = valueServer0.getMu();
      assertEquals(0.0, valueServer0.getSigma(), 0.01);
      assertEquals(5, valueServer0.getMode());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomDataImpl randomDataImpl0 = mock(RandomDataImpl.class, new ViolatedAssumptionAnswer());
      ValueServer valueServer0 = new ValueServer(randomDataImpl0);
      try { 
        valueServer0.computeDistribution();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
