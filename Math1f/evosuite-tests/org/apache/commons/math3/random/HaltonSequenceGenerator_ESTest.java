/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:37:51 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.HaltonSequenceGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HaltonSequenceGenerator_ESTest extends HaltonSequenceGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(1);
      haltonSequenceGenerator0.scramble(1, 1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(2);
      haltonSequenceGenerator0.scramble(2, (-4374), 2169, 2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(2);
      haltonSequenceGenerator0.scramble(2, (-4374), 2919, (-4374));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(2, intArray0, intArray0);
      haltonSequenceGenerator0.nextVector();
      haltonSequenceGenerator0.getNextIndex();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(2, intArray0, intArray0);
      haltonSequenceGenerator0.skipTo((-2683));
      haltonSequenceGenerator0.getNextIndex();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(1, intArray0, intArray0);
      // Undeclared exception!
      haltonSequenceGenerator0.skipTo(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(6);
      // Undeclared exception!
      try { 
        haltonSequenceGenerator0.scramble(6, (-2489), 0, 1053);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(1, intArray0, intArray0);
      haltonSequenceGenerator0.nextVector();
      // Undeclared exception!
      haltonSequenceGenerator0.nextVector();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = null;
      try {
        haltonSequenceGenerator0 = new HaltonSequenceGenerator((-1115), (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(1, intArray0, intArray0);
      haltonSequenceGenerator0.nextVector();
      // Undeclared exception!
      try { 
        haltonSequenceGenerator0.nextVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      HaltonSequenceGenerator haltonSequenceGenerator0 = null;
      try {
        haltonSequenceGenerator0 = new HaltonSequenceGenerator(157, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 157 out of [1, 40] range
         //
         verifyException("org.apache.commons.math3.random.HaltonSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(2, intArray0, (int[]) null);
      // Undeclared exception!
      try { 
        haltonSequenceGenerator0.skipTo(2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(6);
      haltonSequenceGenerator0.skipTo(6);
      assertEquals(7, haltonSequenceGenerator0.getNextIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[2];
      HaltonSequenceGenerator haltonSequenceGenerator0 = null;
      try {
        haltonSequenceGenerator0 = new HaltonSequenceGenerator(1, intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.random.HaltonSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = null;
      try {
        haltonSequenceGenerator0 = new HaltonSequenceGenerator(79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 79 out of [1, 40] range
         //
         verifyException("org.apache.commons.math3.random.HaltonSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      HaltonSequenceGenerator haltonSequenceGenerator0 = null;
      try {
        haltonSequenceGenerator0 = new HaltonSequenceGenerator((-1188), intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,188 out of [1, 40] range
         //
         verifyException("org.apache.commons.math3.random.HaltonSequenceGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(11);
      // Undeclared exception!
      try { 
        haltonSequenceGenerator0.scramble(2255, 2255, 1301, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      HaltonSequenceGenerator haltonSequenceGenerator0 = new HaltonSequenceGenerator(2, intArray0, (int[]) null);
      int int0 = haltonSequenceGenerator0.getNextIndex();
      assertEquals(0, int0);
  }
}
