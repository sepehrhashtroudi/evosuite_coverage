/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:38:42 GMT 2022
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Well1024a_ESTest extends Well1024a_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      int int0 = well1024a0.nextInt();
      assertEquals((-1014833092), int0);
      
      int int1 = well1024a0.next(0);
      assertEquals(381102545, int1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1812433253L);
      well1024a0.index = (-1337);
      // Undeclared exception!
      try { 
        well1024a0.next(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1337
         //
         verifyException("org.apache.commons.math3.random.Well1024a", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[8];
      well1024a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-110), (byte) (-23), (byte)77, (byte) (-34), (byte) (-32), (byte) (-49), (byte) (-61)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well1024a well1024a0 = new Well1024a(intArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(23);
      int int0 = well1024a0.next(1024);
      assertEquals((-1225671887), int0);
      
      well1024a0.next(1979);
      well1024a0.next(0);
      int int1 = well1024a0.next((-1225671887));
      assertEquals(120336, int1);
      
      int int2 = well1024a0.next(1090);
      assertEquals(0, int2);
  }
}
