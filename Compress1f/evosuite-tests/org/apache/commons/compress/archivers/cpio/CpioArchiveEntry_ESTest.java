/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 26 20:25:21 GMT 2023
 */

package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CpioArchiveEntry_ESTest extends CpioArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("H.!<qcKJ$6A8`>#}", 4294967295L);
      assertEquals(4294967295L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals("H.!<qcKJ$6A8`>#}", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setMode(32768L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("|p_S-E<-Ew_otm");
      cpioArchiveEntry0.setMode(24600L);
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertTrue(cpioArchiveEntry0.isBlockDevice());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("4eVs&2U|>-;8CAR", 76L);
      cpioArchiveEntry0.setMode(76L);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(76L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 0L);
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      
      cpioArchiveEntry0.setMode(0L);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setMode(36842L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertTrue(cpioArchiveEntry0.isRegularFile());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      
      cpioArchiveEntry0.setMode(0L);
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("&TOw5");
      cpioArchiveEntry0.setMode(6592L);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(6592L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("~)'2M`(jk/'$s", 2028L);
      cpioArchiveEntry0.setMode(824L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(824L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2);
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((short)2, short0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setUID(826L);
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(826L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      assertEquals(0L, cpioArchiveEntry0.getUID());
      
      cpioArchiveEntry0.setUID((-1L));
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", 0L);
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      
      cpioArchiveEntry0.setTime(0L);
      cpioArchiveEntry0.getTime();
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setSize(49152L);
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(49152L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("070702", 587L);
      cpioArchiveEntry0.setRemoteDeviceMin(587L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(587L, cpioArchiveEntry0.getSize());
      assertEquals(587L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals("070702", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setRemoteDeviceMin((-2085L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((-2085L), long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("kS");
      cpioArchiveEntry0.setRemoteDeviceMaj(277L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("kS", cpioArchiveEntry0.getName());
      assertEquals(277L, long0);
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setRemoteDeviceMaj((-2085L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-2085L), long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 1014L);
      cpioArchiveEntry0.setFormat((short)4);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(76L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setNumberOfLinks(61440L);
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(61440L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", 0L);
      cpioArchiveEntry0.setNumberOfLinks((-5646L));
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals((-5646L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setName("");
      cpioArchiveEntry0.getName();
      assertEquals("", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null, 1719L);
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      
      cpioArchiveEntry0.setMode(0L);
      cpioArchiveEntry0.getMode();
      assertEquals((-1L), cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setMode(32768L);
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(32768L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setInode(61440L);
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(61440L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setInode((-352L));
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals((-352L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.setGID(24576L);
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(24576L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setGID((-1573L));
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals((-1573L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setDeviceMin(1L);
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setDeviceMin((-6L));
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals((-6L), long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Y*Lo6R#y\"8e*|");
      cpioArchiveEntry0.setDeviceMaj(1676L);
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(1676L, long0);
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals("Y*Lo6R#y\"8e*|", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setDeviceMaj((-1743L));
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals((-1743L), long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 1014L);
      cpioArchiveEntry0.setFormat((short)4);
      cpioArchiveEntry0.setDevice(26L);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(76L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(26L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setChksum(61440L);
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(61440L, long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("1$vqVY");
      cpioArchiveEntry0.setChksum((-3298L));
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-3298L), long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("1$vqVY", cpioArchiveEntry0.getName());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setFormat((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMin((-2733L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDevice((-675L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMin(1L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMaj((short)8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDevice(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setChksum((-2558L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 1014L);
      cpioArchiveEntry0.setFormat((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(", masked mode: ");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null, 4096L);
      cpioArchiveEntry0.setFormat((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getChksum();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("4eVs&2U|>-;8CAR", 76L);
      cpioArchiveEntry0.setTime(76L);
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize(4294967326L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry size <4294967326>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null, 531L);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setFormat((short)8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2);
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((short)2, cpioArchiveEntry0.getFormat());
      assertNull(string0);
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry("", 4294967303L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry size <4294967303>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry size <-1>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("IqDTki_", 40960L);
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("^_?cf[j_KyZ: /B8J", 49152L);
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("|p_S-E<-Ew_otm");
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("|p_S-E<-Ew_otm", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setMode(32768L);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertFalse(boolean0);
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("&TOw5");
      cpioArchiveEntry0.setMode(6592L);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(6592L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setMode(36864L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(36864L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.setMode(16384L);
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("|p_S-E<-Ew_otm");
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("|p_S-E<-Ew_otm", cpioArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setMode(8192L);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(8192L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("|p_S-E<-Ew_otm");
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals("|p_S-E<-Ew_otm", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("|p_S-E<-Ew_otm");
      cpioArchiveEntry0.setMode(24600L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(24600L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("1u(tU<Fb9+@\"k#~BVa", 0L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("1u(tU<Fb9+@\"k#~BVa", cpioArchiveEntry0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(")9+2IcUGrU/P>0?4");
      cpioArchiveEntry0.setFormat((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMaj(3028L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      String string0 = cpioArchiveEntry0.getName();
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals("m", string0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      long long0 = cpioArchiveEntry0.getHeaderSize();
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(110L, long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("&TOw5");
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((short)1, short0);
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals("&TOw5", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 1014L);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(26L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals((-1L), long0);
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("1u(tU<Fb9+@\"k#~BVa", 0L);
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals("1u(tU<Fb9+@\"k#~BVa", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      cpioArchiveEntry0.setRemoteDevice((short)8);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(26L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("&TOw5");
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("&TOw5", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("L![C|L2l9CM", 1L);
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1L, cpioArchiveEntry0.getSize());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals("L![C|L2l9CM", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      cpioArchiveEntry0.setDevice((-4421L));
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(26L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-4421L), long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("&TOw5");
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals("&TOw5", cpioArchiveEntry0.getName());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("L![C|L2l9CM", 1L);
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(1L, cpioArchiveEntry0.getSize());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals("L![C|L2l9CM", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), long0);
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(0L, long0);
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110L, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), cpioArchiveEntry0.getTime());
      assertEquals((-1L), cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getNumberOfLinks());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }
}
