/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 26 20:13:26 GMT 2023
 */

package org.apache.commons.compress.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Set;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.changes.ChangeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChangeSet_ESTest extends ChangeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        changeSet0.perform(arArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-120), (byte)48);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/.*");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        changeSet0.perform(jarArchiveInputStream0, tarArchiveOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(mockFileInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      try { 
        changeSet0.perform(cpioArchiveInputStream0, zipArchiveOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      File file0 = MockFile.createTempFile("2:ZF4%-$QkBDm9RE", "P&Y))vFYP($oIkOSy\"g");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      changeSet0.add(cpioArchiveEntry0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        changeSet0.delete("P&Y))vFYP($oIkOSy\"g");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // P&Y))vFYP($oIkOSy\"g/.*
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      // Undeclared exception!
      try { 
        changeSet0.delete((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.Change", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        changeSet0.add((ArchiveEntry) null, tarArchiveInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.Change", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("2'6T0y,@4jn/GIa", 28L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      changeSet0.add(cpioArchiveEntry0, bufferedInputStream0);
      changeSet0.delete("W=NPSP#G}\"u]\"XzN-'");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("2'6T0y,@4jn/GIa", 28L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      changeSet0.add(cpioArchiveEntry0, bufferedInputStream0);
      changeSet0.delete("2'6T0y,@4jn/GIa");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      changeSet0.delete("2'6T0y,@4jn/GIa");
      changeSet0.delete("2'6T0y,@4jn/GIa");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)48);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/.*");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      changeSet0.perform(jarArchiveInputStream0, tarArchiveOutputStream0);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      Set set0 = changeSet0.asSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("IT]+");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
      changeSet0.add(zipArchiveEntry0, cpioArchiveInputStream0);
      // Undeclared exception!
      try { 
        changeSet0.delete("writ>#g to an input buff\"E");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }
}
