/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 26 20:14:35 GMT 2023
 */

package org.apache.commons.compress.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.changes.Change;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Change_ESTest extends Change_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      PipedInputStream pipedInputStream0 = new PipedInputStream(33188);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 31);
      Change change0 = new Change(tarArchiveEntry0, pushbackInputStream0);
      int int0 = change0.type();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2257);
      Change change0 = new Change(tarArchiveEntry0, pushbackInputStream0);
      change0.targetFile();
      assertEquals(2, change0.type());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Change change0 = new Change("");
      change0.targetFile();
      assertEquals(1, change0.type());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2257);
      Change change0 = new Change(tarArchiveEntry0, pushbackInputStream0);
      change0.getInput();
      assertEquals(2, change0.type());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Change change0 = new Change("luLWajsBc1^Le+d");
      change0.getEntry();
      assertEquals(1, change0.type());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2257);
      Change change0 = new Change(tarArchiveEntry0, pushbackInputStream0);
      change0.getEntry();
      assertEquals(2, change0.type());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Z=?}\"SLBhBLA}]u", 1263L);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1479));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Change change0 = new Change(cpioArchiveEntry0, dataInputStream0);
      change0.getEntry();
      assertEquals(2, change0.type());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JarEntry jarEntry0 = new JarEntry("");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(jarEntry0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Change change0 = new Change(jarArchiveEntry0, byteArrayInputStream0);
      change0.getEntry();
      assertEquals(2, change0.type());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      Change change0 = null;
      try {
        change0 = new Change(cpioArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.Change", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Change change0 = null;
      try {
        change0 = new Change((ArchiveEntry) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.Change", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Change change0 = null;
      try {
        change0 = new Change((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.Change", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Change change0 = new Change("?");
      change0.getInput();
      assertEquals(1, change0.type());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Change change0 = new Change("?");
      int int0 = change0.type();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Change change0 = new Change("?");
      change0.targetFile();
      assertEquals(1, change0.type());
  }
}
