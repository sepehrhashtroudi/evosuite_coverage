/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:58:47 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Weeks_ESTest extends Weeks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Weeks weeks1 = weeks0.minus((-702));
      boolean boolean0 = weeks1.isLessThan(weeks0);
      assertFalse(boolean0);
      assertEquals(702, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = Weeks.TWO;
      boolean boolean0 = weeks0.isGreaterThan(weeks1);
      assertEquals((-3550), weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      boolean boolean0 = weeks0.isGreaterThan((Weeks) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Period period0 = Period.weeks(2012);
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      Weeks weeks0 = Weeks.weeksIn(interval1);
      boolean boolean0 = weeks0.isLessThan((Weeks) null);
      assertEquals(2012, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-3548));
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime1);
      assertEquals(15426, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.plusYears(7);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate1, (ReadablePartial) localDate0);
      assertEquals((-365), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.plusMonths(40);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertEquals((-168), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Weeks weeks0 = hours0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Weeks weeks1 = weeks0.negated();
      Seconds seconds0 = weeks1.toStandardSeconds();
      assertEquals((-1814400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(10080, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.millis(0L);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(instant0, duration0, periodType0);
      Weeks weeks0 = period0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-708));
      Hours hours0 = weeks0.ONE.toStandardHours();
      assertEquals(168, hours0.getHours());
      assertEquals((-708), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.ONE.toStandardDuration();
      assertEquals(604800000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Weeks weeks0 = hours0.toStandardWeeks();
      Days days0 = weeks0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      assertEquals(14, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((-1330L), (PeriodType) null, (Chronology) buddhistChronology0);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      Weeks weeks1 = Weeks.MIN_VALUE;
      Weeks weeks2 = weeks0.plus(weeks1);
      assertEquals(0, weeks0.getWeeks());
      assertEquals(Integer.MIN_VALUE, weeks2.getWeeks());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Weeks weeks1 = weeks0.plus(0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks("P2W");
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks("P-2147483648W");
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Weeks weeks0 = hours0.toStandardWeeks();
      weeks0.negated();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Weeks weeks1 = weeks0.ONE.multipliedBy(2086);
      Weeks weeks2 = weeks0.minus(weeks1);
      Minutes minutes0 = weeks2.toStandardMinutes();
      assertEquals((-21016800), minutes0.getMinutes());
      assertEquals(2086, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-708));
      Weeks weeks1 = weeks0.THREE.multipliedBy((-708));
      assertEquals((-2124), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Weeks weeks1 = weeks0.minus((-702));
      Weeks weeks2 = weeks1.plus(weeks1);
      Weeks weeks3 = weeks1.minus(weeks2);
      assertEquals(702, weeks1.getWeeks());
      assertNotSame(weeks3, weeks1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(65);
      Weeks weeks1 = weeks0.minus(65);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = weeks0.minus(3814);
      assertEquals((-264), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-708));
      int int0 = weeks0.getWeeks();
      assertEquals((-708), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = weeks0.dividedBy(568);
      assertEquals((-3550), weeks0.getWeeks());
      assertEquals((-6), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(9223372036854775807L);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -15250282150
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 604800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 10080
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 168
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        weeks0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 7
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.EIGHT;
      // Undeclared exception!
      try { 
        Weeks.standardWeeksIn(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P8M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        weeks0.plus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        weeks0.MIN_VALUE.plus((-3933));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -3933
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weeks.parseWeeks("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        weeks0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.multipliedBy((-1004));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * -1004
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(63158400000L, (Chronology) islamicChronology0);
      Partial partial0 = new Partial(localDateTime0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) partial0, (ReadablePartial) localDateTime0);
      Weeks weeks1 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        weeks0.minus(weeks1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.MAX_VALUE.minus(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Weeks", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.ONE.plus(0);
      assertEquals(306783378, weeks0.getWeeks());
      assertEquals(1, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Weeks weeks0 = hours0.toStandardWeeks();
      Weeks weeks1 = weeks0.plus((-651));
      assertEquals((-651), weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(2);
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(1);
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      assertEquals("weeks", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Weeks weeks1 = Weeks.THREE;
      boolean boolean0 = weeks0.isLessThan(weeks1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      boolean boolean0 = weeks0.isLessThan((Weeks) null);
      assertEquals(0, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      boolean boolean0 = weeks0.isLessThan(weeks0);
      assertEquals(0, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = Weeks.MIN_VALUE;
      boolean boolean0 = weeks0.isGreaterThan(weeks1);
      assertEquals(306783378, weeks0.getWeeks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Weeks weeks1 = weeks0.minus((-702));
      boolean boolean0 = weeks1.isGreaterThan((Weeks) null);
      assertTrue(boolean0);
      assertEquals(702, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      boolean boolean0 = weeks0.isGreaterThan((Weeks) null);
      assertEquals(0, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      boolean boolean0 = weeks0.isGreaterThan(weeks0);
      assertFalse(boolean0);
      assertEquals((-3550), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Weeks weeks1 = weeks0.dividedBy(1);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      weeks0.THREE.minus((Weeks) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Days days0 = Days.ZERO;
      Weeks weeks0 = days0.toStandardWeeks();
      Weeks weeks1 = weeks0.plus((Weeks) null);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Weeks weeks0 = Weeks.weeksIn((ReadableInterval) null);
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalDate localDate0 = monthDay0.toLocalDate((-2558));
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Weeks weeks1 = weeks0.minus(weeks0);
      assertSame(weeks1, weeks0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Weeks weeks1 = weeks0.TWO.negated();
      Weeks weeks2 = weeks1.negated();
      Weeks weeks3 = weeks2.minus(1);
      Weeks weeks4 = weeks2.plus(weeks3);
      assertEquals((-2), weeks1.getWeeks());
      assertEquals(3, weeks4.getWeeks());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Weeks weeks1 = Weeks.standardWeeksIn(weeks0);
      assertEquals(Integer.MIN_VALUE, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      assertEquals((-596400), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      String string0 = weeks0.toString();
      assertEquals("P-3550W", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Seconds seconds1 = weeks0.ONE.toStandardSeconds();
      Weeks weeks1 = Weeks.standardWeeksIn(seconds1);
      assertEquals(1, weeks1.getWeeks());
      assertEquals(604800, seconds1.getSeconds());
      assertEquals((-3550), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Days days0 = weeks0.toStandardDays();
      assertEquals((-24850), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = weeks0.ZERO.minus((-2395));
      Weeks weeks2 = weeks1.dividedBy(568);
      assertEquals(4, weeks2.getWeeks());
      assertEquals(2395, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      int int0 = weeks0.getWeeks();
      assertEquals(306783378, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      weeks0.getPeriodType();
      assertEquals((-3550), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Weeks weeks0 = hours0.toStandardWeeks();
      Weeks weeks1 = weeks0.multipliedBy(1739);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-2395));
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals((-2147040000000L), duration0.getMillis());
  }
}
