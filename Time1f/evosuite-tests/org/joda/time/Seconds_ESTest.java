/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:52:40 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Seconds_ESTest extends Seconds_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Seconds seconds0 = Seconds.MAX_VALUE;
      Seconds seconds1 = hours0.toStandardSeconds();
      boolean boolean0 = seconds0.isLessThan(seconds1);
      assertEquals(14400, seconds1.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      boolean boolean0 = seconds0.isLessThan((Seconds) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.ONE;
      boolean boolean0 = seconds0.isGreaterThan(seconds1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      boolean boolean0 = seconds0.isGreaterThan((Seconds) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = new Period(2592000000L, (Chronology) null);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertEquals(2592000, seconds0.getSeconds());
      assertEquals(4, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(18);
      Weeks weeks0 = seconds0.MIN_VALUE.toStandardWeeks();
      assertEquals(18, seconds0.getSeconds());
      assertEquals((-3550), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      Minutes minutes1 = seconds0.toStandardMinutes();
      assertEquals(1, minutes1.getMinutes());
      assertEquals(60, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.MIN_VALUE.toStandardMinutes();
      assertEquals((-35791394), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = new Period(2592000000L, (Chronology) null);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Hours hours0 = seconds0.toStandardHours();
      assertEquals(720, hours0.getHours());
      assertEquals(2592000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-2430L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      assertEquals((-145800), seconds0.getSeconds());
      assertEquals((-40), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1000L);
      Duration duration1 = duration0.negated();
      Seconds seconds0 = duration1.toStandardSeconds();
      Duration duration2 = seconds0.toStandardDuration();
      assertEquals((-3600000000L), duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Seconds seconds0 = weeks0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      assertEquals(21, days0.getDays());
      assertEquals(1814400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Days days0 = seconds0.toStandardDays();
      assertEquals((-24855), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.hours((-1201));
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      assertEquals((-4323600), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = new DateTime(100000000000L);
      Duration duration0 = Duration.standardHours(1272L);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      Seconds seconds0 = Seconds.secondsIn(mutableInterval0);
      Duration duration1 = seconds0.toStandardDuration();
      assertEquals(4579200000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      LocalTime localTime1 = localTime0.withMinuteOfHour(1);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localTime1, (ReadablePartial) localTime0);
      assertEquals(1200, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.minus(seconds0);
      Seconds seconds1 = Seconds.secondsBetween((ReadablePartial) localTime1, (ReadablePartial) localTime0);
      assertEquals((-74753), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (Chronology) null);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertEquals(61200, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      DateTime dateTime0 = new DateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, 1);
      Seconds seconds1 = Seconds.secondsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      Seconds seconds2 = seconds0.ONE.plus(seconds1);
      assertEquals((-3599), seconds2.getSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = seconds0.plus(0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds("PT2147483647S");
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds("PT-2147483648S");
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1000L);
      Duration duration1 = duration0.negated();
      Seconds seconds0 = duration1.toStandardSeconds();
      seconds0.negated();
      assertEquals((-3600000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = days0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      Seconds seconds1 = seconds0.multipliedBy(0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Days days0 = weeks0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      Seconds seconds1 = seconds0.multipliedBy((-1));
      assertEquals(604800, seconds0.getSeconds());
      assertEquals((-604800), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(685L, (Chronology) iSOChronology0);
      Seconds seconds0 = period0.toStandardSeconds();
      Seconds seconds1 = seconds0.minus(0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Seconds seconds1 = seconds0.ZERO.minus(5);
      assertEquals(0, seconds0.getSeconds());
      assertEquals((-5), seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      int int0 = seconds0.getSeconds();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getSeconds();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period((-185L), (Chronology) buddhistChronology0);
      Period period1 = period0.minusDays((-3934));
      Days days0 = Days.standardDaysIn(period1);
      Seconds seconds0 = days0.toStandardSeconds();
      Seconds seconds1 = seconds0.dividedBy(1);
      assertEquals(339811200, seconds1.getSeconds());
      assertSame(seconds1, seconds0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Seconds seconds1 = seconds0.dividedBy((-431));
      Seconds seconds2 = seconds0.minus(seconds1);
      assertEquals(10825, seconds2.getSeconds());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      // Undeclared exception!
      try { 
        Seconds.standardSecondsIn(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P11M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        Seconds.standardSecondsIn(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -185542587187200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-648), (-2844), 0, 0, 0, 2253);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-648));
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.withEndMillis(326L);
      // Undeclared exception!
      try { 
        Seconds.secondsIn(interval1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30139603199
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[8];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1000L);
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      Days days0 = Days.MIN_VALUE;
      LocalDate localDate1 = localDate0.plus(days0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -185542587187200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((-4368L), (DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(871);
      DateTime dateTime0 = localDateTime1.toDateTime((DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 36041919685
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      Seconds seconds1 = seconds0.MAX_VALUE.negated();
      // Undeclared exception!
      try { 
        seconds1.plus(seconds1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        seconds0.plus((-290));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -290
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        seconds0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period((-185L), (Chronology) buddhistChronology0);
      Period period1 = period0.minusDays((-3934));
      Days days0 = Days.standardDaysIn(period1);
      Seconds seconds0 = days0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.multipliedBy(1407);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 339811200 * 1407
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        seconds0.MAX_VALUE.minus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
      try { 
        seconds0.TWO.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Seconds", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Period period0 = Period.hours(0);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Seconds seconds1 = seconds0.ONE.plus(0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(3);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Seconds seconds1 = seconds0.MAX_VALUE.minus(0);
      // Undeclared exception!
      try { 
        seconds1.minus((-1033));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1033
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertEquals("seconds", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1623);
      Seconds seconds1 = seconds0.THREE.plus((-641));
      boolean boolean0 = seconds1.isLessThan(seconds0);
      assertEquals((-638), seconds1.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      boolean boolean0 = seconds0.isLessThan((Seconds) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      boolean boolean0 = seconds0.isLessThan((Seconds) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1623);
      boolean boolean0 = seconds0.isLessThan(seconds0);
      assertEquals(1623, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Seconds seconds1 = Seconds.MAX_VALUE;
      Seconds seconds2 = seconds0.minus(seconds1);
      boolean boolean0 = seconds1.isGreaterThan(seconds2);
      assertEquals((-2147483647), seconds2.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      boolean boolean0 = seconds0.isGreaterThan((Seconds) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      boolean boolean0 = seconds0.isGreaterThan((Seconds) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      boolean boolean0 = seconds0.isGreaterThan(seconds0);
      assertEquals(0, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period((-185L), (Chronology) buddhistChronology0);
      Days days0 = Days.standardDaysIn(period0);
      Seconds seconds0 = days0.toStandardSeconds();
      Seconds seconds1 = seconds0.dividedBy(1);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Seconds seconds1 = seconds0.dividedBy(86400);
      assertSame(seconds1, seconds0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = seconds0.minus((Seconds) null);
      assertEquals(1, seconds1.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Days days0 = Days.ZERO;
      Seconds seconds0 = days0.toStandardSeconds();
      Seconds seconds1 = seconds0.plus((Seconds) null);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds((String) null);
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Seconds.parseSeconds("PeriodType[SecondsNoSeconds]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PeriodType[SecondsNoSeconds]\" is malformed at \"eriodType[SecondsNoSeconds]\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth0 = YearMonth.now((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      Seconds seconds1 = Seconds.THREE;
      Seconds seconds2 = seconds0.plus(seconds1);
      assertSame(seconds2, seconds1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(2);
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      String string0 = seconds0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      int int0 = seconds0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      seconds0.negated();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Seconds seconds1 = seconds0.ONE.multipliedBy(86400);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(86400, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Days days0 = Days.ZERO;
      Seconds seconds0 = days0.toStandardSeconds();
      seconds0.getPeriodType();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      Duration duration1 = seconds0.toStandardDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }
}
