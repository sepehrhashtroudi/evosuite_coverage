/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:15:51 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTime_ESTest extends DateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      dateTime0.toLocalDateTime();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfWeek();
      int int0 = 1;
      DateTime dateTime1 = dateTime0.withDayOfYear(1);
      dateTime1.withMonthOfYear(1);
      DateTimeZone.getDefault();
      int int1 = 712;
      dateTime0.getMillisOfDay();
      dateTime0.minusSeconds(712);
      dateTime1.millisOfDay();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy((-5271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5271 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((long) 84, (Chronology) buddhistChronology0);
      dateTime0.minusWeeks(425);
      // Undeclared exception!
      try { 
        DateTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = new DateTime((-709L), dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusMinutes(181);
      Hours hours0 = Hours.FIVE;
      DateTime dateTime2 = dateTime1.withPeriodAdded(hours0, (-1));
      dateTime2.plusMillis(1032);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      LocalTime localTime0 = new LocalTime((long) 1032);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(2147483484);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483484 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minus(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      durationFieldType0.isSupported(islamicChronology0);
      Chronology chronology0 = islamicChronology0.withZone((DateTimeZone) null);
      durationFieldType0.getField(chronology0);
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, (-390));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      durationFieldType0.getField(islamicChronology0);
      DateTime.Property dateTime_Property0 = dateTime2.property(dateTimeFieldType0);
      DateTime dateTime3 = dateTime_Property0.addToCopy((-390));
      dateTime1.secondOfDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      dateTime3.plus((ReadablePeriod) mutablePeriod0);
      dateTime0.monthOfYear();
      dateTime2.minusMonths((-390));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      DateTime.Property dateTime_Property0 = dateTime1.weekyear();
      int int0 = 1;
      DateTime dateTime2 = dateTime1.plusWeeks(1);
      DateTime dateTime3 = dateTime_Property0.addToCopy(1);
      dateTime3.getMillisOfSecond();
      DateTime dateTime4 = dateTime2.plusMillis(2680);
      Chronology chronology0 = null;
      dateTime2.getYear();
      dateTime2.withChronology((Chronology) null);
      dateTime4.withYear(0);
      DateTimeFieldType dateTimeFieldType0 = null;
      int int1 = (-3428);
      int int2 = new Integer(2680);
      // Undeclared exception!
      try { 
        dateTime2.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Period period0 = new Period(0L);
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) period0);
      DateTime dateTime2 = dateTime0.withCenturyOfEra(0);
      int int0 = (-1);
      DateTime dateTime3 = dateTime0.minusYears(0);
      period0.getFieldTypes();
      DateTime dateTime4 = dateTime1.withWeekyear((-1));
      DateTime dateTime5 = dateTime4.minus((ReadablePeriod) period0);
      dateTime5.toLocalDateTime();
      DateTime.Property dateTime_Property0 = dateTime2.minuteOfHour();
      dateTime_Property0.getMinimumValue();
      dateTime_Property0.compareTo((ReadableInstant) dateTime0);
      dateTime_Property0.getField();
      // Undeclared exception!
      try { 
        dateTime3.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      dateTime0.toLocalDate();
      DateTimeZone.forOffsetMillis(2);
      DateTime dateTime1 = new DateTime(1, 5, 2, 3, 1);
      Duration duration0 = Duration.ZERO;
      DateTime dateTime2 = dateTime0.plus((ReadableDuration) duration0);
      dateTime2.toLocalTime();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime3 = dateTime1.toDateTime((DateTimeZone) fixedDateTimeZone0);
      dateTime3.minuteOfDay();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) julianChronology0);
      LocalDate localDate1 = localDate0.minusDays(2223);
      LocalDate localDate2 = localDate1.plusWeeks(2223);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay(dateTimeZone1);
      DateTime dateTime1 = dateTime0.minusSeconds(2223);
      DateTime dateTime2 = dateTime1.minusYears(2223);
      dateTime2.withCenturyOfEra(2223);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      int int0 = 0;
      DateTime dateTime1 = dateTime0.withMillisOfSecond(0);
      dateTime1.toGregorianCalendar();
      // Undeclared exception!
      try { 
        dateTime1.withTime(3408, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3408 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      dateTime0.minusWeeks(2172);
      int int0 = 153;
      // Undeclared exception!
      try { 
        dateTime0.withEra(1628);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1628 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTime dateTime0 = new DateTime(chronology0);
      dateTime0.withMillis((-26L));
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      DateTime dateTime1 = dateTime_Property0.roundHalfFloorCopy();
      dateTime1.withYearOfCentury(1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(iSOChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) julianChronology0);
      ReadablePeriod readablePeriod0 = null;
      LocalDate localDate1 = localDate0.minus((ReadablePeriod) null);
      int int0 = 0;
      LocalDate localDate2 = localDate1.withPeriodAdded((ReadablePeriod) null, 0);
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay();
      int int1 = (-1);
      julianChronology0.set(localDate0, (-1));
      dateTime0.withPeriodAdded((ReadablePeriod) null, 0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withPivotYear(0);
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No file directory provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withDayOfMonth(1748);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1748 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.minusSeconds(1);
      ReadablePeriod readablePeriod0 = null;
      dateTime0.plus((ReadablePeriod) null);
      int int1 = 0;
      DateTime dateTime2 = dateTime1.plusMonths(0);
      int int2 = 15271875;
      dateTimeZone0.getName((long) 1);
      // Undeclared exception!
      try { 
        dateTime2.withWeekOfWeekyear(15271875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15271875 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) mutableDateTime0);
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) days0);
      dateTime1.minusDays(4016);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      days0.get(durationFieldType0);
      DateTime dateTime2 = dateTime0.plusMonths(4016);
      dateTime2.minuteOfDay();
      dateTime1.isBeforeNow();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      dateTimeZone0.toTimeZone();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeZone0.getShortName((-1256L), locale0);
      dateTime1.toDateTime(dateTimeZone0);
      dateTime1.toDateTime(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      int int0 = (-1);
      DateTime dateTime1 = dateTime0.withYear((-1));
      DateTime dateTime2 = dateTime1.toDateTime();
      DateTime dateTime3 = dateTime2.minusHours((-1));
      dateTime3.minuteOfHour();
      dateTime1.weekyear();
      DateTime dateTime4 = dateTime3.plusMillis((-1));
      dateTime3.minusMillis((-1));
      dateTime3.withLaterOffsetAtOverlap();
      dateTime0.plusDays(623158436);
      DateTime.now();
      dateTime2.plusHours(623158436);
      DateTimeField dateTimeField0 = null;
      // Undeclared exception!
      try { 
        dateTime4.withMonthOfYear((-1570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1570 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      dateTime0.isBefore((long) 0);
      DateTime dateTime1 = dateTime0.plusDays(0);
      int int0 = 93;
      // Undeclared exception!
      try { 
        dateTime1.withSecondOfMinute(93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 93 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      Period period0 = Period.years((-2832));
      Period period1 = period0.minusMonths((-2832));
      Period.seconds((-2832));
      Period period2 = period1.withMonths((-2832));
      int int0 = 1;
      period0.getWeeks();
      period0.plusHours(1);
      lenientChronology0.add((ReadablePeriod) period2, 0L, (-2832));
      DateTime dateTime0 = DateTime.now(chronology0);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      dateTime0.withMonthOfYear((-1));
      dateTime0.toDateTimeISO();
      Locale locale0 = new Locale("0+W#.}$~ZV1<ie!+");
      locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy("America/Los_Angeles", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"America/Los_Angeles\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      int int0 = (-1);
      DateTime dateTime1 = dateTime0.withYear((-1));
      DateTime dateTime2 = dateTime1.toDateTime();
      DateTime dateTime3 = dateTime2.minusHours((-1));
      dateTime1.weekyear();
      DateTime dateTime4 = dateTime3.plusMillis((-1));
      dateTime3.minusMillis((-1));
      dateTime3.withLaterOffsetAtOverlap();
      dateTime0.plusDays(623158436);
      DateTime.now();
      DateTimeField dateTimeField0 = null;
      // Undeclared exception!
      try { 
        dateTime4.withMonthOfYear((-1570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1570 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      dateTime0.dayOfYear();
      dateTime0.plus((ReadablePeriod) null);
      dateTime0.millisOfDay();
      String string0 = "`h]X;CzVHI";
      // Undeclared exception!
      try { 
        DateTimeZone.forID("`h]X;CzVHI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '`h]X;CzVHI' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1L));
      int int0 = 0;
      DateTime dateTime1 = dateTime0.withHourOfDay(0);
      Instant instant0 = dateTime1.toInstant();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime2 = instant0.toDateTime((Chronology) buddhistChronology0);
      DateTimeZone.forOffsetMillis(1);
      dateTime2.getCenturyOfEra();
      dateTime2.withWeekOfWeekyear(1);
      // Undeclared exception!
      try { 
        Instant.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      dateTime0.isBeforeNow();
      LocalDate localDate0 = new LocalDate(63072000000L);
      localDate0.toString("H<.Y+x[");
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
      DateTime dateTime1 = dateTime0.withFields(localDate1);
      String string0 = "";
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(1402);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(3472);
      DateTime.parse("", dateTimeFormatter4);
      DateTime.Property dateTime_Property0 = dateTime1.centuryOfEra();
      // Undeclared exception!
      try { 
        dateTime_Property0.addToCopy(63072000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 6307200000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-906));
      Locale locale0 = Locale.CHINA;
      dateTimeZone0.getName(0L, locale0);
      dateTimeZone0.previousTransition(0L);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      dateTime0.secondOfDay();
      dateTime0.weekOfWeekyear();
      dateTime0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      durationFieldType0.getField(chronology0);
      dateTime0.withFieldAdded(durationFieldType0, 1);
      dateTime0.toDateTime(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      dateTime0.toLocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      Duration duration0 = Duration.ZERO;
      DateTime dateTime2 = dateTime0.plus((ReadableDuration) duration0);
      dateTime2.toLocalTime();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime3 = dateTime1.toDateTime((DateTimeZone) fixedDateTimeZone0);
      dateTime3.minuteOfDay();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      dateTime0.plusMinutes(55);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldType0.getRangeDurationType();
      String string0 = "L";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("L", classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"L/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$AppClassLoader@0000000011
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 0, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, 0, (-503), 0, (-503), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -503 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      dateTime0.yearOfCentury();
      int int0 = (-2705);
      dateTime0.minusWeeks((-2705));
      DateTime dateTime1 = dateTime0.plus(0L);
      // Undeclared exception!
      try { 
        dateTime1.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      dateTime0.getCenturyOfEra();
      Duration duration0 = Duration.standardSeconds(0L);
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) duration0);
      DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
      dateTime0.isSupported((DateTimeFieldType) null);
      dateTime0.millisOfSecond();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      Hours hours0 = Hours.FIVE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.seconds();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.eras();
      durationFieldTypeArray0[2] = durationFieldType2;
      DurationFieldType durationFieldType3 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[3] = durationFieldType3;
      int[] intArray0 = new int[7];
      intArray0[0] = 20;
      intArray0[1] = 20;
      intArray0[2] = 20;
      intArray0[3] = 20;
      intArray0[4] = 20;
      intArray0[5] = 20;
      intArray0[6] = 20;
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime2, periodType0);
      dateTime0.plus((ReadablePeriod) period0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusMinutes((-250));
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimePrinter0).estimatePrintedLength();
      dateTime1.minusHours((-250));
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer integer0 = new Integer(153692453);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(153692453);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      dateTimeFormatter1.withZone(dateTimeZone0);
      Integer.min(153692453, 1050);
      Chronology chronology0 = iSOChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      dateTime0.toString(dateTimeFormatter4);
      dateTime1.toLocalDateTime();
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      dateTime_Property0.getDateTime();
      dateTime_Property0.getAsString();
      // Undeclared exception!
      try { 
        dateTime1.withMinuteOfHour(153692453);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 153692453 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      DateTime dateTime1 = dateTime0.plusSeconds((-1));
      // Undeclared exception!
      try { 
        dateTime1.withMinuteOfHour((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis(58L);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      instant1.isBefore(58L);
      DateTime dateTime0 = instant1.toDateTime((Chronology) iSOChronology0);
      Period period0 = Period.years(1445);
      iSOChronology0.add((ReadablePeriod) period0, 3004L, 1445);
      instant1.minus(0L);
      dateTime0.withFields((ReadablePartial) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.minusMinutes(1);
      DateTime dateTime2 = dateTime0.withYear(1);
      dateTime0.getMillisOfDay();
      dateTime2.isAfter(dateTime1);
      dateTime0.withCenturyOfEra(1);
      dateTime0.getEra();
      DateTime dateTime3 = dateTime0.withDayOfMonth(1);
      dateTime3.getEra();
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfDay((-714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -714 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTime(4, 4, 4, 4);
      int int0 = 365;
      DateTime dateTime2 = dateTime1.minusDays(365);
      DateTime dateTime3 = dateTime2.withWeekyear(4);
      // Undeclared exception!
      try { 
        dateTime3.withDayOfMonth((-2737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2737 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2639);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1666));
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 1, (-2639), 0, 0, 0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2639 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      int int0 = (-1218);
      DateTime dateTime1 = dateTime0.plusSeconds((-1218));
      DateTime dateTime2 = dateTime1.toDateTime();
      dateTime1.toDateTimeISO();
      int int1 = 0;
      // Undeclared exception!
      try { 
        dateTime2.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, 0, (-570), (-570), 0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -570 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withYearOfCentury(2087);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2087 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withYearOfCentury(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTime dateTime2 = dateTime1.withField(dateTimeFieldType0, 0);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      dateTime2.withFieldAdded(durationFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      DateTime.Property dateTime_Property0 = dateTime1.weekyear();
      int int0 = 1;
      DateTime dateTime2 = dateTime1.plusWeeks(1);
      DateTime dateTime3 = dateTime_Property0.addToCopy(1);
      dateTime3.getMillisOfSecond();
      DateTime dateTime4 = dateTime2.plusMillis(2680);
      Chronology chronology0 = null;
      dateTime2.getYear();
      dateTime2.withChronology((Chronology) null);
      DateTime dateTime5 = dateTime4.withYear(0);
      DateTimeFieldType dateTimeFieldType0 = null;
      int int1 = (-3428);
      dateTime0.getWeekyear();
      dateTime0.plusSeconds(192);
      // Undeclared exception!
      try { 
        dateTime5.withDate(2014, 0, 4058);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Period period0 = new Period(0L);
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) period0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTime1.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = (-1446L);
      int int0 = 0;
      DateTimeZone.forOffsetHours(0);
      int int1 = 74;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-3013), (-3013), 0, (-3013), 0, 74, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3013 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(1, 675, 675, 675, 1168, 675, 1168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 675 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      DateTime dateTime2 = dateTime1.withPeriodAdded(seconds0, 0);
      DateTime.Property dateTime_Property0 = dateTime2.yearOfCentury();
      dateTime_Property0.withMinimumValue();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDate localDate0 = new LocalDate((long) 1);
      localDate0.monthOfYear();
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      int int0 = 2223;
      seconds0.multipliedBy(2223);
      seconds0.negated();
      buddhistChronology0.get((ReadablePeriod) seconds0, 0L);
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTime0.toCalendar(locale0);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      DateTime dateTime1 = dateTime_Property0.roundHalfCeilingCopy();
      dateTime_Property0.addToCopy((long) 2223);
      // Undeclared exception!
      try { 
        dateTime1.withMinuteOfHour(1061);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1061 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 122, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 122 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(1272, 0, 1272, 719527, 282, 282);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 719527 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withHourOfDay(4114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4114 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withUTC();
      DateTime dateTime0 = DateTime.now(chronology0);
      DateTime.Property dateTime_Property0 = dateTime0.era();
      dateTime_Property0.getMillis();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(313);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTime0.withDate(0, 313, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 313 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      Weeks weeks0 = Weeks.TWO;
      // Undeclared exception!
      try { 
        dateTime1.withDate(0, (-86399999), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -86399999 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period((-3L), 486L, (PeriodType) null);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) period0);
      dateTime1.millisOfDay();
      DateTime dateTime2 = DateTime.now();
      int int0 = (-1820);
      dateTime1.plusYears((-1820));
      int int1 = (-330);
      Minutes minutes0 = Minutes.minutes((-330));
      Duration duration0 = minutes0.toStandardDuration();
      dateTime2.minus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        dateTime2.withCenturyOfEra((-330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -330 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      dateTime0.toLocalDateTime();
      dateTime0.dayOfWeek();
      int int0 = 1;
      DateTime dateTime1 = dateTime0.withDayOfYear(1);
      DateTime dateTime2 = dateTime1.withMonthOfYear(1);
      DateTimeZone.getDefault();
      int int1 = 712;
      // Undeclared exception!
      try { 
        dateTime2.withDayOfWeek(712);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 712 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Months months0 = Months.TWELVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      dateTime0.withFieldAdded(durationFieldType0, (-5232));
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      DateTime.Property dateTime_Property0 = dateTime0.year();
      dateTime_Property0.getDateTime();
      dateTime1.dayOfYear();
      dateTime1.minusMonths((-1798));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      dateTime0.minusMillis(1314);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1314, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1314
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 273;
      int int1 = 2846;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(273, (-1212), (-1212), 2846, (-1212), 2846, dateTimeZone1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2846 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("hq-c/LLa+-$-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"hq-c/LLa+-$-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(273, (-1212), (-1212), 2846, (-1212), 2846, dateTimeZone1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2846 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1495), (-1495), 3623, 1681, 3623, (-1495), chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1495 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1327;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1327);
      dateTimeZone0.getNameKey(1327);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime(1421L, (Chronology) ethiopicChronology0);
      DateTime dateTime1 = dateTime0.withEra(1);
      dateTime1.withMillis(1);
      dateTime0.withZone(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime1.dayOfYear();
      dateTimeZone0.equals((Object) null);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1266L));
      DateTime dateTime1 = dateTime0.minusWeeks((-1));
      DateTime dateTime2 = dateTime1.minusMinutes(1983);
      DateTime.Property dateTime_Property0 = dateTime2.secondOfDay();
      dateTime_Property0.addWrapFieldToCopy(0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 3453;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, 3453, 3453);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3453 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "";
      uTCProvider0.getZone("");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(islamicChronology0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 400;
      int int1 = 623158436;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(400, 400, 623158436, 400, 400);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 400 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTime dateTime0 = new DateTime((Object) null, chronology0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.minusMinutes(3);
      DateTime.Property dateTime_Property0 = dateTime1.yearOfEra();
      mutableDateTime0.getWeekOfWeekyear();
      dateTime1.toDateTime((Chronology) null);
      dateTime_Property0.getDifferenceAsLong(mutableDateTime0);
      mutableDateTime0.toGregorianCalendar();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTime0.withZoneRetainFields(dateTimeZone0);
      dateTime0.withDayOfYear(2);
      dateTime1.toDateTimeISO();
      DateTime dateTime2 = dateTime1.withMillisOfSecond(5);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTime2.withField(dateTimeFieldType0, 0);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for yearOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.secondOfDay();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for secondOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(0L, dateTimeZone1);
      dateTime0.withMonthOfYear(1);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      // Undeclared exception!
      try { 
        DateTime.parse("y{h<6$&Cgoq3%", dateTimeFormatter4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"y{h<6$&Cgoq3%\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 2883;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-512), 3217, 2883, 1632, 0, lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -512 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = (-1);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1158), (-1), (-1), 0, 3490, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3490 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2726, 0, 0, 0, 0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(3773, 3773, 3773, 2768, 3773, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2768 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Hours hours0 = Hours.MIN_VALUE;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) hours0);
      dateTime1.weekOfWeekyear();
      dateTime0.minusSeconds(0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Dj:");
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withChronology((Chronology) null);
      dateTime1.minus((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("' is not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"' is not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(islamicChronology_LeapYearPatternType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology$LeapYearPatternType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 11;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plus((long) 0);
      DateTime dateTime2 = dateTime1.minusMillis((-1581));
      DateTime dateTime3 = dateTime2.minusSeconds(0);
      DateTime dateTime4 = dateTime3.withYear(0);
      DateTime.Property dateTime_Property0 = dateTime4.dayOfWeek();
      dateTime_Property0.getAsShortText((Locale) null);
      Chronology chronology0 = null;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1581), (-2756), 3180, 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1581 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withDayOfYear(1);
      DateTime dateTime0 = localDateTime1.toDateTime((DateTimeZone) fixedDateTimeZone0);
      IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Duration duration0 = Duration.standardMinutes(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, 766);
      DateTime dateTime2 = dateTime1.withMillisOfSecond(0);
      fixedDateTimeZone0.getOffset((long) 766);
      DateTime dateTime3 = dateTime2.withMillisOfDay(9);
      dateTime3.withTimeAtStartOfDay();
      dateTime1.minusYears((-102));
      dateTime3.monthOfYear();
      dateTime3.plusMinutes((-1841));
      dateTime2.minusHours(766);
      dateTime0.minuteOfDay();
      // Undeclared exception!
      try { 
        localDateTime0.withWeekOfWeekyear((-6223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -6223 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 121;
      int int1 = 0;
      int int2 = 145;
      DateTimeZone.forOffsetMillis(121);
      String string0 = "";
      // Undeclared exception!
      try { 
        MutableDateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      int int0 = 0;
      DateTime dateTime1 = dateTime0.withEra(1);
      DateTime dateTime2 = dateTime1.plusYears(1);
      dateTime2.withDurationAdded((long) 1, (-292269337));
      DateTime dateTime3 = dateTime0.plusHours(0);
      dateTime3.withWeekyear(30);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      Locale locale0 = Locale.JAPANESE;
      dateTimeZone0.getName(0L, locale0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      dateTime0.withFieldAdded(durationFieldType0, 0);
      DateTime dateTime1 = dateTime0.plusMillis(0);
      // Undeclared exception!
      try { 
        dateTime1.withMonthOfYear(2707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2707 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.withUTC();
      StrictChronology.getInstance(ethiopicChronology0);
      String string0 = "The DateTimeFieldType must not be null";
      long long0 = (-56041211087169L);
      long long1 = 86400000L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        ethiopicChronology0.validate((ReadablePartial) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.centuryOfEra();
      DateTime dateTime1 = dateTime_Property0.withMaximumValue();
      Duration duration0 = Duration.ZERO;
      DateTime dateTime2 = dateTime1.minus((ReadableDuration) duration0);
      DateTime dateTime3 = dateTime_Property0.roundHalfEvenCopy();
      dateTime3.plus((-403L));
      dateTime1.secondOfMinute();
      int int0 = (-1376);
      // Undeclared exception!
      try { 
        dateTime2.withEra((-1376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1376 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
