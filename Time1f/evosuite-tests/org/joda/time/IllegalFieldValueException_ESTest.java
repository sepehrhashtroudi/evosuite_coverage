/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:43:02 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalFieldValueException_ESTest extends IllegalFieldValueException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      Long long0 = new Long(1L);
      Double double0 = new Double(0.0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, long0, long0, double0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 1 for seconds must be in the range [1,0.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(1.0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("'j", double0, double0, double0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 1.0 for 'j must be in the range [1.0,1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float((-9.0));
      Short short0 = new Short((short) (-1));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("(4rYJh_Jv0OZ2>=`C", float0, float0, short0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value -9.0 for (4rYJh_Jv0OZ2>=`C must be in the range [-9.0,-1]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Float float0 = new Float(0.0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("d(xK6vx5X lVN,#6ho", float0, float0, float0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 0.0 for d(xK6vx5X lVN,#6ho must be in the range [0.0,0.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1.0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("'j", double0, double0, double0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 1.0 for 'j must be in the range [1.0,1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float((-9.0));
      Short short0 = new Short((short) (-1));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("(4rYJh_Jv0OZ2>=`C", float0, float0, short0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value -9.0 for (4rYJh_Jv0OZ2>=`C must be in the range [-9.0,-1]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value \"\" for dayOfWeek is not supported", illegalFieldValueException0.getMessage());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "5%su");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"5%su\" for millisOfSecond is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"\" for dayOfWeek is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(1736L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("aZ.CL9c?h2O!", long0, long0, long0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 1736 for aZ.CL9c?h2O! must be in the range [1736,1736]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = Long.getLong("7", 0L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("Y9qw^/95g=", long0, long0, long0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 0 for Y9qw^/95g= must be in the range [0,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Double double0 = new Double((-1260.996396707295));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, double0, double0, double0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value -1260.996396707295 for years must be in the range [-1260.996396707295,-1260.996396707295]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, "!Au?1}XGT");
      illegalFieldValueException0.getFieldName();
      assertEquals("Value \"!Au?1}XGT\" for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "hourOfDay");
      illegalFieldValueException0.getFieldName();
      assertEquals("Value \"hourOfDay\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, " ");
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value \" \" for months is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, "nXM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      Short short0 = new Short((short)0);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, byte0, byte0, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, byte0, "XPT.H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(2465);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, integer0, integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "5%su");
      illegalFieldValueException0.prependMessage("5%su");
      assertEquals("5%su: Value \"5%su\" for millisOfSecond is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Double double0 = new Double(895.267000390321);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.prependMessage((String) null);
      assertEquals("Value 895.267000390321 for hourOfHalfday must be in the range [895.267000390321,895.267000390321]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (String) null);
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertNotNull(string0);
      assertEquals("Value null for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      Float float0 = new Float(0.0);
      Long long0 = new Long((-14L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, float0, long0, (Number) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "5%su");
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value \"5%su\" for millisOfSecond is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, (Number) null, byte0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Double double0 = new Double(895.267000390321);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value 895.267000390321 for hourOfHalfday must be in the range [895.267000390321,895.267000390321]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Double double0 = new Double(895.267000390321);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      String string0 = illegalFieldValueException0.getMessage();
      assertEquals("Value 895.267000390321 for hourOfHalfday must be in the range [895.267000390321,895.267000390321]", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      Long long0 = new Long(0L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, "");
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value 0 for dayOfMonth is not supported: ", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Double double0 = new Double(895.267000390321);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value 895.267000390321 for hourOfHalfday must be in the range [895.267000390321,895.267000390321]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      Long long0 = new Long(0L);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, "");
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 0 for dayOfMonth is not supported: ", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (String) null);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value null for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Double double0 = new Double(895.267000390321);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value 895.267000390321 for hourOfHalfday must be in the range [895.267000390321,895.267000390321]", illegalFieldValueException0.getMessage());
  }
}
