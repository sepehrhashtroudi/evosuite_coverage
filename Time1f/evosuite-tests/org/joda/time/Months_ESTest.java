/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:47:25 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Months_ESTest extends Months_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = new DateTime(0L, (Chronology) ethiopicChronology0);
      DateTime dateTime1 = dateTime0.minusWeeks(22);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      Months months1 = months0.multipliedBy(22);
      boolean boolean0 = months1.isLessThan(months0);
      assertEquals(110, months1.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.ONE;
      Months months1 = months0.plus(months0);
      boolean boolean0 = months0.isGreaterThan(months1);
      assertEquals(2, months1.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.ONE;
      Months months1 = Months.TWO;
      Months months2 = months0.plus(months1);
      assertEquals(3, months2.getMonths());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Months months1 = months0.plus(months0);
      assertEquals(0, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Months months0 = Months.ONE;
      Months months1 = Months.MIN_VALUE;
      Months months2 = months0.plus(months1);
      assertEquals((-2147483647), months2.getMonths());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTimeISO();
      Months months0 = Months.monthsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) dateTime0);
      Months months1 = months0.plus(0);
      assertEquals(0, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Months months1 = months0.FIVE.plus((-292269337));
      assertEquals((-292269332), months1.getMonths());
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Months months0 = Months.parseMonths("P2M");
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      months0.negated();
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.TWELVE;
      Months months1 = months0.multipliedBy((-498));
      months1.negated();
      assertEquals((-5976), months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1881L);
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) null);
      Months months0 = Months.monthsIn(interval0);
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(632L, (Chronology) null);
      LocalDate localDate1 = localDate0.plusDays((-1032));
      Months months0 = Months.monthsBetween((ReadablePartial) localDate1, (ReadablePartial) localDate0);
      assertEquals(33, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.THREE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 10);
      Months months1 = Months.monthsBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
      assertEquals((-10), months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.SEVEN;
      Instant instant0 = new Instant((Object) null);
      Interval interval0 = new Interval(months0, instant0);
      Duration duration0 = interval0.toDuration();
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      Months months1 = Months.monthsBetween((ReadableInstant) instant0, (ReadableInstant) instant1);
      assertEquals((-7), months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = new DateTime(0L, (Chronology) ethiopicChronology0);
      DateTime dateTime1 = dateTime0.minusWeeks(22);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      Months months1 = months0.THREE.minus(months0);
      assertEquals((-2), months1.getMonths());
      assertEquals(5, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      int int0 = months0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      int int0 = months0.getMonths();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.SEVEN;
      Months months1 = months0.SIX.dividedBy(1398);
      assertEquals(0, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Months months0 = Months.ONE;
      Months months1 = months0.MIN_VALUE.dividedBy(67);
      assertEquals((-32051994), months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Months months0 = Months.SEVEN;
      // Undeclared exception!
      try { 
        months0.MAX_VALUE.plus(months0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 7
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      // Undeclared exception!
      try { 
        months0.MAX_VALUE.plus(2312);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2312
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        months0.multipliedBy((-1490));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * -1490
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      int[] intArray0 = new int[2];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Months months0 = Months.FIVE;
      Months months1 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        months0.minus(months1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        months0.minus(5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -5
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.NINE;
      // Undeclared exception!
      try { 
        months0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(632L, (Chronology) null);
      Months months0 = Months.monthsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Months months1 = months0.SEVEN.plus(0);
      assertEquals(0, months0.getMonths());
      assertEquals(7, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Interval interval0 = new Interval((-941L), (-941L), dateTimeZone0);
      Months months0 = Months.monthsIn(interval0);
      months0.multipliedBy(0);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.months(6);
      assertEquals(6, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.months(8);
      assertEquals(8, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.months(7);
      assertEquals(7, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Months months0 = Months.months(0);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.months(1);
      assertEquals(1, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.TEN;
      Months months1 = Months.ELEVEN;
      boolean boolean0 = months0.isLessThan(months1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.TWO;
      boolean boolean0 = months0.isLessThan((Months) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.TEN;
      boolean boolean0 = months0.isLessThan(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Months months0 = Months.SEVEN;
      Months months1 = Months.FIVE;
      boolean boolean0 = months0.isGreaterThan(months1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = months0.minus(2);
      boolean boolean0 = months1.isGreaterThan((Months) null);
      assertFalse(boolean0);
      assertEquals(0, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.TWO;
      boolean boolean0 = months0.isGreaterThan((Months) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.TEN;
      boolean boolean0 = months0.isGreaterThan(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.TEN;
      Months months1 = months0.dividedBy(1);
      assertEquals(10, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = months0.minus((Months) null);
      assertEquals(2, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.THREE;
      Months months1 = months0.plus((Months) null);
      assertSame(months0, months1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      Months months0 = Months.monthsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Months months1 = months0.minus(months0);
      assertSame(months1, months0);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Months months0 = Months.parseMonths((String) null);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Months months0 = Months.months(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Months months0 = Months.months(12);
      assertEquals(12, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Months months0 = Months.FOUR;
      Months months1 = months0.SEVEN.plus(months0);
      assertEquals(11, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Months months0 = Months.months(9);
      assertEquals(9, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      Months months1 = Months.EIGHT;
      Months months2 = months0.plus(months1);
      assertSame(months2, months1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.months((-3469));
      Months months1 = months0.ELEVEN.minus(5);
      assertEquals((-3469), months0.getMonths());
      assertEquals(6, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.SEVEN;
      Months months1 = months0.TWELVE.minus(14);
      Months months2 = months1.plus(months0);
      assertEquals(5, months2.getMonths());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = months0.TWO.plus(2);
      assertEquals(4, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Months months0 = Months.months(2);
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Months months0 = Months.months(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      Months months1 = months0.TWELVE.negated();
      assertEquals((-12), months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Months months0 = Months.SEVEN;
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      int int0 = months0.getMonths();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      String string0 = months0.MAX_VALUE.toString();
      assertEquals("P2147483647M", string0);
  }
}
