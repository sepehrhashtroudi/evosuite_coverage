/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:08:32 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minutes_ESTest extends Minutes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Minutes minutes1 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan(minutes1);
      assertFalse(boolean0);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = Minutes.THREE;
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = Period.millis(58);
      Period period1 = period0.minusMinutes(30);
      Minutes minutes0 = Minutes.standardMinutesIn(period1);
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertEquals((-29), minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(213044, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals((-213044), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(10000000000000L, dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.minus(1415);
      Seconds seconds0 = minutes1.toStandardSeconds();
      assertEquals((-84720), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(326565);
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(5442, hours0.getHours());
      assertEquals(326565, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      assertEquals((-35791394), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(1814400L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Minutes minutes0 = Minutes.minutesIn(mutableInterval0);
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Duration duration0 = minutes0.MIN_VALUE.toStandardDuration();
      assertEquals(180, minutes0.getMinutes());
      assertEquals((-128849018880000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.hours(917);
      Minutes minutes0 = hours0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      assertEquals(55020, minutes0.getMinutes());
      assertEquals(38, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Days days0 = minutes0.toStandardDays();
      assertEquals((-1491308), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.minus(1415);
      Minutes minutes2 = Minutes.standardMinutesIn(minutes1);
      assertEquals((-1412), minutes2.getMinutes());
      assertEquals((-1412), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(60000L, (Chronology) buddhistChronology0);
      Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
      Minutes minutes1 = minutes0.plus(minutes0);
      assertEquals(2, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Minutes minutes1 = minutes0.MIN_VALUE.plus(minutes0);
      assertEquals((-1), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      Minutes minutes1 = minutes0.minus(292272984);
      Minutes minutes2 = minutes1.plus(292272984);
      assertEquals((-292272984), minutes1.getMinutes());
      assertEquals(0, minutes2.getMinutes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes("PT-370M");
      assertEquals((-370), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      Minutes minutes1 = minutes0.negated();
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(10000000000000L, dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy(0);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.minus(1415);
      Minutes minutes2 = minutes1.multipliedBy(1415);
      assertEquals((-1997980), minutes2.getMinutes());
      assertEquals((-1412), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis(0);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) instant1, (ReadableInstant) instant0);
      assertEquals(23206821, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.minus(minutes0);
      assertEquals(0, minutes1.getMinutes());
      assertEquals(360, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Minutes minutes1 = minutes0.MIN_VALUE.minus((Minutes) null);
      assertEquals(1, minutes1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.minus(3);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      int int0 = minutes0.getMinutes();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Minutes minutes1 = minutes0.MAX_VALUE.negated();
      int int0 = minutes1.getMinutes();
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        Minutes.standardMinutesIn(years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-2147483648Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.plus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 3
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.plus(1440);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1440
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.multipliedBy(40);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 40
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(4245);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -222165504000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1032));
      Minutes minutes1 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.minus(minutes1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.minus(394);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -394
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Minutes minutes0 = Minutes.minutesIn(mutableInterval0);
      // Undeclared exception!
      try { 
        minutes0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Minutes", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-2251L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus(4);
      assertEquals((-2247), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus(0);
      assertSame(minutes1, minutes0);
      assertEquals(120, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2);
      assertEquals(2, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      assertEquals(1, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      minutes0.getFieldType();
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      boolean boolean0 = minutes0.isLessThan(minutes0);
      assertEquals(0, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Interval interval0 = Interval.parse((String) null);
      Minutes minutes1 = Minutes.minutesIn(interval0);
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertTrue(boolean0);
      assertEquals(2880, minutes0.getMinutes());
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Period period0 = Period.years(58);
      Period period1 = period0.multipliedBy(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period1);
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertFalse(boolean0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan(minutes0);
      assertEquals(2880, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Minutes minutes1 = minutes0.TWO.dividedBy(1);
      assertEquals(2, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.dividedBy(1968);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      Minutes minutes1 = minutes0.ONE.minus((Minutes) null);
      boolean boolean0 = minutes0.isLessThan(minutes1);
      assertTrue(boolean0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      Minutes minutes1 = minutes0.plus((Minutes) null);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      Minutes minutes1 = minutes0.minus(1651);
      Minutes minutes2 = minutes1.dividedBy(6);
      assertEquals((-275), minutes2.getMinutes());
      assertEquals((-1651), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.parseMinutes("~S]BxM4\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"~S]BxM4
         // \"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-183L));
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      Minutes minutes1 = minutes0.MAX_VALUE.negated();
      minutes1.negated();
      assertEquals((-2147483647), minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = minutes0.multipliedBy(1415);
      assertEquals(4245, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals(172800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3);
      Minutes minutes1 = minutes0.minus((-292272984));
      assertEquals(292272987, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      String string0 = minutes0.toString();
      assertEquals("PT0M", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Instant instant0 = new Instant();
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      int int0 = minutes0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      minutes0.getPeriodType();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Days days1 = minutes0.ONE.toStandardDays();
      assertEquals(0, days1.getDays());
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Weeks weeks0 = minutes0.ONE.toStandardWeeks();
      assertEquals(2880, minutes0.getMinutes());
      assertEquals(0, weeks0.getWeeks());
  }
}
