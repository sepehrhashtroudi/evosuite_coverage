/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:46:28 GMT 2022
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicGJChronology_ESTest extends BasicGJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      long long0 = gregorianChronology0.getYearDifference((-3L), (-3L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = gregorianChronology0.getDayOfMonth(1181L, 2835);
      assertEquals((-315933), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      long long0 = gregorianChronology0.setYear((-182L), 292272992);
      assertEquals(9223182643881599818L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.getYearDifference(5313, (-12219292800000L));
      assertEquals(387L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      long long0 = gregorianChronology0.getYearDifference(599L, 292278993);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.getTotalMillisByYearMonth(1, 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      long long0 = julianChronology0.getTotalMillisByYearMonth((-19), 12);
      assertEquals(28857600000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      JulianChronology julianChronology0 = new JulianChronology(islamicChronology0, islamicChronology0, 1);
      int int0 = julianChronology0.getDaysInYearMonth(1, 1);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = gregorianChronology0.getDaysInMonthMax(1);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(5313, (-1360));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1361
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      // Undeclared exception!
      try { 
        gregorianChronology0.getDaysInYearMonth(31, 292278993);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 292278992
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = gregorianChronology0.getDaysInMonthMaxForSet(1800000L, 28);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear(5097600000L);
      assertEquals(6220800000L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      long long0 = julianChronology0.setYear(3113, (-2340));
      assertEquals((-135981676796887L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.getYearDifference(292272992L, (-613L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int[] intArray0 = gregorianChronology0.get((ReadablePeriod) mutablePeriod0, (-109219708800000L), (-680L));
      assertArrayEquals(new int[] {3461, 0, 1, 5, 23, 59, 59, 320}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = gregorianChronology0.getDaysInMonthMaxForSet((-3707L), (-1879048191));
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int[] intArray0 = gregorianChronology0.get((ReadablePeriod) mutablePeriod0, (-109787788800000L), (-680L));
      assertArrayEquals(new int[] {3479, 0, 1, 6, 23, 59, 59, 320}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      int int0 = julianChronology0.getMonthOfYear(968L, 539);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now((Chronology) julianChronology0);
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.plusMonths((-10));
      assertEquals(2013, yearMonth1.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(4, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.minusYears((-10));
      YearMonth yearMonth2 = yearMonth1.plusMonths(1);
      assertEquals(3, yearMonth2.getMonthOfYear());
      assertEquals(2024, yearMonth2.getYear());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(1L, (Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2087);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LocalDateTime localDateTime2 = localDateTime1.withField(dateTimeFieldType0, 2087);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth(122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 122 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.minusYears((-10));
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals((-521), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = gregorianChronology0.getDaysInMonthMax((-61378387200000L));
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      int int0 = julianChronology0.getDaysInMonthMaxForSet(23932800000L, 452);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      JulianChronology julianChronology0 = new JulianChronology(ethiopicChronology0, ethiopicChronology0, 1);
      // Undeclared exception!
      try { 
        julianChronology0.getDaysInMonthMax(29589031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29589030
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }
}
