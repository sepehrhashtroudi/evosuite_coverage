/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:13:47 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Duration_ESTest extends Duration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-488L));
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-770));
      assertEquals(540391680L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2629800000L);
      Duration duration1 = duration0.ZERO.withMillis(2629800000L);
      assertEquals(2629800L, duration1.getStandardSeconds());
      assertEquals(227214720000000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.withMillis((-9223372036854775808L));
      assertEquals((-2562047788015L), duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.millis((-2813L));
      Duration duration1 = duration0.withMillis((-1617L));
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals((-1617L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(10080L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.millis(60000L);
      Duration duration1 = duration0.withDurationAdded(60000L, (-2514));
      assertEquals((-2513L), duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardDays(10000L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(864000000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3514L));
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals((-12650400L), duration0.getStandardSeconds());
      assertEquals((-12650400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 60, 1, 1, 1, (-1173), (-771), 86400000);
      Instant instant0 = new Instant((long) 86400000);
      Duration duration0 = mutablePeriod0.toDurationTo(instant0);
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(2641274, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3514L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals((-210840), minutes0.getMinutes());
      assertEquals((-210840L), duration0.getStandardMinutes());
      assertEquals((-12650400000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Duration duration0 = hours0.toStandardDuration();
      Hours hours1 = duration0.toStandardHours();
      assertEquals(3, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Days days1 = duration0.toStandardDays();
      assertEquals(7, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-488L));
      Days days0 = duration0.toStandardDays();
      assertEquals((-42163200000L), duration0.getMillis());
      assertEquals((-488), days0.getDays());
      assertEquals((-488L), duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.toDuration();
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-86400000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-500L));
      Duration duration1 = duration0.toDuration();
      assertEquals((-500000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-12219292800000L));
      assertEquals((-12219292800000000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3567L));
      assertEquals((-214020L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-481L));
      assertEquals((-28860000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(827L);
      Duration duration2 = duration1.plus((ReadableDuration) duration0);
      assertEquals(4140L, duration2.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.millis(1310L);
      Duration duration1 = duration0.ZERO.plus((ReadableDuration) duration0);
      assertEquals(1310L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-488L));
      Duration duration1 = duration0.plus((ReadableDuration) null);
      assertEquals((-42163200000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Duration duration1 = duration0.plus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.plus((long) 1676);
      assertEquals(604801L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-878));
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.negated();
      assertEquals(531014400L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-267L));
      Duration duration1 = duration0.dividedBy((-267L));
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      Duration duration3 = duration2.negated();
      assertEquals((-964800000L), duration3.getMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.millis((-2813L));
      Duration duration1 = duration0.negated();
      assertEquals(2813L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy((-1472L));
      assertEquals((-890265600L), duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 1820);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals(157248000000L, duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = Duration.standardMinutes(1814400000L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals((-108863978400000L), duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.millis(1002L);
      Duration duration1 = duration0.multipliedBy(1002L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertEquals((-16L), duration2.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(10000000000000L);
      Duration duration1 = duration0.minus(10000000000000L);
      assertEquals(115625000L, duration1.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-488L));
      Duration duration1 = duration0.minus((-488L));
      assertEquals((-42163199512L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1L));
      Duration duration1 = duration0.minus(2062L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      Duration duration3 = duration2.toDuration();
      Duration duration4 = duration3.minus(0L);
      assertSame(duration4, duration2);
      assertEquals(0L, duration4.getStandardHours());
      assertEquals((-3602062L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.millis(1814400000L);
      assertEquals(1814400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 60, 1, 1, 1, (-1173), (-771), 86400000);
      Instant instant0 = new Instant((long) 86400000);
      Duration duration0 = mutablePeriod0.toDurationTo(instant0);
      long long0 = duration0.getStandardSeconds();
      assertEquals(158476449L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-3505L));
      long long0 = duration0.getStandardSeconds();
      assertEquals((-302832000L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = new Duration((-1688L), 4578L);
      long long0 = duration0.getStandardMinutes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3514L));
      Duration duration1 = duration0.dividedBy((-3514L));
      long long0 = duration1.getStandardMinutes();
      assertEquals((-12650400L), duration0.getStandardSeconds());
      assertEquals(60L, long0);
      assertEquals((-210840L), duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(5387L);
      long long0 = duration0.getStandardHours();
      assertEquals(1L, long0);
      assertEquals(5387000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-488L));
      long long0 = duration0.getStandardHours();
      assertEquals((-42163200000L), duration0.getMillis());
      assertEquals((-11712L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(827L);
      long long0 = duration1.getStandardDays();
      assertEquals(172L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.dividedBy(1850L);
      Hours hours0 = duration1.toStandardHours();
      assertEquals((-195014731), hours0.getHours());
      assertEquals((-195014731L), duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.standardDays(30672000000L);
      Duration duration1 = duration0.dividedBy(2909L);
      assertEquals(910986868339635L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.millis((-2813L));
      Duration duration1 = duration0.dividedBy(90L);
      assertEquals((-31L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((-9223372036854775808L), 1389);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 1389
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1298798110310400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = Duration.standardDays(31449600000L);
      // Undeclared exception!
      try { 
        duration0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 45287424000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2629800000L);
      // Undeclared exception!
      try { 
        duration0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 63115200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(10000000000000L);
      Duration duration1 = duration0.withDurationAdded(86400000L, 2146887455);
      // Undeclared exception!
      try { 
        duration1.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2262628195
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardSeconds((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardMinutes((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 60000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardHours((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardDays(31083663600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 31083663600000 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Duration duration1 = duration0.minus((long) 3);
      Duration duration2 = duration0.plus((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration2.plus((ReadableDuration) duration1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -3
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775784L));
      // Undeclared exception!
      try { 
        duration0.plus((-9223372036854775784L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775784 + -9223372036854775784
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10000000L);
      // Undeclared exception!
      try { 
        duration0.multipliedBy(10000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 36000000000000 * 10000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.minus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(688L, 0L);
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = mutablePeriod0.toDurationFrom(dateTime0);
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Duration duration0 = null;
      try {
        duration0 = new Duration(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No duration converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = null;
      try {
        duration0 = new Duration((-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(688L, 0L);
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = mutablePeriod0.toDurationFrom(dateTime0);
      Duration duration1 = duration0.withDurationAdded(0L, 90);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Duration duration0 = new Duration((-1478L));
      assertEquals((-1L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      long long0 = duration0.getStandardDays();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      long long0 = duration0.getStandardMinutes();
      assertEquals((-86400000L), duration0.getMillis());
      assertEquals((-1440L), long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      long long0 = duration0.getStandardHours();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Duration duration1 = duration0.plus((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration1.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negation of this duration would overflow
         //
         verifyException("org.joda.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = duration0.negated();
      assertEquals(0L, duration1.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.ZERO.dividedBy(1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.multipliedBy((-3579L));
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Duration duration1 = duration0.minus((ReadableDuration) null);
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Duration duration1 = duration0.plus((ReadableDuration) null);
      assertEquals(0L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = Duration.standardDays(10000L);
      // Undeclared exception!
      try { 
        duration0.ZERO.withDurationAdded((ReadableDuration) duration0, 25650000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 864000000000 * 25650000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, 86400000);
      assertEquals(0L, duration1.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded((-1169L), 0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withMillis(0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-199L));
      long long0 = duration0.getStandardDays();
      assertEquals((-199L), long0);
      assertEquals((-17193600000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Duration duration1 = duration0.multipliedBy(1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = duration0.minus(0L);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.ZERO.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      long long0 = duration0.getStandardSeconds();
      assertEquals(0L, long0);
  }
}
