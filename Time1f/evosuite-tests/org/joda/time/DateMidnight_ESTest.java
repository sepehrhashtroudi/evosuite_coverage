/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:06:24 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateMidnight_ESTest extends DateMidnight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusDays((-282));
      assertEquals(1416726000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks((-598));
      assertEquals(361605600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-1));
      assertEquals(1394776800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears((-479));
      assertEquals(16508214000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(2323L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays((-23));
      assertEquals((-1987200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(477L);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(2285);
      assertEquals(1381903200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-4789));
      assertEquals((-151126273568000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, dateTimeField0);
      Locale locale0 = Locale.FRENCH;
      DateMidnight dateMidnight1 = dateMidnight_Property0.setCopy("9", locale0);
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-649L));
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      DateMidnight dateMidnight1 = dateMidnight_Property0.setCopy(1867);
      assertEquals((-3218891168000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekOfWeekyear();
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(1392361200000L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      dateMidnight_Property0.getField();
      assertEquals(1392361200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(fixedDateTimeZone0);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields((DateTimeZone) null);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(1);
      assertEquals(477187200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(168L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(2934);
      assertEquals(30420921600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      assertEquals((-62163044768000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(9);
      assertEquals(1393570800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Days days0 = Days.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) days0);
      DateMidnight dateMidnight2 = dateMidnight1.withWeekOfWeekyear(9);
      assertEquals((-185541208734368000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Chronology chronology0 = gJChronology0.withUTC();
      DateMidnight dateMidnight0 = new DateMidnight(86400L, chronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, 3035);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1963);
      DateMidnight dateMidnight0 = new DateMidnight((-765L), dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(604800000L, 604800000L, periodType0, iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, (-365));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertEquals(1389682800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      DateMidnight dateMidnight0 = new DateMidnight(chronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-318L));
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateMidnight dateMidnight1 = dateMidnight0.withFields(localDateTime0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Days days0 = Days.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) days0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, (-1707));
      assertEquals((-185541194996768000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(86400L, (Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) null, (-1292));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertEquals(1392015600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(1);
      assertEquals(1391302800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Days days0 = Days.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) days0);
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfMonth(9);
      assertEquals((-185541194564768000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(islamicChronology0);
      assertEquals((-61200000L), dateMidnight1.getMillis());
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-649L));
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1867);
      assertEquals(5831724668400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear((-403));
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals((-74880692768000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-638L));
      DateMidnight dateMidnight2 = dateMidnight1.plusYears(0);
      assertEquals((-61200000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      DateMidnight dateMidnight2 = dateMidnight1.plusDays(0);
      assertEquals((-61721540768000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-479));
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) null);
      assertEquals((-61200000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plus(0L);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 117);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(2323L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(1);
      assertEquals((-604800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Days days0 = Days.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) days0);
      DateMidnight dateMidnight2 = dateMidnight1.minusMonths(0);
      assertEquals((-185541194823968000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1821L));
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(2360);
      assertEquals((-203965200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateMidnight dateMidnight0 = new DateMidnight(3020L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) null);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear((-403));
      Period period0 = new Period((long) (-403), (PeriodType) null, (Chronology) iSOChronology0);
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) period0);
      assertEquals((-74880779168000L), dateMidnight2.getMillis());
      assertSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      Days days0 = Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Duration duration0 = days0.toStandardDuration();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals((-62135569568000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1074L));
      DateMidnight dateMidnight1 = dateMidnight0.minus((-1074L));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      long long0 = dateMidnight0.checkInstant(2441L, julianChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(1338530400000L, dateTimeZone0);
      long long0 = dateMidnight0.checkInstant(1338530400000L, buddhistChronology0);
      assertEquals(1338508800000L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      dateMidnight0.checkInstant((-2258L), gregorianChronology0);
      assertEquals(25200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(168L, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury(2934);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2934 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter1);
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(days0, 54);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -115964116992 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, 9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, 5321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5321 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(1338530400000L, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-2139559353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2139559353 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      // Undeclared exception!
      try { 
        dateMidnight0.withCenturyOfEra((-479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -479 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(1);
      // Undeclared exception!
      try { 
        dateMidnight1.plusMonths((-839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateMidnight.parse("YSX6~)_xGpesMg", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse(".L y8", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".L y8\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(1);
      // Undeclared exception!
      try { 
        dateMidnight1.minusMonths(1423);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusDays(2147483646);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.minus((ReadablePeriod) years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.checkInstant(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, (-1));
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 2893);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1963);
      DateMidnight dateMidnight0 = new DateMidnight((-765L), dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, 1963);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(5758L, (-282));
      assertEquals(1392274800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(26607895200000L);
      assertEquals(26607855600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1074L));
      DateMidnight dateMidnight1 = dateMidnight0.withMillis((-1L));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear((-1488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1488 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone0);
      assertEquals(1392335940000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(12, 12);
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 12, dateTimeZone0);
      assertEquals((-62134690320000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      // Undeclared exception!
      try { 
        dateMidnight0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(89);
      assertEquals((-1416243600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(1);
      assertEquals(1392426060000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(2323L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks((-23));
      assertEquals((-13910400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-485L));
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(0);
      assertEquals((-61200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(1970);
      assertEquals(6572815200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(52);
      assertEquals(3033356400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Days days0 = Days.MIN_VALUE;
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(days0, 0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) null);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      Duration duration0 = Duration.standardDays((-403));
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(5758L, 0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 9);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withField((DateTimeFieldType) null, (-5013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1963);
      DateMidnight dateMidnight0 = new DateMidnight((-765L), dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) null);
      assertEquals((-1963L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1963);
      DateMidnight dateMidnight0 = new DateMidnight((-765L), dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(ethiopicChronology0);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(1392339660000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1963);
      DateMidnight dateMidnight0 = new DateMidnight((-765L), dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.getDateMidnight();
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, dateTimeField0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(2323L, dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3221));
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, offsetDateTimeField0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfFloorCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(2323L, dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3221));
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, offsetDateTimeField0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addWrapFieldToCopy(2893);
      assertEquals(92686921200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.property(dateTimeFieldType0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundCeilingCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(2323L, dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3221));
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, offsetDateTimeField0);
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekOfWeekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy((-567));
      assertEquals(1049439600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"(\" for yearOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1388559600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertEquals(9223371989420400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      dateMidnight_Property0.getChronology();
      assertEquals(1392361200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = new Duration(0L);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(2094, 972, 2094, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 972 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(1);
      assertEquals((-374864400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      dateMidnight0.dayOfYear();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra((-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -39 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((Object) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.GJChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Years years0 = Years.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) years0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      dateMidnight0.era();
      assertEquals(1392361200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 1);
      assertEquals(1392274800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      dateMidnight0.centuryOfEra();
      assertEquals(1392361200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1024L));
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.plus((long) (-369));
      assertEquals((-147600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertEquals(1378857600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(1392361200000L, interval0.getStartMillis());
      assertEquals(1392447600000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withEra(0);
      assertEquals((-125719057568000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      dateMidnight0.monthOfYear();
      assertEquals(1392361200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-3031L));
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear(5463);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5463 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals(1392361200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      dateMidnight0.dayOfWeek();
      assertEquals(1392361200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek((-2194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2194 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(1544, (-4379), 0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4379 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfMonth(17887500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 17887500 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("dus`#q<,C;U_<!(Ra4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"dus`#q<,C;U_<!(Ra4\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy(2994);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2994 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy(0L);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(2994);
      assertEquals(32318204400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(copticChronology0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.CopticChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(object0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
}
