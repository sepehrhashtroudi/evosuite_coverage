/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:57:48 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1450L), (-1450L));
      mutableInterval0.setInterval((-1450L), (-1450L));
      assertEquals((-1450L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, (ReadableDuration) null);
      mutableInterval0.setDurationAfterStart(0L);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-176L));
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      assertEquals((-176L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, copticChronology0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertEquals(0L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, mutableDateTime0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertEquals(1392409281320L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2629746000L);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        mutableInterval0.setStartMillis(2629746000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 1, 1, 1, 1, 1, 1);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, mutableDateTime0);
      mutableInterval0.setChronology(islamicChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-667), (-2783), (-2783), (-2783));
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodBeforeEnd(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, mutableDateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-667), (-2783), (-2783), (-2783));
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodBeforeEnd(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodBeforeEnd(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) gJChronology0);
      MutableDateTime mutableDateTime1 = new MutableDateTime(0, 5, 4, 0, 0, 4, 1);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime1, mutableDateTime0);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodAfterStart(years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483647 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(9223372036854775807L, 9223372036854775807L);
      Months months0 = Months.FOUR;
      // Undeclared exception!
      try { 
        mutableInterval0.setPeriodAfterStart(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      // Undeclared exception!
      try { 
        mutableInterval0.setEndMillis((-480L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-6189L));
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Instant instant0 = dateTime0.toInstant();
      MutableInterval mutableInterval0 = new MutableInterval(period0, instant0);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationBeforeEnd((-6189L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("Invalid format: \"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Invalid format: \"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Period period0 = Period.seconds(3035);
      Period period1 = period0.minusMinutes(3035);
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(period1, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-465L));
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null);
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval((ReadableInstant) null, mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) gJChronology0);
      MutableDateTime mutableDateTime1 = new MutableDateTime();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(mutableDateTime1, mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = new Duration((-107L), (-2899L));
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(dateTime0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.millis((-596L));
      DateTime dateTime0 = DateTime.now();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(duration0, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(31622400000L, 0L, strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(21859200000L, (-940L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Period period0 = Period.months(3035);
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      MutableInterval mutableInterval0 = new MutableInterval(period0, dateTime0);
      mutableInterval0.setStartMillis(3035);
      assertEquals(3035L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Period period0 = Period.months(3035);
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      MutableInterval mutableInterval0 = new MutableInterval(period0, dateTime0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0, lenientChronology0);
      assertEquals(1392361200000L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1450L), (-1450L));
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals((-1450L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1450L), (-1450L));
      DateTime dateTime0 = mutableInterval0.getEnd();
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1450L), (-1450L));
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Period period0 = Period.months(3035);
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      MutableInterval mutableInterval0 = new MutableInterval(period0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392361200000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-6189L));
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Instant instant0 = dateTime0.toInstant();
      MutableInterval mutableInterval0 = new MutableInterval(period0, instant0);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval0);
      assertEquals((-61200000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.THREE;
      Duration duration0 = hours0.toStandardDuration();
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(1392420081320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval((-1335L), (-1335L), lenientChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((-1335L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Period period0 = Period.months(3035);
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      MutableInterval mutableInterval0 = new MutableInterval(period0, dateTime0);
      mutableInterval0.setEnd(dateTime0);
      assertEquals(1392361200000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Duration duration0 = new Duration(0L, 4294967295L);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals(4294967295L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Days days0 = Days.days(2858);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, days0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval(704L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-6189L));
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Instant instant0 = dateTime0.toInstant();
      MutableInterval mutableInterval0 = new MutableInterval(period0, instant0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      mutableInterval0.setStart(dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationBeforeEnd(0L);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1450L), (-1450L));
      Object object0 = mutableInterval0.clone();
      assertNotSame(object0, mutableInterval0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(object0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1450L), (-1450L));
      mutableInterval0.setEndMillis(4584L);
      assertEquals(4584L, mutableInterval0.getEndMillis());
  }
}
