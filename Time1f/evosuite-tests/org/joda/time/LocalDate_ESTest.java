/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:11:33 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.minusDays(6);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      LocalDate localDate0 = dateTime0.toLocalDate();
      localDate0.minusWeeks((-3097));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(626L, (DateTimeZone) fixedDateTimeZone0);
      localDate0.minusMonths((-3047));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDate localDate0 = LocalDate.now((Chronology) zonedChronology0);
      localDate0.minusYears((-591));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      localDate0.plusDays((-995));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3010L));
      localDate0.plusWeeks(373);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      localDate0.plusMonths((-763));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1104L);
      localDate0.plusYears(674);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3977));
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      localDate0.withFieldAdded(durationFieldType0, (-654));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.withMillisOfDay(5);
      localDate0.toLocalDateTime(localTime1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      localDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("org.joda.time.format.FormatUtils", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.format.FormatUtils\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      localDate_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDate localDate0 = LocalDate.now((Chronology) zonedChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.isEqual(localDate0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      localDate0.withWeekOfWeekyear(2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      localDate0.withLocalMillis(0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3027L));
      localDate0.withEra(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      LocalDate localDate0 = yearMonth0.toLocalDate(1);
      localDate0.withDayOfWeek(5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-4473L));
      localDate0.withDayOfMonth(2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDate localDate0 = new LocalDate((-1L), dateTimeZone0);
      LocalDate localDate1 = localDate0.withCenturyOfEra(0);
      localDate1.toInterval();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Object) null, buddhistChronology0);
      localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte)0);
      localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtStartOfDay();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Object) null, buddhistChronology0);
      localDate0.toDateTimeAtMidnight(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      localDate0.toDateTimeAtMidnight();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 1285, 1292, 9, (-364), 1285);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.minusYears(1285);
      localDate1.toDateTimeAtCurrentTime();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 1285, 1292, 9, (-364), 1285);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.minusYears(1285);
      localDate1.toDateTime((LocalTime) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      Days days0 = Days.SEVEN;
      DateTime dateTime0 = localTime0.toDateTimeToday();
      LocalDate localDate0 = dateTime0.toLocalDate();
      localDate0.minus(days0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYear((-2262));
      localDate1.getValue(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      localDate0.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Chronology chronology0 = localDate0.getChronology();
      localDate0.getField(0, chronology0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localDate0.withYearOfEra((-2147483640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483640 for yearOfEra must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate1 = new LocalDate(localDate0, strictChronology0);
      // Undeclared exception!
      try { 
        localDate1.withYearOfCentury(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalDate.parse("org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("!VO", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      Partial partial0 = new Partial(islamicChronology0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(partial0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) fixedDateTimeZone0);
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(yearMonth1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((-463), (-463), (-463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -463 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1983).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("Invalid index: ");
      Period period0 = Period.months(0);
      localDate0.withPeriodAdded(period0, (-1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("The DateTimeFieldType must not be null");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      localDate0.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1983).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("Invalid index: ");
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      localDate0.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      localDate0.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      localDate0.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localDate0.get(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.getValue(0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      localDate0.toInterval(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(2, 2, 0, strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.getMonthOfYear();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.size();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      localDate0.getYear();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1192L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 5);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      LocalDate localDate1 = new LocalDate(localDate0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Locale locale0 = Locale.ITALY;
      localDate0.toString((String) null, locale0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1637L);
      Locale locale0 = Locale.UK;
      try { 
        localDate0.toString("\"^bOM-I%eAN+<hi", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      localDate0.toString((String) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(5, 5, 5);
      // Undeclared exception!
      try { 
        localDate0.toString("No valid ISO8601 format for fields: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdayOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      localDate0.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      localDate0.minusWeeks(1755);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(261).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("R");
      localDate0.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      localDate0.minusMonths(1755);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((-1L), (DateTimeZone) fixedDateTimeZone0);
      localDate0.minusYears(0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      localDate0.plusDays(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      localDate0.plusWeeks((-763));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.plusMonths(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      localDate0.plusMonths(1755);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.plusYears(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((-1L), (DateTimeZone) fixedDateTimeZone0);
      localDate0.plusYears((-3712));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1958L, (DateTimeZone) null);
      localDate0.withPeriodAdded((ReadablePeriod) null, 910);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1983).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("Invalid index: ");
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      localDate0.withFieldAdded(durationFieldType0, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, 695);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      localDate0.withFieldAdded(durationFieldType0, 1755);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(626L, (DateTimeZone) fixedDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, (-3047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3047 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, (-3131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      localDate0.withFields(localDate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);
      Calendar calendar0 = dateTime0.toCalendar((Locale) null);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      localDate0.toDateTime(localTime0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      LocalDate localDate1 = localDate0.minusDays((-1904));
      localDate0.compareTo((ReadablePartial) localDate1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      LocalTime localTime0 = new LocalTime(1L, (DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(100000000000000000L);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      localDate0.equals(iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      localDate0.toDate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      Date date0 = localDate0.toDate();
      assertEquals("Thu Oct 21 00:00:00 GMT 1389", date0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      LocalDate localDate1 = localDate0.plus(minutes0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(255L, (DateTimeZone) fixedDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        localDate0.getValue((-2695));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2695
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Chronology chronology0 = localDate0.getChronology();
      // Undeclared exception!
      try { 
        localDate0.getField(765, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 765
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2284), (-1834), (-292275054));
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.addToCopy(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      LocalDate localDate0 = dateTime0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      Chronology chronology0 = localDate_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Object) null, buddhistChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Object) null, buddhistChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, fixedDateTimeZone0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(zonedChronology0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.ZonedChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withWeekyear((-1409));
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      int int0 = localDate0.getEra();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1069L, (Chronology) islamicChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals((-61200000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(678);
      LocalDate localDate0 = new LocalDate((-1L), dateTimeZone0);
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("Types array must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Types array must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      int int0 = localDate0.getYearOfEra();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(3600000L, (Chronology) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(2293);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1192L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 5);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      LocalDate.Property localDate_Property0 = localDate0.era();
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      int int0 = localDate0.getWeekyear();
      assertEquals(2006, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 1285, 1292, 9, (-364), 1285);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      int int0 = localDate0.getDayOfYear();
      assertEquals(157, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-142L));
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      LocalDate localDate1 = localDate_Property0.setCopy(2);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getYearOfCentury();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYear((-2262));
      int int0 = localDate1.getEra();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2417);
      LocalDate localDate0 = new LocalDate((-1524L), dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth((-1189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1189 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalDate.parse("The calendar must not be null", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The calendar must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) julianChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("Field '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Field '\" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      int int0 = localDate0.getDayOfWeek();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      LocalDate localDate0 = monthDay0.toLocalDate(77);
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertEquals((-59733390368000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear((-1889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1889 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1820L);
      LocalDate localDate0 = monthDay0.toLocalDate(1755);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight(dateTimeZone0);
      assertEquals((-6753283200000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withCenturyOfEra((-1203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1203 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(678);
      LocalDate localDate0 = new LocalDate((-1L), dateTimeZone0);
      LocalDate localDate1 = localDate0.withYearOfEra(678);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        localDate0.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2823L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(73281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1858));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Interval interval0 = localDate0.toInterval();
      assertEquals(1392447600000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      String string0 = localDate0.toString();
      assertEquals("2006-06-07", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.withEra(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
