/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 02:33:31 GMT 2022
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\\');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertEquals(1, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(7, dateTimeParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1463), hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) stringWriter0, (long) (-1463), (Chronology) null, (-1463), (DateTimeZone) null, locale0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals("", stringWriter0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Resource not found: \"", "Resource not found: \"", false, (-1794), (-612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("No parsers supplied");
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1679, false);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-2263), hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimateParsedLength();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 486, true);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(486, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(486, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      int int0 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(486, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(486, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(486, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeParserArray0.length);
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(0, int0);
      assertEquals(0, dateTimeParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 69, 69);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(918518400000L, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 69);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNotNull(dateTimeParserBucket0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "", 0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals((-1), int0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1951, 457);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      StringWriter stringWriter0 = new StringWriter(4);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 67, false);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 238L, (Chronology) islamicChronology0, 2449, (DateTimeZone) fixedDateTimeZone0, (Locale) null);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\uFFFD", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_StringLiteral0.parseInto((DateTimeParserBucket) null, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(0, 20);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset("VTo^o%(", "org.joda.time.format.DateTimeFormatterBuilder$FixedNumber", true, 100, 100);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(428);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(616, (-2257));
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(292278993);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(32, 0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfEra((-255), (-255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendWeekyear((-1855), (-1855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendWeekOfWeekyear((-1424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("Period does not support field '", true, 0, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSecondOfDay((-3777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("4d40[Fv.R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMinuteOfHour((-77));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMinuteOfDay((-457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMillisOfSecond((-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendHourOfHalfday((-495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendHourOfDay((-163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfSecond(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfMinute(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfYear((-2449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfWeek((-3786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfMonth((-61));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendClockhourOfHalfday((-5799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('7');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, dateTimeParserArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 4110, 4110);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 2577, (-559));
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-111), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 308, 486);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 10);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, (-3629), 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1751, (-452));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("^.S{grb3AvP((");
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1000, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 59, true);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(59, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(59, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      
      int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(59, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(59, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(1951);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('f');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(10);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(2);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder");
      assertEquals(45, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(45, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
      assertEquals(45, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(45, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, (-1466));
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-1466), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1466), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-1466), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1466), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1466), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(45, 1851);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMonthOfYear((-776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(457, (-292275054));
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(486, 486);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-457), true);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(1851);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(92);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('r');
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0;
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\\');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains(0));
      
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(7, dateTimeParserArray0.length);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertNotNull(dateTimeParserBucket0);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "Maximum value exceeded for add", 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(3709, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) null, (-1518L), (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = new Locale("[]#r", "m7-025K^cfeV:C", "m7-025K^cfeV:C");
      assertEquals("m7-025K^cfeV:C", locale0.getVariant());
      assertEquals("[]#r_M7-025K^CFEV:C_m7-025K^cfeV:C", locale0.toString());
      assertEquals("[]#r", locale0.getLanguage());
      assertEquals("M7-025K^CFEV:C", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneId0.printTo((StringBuffer) null, 903507892L, (Chronology) null, 0, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-651), hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      Integer integer0 = new Integer((-651));
      assertNotNull(integer0);
      assertEquals((-651), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, gJChronology0, locale0, integer0, 0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals((-651), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "The", 0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals((-651), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      
      boolean boolean0 = dateTimeFormatterBuilder2.canBuildParser();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(3709, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, dateTimeParserArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(2, dateTimeParserArray0.length);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.chrono.BasicDayOfMonthDateTimeField", "", false, 1268, 1268);
      assertEquals(49, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(49, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1268, julianChronology0, locale0, integer0, 0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "org.joda.time.chrono.BasicDayOfMonthDateTimeField", 1268);
      assertEquals(49, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(49, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, (int)dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(1268, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("-g\"}QC}X_G/~L", "", false, 1549, 1549);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset("", true, 57, 57);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("vD(IFrq,k&p+R>n", "vD(IFrq,k&p+R>n", false, 983, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0;
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\\');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(7, dateTimeParserArray0.length);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNotNull(dateTimeParserBucket0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "Maximum value exceeded for add", 0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(7, dateTimeParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 4);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      StringWriter stringWriter0 = new StringWriter(4);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 10000000000000L, (Chronology) iSOChronology0, (int) (byte) (-96), (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("8981", stringWriter0.toString());
      assertEquals("8981", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, buddhistChronology0, locale0, (Integer) buddhistChronology0.BE, 1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNotNull(dateTimeParserBucket0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "Field type must not be null", 1009);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals((-1010), int0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 59, false);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      MockFile mockFile0 = new MockFile("G9}T$k<X]v+3`5$tF~", "G9}T$k<X]v+3`5$tF~");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertNotNull(lenientChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) lenientChronology0);
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("G9}T$k<X]v+3`5$tF~", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Time1f/G9}T$k<X]v+3`5$tF~/G9}T$k<X]v+3`5$tF~", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/sepehr/test_generation/evosuite_coverage/Time1f/G9}T$k<X]v+3`5$tF~", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3238, true);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) null, 2434L, (Chronology) iSOChronology0, 3238, (DateTimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer((-4766));
      assertNotNull(integer0);
      assertEquals((-4766), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, (Chronology) null, locale0, integer0, 0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals((-4766), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals((-4766), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) 0, (Chronology) null, 850, dateTimeZone0, locale0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("01", stringWriter0.toString());
      assertEquals("01", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals((-4766), (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        MonthDay.parse("6ErM", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6ErM\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 15356250, false);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(15356250, copticChronology0, locale0, (Integer) 1, (-1847));
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "ce", 1798);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals("America/Edmonton", dateTimeZone0.getID());
      assertEquals("America/Edmonton", dateTimeZone0.toString());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-1799), int0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 4770, true);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4770, iSOChronology0, (Locale) null, (Integer) null, 59);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "", 59);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertEquals((-60), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear((-979));
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder1.toPrinter();
      assertEquals(8, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 46, false, 46);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(46, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(46, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("B1Uk{@S{TwM3_R", false);
      assertNotNull(mockFileWriter0);
      
      MockDate mockDate0 = new MockDate(46, 46, 0, 46, 0);
      assertNotNull(mockDate0);
      
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      assertEquals("Tue Nov 01 22:00:00 GMT 1949", mockDate0.toString());
      assertEquals(11, yearMonth0.getMonthOfYear());
      assertEquals(1949, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(46, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(46, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals("Tue Nov 01 22:00:00 GMT 1949", mockDate0.toString());
      assertEquals(11, yearMonth0.getMonthOfYear());
      assertEquals(1949, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2338, true);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2338, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2338, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      
      LocalTime localTime0 = new LocalTime((long) 2338);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((StringBuffer) null, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("_u8 3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"_u8 3\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      
      int int0 = dateTimeFormatterBuilder_PaddedNumber0.parseInto((DateTimeParserBucket) null, "{w/rf7I+/'S0o!d.96M", 0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('x');
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto((DateTimeParserBucket) null, "org.joda.time.LocalDateTime", 1268);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals((-1269), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("GB7h^hLCI|pn'", true);
      assertNotNull(mockFileWriter0);
      
      DateTimeFormatterBuilder.printUnknownString(mockFileWriter0, 1751);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfDay(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfHour((-1255), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -440
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, (-3265));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 2236);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 32, 0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYear(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal((DateTimeFieldType) null, 1687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfCentury(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("");
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-380), 0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Fraction0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2960, 1363);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      MockDate mockDate0 = new MockDate(1363);
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) charArrayWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(2960, charArrayWriter0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 29);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.TAIWAN;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 10000000000000L, (Chronology) iSOChronology0, (int) (byte) (-96), (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(11, stringBuffer0.length());
      assertEquals("89814814814", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-609), 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(2592000000L, dateTimeZone0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, (Locale) null);
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.PRC;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.printTo((StringBuffer) null, 779L, (Chronology) buddhistChronology0, 0, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.DateTimeField");
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.forLanguageTag("org.joda.time.DateTimeField");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, 0L, (Chronology) iSOChronology0, 2, dateTimeZone0, locale0);
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(12825000);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(12825000, true);
      boolean boolean0 = dateTimeFormatterBuilder2.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter");
      StringBuffer stringBuffer0 = new StringBuffer(3499);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, 502L, (Chronology) null, (-3272), dateTimeZone0, locale0);
      assertEquals(61, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      StringWriter stringWriter0 = new StringWriter();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("`OAn;S;gHIFy>!^@E>");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) stringWriter0, (-983L), (Chronology) gregorianChronology0, 3600000, dateTimeZone0, (Locale) null);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("pmB");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
      assertEquals("JPN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('q');
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Partial partial0 = new Partial();
      Locale locale0 = new Locale("The", "", ".psRo*2");
      dateTimeFormatterBuilder_CharacterLiteral0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
      assertEquals("q", stringBuffer0.toString());
      assertEquals("q", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('w');
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      Locale locale0 = Locale.ITALIAN;
      dateTimeFormatterBuilder_CharacterLiteral0.printTo(stringBuffer0, 0L, (Chronology) zonedChronology0, 1361, dateTimeZone0, locale0);
      assertEquals("w", stringBuffer0.toString());
      assertEquals("w", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      MockFile mockFile0 = new MockFile("ww*", "No parser supplied");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockFileWriter0, 0L, (Chronology) null, 0, dateTimeZone0, (Locale) null);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2628, hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 0L, (Chronology) copticChronology0, 10, (DateTimeZone) null, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1000, hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (ReadablePartial) null, (Locale) null);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendClockhourOfDay((-710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(1, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(100, (-1));
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("", (String) null, false, 0, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = (DateTimeFormatterBuilder.TextField)dateTimeFormatterBuilder1.toPrinter();
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("xa$");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      dateTimeFormatterBuilder1.appendDayOfMonth(58);
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(219, 97);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 15356250, false);
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra((-2059), (-2624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(196, 0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(100);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(12825000);
      dateTimeFormatterBuilder1.appendTimeZoneId();
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(2414);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfDay(2414);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder2.toParser();
      assertEquals(4828, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(4828, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 29, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(978);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) charArrayWriter0, (long) 978, (Chronology) ethiopicChronology0, 1, dateTimeZone0, locale0);
      assertEquals(29, charArrayWriter0.size());
      assertEquals("00000000000000000000000000005", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 365, true, (byte) (-48));
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) (byte) (-126), (Chronology) iSOChronology0, (int) (byte) (-126), (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("1", stringBuffer0.toString());
      assertEquals(365, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
  }
}
