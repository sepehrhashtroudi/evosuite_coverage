/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:04:34 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadablePartialConverter_ESTest extends ReadablePartialConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-7));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Chronology chronology0 = readablePartialConverter0.getChronology((Object) localDateTime0, dateTimeZone0);
      assertNotSame(ethiopicChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      MockDate mockDate0 = new MockDate(1253L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues((ReadablePartial) localDateTime0, (Object) null, (Chronology) buddhistChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues((ReadablePartial) localTime0, (Object) localDate0, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      YearMonth yearMonth0 = new YearMonth(1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getPartialValues((ReadablePartial) yearMonth0, (Object) buddhistChronology0, (Chronology) buddhistChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.chrono.BuddhistChronology cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) null, (DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) ethiopicChronology0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.chrono.EthiopicChronology cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      int[] intArray0 = readablePartialConverter0.getPartialValues((ReadablePartial) localDateTime0, (Object) localDateTime0, (Chronology) buddhistChronology0);
      assertArrayEquals(new int[] {2014, 2, 14, 48081320}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) fixedDateTimeZone0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.tz.FixedDateTimeZone cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Chronology chronology0 = readablePartialConverter0.getChronology((Object) ethiopicChronology0, (Chronology) ethiopicChronology0);
      assertSame(ethiopicChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      Class<?> class0 = readablePartialConverter0.getSupportedType();
      assertTrue(class0.isInterface());
  }
}
