/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:10:44 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.convert.DateConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateConverter_ESTest extends DateConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockDate mockDate0 = new MockDate(0L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      long long0 = dateConverter0.getInstantMillis(mockDate0, ethiopicChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      long long0 = dateConverter0.getInstantMillis(date0, islamicChronology0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockDate mockDate0 = new MockDate((-3899L));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      long long0 = dateConverter0.getInstantMillis(mockDate0, iSOChronology0);
      assertEquals((-3899L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis((Object) null, gregorianChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Class<?> class0 = dateConverter0.getSupportedType();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis(class0, iSOChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.util.Date
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }
}
