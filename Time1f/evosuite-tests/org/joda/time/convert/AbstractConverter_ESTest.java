/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:03:41 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.convert.DateConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableDurationConverter;
import org.joda.time.convert.ReadableInstantConverter;
import org.joda.time.convert.ReadableIntervalConverter;
import org.joda.time.convert.ReadablePeriodConverter;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractConverter_ESTest extends AbstractConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      boolean boolean0 = readableIntervalConverter0.isReadableInterval("AM", iSOChronology0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      int[] intArray0 = readableIntervalConverter0.getPartialValues((ReadablePartial) localTime0, (Object) dateTimeZone0, (Chronology) islamicChronology0, dateTimeFormatter0);
      assertArrayEquals(new int[] {13, 21, 21, 320}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Partial partial0 = new Partial(iSOChronology0);
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      int[] intArray0 = readablePeriodConverter0.getPartialValues((ReadablePartial) partial0, (Object) partial0, (Chronology) iSOChronology0, dateTimeFormatter0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      int[] intArray0 = readableIntervalConverter0.getPartialValues((ReadablePartial) localTime0, (Object) islamicChronology0.AH, (Chronology) ethiopicChronology0);
      assertArrayEquals(new int[] {20, 21, 21, 320}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      long long0 = readableDurationConverter0.getInstantMillis("dL$*Sim><vE'N6ez7Od", gregorianChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = readableIntervalConverter0.getChronology((Object) fileSystemHandling0, (Chronology) gregorianChronology0);
      assertSame(gregorianChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) monthDay0, (Object) ethiopicChronology0, (Chronology) ethiopicChronology0, dateTimeFormatter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.chrono.EthiopicChronology cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readableIntervalConverter0.getPartialValues((ReadablePartial) null, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Integer integer0 = Integer.getInteger("6;Nh&{tugVf^O<k", 0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) null, (Object) integer0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Object object0 = new Object();
      Chronology chronology0 = stringConverter0.getChronology(object0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis(object0, chronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getChronology(object0, dateTimeZone0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableInstant
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Partial partial0 = new Partial();
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      int[] intArray0 = readablePeriodConverter0.getPartialValues((ReadablePartial) partial0, object0, (Chronology) gregorianChronology0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      long long0 = readableDurationConverter0.getInstantMillis("dL$*Sim><vE'N6ez7Od", gregorianChronology0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      String string0 = nullConverter0.toString();
      assertEquals("Converter[null]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      String string0 = dateConverter0.toString();
      assertEquals("Converter[java.util.Date]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Integer integer0 = new Integer((-997));
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      boolean boolean0 = readablePeriodConverter0.isReadableInterval(integer0, iSOChronology0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      Object object0 = new Object();
      PeriodType periodType0 = nullConverter0.getPeriodType(object0);
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Object object0 = new Object();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPartialValues((ReadablePartial) null, object0, (Chronology) islamicChronology0, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
}
