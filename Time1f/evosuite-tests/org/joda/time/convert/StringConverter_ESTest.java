/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:08:48 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringConverter_ESTest extends StringConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("4^,C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4^,C\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(10800000L, (Chronology) gJChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(113).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      int[] intArray0 = stringConverter0.getPartialValues((ReadablePartial) monthDay0, (Object) "", (Chronology) gJChronology0, dateTimeFormatter0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) mutablePeriod0, (Chronology) gJChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.MutablePeriod cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration((long) 5);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(duration0, mutableDateTime0, periodType0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, period0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) null, (Chronology) gregorianChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(duration0, mutableDateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, period0);
      Object object0 = new Object();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, object0, (Chronology) julianChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Duration duration0 = Duration.millis((-1770L));
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDateTime0, (Object) duration0, (Chronology) null, dateTimeFormatter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      LocalTime localTime0 = new LocalTime((Object) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localTime0, (Object) ".e:>o7}d", (Chronology) iSOChronology0, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".e:>o7}d\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis((Object) null, copticChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Object object0 = new Object();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis(object0, iSOChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval((-1131L), 1161L, iSOChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "", (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "A?o^)", (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"A?o^)\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) yearMonth0, (Object) "7zSo\"E257)W{<", (Chronology) zonedChronology0, dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Class<?> class0 = stringConverter0.getSupportedType();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval("DHG5SjS0Gc\"|!'<k(/", gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: DHG5SjS0Gc\"|!'<k(/
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) null, (Object) "/CDz%4^+C]r", (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /CDz%4^+C]r
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, ethiopicChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "{-Ye0/EJ.jeD<FB", (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{-Ye0\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(599L, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "Partial must not be null", (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Partial must not be null\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("}pH3jH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"}pH3jH\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Partial must not be null\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDateTime0, object0, (Chronology) gJChronology0, dateTimeFormatter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("pH3EjH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pH3EjH\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis("Hp'C&ez)D{$~z", ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Hp'C&ez)D{$~z\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
}
