/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:06:07 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.convert.ReadableDurationConverter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadableDurationConverter_ESTest extends ReadableDurationConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Duration duration0 = Duration.standardMinutes(1L);
      long long0 = readableDurationConverter0.getDurationMillis(duration0);
      assertEquals(60000L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Duration duration0 = new Duration(112L, 2781L);
      Duration duration1 = duration0.withDurationAdded(2781L, (-292269054));
      long long0 = readableDurationConverter0.getDurationMillis(duration1);
      assertEquals((-812800236505L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Duration duration0 = Duration.standardMinutes(1);
      Duration duration1 = duration0.negated();
      Duration duration2 = duration1.multipliedBy(100000000000000L);
      // Undeclared exception!
      try { 
        readableDurationConverter0.setInto(mutablePeriod0, duration2, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Duration duration0 = new Duration((Object) null);
      // Undeclared exception!
      try { 
        readableDurationConverter0.setInto((ReadWritablePeriod) null, duration0, iSOChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, julianChronology0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readableDurationConverter0.setInto(mutablePeriod0, object0, julianChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableDuration
         //
         verifyException("org.joda.time.convert.ReadableDurationConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2424L, periodType0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        readableDurationConverter0.setInto(mutablePeriod0, duration0, gJChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -15032385536
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readableDurationConverter0.getDurationMillis((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableDurationConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readableDurationConverter0.getDurationMillis(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableDuration
         //
         verifyException("org.joda.time.convert.ReadableDurationConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Duration duration0 = Duration.ZERO;
      long long0 = readableDurationConverter0.getDurationMillis(duration0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Class<?> class0 = readableDurationConverter0.getSupportedType();
      assertEquals("interface org.joda.time.ReadableDuration", class0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Duration duration0 = Duration.ZERO;
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      readableDurationConverter0.setInto(mutablePeriod0, duration0, julianChronology0);
      assertEquals(0L, duration0.getStandardHours());
  }
}
