/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:00:51 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.MutableDateTime;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ReadableInstantConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadableInstantConverter_ESTest extends ReadableInstantConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      Instant instant0 = Instant.now();
      Chronology chronology0 = readableInstantConverter0.getChronology((Object) instant0, (Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone1);
      long long0 = readableInstantConverter0.getInstantMillis(mutableDateTime0, copticChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      long long0 = readableInstantConverter0.getInstantMillis(mutableDateTime0, (Chronology) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime();
      long long0 = readableInstantConverter0.getInstantMillis(dateTime0, gJChronology0);
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      // Undeclared exception!
      try { 
        readableInstantConverter0.getChronology((Object) null, dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getChronology(object0, (DateTimeZone) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadableInstant
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getChronology((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      Class<?> class0 = readableInstantConverter0.getSupportedType();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getChronology((Object) class0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to org.joda.time.ReadableInstant
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      Object object0 = new Object();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = readableInstantConverter0.getChronology(object0, (Chronology) copticChronology0);
      assertSame(copticChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      DateTime dateTime0 = new DateTime();
      Instant instant0 = dateTime0.toInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      Chronology chronology0 = readableInstantConverter0.getChronology((Object) instant0, dateTimeZone0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Chronology chronology0 = readableInstantConverter0.getChronology((Object) instant0, dateTimeZone0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      Class<?> class0 = readableInstantConverter0.getSupportedType();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getInstantMillis(class0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to org.joda.time.ReadableInstant
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        readableInstantConverter0.getInstantMillis((Object) null, gJChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadableInstantConverter", e);
      }
  }
}
