/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:52:12 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Years;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.ZonedChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Years_ESTest extends Years_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = Years.ZERO;
      boolean boolean0 = years1.isLessThan(years0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.isLessThan((Years) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.ONE.multipliedBy(1834);
      boolean boolean0 = years0.isGreaterThan(years1);
      assertFalse(boolean0);
      assertEquals(1834, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.isGreaterThan((Years) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.withYearOfEra(5);
      Years years0 = Years.yearsBetween((ReadablePartial) localDate1, (ReadablePartial) localDate0);
      assertEquals(2009, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.plusDays(557);
      Years years0 = Years.yearsBetween((ReadablePartial) localDate1, (ReadablePartial) localDate0);
      assertEquals((-1), years0.getYears());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = dateTime0.minusMonths(500);
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertEquals(41, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(2688L, dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 0);
      LocalDate localDate2 = localDate1.minusYears(0);
      DateTime dateTime0 = localDate2.toDateTimeAtStartOfDay(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillis(0);
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertEquals((-1969), years0.getYears());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = years0.plus(0);
      assertSame(years1, years0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.THREE.plus((-2574));
      assertEquals((-2571), years1.getYears());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Years years0 = Years.parseYears("P3Y");
      assertEquals(3, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Years years0 = Years.parseYears("P-4178Y");
      assertEquals((-4178), years0.getYears());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      Years years0 = Years.yearsIn(interval0);
      years0.negated();
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.years((-1611));
      years0.negated();
      assertEquals((-1611), years0.getYears());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Years years1 = years0.multipliedBy((-853));
      assertEquals(0, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.multipliedBy((-1607));
      Years years2 = years1.plus(years0);
      assertEquals((-1606), years2.getYears());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Years years0 = Years.THREE;
      Years years1 = years0.minus(years0);
      assertEquals(0, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.multipliedBy(Integer.MAX_VALUE);
      Years years2 = years1.minus(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, years1.getYears());
      assertEquals(0, years2.getYears());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Years years0 = Years.ZERO;
      int int0 = years0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      int int0 = years0.getYears();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.ZERO.dividedBy(1834);
      assertEquals(0, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) iSOChronology0);
      int[] intArray0 = new int[7];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Years years0 = Years.years((-1220));
      // Undeclared exception!
      try { 
        years0.MIN_VALUE.plus(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1220
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        years0.plus(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 3 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
      try { 
        years0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Years years1 = years0.MIN_VALUE.minus((-40));
      // Undeclared exception!
      try { 
        years0.minus(years1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483608
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        years0.MIN_VALUE.minus(10749);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -10749
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        years0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Years", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.TWO.plus(0);
      assertEquals(2, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.years(0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.years(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.years(1);
      assertEquals(1, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.years(2);
      assertEquals(2, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.years(3);
      assertEquals(3, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      years0.getFieldType();
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.ONE.multipliedBy(1834);
      boolean boolean0 = years0.isLessThan(years1);
      assertEquals(1834, years1.getYears());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.isLessThan((Years) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.isLessThan((Years) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.isLessThan(years0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.ONE.multipliedBy(1834);
      boolean boolean0 = years1.isGreaterThan(years0);
      assertEquals(1834, years1.getYears());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.isGreaterThan((Years) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.isGreaterThan((Years) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.isGreaterThan(years0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.MIN_VALUE.dividedBy(1);
      assertEquals(Integer.MIN_VALUE, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.minus((Years) null);
      assertSame(years0, years1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.THREE.plus((Years) null);
      assertFalse(years1.equals((Object)years0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Years years0 = Years.parseYears((String) null);
      Years years1 = years0.plus(years0);
      assertEquals(1, years1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.parseYears("WET");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"WET\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(198L);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0, iSOChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Years years0 = Years.years((-1611));
      Years years1 = years0.THREE.minus((-1611));
      Years years2 = years1.plus(years0);
      assertEquals(3, years2.getYears());
      assertEquals(1614, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Years years0 = Years.yearsIn((ReadableInterval) null);
      Years years1 = years0.plus(2);
      assertEquals(2, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Years years0 = Years.years((-1611));
      Years years1 = years0.dividedBy((-1611));
      assertEquals(1, years1.getYears());
      assertEquals((-1611), years0.getYears());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-886));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) zonedChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Years years1 = years0.MAX_VALUE.plus(years0);
      Years years2 = years0.minus(1);
      Years years3 = years2.minus(years1);
      assertEquals((-1), years2.getYears());
      assertEquals(0, years0.getYears());
      assertNotSame(years3, years2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        years0.multipliedBy(848);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 848
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.MAX_VALUE.negated();
      assertEquals((-2147483647), years1.getYears());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getYears();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Years years0 = Years.ONE;
      PeriodType periodType0 = years0.MAX_VALUE.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      String string0 = years0.toString();
      assertEquals("P-2147483648Y", string0);
  }
}
