/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 05:09:07 GMT 2022
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-428L), (-428L));
      mutableInterval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval((-6531L), (-6531L));
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      Instant instant0 = new Instant((-6531L));
      DateTime dateTime0 = instant0.toDateTime();
      boolean boolean0 = mutableInterval0.isAfter((ReadableInstant) dateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval((-1619L), 0L);
      Interval interval1 = new Interval((-1619L), (-1619L));
      boolean boolean0 = interval0.isEqual(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      mutableInterval0.setInterval((-1640L), 1190L);
      boolean boolean0 = interval0.isEqual(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      Duration duration0 = new Duration(383L, 21859200000L);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Interval interval0 = new Interval(duration0, dateTime0);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, period0);
      boolean boolean0 = interval0.overlaps(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, duration0);
      mutableInterval0.setStartMillis(2738L);
      boolean boolean0 = mutableInterval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval(907L, 907L);
      LocalDate localDate0 = LocalDate.now();
      Interval interval1 = localDate0.toInterval();
      boolean boolean0 = interval0.contains((ReadableInterval) interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      mutableInterval0.setInterval((-1640L), 1190L);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3574L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      boolean boolean0 = interval0.contains((ReadableInstant) dateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      DateTime dateTime0 = new DateTime(0L);
      Interval interval0 = new Interval(duration0, dateTime0);
      String string0 = interval0.toString();
      assertEquals("1969-12-31T17:00:00.000-07:00/1969-12-31T17:00:00.000-07:00", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Days days0 = seconds0.toStandardDays();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval(days0, dateTime0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 3600000L);
      Interval interval1 = interval0.withStartMillis(30L);
      MutableInterval mutableInterval0 = interval1.toMutableInterval();
      assertEquals(3600000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L));
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      DateTime dateTime0 = new DateTime(0L);
      Interval interval0 = new Interval(duration0, dateTime0);
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3574L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      MutableDateTime mutableDateTime0 = new MutableDateTime((-910L));
      Interval interval0 = new Interval(minutes0, mutableDateTime0);
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-2876L), (-734L));
      long long0 = mutableInterval0.toDurationMillis();
      assertEquals(2142L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(751L);
      Interval interval0 = yearMonth0.toInterval();
      Duration duration0 = interval0.toDuration();
      assertEquals(2678400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(31535999999880L, 31535999999880L, (Chronology) null);
      YearMonth yearMonth0 = new YearMonth(751L);
      Interval interval0 = yearMonth0.toInterval();
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Days days0 = seconds0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusHours(32);
      Interval interval0 = duration0.toIntervalFrom(dateTime1);
      boolean boolean0 = interval0.isAfter((ReadableInstant) dateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = mutableInterval0.getStart();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((-120L), (-120L), buddhistChronology0);
      DateTime dateTime0 = mutableInterval0.getStart();
      assertEquals((-120L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1951L);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, mutableDateTime0);
      DateTime dateTime0 = mutableInterval0.getEnd();
      assertEquals(1951L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), (-8L));
      DateTime dateTime0 = interval0.getEnd();
      assertEquals((-8L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((-120L), (-120L), buddhistChronology0);
      Duration duration0 = Duration.standardSeconds(31536000000L);
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      boolean boolean0 = mutableInterval0.containsNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval((-727L), (-727L), (DateTimeZone) null);
      Hours hours0 = Hours.FIVE;
      Interval interval1 = interval0.withPeriodAfterStart(hours0);
      boolean boolean0 = interval1.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      Duration duration0 = new Duration(383L, 21859200000L);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(dateTime0, duration0, periodType0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, period0);
      boolean boolean0 = mutableInterval0.contains((ReadableInstant) dateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      boolean boolean0 = interval0.contains((ReadableInstant) instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      // Undeclared exception!
      try { 
        interval0.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      boolean boolean0 = interval0.isAfter(1190L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      mutableInterval0.setInterval(0L, 0L);
      boolean boolean0 = mutableInterval0.isBefore(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isBefore((-285L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), (-8L));
      boolean boolean0 = interval0.overlaps(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, (-1));
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.withYear(1);
      Interval interval0 = yearMonth1.toInterval(dateTimeZone0);
      boolean boolean0 = mutableInterval0.overlaps(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((-120L), (-120L), buddhistChronology0);
      boolean boolean0 = mutableInterval0.contains((long) 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval(2089L, 2089L, buddhistChronology0);
      DateTime dateTime0 = mutableInterval0.getStart();
      assertEquals(2089L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      long long0 = interval0.toDurationMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((-120L), (-120L), buddhistChronology0);
      boolean boolean0 = mutableInterval0.containsNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = mutableInterval0.toInterval();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Interval interval1 = interval0.withChronology(gregorianChronology0);
      boolean boolean0 = mutableInterval0.equals(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = new Interval(0L, 61200000);
      boolean boolean0 = mutableInterval0.equals(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      mutableInterval0.setDurationBeforeEnd(1747L);
      Interval interval0 = new Interval(0L, 61200000);
      boolean boolean0 = mutableInterval0.equals(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = mutableInterval0.equals(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3574L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      boolean boolean0 = interval0.equals(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Duration duration0 = interval0.toDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = new Instant((-3150L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, duration0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      boolean boolean0 = interval0.isAfter((ReadableInterval) mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), (-8L));
      boolean boolean0 = interval0.isAfter((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      boolean boolean0 = mutableInterval0.isAfter((-1640L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3165), (-3165));
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), (-8L));
      boolean boolean0 = interval0.isBefore((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardDays(3);
      Interval interval0 = new Interval(mutableDateTime0, duration0);
      boolean boolean0 = interval0.isBefore((ReadableInstant) mutableDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      mutableInterval0.setInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      Interval interval1 = new Interval((-1577L), 30L);
      boolean boolean0 = interval0.isEqual(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      boolean boolean0 = interval0.isEqual(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      mutableInterval0.setInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      boolean boolean0 = interval0.isEqual(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, (-1));
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      boolean boolean0 = mutableInterval0.overlaps(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3574L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      Interval interval1 = interval0.overlap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      boolean boolean0 = mutableInterval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = new Instant((-140L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, duration0);
      boolean boolean0 = mutableInterval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Interval interval0 = new Interval((-727L), (-727L), (DateTimeZone) null);
      boolean boolean0 = interval0.contains((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Instant instant0 = new Instant();
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      Hours hours0 = Hours.MAX_VALUE;
      MutableInterval mutableInterval0 = new MutableInterval(hours0, instant0);
      boolean boolean0 = interval0.contains((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = new Instant((-140L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, duration0);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      boolean boolean0 = interval0.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      mutableInterval0.setDurationBeforeEnd(1747L);
      boolean boolean0 = mutableInterval0.contains((-1L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      boolean boolean0 = mutableInterval0.contains((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, (-1));
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(1);
      Interval interval0 = yearMonth1.toInterval(dateTimeZone0);
      // Undeclared exception!
      try { 
        interval0.withStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      boolean boolean0 = interval0.isBeforeNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      DateTime dateTime0 = interval0.getEnd();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      boolean boolean0 = interval0.isAfterNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Interval interval0 = new Interval((-1577L), 0L);
      boolean boolean0 = interval0.contains((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableInterval mutableInterval0 = new MutableInterval(interval0, chronology0);
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
  }
}
