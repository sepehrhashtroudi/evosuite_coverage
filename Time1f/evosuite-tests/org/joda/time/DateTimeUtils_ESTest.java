/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:56:44 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeUtils_ESTest extends DateTimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(15778800000L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-2758L));
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409278562L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertEquals(0L, readableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      Days days0 = Days.days(0);
      Interval interval0 = new Interval(instant0, days0);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval(interval0);
      assertEquals((-1L), readableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      PeriodType periodType2 = DateTimeUtils.getPeriodType(periodType1);
      assertEquals("MillisNoMillis", periodType2.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(0L, (Chronology) iSOChronology0);
      long long0 = DateTimeUtils.getInstantMillis(dateTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Duration duration0 = minutes0.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(120000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440587.5);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2338);
      assertEquals((-210664756800000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed((-762L));
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals((-762L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setDefaultTimeZoneNames((Map<String, DateTimeZone>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.getDateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 32);
      boolean boolean0 = DateTimeUtils.isContiguous(localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-2462L));
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals((-2462000L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = DateTimeUtils.getPeriodType((PeriodType) null);
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone((DateTimeZone) null);
      assertEquals("America/Edmonton", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeUtils.getZone(dateTimeZone0);
      assertEquals("America/Edmonton", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getChronology((Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = DateTimeUtils.getChronology(buddhistChronology0);
      assertSame(chronology0, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      long long0 = DateTimeUtils.getInstantMillis(dateTime0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay(1392409280320L);
      assertEquals(2456703.348151852, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = DateTimeUtils.getDurationMillis((ReadableDuration) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertNotNull(readableInterval0);
      assertEquals(1392409281320L, readableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) mutableInterval0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1);
      Period period0 = new Period(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Interval interval0 = yearMonth0.toInterval();
      DateTime dateTime0 = interval0.getStart();
      Chronology chronology0 = DateTimeUtils.getInstantChronology(dateTime0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(2440588L);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_FixedMillisProvider0);
      assertEquals(2440588L, dateTimeUtils_FixedMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(0L);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset((-1905L));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-2758L));
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409278562L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = new DateTimeUtils.SystemMillisProvider();
      long long0 = dateTimeUtils_SystemMillisProvider0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DateFormatSymbols dateFormatSymbols0 = DateTimeUtils.getDateFormatSymbols(locale0);
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      assertEquals(1392409281320L, dateTimeUtils0.currentTimeMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber(620L);
      assertEquals(2440588L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeUtils.setDefaultTimeZoneNames(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440588L);
      assertEquals(43200000L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeUtils.setCurrentMillisSystem();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(2440588L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals(2440588L, long0);
  }
}
