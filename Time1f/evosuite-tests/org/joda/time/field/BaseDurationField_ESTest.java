/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:38:20 GMT 2022
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDurationField_ESTest extends BaseDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 31556952000L);
      long long0 = preciseDurationField0.getValueAsLong(1862L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, (-870));
      long long0 = scaledDurationField0.getValueAsLong((-4331L));
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1081L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(delegatedDurationField0, durationFieldType0, (-1));
      long long0 = scaledDurationField0.getValueAsLong((-1081L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 30585600000L);
      int int0 = preciseDurationField0.getValue(1315L, 1315L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 5097600000L);
      int int0 = preciseDurationField0.getValue(5097600000L, 0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-4585L));
      int int0 = preciseDurationField0.getValue((-4585L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(delegatedDurationField0, durationFieldType0);
      int int0 = decoratedDurationField0.getValue((-892L));
      assertEquals((-892), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval((-223L), (-223L));
      Weeks weeks0 = Weeks.weeksIn(interval0);
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-223L));
      long long0 = preciseDurationField0.getMillis(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      long long0 = decoratedDurationField0.getMillis((-3219L));
      assertEquals((-101581828488000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 96L);
      long long0 = preciseDurationField0.getMillis(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 503);
      long long0 = scaledDurationField0.getMillis(1);
      assertEquals(15873146856000L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.seconds();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      int int0 = decoratedDurationField0.getDifference(1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-4343));
      int int0 = preciseDurationField0.getDifference((-4343), 0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      int int0 = preciseDurationField0.getDifference(1, 1640L);
      assertEquals((-1639), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getValue(1L, 1L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getValue(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 31536000000L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getMillis(31536000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 31536000000 * 31536000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1085L));
      // Undeclared exception!
      try { 
        preciseDurationField0.compareTo((DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      long long0 = decoratedDurationField0.getMillis((long) 1);
      assertEquals(86400000L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      String string0 = preciseDurationField0.getName();
      assertEquals("days", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, (-4343));
      boolean boolean0 = scaledDurationField0.isSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getValueAsLong(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        decoratedDurationField0.getDifference(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      int int0 = preciseDurationField0.compareTo((DurationField) unsupportedDurationField0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      int int0 = decoratedDurationField0.compareTo((DurationField) decoratedDurationField0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 8L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.seconds();
      int int0 = preciseDurationField0.compareTo(durationField0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PreciseDurationField preciseDurationField0 = null;
      try {
        preciseDurationField0 = new PreciseDurationField((DurationFieldType) null, (-28));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 8L);
      int int0 = preciseDurationField0.getValue((-18L), (-18L));
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      long long0 = decoratedDurationField0.getMillis((-2236));
      assertEquals((-193190400000L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      String string0 = decoratedDurationField0.toString();
      assertEquals("DurationField[minutes]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-3031L));
      DurationFieldType durationFieldType1 = preciseDurationField0.getType();
      assertSame(durationFieldType0, durationFieldType1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      int int0 = decoratedDurationField0.getValue((long) 1);
      assertEquals(0, int0);
  }
}
