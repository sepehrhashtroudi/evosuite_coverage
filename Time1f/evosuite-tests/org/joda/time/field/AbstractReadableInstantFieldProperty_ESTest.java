/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:16:47 GMT 2022
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractReadableInstantFieldProperty_ESTest extends AbstractReadableInstantFieldProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      Interval interval0 = localDateTime_Property0.toInterval();
      assertEquals(1414368000000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      DateTimeField dateTimeField0 = localDateTime_Property0.getField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2260743);
      mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      Interval interval0 = mutableDateTime_Property0.toInterval();
      assertEquals((-62167191968000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(21);
      DateTime dateTime0 = new DateTime((Object) null, dateTimeZone0);
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      long long0 = localDate_Property0.remainder();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(2122L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      DurationField durationField0 = mutableDateTime_Property0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) strictChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      int int0 = mutableDateTime_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) gregorianChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      int int0 = localDate_Property0.getMinimumValueOverall();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      int int0 = mutableDateTime_Property0.getMinimumValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      int int0 = localDate_Property0.getMinimumValue();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTime dateTime0 = new DateTime(2524L);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      DurationField durationField0 = localDateTime_Property0.getLeapDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      LocalDateTime.Property localDateTime_Property1 = localDateTime1.millisOfSecond();
      org.joda.time.Instant instant0 = org.joda.time.Instant.now();
      long long0 = localDateTime_Property1.getDifferenceAsLong(instant0);
      assertEquals((-8886081320L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      int int0 = localDate_Property0.getDifference(mutableDateTime0);
      assertEquals(16115, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      int int0 = mutableDateTime_Property0.getDifference(mutableDateTime1);
      assertEquals((-44), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L, (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      MutableDateTime mutableDateTime1 = new MutableDateTime((-1), 5, 5, 5, 2, 5, 4);
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.getDifference(mutableDateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.getDifference(mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-1257L));
      Date date0 = Date.from(instant0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDateTime_Property0.getDifference(mutableDateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1392409282577
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1121L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.compareTo((ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfYear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-7L));
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1);
      DateTime.Property dateTime_Property0 = dateTime0.era();
      DateTime dateTime1 = dateTime_Property0.roundHalfCeilingCopy();
      // Undeclared exception!
      try { 
        localTime_Property0.compareTo((ReadableInstant) dateTime1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      int int0 = localDate_Property0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = mutableDateTime_Property0.getFieldType();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-907L), (Chronology) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      int int0 = localDateTime_Property0.getMaximumValue();
      assertEquals(999, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-907L), (Chronology) null);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = localDateTime_Property0.getAsText(locale0);
      assertEquals("93", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      Locale locale0 = Locale.ROOT;
      String string0 = localTime_Property0.getAsShortText(locale0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1L, dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      int int0 = localDateTime_Property0.get();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      String string0 = mutableDateTime_Property0.getName();
      assertEquals("monthOfYear", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) (-1036));
      DateTime.Property dateTime_Property0 = dateTime0.centuryOfEra();
      boolean boolean0 = dateTime_Property0.equals(dateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-1257L));
      Date date0 = Date.from(instant0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      int int0 = localDateTime_Property0.compareTo((ReadablePartial) localDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L, (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      MutableDateTime mutableDateTime1 = new MutableDateTime((-1), 5, 5, 5, 2, 5, 4);
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) mutableDateTime1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      DateTime dateTime0 = localTime1.toDateTimeToday();
      int int0 = localTime_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      long long0 = mutableDateTime_Property0.getDifferenceAsLong(mutableDateTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      int int0 = mutableDateTime_Property0.getDifference(mutableDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.era();
      DurationField durationField0 = localDate_Property0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) lenientChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      long long0 = localDate_Property0.remainder();
      assertEquals(2764800000L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1121L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      mutableDateTime_Property0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      DurationField durationField0 = localDateTime_Property0.getLeapDurationField();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-7L));
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DateTime.Property dateTime_Property0 = dateTime0.era();
      // Undeclared exception!
      try { 
        dateTime_Property0.toInterval();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      int int0 = localDateTime_Property0.getMaximumValueOverall();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      String string0 = localDate_Property0.getAsString();
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      String string0 = mutableDateTime_Property0.getAsShortText();
      assertEquals("Fri", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      Locale locale0 = Locale.JAPANESE;
      int int0 = localDateTime_Property0.getMaximumShortTextLength(locale0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) lenientChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      String string0 = localDate_Property0.getAsText();
      assertEquals("2014", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      int int0 = mutableDateTime_Property0.getMinimumValueOverall();
      assertEquals((-292269338), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1121L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      DurationField durationField0 = mutableDateTime_Property0.getDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      Locale locale0 = new Locale("The instant must not be null", "The instant must not be null");
      int int0 = localDate_Property0.getMaximumTextLength(locale0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1121L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      int int0 = mutableDateTime_Property0.getLeapAmount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      String string0 = mutableDateTime_Property0.toString();
      assertEquals("Property[weekyear]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-7L), (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      int int0 = mutableDateTime_Property0.compareTo((ReadablePartial) localDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) strictChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      boolean boolean0 = mutableDateTime_Property0.isLeap();
      assertFalse(boolean0);
  }
}
