/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 04:35:41 GMT 2022
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrictDateTimeField_ESTest extends StrictDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(delegatedDateTimeField0);
      long long0 = strictDateTimeField0.set((long) 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.set((long) 1, 1);
      assertEquals((-378691199999L), long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set(2437L, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-07:33:52 (BuddhistChronology[America/Edmonton])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2510L);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(unsupportedDateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set(112L, (-2145));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfMinute field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StrictDateTimeField strictDateTimeField0 = null;
      try {
        strictDateTimeField0 = new StrictDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, 1);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(offsetDateTimeField0);
      assertEquals("halfdayOfDay", dateTimeField1.getName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(lenientDateTimeField0);
      assertSame(dateTimeField1, dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance((DateTimeField) null);
      assertNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      boolean boolean0 = strictDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.set((long) 1, 70);
      assertEquals(138850588800001L, long0);
  }
}
