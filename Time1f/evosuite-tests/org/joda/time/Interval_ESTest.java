/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 19 03:53:38 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 1L, ethiopicChronology0);
      Duration duration0 = Duration.millis(2233L);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertEquals(1L, interval1.getEndMillis());
      assertEquals((-2232L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 1L, ethiopicChronology0);
      Duration duration0 = Duration.millis(2233L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertEquals(2233L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Duration duration0 = Duration.standardDays(0L);
      System.setCurrentTimeMillis(0L);
      Interval interval1 = new Interval(duration0, (ReadableInstant) null);
      boolean boolean0 = interval0.abuts(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      Interval interval0 = Interval.parse((String) null);
      Hours hours0 = Hours.ONE;
      Weeks weeks0 = hours0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, seconds0);
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval((byte)0, (byte)0);
      Interval interval1 = interval0.withStartMillis((-1L));
      assertEquals((-1L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(14);
      Interval interval0 = new Interval((-145L), (-145L), dateTimeZone0);
      Interval interval1 = interval0.withStartMillis((-145L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      Interval interval0 = new Interval((-2187L), (-2187L), dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(60000).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MonthDay monthDay0 = MonthDay.parse("org.joda.time.chrono.BaseChronology", dateTimeFormatter0);
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Interval interval1 = interval0.withStart(dateTime0);
      assertEquals((-62167191968000L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(0L, 0L, periodType0, (Chronology) null);
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Interval interval1 = interval0.withPeriodBeforeEnd(period0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Interval interval0 = new Interval((-4175L), (-4175L), islamicChronology0);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(2519L, periodType0);
      Interval interval1 = interval0.withPeriodBeforeEnd(period0);
      assertEquals((-6694L), interval1.getStartMillis());
      assertEquals((-4175L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Months months0 = Months.THREE;
      Interval interval1 = interval0.withPeriodAfterStart(months0);
      assertEquals(7776000000L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      Interval interval0 = new Interval((-2187L), (-2187L), dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(99L, 0L, periodType0, buddhistChronology0);
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval(0L, 148L);
      Interval interval1 = interval0.withEndMillis(100000000000L);
      assertEquals(100000000000L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Interval interval1 = interval0.withEndMillis(1L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval((-881L), (-881L));
      Interval interval1 = interval0.withEndMillis(0L);
      assertEquals(0L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval((-1211L), 209L);
      DateTime dateTime0 = DateTime.now();
      Interval interval1 = interval0.withEnd(dateTime0);
      assertEquals(1392409281320L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Interval interval1 = interval0.withDurationBeforeEnd((ReadableDuration) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(14);
      Interval interval0 = new Interval((-145L), (-145L), dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-422L), 324L, copticChronology0);
      Hours hours0 = period0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Interval interval1 = interval0.withChronology(buddhistChronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interval interval0 = new Interval((-11L), (-11L));
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1392409461320L);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval1 = mutableInterval0.toInterval();
      Interval interval2 = interval0.gap(interval1);
      assertEquals(1392409461320L, interval2.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration((-3575L), 1546L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      MutableInterval mutableInterval0 = new MutableInterval((-3575L), (-3575L));
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNotNull(interval1);
      assertEquals((-3575L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Interval interval0 = new Interval((-1868L), (-1868L), fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        interval0.withStartMillis((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(10000000000000L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime dateTime1 = dateTime0.withDayOfWeek(2);
      Interval interval0 = duration0.toIntervalTo(dateTime1);
      // Undeclared exception!
      try { 
        interval0.withStart(dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 1L, ethiopicChronology0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1L, periodType0);
      Period period1 = period0.minusMinutes(355);
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 1L, ethiopicChronology0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1L, periodType0);
      Period period1 = period0.minusMinutes(355);
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Interval interval0 = new Interval(21600000L, 21600000L, gJChronology0);
      // Undeclared exception!
      try { 
        interval0.withEndMillis((-2207L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("Prefix not followed by field");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Prefix not followed by field
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(100000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = localDate0.toDateTime(instant0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Duration duration0 = Duration.standardSeconds((-2002L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1754L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(duration0, mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      Interval interval0 = null;
      try {
        interval0 = new Interval(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = null;
      try {
        interval0 = new Interval(58L, (-2400L), dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(2172L, 0L, strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Interval interval0 = new Interval((-1563L), (-1563L), dateTimeZone0);
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Interval interval0 = new Interval((-1868L), (-1868L), fixedDateTimeZone0);
      Interval interval1 = interval0.withEndMillis((-1868L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 1L, ethiopicChronology0);
      Interval interval1 = interval0.withStartMillis(0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = new Interval((Object) null, buddhistChronology0);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Period period0 = new Period((-346L), 1L);
      Duration duration0 = period0.toStandardDuration();
      Interval interval0 = new Interval(instant0, duration0);
      Interval interval1 = duration0.toIntervalTo((ReadableInstant) null);
      boolean boolean0 = interval0.abuts(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 1L, ethiopicChronology0);
      Interval interval1 = interval0.withStartMillis(1);
      assertEquals(1L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Interval interval0 = new Interval(2410L, 2410L);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Duration duration0 = Duration.standardDays(0L);
      Period period0 = new Period((ReadableInstant) null, duration0);
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      assertEquals(1368559281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Duration duration0 = Duration.standardDays(0L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      Interval interval2 = interval1.withDurationBeforeEnd(duration0);
      assertSame(interval2, interval1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interval interval0 = new Interval(2410L, 2410L);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      Interval interval0 = new Interval((-2187L), (-2187L), dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Interval interval1 = interval0.withChronology(buddhistChronology0);
      Interval interval2 = interval1.withChronology(buddhistChronology0);
      assertNotSame(interval2, interval0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval1 = interval0.withChronology(ethiopicChronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Duration duration0 = Duration.standardDays(0L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      boolean boolean0 = interval1.abuts(interval0);
      assertEquals(1368559281320L, interval1.getStartMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Interval interval0 = new Interval(2410L, 2410L);
      boolean boolean0 = interval0.abuts(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Interval interval0 = new Interval(1856L, 1856L);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadableDuration) null);
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNotNull(interval1);
      assertEquals(1856L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1392409461320L);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Interval interval1 = interval0.overlap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Interval interval1 = interval0.overlap(interval0);
      assertNotNull(interval1);
      assertEquals(1368559281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(637L, 637L, dateTimeZone0);
      Duration duration0 = Duration.standardDays((-711L));
      // Undeclared exception!
      try { 
        interval0.withDurationBeforeEnd(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(")`!8Ee", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: )`!8Ee
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Interval interval1 = interval0.withStart((ReadableInstant) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Interval interval0 = new Interval((ReadableInstant) null, hours0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(1643L, (-2081L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1392409461320L);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Interval interval1 = interval0.toInterval();
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(months0, (ReadableInstant) null);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      assertSame(interval1, interval0);
  }
}
