/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 02:28:57 GMT 2023
 */

package org.apache.commons.jxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyDescriptor;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JXPathBasicBeanInfo_ESTest extends JXPathBasicBeanInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      boolean boolean0 = jXPathBasicBeanInfo0.isAtomic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      PropertyDescriptor[] propertyDescriptorArray0 = jXPathBasicBeanInfo0.getPropertyDescriptors();
      assertTrue(jXPathBasicBeanInfo0.isAtomic());
      assertNull(propertyDescriptorArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      PropertyDescriptor[] propertyDescriptorArray0 = jXPathBasicBeanInfo0.getPropertyDescriptors();
      assertEquals(0, propertyDescriptorArray0.length);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Class class2 = jXPathBasicBeanInfo0.getDynamicPropertyHandlerClass();
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertEquals(17, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      // Undeclared exception!
      try { 
        jXPathBasicBeanInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.JXPathBasicBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo((Class) null);
      // Undeclared exception!
      try { 
        jXPathBasicBeanInfo0.getPropertyDescriptors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.JXPathBasicBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      // Undeclared exception!
      try { 
        jXPathBasicBeanInfo0.getPropertyDescriptor("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.JXPathBasicBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      PropertyDescriptor[] propertyDescriptorArray0 = jXPathBasicBeanInfo0.getPropertyDescriptors();
      assertNotNull(propertyDescriptorArray0);
      assertEquals(2, propertyDescriptorArray0.length);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      boolean boolean0 = jXPathBasicBeanInfo0.isDynamic();
      assertFalse(boolean0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      boolean boolean0 = jXPathBasicBeanInfo0.isDynamic();
      assertTrue(boolean0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      boolean boolean0 = jXPathBasicBeanInfo0.isAtomic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
      jXPathBasicBeanInfo0.getPropertyDescriptor("enpty");
      PropertyDescriptor propertyDescriptor0 = jXPathBasicBeanInfo0.getPropertyDescriptor("BeanInfo [class = java.lang.String, dynamic, properties = \n    class [B: bytes\n    boolean: empty]");
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
      String string0 = jXPathBasicBeanInfo0.toString();
      assertEquals("BeanInfo [class = java.lang.String, dynamic, properties = \n    class [B: bytes\n    boolean: empty]", string0);
      
      PropertyDescriptor propertyDescriptor0 = jXPathBasicBeanInfo0.getPropertyDescriptor("enpty");
      assertNull(propertyDescriptor0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      jXPathBasicBeanInfo0.getDynamicPropertyHandlerClass();
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      String string0 = jXPathBasicBeanInfo0.toString();
      assertEquals("BeanInfo [class = java.lang.Integer, atomic, properties = ]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      PropertyDescriptor propertyDescriptor0 = jXPathBasicBeanInfo0.getPropertyDescriptor("empty");
      assertNotNull(propertyDescriptor0);
      assertFalse(jXPathBasicBeanInfo0.isAtomic());
      assertEquals("empty", propertyDescriptor0.getShortDescription());
  }
}
