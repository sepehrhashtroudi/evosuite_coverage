/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 02:41:55 GMT 2023
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.util.BasicTypeConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicTypeConverter_ESTest extends BasicTypeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Long long0 = new Long(1051L);
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(long0);
      Object object0 = basicTypeConverter_ValuePointer0.getValue();
      assertEquals(1051L, object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Byte byte0 = new Byte((byte) (-46));
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convertStringToPrimitive(byte0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Long> class0 = Long.class;
      Object object0 = basicTypeConverter0.convertStringToPrimitive("02", class0);
      assertNotNull(object0);
      assertEquals(2L, object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicNodeSet0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<String> class0 = String.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicNodeSet0);
      basicTypeConverter_ValuePointer0.asPath();
      basicNodeSet0.add(basicTypeConverter_ValuePointer0);
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicNodeSet0, class1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert((Object) null, (Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      // Undeclared exception!
      try { 
        basicTypeConverter0.canCreateCollection((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(class0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Boolean boolean0 = Boolean.valueOf("org.apache.commons.jxpath.JXPathException");
      Class<Float> class0 = Float.class;
      Object object0 = basicTypeConverter0.convert(boolean0, class0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<BasicNodeSet> linkedList0 = new LinkedList<BasicNodeSet>();
      linkedList0.add((BasicNodeSet) null);
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.class;
      Object object0 = basicTypeConverter0.convert(linkedList0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<String> class0 = String.class;
      Object object0 = basicTypeConverter0.convert(linkedList0, class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      Object object0 = basicTypeConverter0.convert((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.class;
      boolean boolean0 = basicTypeConverter0.canConvert("<#wb; [", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = basicTypeConverter0.canConvert("w^v\"%B", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.class;
      boolean boolean0 = basicTypeConverter0.canConvert("02", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.class;
      boolean boolean0 = basicTypeConverter0.canConvert("as", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Float float0 = new Float((-264.48197668480844));
      Class<Long> class0 = Long.class;
      boolean boolean0 = basicTypeConverter0.canConvert(float0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer("");
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean0);
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertEquals("false()", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean0);
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertEquals("true()", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short)2331);
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(short0);
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer((Object) null);
      String string0 = basicTypeConverter_ValuePointer0.asPath();
      assertEquals("null()", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = new Character('8');
      linkedList0.offer(character0);
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      List list0 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      basicTypeConverter_ValueNodeSet0.getPointers();
      List list0 = basicTypeConverter_ValueNodeSet0.getPointers();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Collection collection0 = basicTypeConverter0.unmodifiableCollection((Collection) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedList<BasicTypeConverter.ValuePointer> linkedList0 = new LinkedList<BasicTypeConverter.ValuePointer>();
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create collection of type: double
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.allocateCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create collection of type: class java.lang.Integer; java.lang.Integer
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.class;
      boolean boolean0 = basicTypeConverter0.canCreateCollection(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = basicTypeConverter0.canCreateCollection(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 0.0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Float> class0 = Float.TYPE;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 1021.0083547);
      assertNotNull(number0);
      assertEquals(1021.00836F, number0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Byte byte0 = new Byte((byte)1);
      Class<Float> class0 = Float.class;
      Object object0 = basicTypeConverter0.convert(byte0, class0);
      assertNotNull(object0);
      assertEquals(1.0F, object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Byte byte0 = new Byte((byte) (-7));
      Class<Long> class0 = Long.TYPE;
      Object object0 = basicTypeConverter0.convert(byte0, class0);
      assertNotNull(object0);
      assertEquals((-7L), object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Long> class0 = Long.class;
      Number number0 = basicTypeConverter0.allocateNumber(class0, (-954.9679095201));
      assertEquals((-954L), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Integer> class0 = Integer.TYPE;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 3286.306386);
      assertEquals(3286, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Integer> class0 = Integer.class;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 3286.306386);
      assertEquals(3286, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.TYPE;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 0.0);
      assertEquals((short)0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.TYPE;
      Number number0 = basicTypeConverter0.allocateNumber(class0, (byte) (-1));
      assertEquals((byte) (-1), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicNodeSet0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(linkedList0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Double double0 = new Double(0.0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(double0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert("` 7wq", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"` 7wq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert("4 3wq", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4 3wq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Byte byte0 = new Byte((byte) (-1));
      Class<Double> class0 = Double.TYPE;
      Object object0 = basicTypeConverter0.convert(byte0, class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(object0, class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive((Object) null, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive((Object) null, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedHashSet<Byte> linkedHashSet0 = new LinkedHashSet<Byte>();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(linkedHashSet0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashSet cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedHashSet<Byte> linkedHashSet0 = new LinkedHashSet<Byte>();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(linkedHashSet0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashSet cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Long long0 = new Long((byte)0);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(long0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.class;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Float> class0 = Float.TYPE;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Long> class0 = Long.TYPE;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertNotNull(object0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.TYPE;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertEquals((short)0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.TYPE;
      Object object0 = basicTypeConverter0.convertNullToPrimitive(class0);
      assertEquals('\u0000', object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Character> class0 = Character.class;
      Object object0 = basicTypeConverter0.convert("{object of type org.apache.commons.jxpath.BasicNodeSet}", class0);
      assertNotNull(object0);
      assertEquals('{', object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert("+$i,<;\u0002rD", class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(object0);
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Character character0 = Character.valueOf('3');
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(character0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Integer integer0 = new Integer(0);
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(integer0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.class;
      Byte byte0 = new Byte((byte) (-1));
      Object object0 = basicTypeConverter0.convert(byte0, class0);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convertStringToPrimitive(object0, class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Short short0 = new Short((short)2);
      Class<Boolean> class0 = Boolean.class;
      Object object0 = basicTypeConverter0.convert(short0, class0);
      assertNotNull(object0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Short> class0 = Short.class;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 0L);
      assertNotNull(number0);
      assertEquals((short)0, number0);
      
      Class<Boolean> class1 = Boolean.TYPE;
      Object object0 = basicTypeConverter0.convert(number0, class1);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.class;
      Boolean boolean0 = Boolean.valueOf("m7mxj4+x6UPh?io>}$U");
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(boolean0);
      Object object0 = basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Boolean boolean0 = Boolean.TRUE;
      Class<Double> class0 = Double.class;
      Object object0 = basicTypeConverter0.convert(boolean0, class0);
      assertEquals(1.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<String> class0 = String.class;
      Object object0 = basicTypeConverter0.convert(class0, class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      Collection collection0 = basicTypeConverter0.unmodifiableCollection(linkedHashSet0);
      linkedHashSet0.add((Short) null);
      Class<Integer> class0 = Integer.class;
      Object object0 = basicTypeConverter0.convert(collection0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter0.convert(basicNodeSet0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.class;
      Double double0 = new Double((-1.0));
      Object object0 = basicTypeConverter0.convert(double0, class0);
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicTypeConverter0);
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convert(basicTypeConverter_ValuePointer0, class0);
      assertSame(basicTypeConverter0, object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convert(basicNodeSet0, class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Byte byte0 = new Byte((byte) (-68));
      Class<Object> class0 = Object.class;
      Object object0 = basicTypeConverter0.convert(byte0, class0);
      assertEquals((byte) (-68), object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canConvert(class0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedHashSet<Byte> linkedHashSet0 = new LinkedHashSet<Byte>();
      Byte byte0 = new Byte((byte) (-73));
      linkedHashSet0.add(byte0);
      Class<Long> class0 = Long.class;
      boolean boolean0 = basicTypeConverter0.canConvert(linkedHashSet0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedList<BasicTypeConverter.ValuePointer> linkedList0 = new LinkedList<BasicTypeConverter.ValuePointer>();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicNodeSet0);
      boolean boolean0 = linkedList0.offerFirst(basicTypeConverter_ValuePointer0);
      Class<Double> class0 = Double.class;
      boolean boolean1 = basicTypeConverter0.canConvert(linkedList0, class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canConvert(basicNodeSet0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Float> class0 = Float.class;
      boolean boolean0 = basicTypeConverter0.canConvert("aOjo(]*&l~fK|@)R", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Long> class0 = Long.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      boolean boolean0 = basicTypeConverter0.canConvert(basicNodeSet0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Class<Short> class0 = Short.class;
      boolean boolean0 = basicTypeConverter0.canConvert(linkedList0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.class;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      boolean boolean0 = basicTypeConverter0.canConvert(basicNodeSet0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = basicTypeConverter0.canConvert("02", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = basicTypeConverter0.canConvert("02", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Character character0 = new Character('2');
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canConvert(character0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      Short short0 = new Short((short)708);
      // Undeclared exception!
      try { 
        basicTypeConverter0.canConvert(short0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Byte> class0 = Byte.class;
      Number number0 = basicTypeConverter0.allocateNumber(class0, 0.0);
      assertNotNull(number0);
      
      Class<Double> class1 = Double.TYPE;
      boolean boolean0 = basicTypeConverter0.canConvert(number0, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(0);
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(integer0);
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<Double> class0 = Double.class;
      boolean boolean0 = basicTypeConverter0.canConvert(basicTypeConverter_ValuePointer0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Boolean boolean0 = Boolean.valueOf(true);
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      // Undeclared exception!
      try { 
        basicTypeConverter0.canConvert(boolean0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Boolean boolean0 = Boolean.TRUE;
      Class<Integer> class0 = Integer.class;
      boolean boolean1 = basicTypeConverter0.canConvert(boolean0, class0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer(basicNodeSet0);
      Class<BasicTypeConverter.ValuePointer> class0 = BasicTypeConverter.ValuePointer.class;
      boolean boolean0 = basicTypeConverter0.canConvert(basicTypeConverter_ValuePointer0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Character character0 = new Character('T');
      Class<Object> class0 = Object.class;
      boolean boolean0 = basicTypeConverter0.canConvert(character0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<BasicNodeSet> class0 = BasicNodeSet.class;
      boolean boolean0 = basicTypeConverter0.canConvert((Object) null, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      Class<String> class0 = String.class;
      boolean boolean0 = basicTypeConverter0.canConvert(basicTypeConverter0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer((Object) null);
      Object object0 = basicTypeConverter_ValuePointer0.getRootNode();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer("1g");
      Object object0 = basicTypeConverter_ValuePointer0.getNode();
      assertEquals("1g", object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer((Object) null);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        basicTypeConverter_ValuePointer0.setValue(class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter$ValuePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer((Object) null);
      Integer integer0 = new Integer(3522);
      int int0 = basicTypeConverter_ValuePointer0.compareTo(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer("org.apache.commons.jxpath.JXPathInvalidAccessException");
      Object object0 = basicTypeConverter_ValuePointer0.clone();
      assertSame(basicTypeConverter_ValuePointer0, object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BasicTypeConverter basicTypeConverter0 = new BasicTypeConverter();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      BasicTypeConverter.ValuePointer basicTypeConverter_ValuePointer0 = new BasicTypeConverter.ValuePointer((Object) null);
      basicNodeSet0.add(basicTypeConverter_ValuePointer0);
      Class<Double> class0 = Double.TYPE;
      Object object0 = basicTypeConverter0.convert(basicNodeSet0, class0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      List list0 = basicTypeConverter_ValueNodeSet0.getValues();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BasicTypeConverter.ValueNodeSet basicTypeConverter_ValueNodeSet0 = new BasicTypeConverter.ValueNodeSet(linkedList0);
      List list0 = basicTypeConverter_ValueNodeSet0.getNodes();
      assertEquals(0, list0.size());
  }
}
