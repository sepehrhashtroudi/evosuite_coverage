/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 01:58:29 GMT 2023
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.ri.parser.TokenMgrError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenMgrError_ESTest extends TokenMgrError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(true, 1112, 1112, 567, "}", 'w', 0);
      int int0 = tokenMgrError0.getPosition();
      assertEquals(566, int0);
      assertEquals('w', tokenMgrError0.getCharacter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(true, 218, (-2910), (-2910), "", '(', (-2910));
      int int0 = tokenMgrError0.getPosition();
      assertEquals((-2911), int0);
      assertEquals('(', tokenMgrError0.getCharacter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(true, 615, 615, 615, "", '8', 1809);
      char char0 = tokenMgrError0.getCharacter();
      assertEquals(614, tokenMgrError0.getPosition());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(true, 1112, 1112, 567, "}", 'w', 0);
      char char0 = tokenMgrError0.getCharacter();
      assertEquals(566, tokenMgrError0.getPosition());
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenMgrError.addEscapes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.TokenMgrError", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenMgrError.LexicalError(true, 1259, 0, (-1), (String) null, '{');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.TokenMgrError", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("%Jg\"-~:");
      assertEquals("%Jg\\\"-~:\\u007f", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError("", 1730);
      String string0 = tokenMgrError0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TokenMgrError.LexicalError(false, '\u0000', 0, '\u0092', "Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"9d;wOf\\I(Y[~4HWU\"", '\u0092');
      assertEquals("Lexical error at line 0, column 146.  Encountered: \"\\u0092\" (146), after : \"Lexical error at line 0, column 0.  Encountered: \\\"\\\" (0), after : \\\"9d;wOf\\\\I(Y[~4HWU\\\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("vzknVU8M^(3|R>i\"]'");
      assertEquals("vzknVU8M^(3|R>i\\\"]\\'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("\t");
      assertEquals("\\t", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = TokenMgrError.LexicalError(false, '\u0000', 0, '\u0000', "9d;wOfI(Y[~4HWU", '\u0000');
      assertEquals("Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"9d;wOfI(Y[~4HWU\"", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(false, 8, 8, 8, "", '\\', 0);
      char char0 = tokenMgrError0.getCharacter();
      assertEquals(7, tokenMgrError0.getPosition());
      assertEquals('\\', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(true, 0, 0, (-875), "", 'R', (-1));
      String string0 = tokenMgrError0.getMessage();
      assertEquals('R', tokenMgrError0.getCharacter());
      assertEquals((-876), tokenMgrError0.getPosition());
      assertEquals("Lexical error at line 0, column -875.  Encountered: <EOF> after : \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError();
      String string0 = tokenMgrError0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenMgrError tokenMgrError0 = null;
      try {
        tokenMgrError0 = new TokenMgrError(false, 0, 0, 0, (String) null, '_', 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.TokenMgrError", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError();
      int int0 = tokenMgrError0.getPosition();
      assertEquals(0, int0);
  }
}
