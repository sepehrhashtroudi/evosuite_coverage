/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 02:35:58 GMT 2023
 */

package org.apache.commons.jxpath.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.jxpath.xml.DOMParser;
import org.apache.commons.jxpath.xml.JDOMParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLParser2_ESTest extends XMLParser2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      assertFalse(dOMParser0.isValidating());
      
      dOMParser0.setValidating(true);
      boolean boolean0 = dOMParser0.isValidating();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      assertTrue(dOMParser0.isNamespaceAware());
      
      dOMParser0.setNamespaceAware(false);
      boolean boolean0 = dOMParser0.isNamespaceAware();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDOMParser jDOMParser0 = new JDOMParser();
      assertFalse(jDOMParser0.isIgnoringElementContentWhitespace());
      
      jDOMParser0.setIgnoringElementContentWhitespace(true);
      boolean boolean0 = jDOMParser0.isIgnoringElementContentWhitespace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDOMParser jDOMParser0 = new JDOMParser();
      assertTrue(jDOMParser0.isExpandEntityReferences());
      
      jDOMParser0.setExpandEntityReferences(false);
      boolean boolean0 = jDOMParser0.isExpandEntityReferences();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      assertFalse(dOMParser0.isCoalescing());
      
      dOMParser0.setCoalescing(true);
      boolean boolean0 = dOMParser0.isCoalescing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDOMParser jDOMParser0 = new JDOMParser();
      // Undeclared exception!
      try { 
        jDOMParser0.parseXML((InputStream) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jdom/input/SAXBuilder
         //
         verifyException("org.apache.commons.jxpath.xml.JDOMParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      boolean boolean0 = dOMParser0.isIgnoringElementContentWhitespace();
      assertTrue(dOMParser0.isExpandEntityReferences());
      assertTrue(dOMParser0.isNamespaceAware());
      assertFalse(dOMParser0.isCoalescing());
      assertFalse(dOMParser0.isIgnoringComments());
      assertFalse(dOMParser0.isValidating());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      boolean boolean0 = dOMParser0.isCoalescing();
      assertTrue(dOMParser0.isExpandEntityReferences());
      assertFalse(boolean0);
      assertTrue(dOMParser0.isNamespaceAware());
      assertFalse(dOMParser0.isIgnoringComments());
      assertFalse(dOMParser0.isValidating());
      assertFalse(dOMParser0.isIgnoringElementContentWhitespace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      boolean boolean0 = dOMParser0.isExpandEntityReferences();
      assertTrue(boolean0);
      assertFalse(dOMParser0.isIgnoringElementContentWhitespace());
      assertFalse(dOMParser0.isValidating());
      assertFalse(dOMParser0.isIgnoringComments());
      assertFalse(dOMParser0.isCoalescing());
      assertTrue(dOMParser0.isNamespaceAware());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      boolean boolean0 = dOMParser0.isIgnoringComments();
      assertFalse(boolean0);
      assertFalse(dOMParser0.isCoalescing());
      assertTrue(dOMParser0.isExpandEntityReferences());
      assertFalse(dOMParser0.isIgnoringElementContentWhitespace());
      assertTrue(dOMParser0.isNamespaceAware());
      assertFalse(dOMParser0.isValidating());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      boolean boolean0 = dOMParser0.isValidating();
      assertTrue(dOMParser0.isExpandEntityReferences());
      assertFalse(dOMParser0.isCoalescing());
      assertFalse(boolean0);
      assertTrue(dOMParser0.isNamespaceAware());
      assertFalse(dOMParser0.isIgnoringComments());
      assertFalse(dOMParser0.isIgnoringElementContentWhitespace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      boolean boolean0 = dOMParser0.isNamespaceAware();
      assertTrue(boolean0);
      assertFalse(dOMParser0.isIgnoringComments());
      assertFalse(dOMParser0.isValidating());
      assertFalse(dOMParser0.isIgnoringElementContentWhitespace());
      assertTrue(dOMParser0.isExpandEntityReferences());
      assertFalse(dOMParser0.isCoalescing());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      assertFalse(dOMParser0.isIgnoringComments());
      
      dOMParser0.setIgnoringComments(true);
      boolean boolean0 = dOMParser0.isIgnoringComments();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DOMParser dOMParser0 = new DOMParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        dOMParser0.parseXML(pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DOM parser error; Pipe not connected
         //
         verifyException("org.apache.commons.jxpath.xml.DOMParser", e);
      }
  }
}
