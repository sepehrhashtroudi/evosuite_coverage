/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 23:19:45 GMT 2023
 */

package com.google.debugging.sourcemap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.debugging.sourcemap.SourceMapSection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceMapSection_ESTest extends SourceMapSection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL((String) null, 1855, (-555));
      sourceMapSection0.getSectionValue();
      assertEquals(1855, sourceMapSection0.getLine());
      assertEquals((-555), sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("", (-1996), (-1));
      sourceMapSection0.getSectionValue();
      assertEquals((-1), sourceMapSection0.getColumn());
      assertEquals((-1996), sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL((String) null, 1, 1);
      sourceMapSection0.getSectionUrl();
      assertEquals(1, sourceMapSection0.getLine());
      assertEquals(1, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("", 0, (-1));
      sourceMapSection0.getSectionUrl();
      assertEquals((-1), sourceMapSection0.getColumn());
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection((String) null, 0, 2919);
      int int0 = sourceMapSection0.getLine();
      assertEquals(2919, sourceMapSection0.getColumn());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap((String) null, (-185), (-185));
      int int0 = sourceMapSection0.getLine();
      assertEquals((-185), int0);
      assertEquals((-185), sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("", 0, 0);
      int int0 = sourceMapSection0.getColumn();
      assertEquals(0, sourceMapSection0.getLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("[F[1A@+Q__b", 293, 82);
      int int0 = sourceMapSection0.getColumn();
      assertEquals(82, int0);
      assertEquals(293, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("Qx5gU^", 0, 0);
      assertEquals(0, sourceMapSection0.getColumn());
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("", 0, 0);
      assertEquals(0, sourceMapSection0.getLine());
      assertEquals(0, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("D4wNm)ddT1c", (-1), 1);
      assertEquals((-1), sourceMapSection0.getLine());
      assertEquals(1, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("$", 1, 1);
      sourceMapSection0.getSectionUrl();
      assertEquals(1, sourceMapSection0.getColumn());
      assertEquals(1, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("5aN1/&yl@k\"HFV^Y", (-42), (-42));
      int int0 = sourceMapSection0.getColumn();
      assertEquals((-42), sourceMapSection0.getLine());
      assertEquals((-42), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("$", 1, 1);
      sourceMapSection0.getSectionType();
      assertEquals(1, sourceMapSection0.getLine());
      assertEquals(1, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("$", 1, 1);
      int int0 = sourceMapSection0.getLine();
      assertEquals(1, int0);
      assertEquals(1, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("", 234, (-1));
      // Undeclared exception!
      try { 
        sourceMapSection0.getSectionUrl();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("$", 1, 1);
      sourceMapSection0.getSectionValue();
      assertEquals(1, sourceMapSection0.getLine());
      assertEquals(1, sourceMapSection0.getColumn());
  }
}
