/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 18:26:37 GMT 2023
 */

package com.google.debugging.sourcemap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.debugging.sourcemap.SourceMapSection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceMapSection_ESTest extends SourceMapSection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection((String) null, 0, (-2087));
      sourceMapSection0.getSectionValue();
      assertEquals(0, sourceMapSection0.getLine());
      assertEquals((-2087), sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("0qt*pS!=\"3r]*", (-1125), 1419);
      sourceMapSection0.getSectionValue();
      assertEquals(1419, sourceMapSection0.getColumn());
      assertEquals((-1125), sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL((String) null, 0, (-1831));
      sourceMapSection0.getSectionUrl();
      assertEquals((-1831), sourceMapSection0.getColumn());
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection((String) null, 0, (-2087));
      int int0 = sourceMapSection0.getLine();
      assertEquals((-2087), sourceMapSection0.getColumn());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("", (-2092), (-1340));
      int int0 = sourceMapSection0.getLine();
      assertEquals((-2092), int0);
      assertEquals((-1340), sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("", 0, 0);
      int int0 = sourceMapSection0.getColumn();
      assertEquals(0, int0);
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL(")Z8(V5$jQw=/0Eq\"", 0, (-280));
      int int0 = sourceMapSection0.getColumn();
      assertEquals((-280), int0);
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("URL", 1788, 1788);
      assertEquals(1788, sourceMapSection0.getLine());
      assertEquals(1788, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("T", 0, 0);
      assertEquals(0, sourceMapSection0.getLine());
      assertEquals(0, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forURL("~w1v.-U+~dEsm@S+{d#", 0, 1);
      sourceMapSection0.getSectionUrl();
      assertEquals(1, sourceMapSection0.getColumn());
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("", 0, 1);
      assertEquals(1, sourceMapSection0.getColumn());
      assertEquals(0, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("", 1620, (-741));
      assertEquals((-741), sourceMapSection0.getColumn());
      assertEquals(1620, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("?/\"4T/<t3rS99A", 2, 2);
      // Undeclared exception!
      try { 
        sourceMapSection0.getSectionUrl();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("", (-2741), (-2741));
      sourceMapSection0.getSectionUrl();
      assertEquals((-2741), sourceMapSection0.getLine());
      assertEquals((-2741), sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("?/\"4T/<t3rS99A", 2, 2);
      int int0 = sourceMapSection0.getColumn();
      assertEquals(2, int0);
      assertEquals(2, sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("", (-2741), (-2741));
      sourceMapSection0.getSectionType();
      assertEquals((-2741), sourceMapSection0.getColumn());
      assertEquals((-2741), sourceMapSection0.getLine());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("?/\"4T/<t3rS99A", 2, 2);
      int int0 = sourceMapSection0.getLine();
      assertEquals(2, int0);
      assertEquals(2, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceMapSection sourceMapSection0 = SourceMapSection.forMap("", (-1), 0);
      assertEquals((-1), sourceMapSection0.getLine());
      assertEquals(0, sourceMapSection0.getColumn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceMapSection sourceMapSection0 = new SourceMapSection("", (-2741), (-2741));
      sourceMapSection0.getSectionValue();
      assertEquals((-2741), sourceMapSection0.getColumn());
      assertEquals((-2741), sourceMapSection0.getLine());
  }
}
