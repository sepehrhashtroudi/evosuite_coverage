/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 23:22:39 GMT 2023
 */

package com.google.debugging.sourcemap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.debugging.sourcemap.Util;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("\"]>]\"", ']', "[UC", "]/IL_", "'0&C7qQIX1!ief5", charsetEncoder0);
      assertEquals("][UC\\u005d>\\u005d[UC]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("Fb2RCt+Lx/C)>2LD", 'q', "\"q\\u0032\\u002e\\u0045\\u0040\\u0074\\u0040\\u0064\\u005a\\u0054\\u002e\\u0036\\u0024\\u0074\\u0052\\u0067\\u004eq\"", "Fb2RCt+Lx/C)>2LD", "\"\"", charsetEncoder0);
      assertEquals("q\\u0046\\u0062\\u0032\\u0052\\u0043\\u0074\\u002b\\u004c\\u0078\\u002f\\u0043\\u0029>\\u0032\\u004c\\u0044q", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Util.escapeString((String) null, 'L', "LgoL", "", (String) null, charsetEncoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.debugging.sourcemap.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Util.escapeString("WD>+4S\u0000y\"E>W", 'u', "ff", "<", ">", (CharsetEncoder) null);
      assertEquals("uWD>+4S\\u0000yffE>Wu", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("ggx</script041FHgx<!-->g", '\"', "!--", "-h-oI0NtXo ", "85ARpSB>S0$-[ctI}", charsetEncoder0);
      assertEquals("\"\\u0067\\u0067\\u0078<\\\\u002f\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u0030\\u0034\\u0031\\u0046\\u0048\\u007f\\u0067\\u0078<\\\\u0021\\u002d\\u002d\\>\\u0067\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Util.escapeString("}$.vN5tp)9a]>BUIe,");
      assertEquals("\"}$.vN5tp)9a]>BUIe,\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Util.escapeString("GGX<NSd>AFHGX<!-->G");
      assertEquals("\"GGX<NSd>AFHGX<\\!--\\>G\"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Util.escapeString("\"\\\"\"");
      assertEquals("\"\\\"\\\\\\\"\\\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("x>uh<js_,9c73;(Cv", 't', ">", ">", ">gPt'TEw?4Ih8G]BON", charsetEncoder0);
      assertEquals("tx>u\\u0068<\\u006a\\u0073\\u005f\\u002c\\u0039\\u0063\\u0037\\u0033\\u003b\\u0028\\u0043\\u0076t", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Util.escapeString("'");
      assertEquals("\"'\"", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("U\rll", 'o', (String) null, "][-7DH`|+.LP<nhmDL1", "a@})FbrUk1Mqpe", charsetEncoder0);
      assertEquals("o\\u0055\\r\\u006c\\u006co", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Util.escapeString("\n", ';', "", "\n", "\n", (CharsetEncoder) null);
      assertEquals(";\\n;", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Util util0 = new Util();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.escapeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.debugging.sourcemap.Util", e);
      }
  }
}
