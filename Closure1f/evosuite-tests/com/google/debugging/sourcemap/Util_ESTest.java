/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 18:32:33 GMT 2023
 */

package com.google.debugging.sourcemap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.debugging.sourcemap.Util;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Util.escapeString("rp>0TgAU", '!', "!CrJ%<&ri2V", "\"", ">64YL3V", (CharsetEncoder) null);
      assertEquals("!rp>0TgAU!", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("J\nnJ", 'U', "J\nnJ", "J\nnJ", "%P", charsetEncoder0);
      assertEquals("U\\u004a\\n\\u006e\\u004aU", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Util.escapeString((String) null, 'G', (String) null, "\r", "Z/scriptZ", charsetEncoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.debugging.sourcemap.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Util.escapeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.debugging.sourcemap.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Util.escapeString("3(zS<W0]>Z(kc", '>', "\"\"", "^c5</script--#<\\u002fscript^", (String) null, (CharsetEncoder) null);
      assertEquals(">3(zS<W0]>Z(kc>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("WK\u0003=v@dh?)sNfb`)>", '1', "s7qo0", "}n`u|/#f}l{![sFv", "", charsetEncoder0);
      assertEquals("1\\u0057\\u004b\\u0003\\u003d\\u0076\\u0040\\u0064\\u0068\\u003f\\u0029\\u0073\\u004e\\u0066\\u0062\\u0060\\u0029>1", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Util.escapeString("3(zS<!-->Z(kc");
      assertEquals("\"3(zS<\\!--\\>Z(kc\"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Util.escapeString("J>uS)B6D,NA!?} m<");
      assertEquals("\"J>uS)B6D,NA!?} m<\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false, false).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("ek<g;Nxc1zk<!--xc1z\"6lk+p=m|\"6lk+p=m|k</script\"6lk+p=m|\"e", '=', "", "zFx0i/vb[Y8Tc5ENM&z", "xe:Q6Y!m6bm7", charsetEncoder0);
      assertEquals("=\\u0065k<\\u0067\\u003b\\u004e\\u0078\\u0063\\u0031\\u007a\\u006b<\\\\u0021\\u002d\\u002d\\u0078\\u0063\\u0031\\u007a\\u0036\\u006c\\u006b\\u002b\\u0070\\u003d\\u006d\\u007c\\u0036\\u006c\\u006b\\u002b\\u0070\\u003d\\u006d\\u007c\\u006b<\\\\u002f\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u0036\\u006c\\u006b\\u002b\\u0070\\u003d\\u006d\\u007c\\u0065=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, true).when(charsetEncoder0).canEncode(anyChar());
      String string0 = Util.escapeString("O7ab.18]A)o?d1#%B'K", ')', "ivSoy", "com.google.debugging.sourcemap.Util", "", charsetEncoder0);
      assertEquals(")\\u004f7ab.18]A)o?d1#%Bcom.google.debugging.sourcemap.UtilK)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Util util0 = new Util();
  }
}
