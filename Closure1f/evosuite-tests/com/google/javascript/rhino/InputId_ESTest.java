/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 21:45:51 GMT 2023
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.InputId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputId_ESTest extends InputId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputId inputId0 = new InputId((String) null);
      String string0 = inputId0.getIdName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputId inputId0 = new InputId("{C'v");
      String string0 = inputId0.getIdName();
      assertEquals("{C'v", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputId inputId0 = new InputId((String) null);
      // Undeclared exception!
      try { 
        inputId0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.InputId", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputId inputId0 = new InputId((String) null);
      InputId inputId1 = new InputId("Af{FPeiW");
      // Undeclared exception!
      try { 
        inputId0.equals(inputId1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputId inputId0 = new InputId("");
      String string0 = inputId0.getIdName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputId inputId0 = new InputId("{C'v");
      InputId inputId1 = new InputId("InputId: {C'v");
      boolean boolean0 = inputId0.equals(inputId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputId inputId0 = new InputId("");
      boolean boolean0 = inputId0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputId inputId0 = new InputId("");
      boolean boolean0 = inputId0.equals(inputId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputId inputId0 = new InputId("");
      boolean boolean0 = inputId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputId inputId0 = new InputId("");
      String string0 = inputId0.toString();
      assertEquals("InputId: ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputId inputId0 = new InputId("");
      inputId0.hashCode();
  }
}
