/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 09:28:09 GMT 2023
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 268;
      // Undeclared exception!
      try { 
        Token.name(268);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 268
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 56;
      // Undeclared exception!
      try { 
        Token.name(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 247;
      // Undeclared exception!
      try { 
        Token.name(247);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 247
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(10, Token.BITXOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(102, Token.INC);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(149, Token.CONST);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(124, Token.EMPTY);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(118, Token.VAR);
      assertEquals(302, Token.STAR);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(307, Token.EQUALS);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(39, Token.NUMBER);
      assertEquals(22, Token.SUB);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(25, Token.MOD);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(32, Token.TYPEOF);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(119, Token.WITH);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(147, Token.GET);
      assertEquals(304, Token.QMARK);
      assertEquals(41, Token.NULL);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(27, Token.BITNOT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(46, Token.SHNE);
      assertEquals(85, Token.COMMA);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(122, Token.VOID);
      assertEquals(114, Token.DO);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(42, Token.THIS);
      assertEquals(120, Token.CATCH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(23, Token.MUL);
      assertEquals(40, Token.STRING);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(132, Token.SCRIPT);
      
      String string0 = Token.name(304);
      assertEquals("QMARK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(196);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 196
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 264;
      // Undeclared exception!
      try { 
        Token.name(264);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 264
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(13, Token.NE);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(301, Token.PIPE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(310, Token.COLON);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(100, Token.OR);
      assertEquals(149, Token.CONST);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(302, Token.STAR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(307, Token.EQUALS);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(113, Token.WHILE);
      assertEquals(44, Token.TRUE);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(101, Token.AND);
      assertEquals(105, Token.FUNCTION);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(304, Token.QMARK);
      assertEquals(308, Token.LB);
      assertEquals(39, Token.NUMBER);
      assertEquals(33, Token.GETPROP);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(42, Token.THIS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(155, Token.CAST);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(31, Token.DELPROP);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(27, Token.BITNOT);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(306, Token.BANG);
      assertEquals(11, Token.BITAND);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(90, Token.ASSIGN_LSH);
      
      int int0 = (-1);
      String string0 = Token.name(98);
      assertEquals("HOOK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(45);
      assertEquals("SHEQ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 62;
      String string2 = Token.name(108);
      assertEquals("IF", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(62);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 62
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(236);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 236
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(24, Token.DIV);
      assertEquals(117, Token.CONTINUE);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(45, Token.SHEQ);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(31, Token.DELPROP);
      assertEquals(126, Token.LABEL);
      assertEquals(114, Token.DO);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(113, Token.WHILE);
      assertEquals(85, Token.COMMA);
      assertEquals(30, Token.NEW);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(41, Token.NULL);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(102, Token.INC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(21, Token.ADD);
      assertEquals(118, Token.VAR);
      assertEquals(32, Token.TYPEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(46, Token.SHNE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(25, Token.MOD);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(155, Token.CAST);
      assertEquals(22, Token.SUB);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(304, Token.QMARK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(147, Token.GET);
      assertEquals(120, Token.CATCH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(33, Token.GETPROP);
      assertEquals(101, Token.AND);
      assertEquals(43, Token.FALSE);
      assertEquals(77, Token.TRY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(115, Token.FOR);
      assertEquals(40, Token.STRING);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(111, Token.CASE);
      assertEquals(125, Token.BLOCK);
      assertEquals(302, Token.STAR);
      assertEquals(10, Token.BITXOR);
      assertEquals(149, Token.CONST);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      
      String string0 = Token.name(304);
      assertEquals("QMARK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 149;
      String string2 = Token.name(29);
      assertEquals("NEG", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(288);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 288
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(285);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 285
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        Token.name(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 129;
      // Undeclared exception!
      try { 
        Token.name(129);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 129
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(149, Token.CONST);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(108, Token.IF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(302, Token.STAR);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(44, Token.TRUE);
      assertEquals(307, Token.EQUALS);
      assertEquals(14, Token.LT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(114, Token.DO);
      assertEquals(120, Token.CATCH);
      assertEquals(42, Token.THIS);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(40, Token.STRING);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(43, Token.FALSE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(41, Token.NULL);
      assertEquals(83, Token.LP);
      assertEquals(116, Token.BREAK);
      assertEquals(4, Token.RETURN);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(115, Token.FOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(46, Token.SHNE);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(18, Token.LSH);
      assertEquals(16, Token.GT);
      assertEquals(125, Token.BLOCK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(126, Token.LABEL);
      assertEquals(45, Token.SHEQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(112, Token.DEFAULT);
      assertEquals(22, Token.SUB);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(155, Token.CAST);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(309, Token.LC);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(49, Token.THROW);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(110, Token.SWITCH);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(147, Token.GET);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(304, Token.QMARK);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      
      String string0 = Token.name(46);
      assertEquals("SHNE", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(16);
      assertEquals("GT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(111);
      assertEquals("CASE", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(303);
      assertEquals("EOC", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(280);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 280
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 281;
      // Undeclared exception!
      try { 
        Token.name(281);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 281
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 291;
      // Undeclared exception!
      try { 
        Token.name(291);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 291
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(27, Token.BITNOT);
      assertEquals(115, Token.FOR);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.LP);
      assertEquals(111, Token.CASE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(85, Token.COMMA);
      assertEquals(31, Token.DELPROP);
      assertEquals(308, Token.LB);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(310, Token.COLON);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(39, Token.NUMBER);
      assertEquals(118, Token.VAR);
      assertEquals(42, Token.THIS);
      assertEquals(13, Token.NE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(11, Token.BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(102, Token.INC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(21, Token.ADD);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(302, Token.STAR);
      assertEquals(100, Token.OR);
      assertEquals(44, Token.TRUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(40, Token.STRING);
      assertEquals(148, Token.SET);
      assertEquals(119, Token.WITH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(112, Token.DEFAULT);
      assertEquals(16, Token.GT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(155, Token.CAST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GET);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(77, Token.TRY);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(301, Token.PIPE);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(35, Token.GETELEM);
      assertEquals(9, Token.BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(17, Token.GE);
      assertEquals(98, Token.HOOK);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(191);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 191
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(25, Token.MOD);
      assertEquals(155, Token.CAST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(26, Token.NOT);
      assertEquals(100, Token.OR);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(304, Token.QMARK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(147, Token.GET);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(17, Token.GE);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(120, Token.CATCH);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(307, Token.EQUALS);
      assertEquals(83, Token.LP);
      assertEquals(302, Token.STAR);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(23, Token.MUL);
      assertEquals(49, Token.THROW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(125, Token.BLOCK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(114, Token.DO);
      assertEquals(113, Token.WHILE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(306, Token.BANG);
      assertEquals((-1), Token.ERROR);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(41, Token.NULL);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(102, Token.INC);
      assertEquals(11, Token.BITAND);
      assertEquals(118, Token.VAR);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(116, Token.BREAK);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(148, Token.SET);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(205);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 205
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(270);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 270
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(310, Token.COLON);
      assertEquals(49, Token.THROW);
      assertEquals(117, Token.CONTINUE);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      assertEquals(20, Token.URSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(102, Token.INC);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(21, Token.ADD);
      assertEquals(41, Token.NULL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(116, Token.BREAK);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(11, Token.BITAND);
      assertEquals(306, Token.BANG);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(46, Token.SHNE);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(14, Token.LT);
      assertEquals(118, Token.VAR);
      assertEquals(85, Token.COMMA);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(39, Token.NUMBER);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(101, Token.AND);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(37, Token.CALL);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(77, Token.TRY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(100, Token.OR);
      assertEquals((-1), Token.ERROR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(4, Token.RETURN);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(115, Token.FOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(98, Token.HOOK);
      assertEquals(149, Token.CONST);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(35, Token.GETELEM);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(307, Token.EQUALS);
      assertEquals(125, Token.BLOCK);
      assertEquals(63, Token.ARRAYLIT);
      
      String string0 = Token.name(20);
      assertEquals("URSH", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(29);
      assertEquals("NEG", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(130);
      assertEquals("EXPR_RESULT", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(185);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 185
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals((-1), Token.ERROR);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(309, Token.LC);
      assertEquals(33, Token.GETPROP);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(113, Token.WHILE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(37, Token.CALL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(19, Token.RSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(44, Token.TRUE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(42, Token.THIS);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(301, Token.PIPE);
      assertEquals(35, Token.GETELEM);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(132, Token.SCRIPT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(114, Token.DO);
      assertEquals(126, Token.LABEL);
      assertEquals(43, Token.FALSE);
      assertEquals(98, Token.HOOK);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(24, Token.DIV);
      assertEquals(23, Token.MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(310, Token.COLON);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(21, Token.ADD);
      assertEquals(45, Token.SHEQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      
      // Undeclared exception!
      try { 
        Token.name(73);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 73
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 286;
      // Undeclared exception!
      try { 
        Token.name(286);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 286
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(132, Token.SCRIPT);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(307, Token.EQUALS);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(13, Token.NE);
      assertEquals(43, Token.FALSE);
      assertEquals(302, Token.STAR);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(126, Token.LABEL);
      assertEquals(306, Token.BANG);
      assertEquals(35, Token.GETELEM);
      assertEquals(103, Token.DEC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(114, Token.DO);
      assertEquals(39, Token.NUMBER);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(112, Token.DEFAULT);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(38, Token.NAME);
      assertEquals(29, Token.NEG);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(46, Token.SHNE);
      assertEquals(119, Token.WITH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(100, Token.OR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(310, Token.COLON);
      assertEquals(110, Token.SWITCH);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(21, Token.ADD);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(41, Token.NULL);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(31, Token.DELPROP);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(11, Token.BITAND);
      assertEquals(9, Token.BITOR);
      assertEquals(22, Token.SUB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(309, Token.LC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(125, Token.BLOCK);
      assertEquals(120, Token.CATCH);
      assertEquals(42, Token.THIS);
      assertEquals(19, Token.RSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(33, Token.GETPROP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      
      String string0 = Token.name(304);
      assertEquals("QMARK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(149);
      assertEquals("CONST", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(24);
      assertEquals("DIV", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Token.name(310);
      assertEquals("COLON", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Token.name(77);
      assertEquals("TRY", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name(265);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 265
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 265;
      // Undeclared exception!
      try { 
        Token.name(265);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 265
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 221;
      // Undeclared exception!
      try { 
        Token.name(221);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 221
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 283;
      // Undeclared exception!
      try { 
        Token.name(283);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 283
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(310, Token.COLON);
      assertEquals(105, Token.FUNCTION);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(46, Token.SHNE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(37, Token.CALL);
      assertEquals(30, Token.NEW);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(98, Token.HOOK);
      assertEquals(119, Token.WITH);
      assertEquals(12, Token.EQ);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(113, Token.WHILE);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(149, Token.CONST);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(155, Token.CAST);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(302, Token.STAR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(39, Token.NUMBER);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(85, Token.COMMA);
      assertEquals(306, Token.BANG);
      assertEquals(11, Token.BITAND);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(115, Token.FOR);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(31, Token.DELPROP);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(227);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 227
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 290;
      // Undeclared exception!
      try { 
        Token.name(290);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 290
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(290);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 290
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 306;
      String string0 = Token.name(306);
      assertEquals("BANG", string0);
      assertNotNull(string0);
      
      int int1 = 36;
      // Undeclared exception!
      try { 
        Token.name(36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(159);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 159
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(171);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 171
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(179);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 179
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(301, Token.PIPE);
      assertEquals(126, Token.LABEL);
      assertEquals(113, Token.WHILE);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(306, Token.BANG);
      assertEquals(9, Token.BITOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(149, Token.CONST);
      assertEquals(28, Token.POS);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(42, Token.THIS);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(33, Token.GETPROP);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(120, Token.CATCH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(108, Token.IF);
      assertEquals((-1), Token.ERROR);
      assertEquals(41, Token.NULL);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(13, Token.NE);
      assertEquals(85, Token.COMMA);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(116, Token.BREAK);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(263);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 263
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 145;
      // Undeclared exception!
      try { 
        Token.name(145);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(11, Token.BITAND);
      assertEquals(308, Token.LB);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(33, Token.GETPROP);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(113, Token.WHILE);
      assertEquals(120, Token.CATCH);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(309, Token.LC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(310, Token.COLON);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(9, Token.BITOR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(122, Token.VOID);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(25, Token.MOD);
      assertEquals(49, Token.THROW);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals((-1), Token.ERROR);
      assertEquals(45, Token.SHEQ);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(304, Token.QMARK);
      assertEquals(47, Token.REGEXP);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(119, Token.WITH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(155, Token.CAST);
      assertEquals(20, Token.URSH);
      assertEquals(14, Token.LT);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(301, Token.PIPE);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(125, Token.BLOCK);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(118, Token.VAR);
      assertEquals(35, Token.GETELEM);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(124, Token.EMPTY);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(23, Token.MUL);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(19, Token.RSH);
      assertEquals(111, Token.CASE);
      assertEquals(43, Token.FALSE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(42, Token.THIS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      assertEquals(149, Token.CONST);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      
      String string0 = Token.name(304);
      assertEquals("QMARK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(149);
      assertEquals("CONST", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(24);
      assertEquals("DIV", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(145);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(105, Token.FUNCTION);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(122, Token.VOID);
      assertEquals(126, Token.LABEL);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(38, Token.NAME);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(306, Token.BANG);
      assertEquals(23, Token.MUL);
      assertEquals(12, Token.EQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(41, Token.NULL);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(39, Token.NUMBER);
      assertEquals(32, Token.TYPEOF);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(304, Token.QMARK);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(100, Token.OR);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(43, Token.FALSE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(33, Token.GETPROP);
      assertEquals(147, Token.GET);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(77, Token.TRY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(120, Token.CATCH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(83, Token.LP);
      assertEquals(307, Token.EQUALS);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(267);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 267
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 121;
      // Undeclared exception!
      try { 
        Token.name(121);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 298;
      // Undeclared exception!
      try { 
        Token.name(298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(310, Token.COLON);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.LP);
      assertEquals(117, Token.CONTINUE);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(20, Token.URSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(38, Token.NAME);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(306, Token.BANG);
      assertEquals(32, Token.TYPEOF);
      assertEquals(85, Token.COMMA);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(45, Token.SHEQ);
      assertEquals(119, Token.WITH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(122, Token.VOID);
      assertEquals(30, Token.NEW);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(39, Token.NUMBER);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(307, Token.EQUALS);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(302, Token.STAR);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(101, Token.AND);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(33, Token.GETPROP);
      assertEquals(301, Token.PIPE);
      assertEquals(40, Token.STRING);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(18, Token.LSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(42, Token.THIS);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(111, Token.CASE);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      
      String string0 = Token.name(20);
      assertEquals("URSH", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(130);
      assertEquals("EXPR_RESULT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(299);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 299
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(111, Token.CASE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(46, Token.SHNE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(310, Token.COLON);
      assertEquals(105, Token.FUNCTION);
      assertEquals(47, Token.REGEXP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(122, Token.VOID);
      assertEquals(115, Token.FOR);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(38, Token.NAME);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(304, Token.QMARK);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(126, Token.LABEL);
      assertEquals(32, Token.TYPEOF);
      assertEquals(308, Token.LB);
      assertEquals(20, Token.URSH);
      assertEquals(45, Token.SHEQ);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(112, Token.DEFAULT);
      assertEquals(119, Token.WITH);
      assertEquals(125, Token.BLOCK);
      assertEquals(35, Token.GETELEM);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(309, Token.LC);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(77, Token.TRY);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(113, Token.WHILE);
      assertEquals(49, Token.THROW);
      assertEquals(101, Token.AND);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(44, Token.TRUE);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(307, Token.EQUALS);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(149, Token.CONST);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(110, Token.SWITCH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SET);
      assertEquals(86, Token.ASSIGN);
      assertEquals(39, Token.NUMBER);
      assertEquals(108, Token.IF);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(14, Token.LT);
      assertEquals(114, Token.DO);
      assertEquals(11, Token.BITAND);
      assertEquals(42, Token.THIS);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(85, Token.COMMA);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(23, Token.MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Token.name(299);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 299
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(40, Token.STRING);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(118, Token.VAR);
      assertEquals(45, Token.SHEQ);
      assertEquals(119, Token.WITH);
      assertEquals(306, Token.BANG);
      assertEquals(24, Token.DIV);
      assertEquals(126, Token.LABEL);
      assertEquals(103, Token.DEC);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(49, Token.THROW);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(19, Token.RSH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(20, Token.URSH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(301, Token.PIPE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(21, Token.ADD);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(110, Token.SWITCH);
      assertEquals(41, Token.NULL);
      assertEquals(310, Token.COLON);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(85, Token.COMMA);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(116, Token.BREAK);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(22, Token.SUB);
      assertEquals(37, Token.CALL);
      assertEquals(42, Token.THIS);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(101, Token.AND);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(120, Token.CATCH);
      assertEquals(29, Token.NEG);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(304, Token.QMARK);
      assertEquals(147, Token.GET);
      assertEquals(307, Token.EQUALS);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      
      // Undeclared exception!
      try { 
        Token.name(287);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 287
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 287;
      // Undeclared exception!
      try { 
        Token.name(287);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 287
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(246);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 246
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(27, Token.BITNOT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(22, Token.SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(4, Token.RETURN);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(18, Token.LSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(111, Token.CASE);
      assertEquals(16, Token.GT);
      assertEquals(46, Token.SHNE);
      assertEquals(26, Token.NOT);
      assertEquals(308, Token.LB);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(122, Token.VOID);
      assertEquals(29, Token.NEG);
      assertEquals(47, Token.REGEXP);
      assertEquals(309, Token.LC);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(39, Token.NUMBER);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(20, Token.URSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(32, Token.TYPEOF);
      assertEquals((-1), Token.ERROR);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(45, Token.SHEQ);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(12, Token.EQ);
      assertEquals(301, Token.PIPE);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(307, Token.EQUALS);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(44, Token.TRUE);
      assertEquals(114, Token.DO);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(302, Token.STAR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(19, Token.RSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(105, Token.FUNCTION);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(24, Token.DIV);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(33, Token.GETPROP);
      assertEquals(149, Token.CONST);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      
      String string1 = Token.name(91);
      assertEquals("ASSIGN_RSH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(98);
      assertEquals("HOOK", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(116);
      assertEquals("BREAK", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Token.name((-1));
      assertEquals("ERROR", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = (-857);
      // Undeclared exception!
      try { 
        Token.name(34);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      String string1 = Token.name((-1));
      assertEquals("ERROR", string1);
      assertNotNull(string1);
      
      int int0 = (-857);
      // Undeclared exception!
      try { 
        Token.name(34);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 134;
      // Undeclared exception!
      try { 
        Token.name(134);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 134
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(38, Token.NAME);
      assertEquals(40, Token.STRING);
      assertEquals(20, Token.URSH);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(47, Token.REGEXP);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(31, Token.DELPROP);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(43, Token.FALSE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(41, Token.NULL);
      assertEquals(13, Token.NE);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(37, Token.CALL);
      assertEquals(39, Token.NUMBER);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(17, Token.GE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(120, Token.CATCH);
      assertEquals(77, Token.TRY);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(4, Token.RETURN);
      assertEquals(28, Token.POS);
      assertEquals(111, Token.CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(44, Token.TRUE);
      assertEquals(113, Token.WHILE);
      assertEquals(10, Token.BITXOR);
      assertEquals(98, Token.HOOK);
      assertEquals(9, Token.BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(105, Token.FUNCTION);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(302, Token.STAR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(125, Token.BLOCK);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(257);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 257
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(137);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 137
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(276);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 276
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 305;
      String string0 = Token.name(305);
      assertEquals("ELLIPSIS", string0);
      assertNotNull(string0);
      
      int int1 = 40;
      String string1 = Token.name(40);
      assertEquals("STRING", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = 266;
      // Undeclared exception!
      try { 
        Token.name(266);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 266
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(27, Token.BITNOT);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(116, Token.BREAK);
      assertEquals(111, Token.CASE);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.LP);
      assertEquals(85, Token.COMMA);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(23, Token.MUL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(309, Token.LC);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(42, Token.THIS);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(132, Token.SCRIPT);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(77, Token.TRY);
      assertEquals(301, Token.PIPE);
      assertEquals(25, Token.MOD);
      assertEquals(35, Token.GETELEM);
      assertEquals(101, Token.AND);
      assertEquals(98, Token.HOOK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(306, Token.BANG);
      assertEquals(17, Token.GE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(32, Token.TYPEOF);
      assertEquals(39, Token.NUMBER);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(310, Token.COLON);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SET);
      assertEquals(119, Token.WITH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(47, Token.REGEXP);
      assertEquals(108, Token.IF);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(266);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 266
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(43, Token.FALSE);
      assertEquals(149, Token.CONST);
      assertEquals(29, Token.NEG);
      assertEquals(86, Token.ASSIGN);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(18, Token.LSH);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(25, Token.MOD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(308, Token.LB);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(125, Token.BLOCK);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(10, Token.BITXOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(310, Token.COLON);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(83, Token.LP);
      assertEquals(31, Token.DELPROP);
      assertEquals(122, Token.VOID);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(303, Token.EOC);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(103, Token.DEC);
      assertEquals((-1), Token.ERROR);
      assertEquals(114, Token.DO);
      assertEquals(113, Token.WHILE);
      assertEquals(24, Token.DIV);
      assertEquals(41, Token.NULL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(126, Token.LABEL);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(37, Token.CALL);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(301, Token.PIPE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(304, Token.QMARK);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(38, Token.NAME);
      assertEquals(13, Token.NE);
      assertEquals(39, Token.NUMBER);
      assertEquals(112, Token.DEFAULT);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(155, Token.CAST);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      
      String string0 = Token.name(105);
      assertEquals("FUNCTION", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(124);
      assertEquals("EMPTY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name((-1));
      assertEquals("ERROR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(16);
      assertEquals("GT", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(3799);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3799
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(307, Token.EQUALS);
      assertEquals(149, Token.CONST);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(12, Token.EQ);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(102, Token.INC);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(35, Token.GETELEM);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(306, Token.BANG);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(118, Token.VAR);
      assertEquals(20, Token.URSH);
      assertEquals(14, Token.LT);
      assertEquals(304, Token.QMARK);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(32, Token.TYPEOF);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(119, Token.WITH);
      assertEquals(45, Token.SHEQ);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(30, Token.NEW);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(47, Token.REGEXP);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(122, Token.VOID);
      assertEquals(85, Token.COMMA);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(310, Token.COLON);
      assertEquals(115, Token.FOR);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(117, Token.CONTINUE);
      assertEquals(4, Token.RETURN);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(19, Token.RSH);
      assertEquals(24, Token.DIV);
      assertEquals(9, Token.BITOR);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(49, Token.THROW);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(40, Token.STRING);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(42, Token.THIS);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(126, Token.LABEL);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      
      String string0 = Token.name(96);
      assertEquals("ASSIGN_DIV", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(148);
      assertEquals("SETTER_DEF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(273);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 273
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(149, Token.CONST);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(124, Token.EMPTY);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(120, Token.CATCH);
      assertEquals(42, Token.THIS);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(33, Token.GETPROP);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(148, Token.SET);
      assertEquals(119, Token.WITH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(12, Token.EQ);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(39, Token.NUMBER);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(47, Token.REGEXP);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(24, Token.DIV);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(303, Token.EOC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(83, Token.LP);
      assertEquals(113, Token.WHILE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(301, Token.PIPE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(40, Token.STRING);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(26, Token.NOT);
      assertEquals(126, Token.LABEL);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(111, Token.CASE);
      assertEquals(307, Token.EQUALS);
      
      String string0 = Token.name(89);
      assertEquals("ASSIGN_BITAND", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(51);
      assertEquals("IN", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(102);
      assertEquals("INC", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(113);
      assertEquals("WHILE", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Token.name(87);
      assertEquals("ASSIGN_BITOR", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = Token.name(303);
      assertEquals("EOC", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name(84);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 84
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(84);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 84
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 76;
      // Undeclared exception!
      try { 
        Token.name(76);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 76
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 300;
      String string0 = Token.name(300);
      assertEquals("ANNOTATION", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(300);
      assertEquals("ANNOTATION", string1);
      assertNotNull(string1);
      
      String string2 = Token.name(300);
      assertEquals("ANNOTATION", string2);
      assertNotNull(string2);
      
      String string3 = Token.name(300);
      assertEquals("ANNOTATION", string3);
      assertNotNull(string3);
      
      String string4 = Token.name(300);
      assertEquals("ANNOTATION", string4);
      assertNotNull(string4);
      
      String string5 = Token.name(300);
      assertEquals("ANNOTATION", string5);
      assertNotNull(string5);
      
      String string6 = Token.name(300);
      assertEquals("ANNOTATION", string6);
      assertNotNull(string6);
      
      int int1 = 279;
      // Undeclared exception!
      try { 
        Token.name(279);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 279
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 300;
      String string0 = Token.name(300);
      assertEquals("ANNOTATION", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(300);
      assertEquals("ANNOTATION", string1);
      assertNotNull(string1);
      
      String string2 = Token.name(300);
      assertEquals("ANNOTATION", string2);
      assertNotNull(string2);
      
      String string3 = Token.name(300);
      assertEquals("ANNOTATION", string3);
      assertNotNull(string3);
      
      String string4 = Token.name(300);
      assertEquals("ANNOTATION", string4);
      assertNotNull(string4);
      
      String string5 = Token.name(300);
      assertEquals("ANNOTATION", string5);
      assertNotNull(string5);
      
      String string6 = Token.name(300);
      assertEquals("ANNOTATION", string6);
      assertNotNull(string6);
      
      int int1 = 279;
      String string7 = Token.name(300);
      assertEquals("ANNOTATION", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        Token.name(279);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 279
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 278;
      // Undeclared exception!
      try { 
        Token.name(278);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 278
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(307, Token.EQUALS);
      assertEquals(102, Token.INC);
      assertEquals(149, Token.CONST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(12, Token.EQ);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(30, Token.NEW);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(77, Token.TRY);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(38, Token.NAME);
      assertEquals(110, Token.SWITCH);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(18, Token.LSH);
      assertEquals(26, Token.NOT);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(37, Token.CALL);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(125, Token.BLOCK);
      assertEquals(303, Token.EOC);
      assertEquals(111, Token.CASE);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals((-1), Token.ERROR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(114, Token.DO);
      assertEquals(33, Token.GETPROP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(39, Token.NUMBER);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(148, Token.SET);
      assertEquals(306, Token.BANG);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(46, Token.SHNE);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(85, Token.COMMA);
      
      String string0 = Token.name(89);
      assertEquals("ASSIGN_BITAND", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(155, Token.CAST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(42, Token.THIS);
      assertEquals(43, Token.FALSE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(100, Token.OR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(147, Token.GET);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(29, Token.NEG);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(25, Token.MOD);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(98, Token.HOOK);
      assertEquals(115, Token.FOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(83, Token.LP);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(308, Token.LB);
      assertEquals(40, Token.STRING);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(310, Token.COLON);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(13, Token.NE);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(301, Token.PIPE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(9, Token.BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(27, Token.BITNOT);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(113, Token.WHILE);
      assertEquals(41, Token.NULL);
      assertEquals(85, Token.COMMA);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(11, Token.BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(14, Token.LT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(119, Token.WITH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      
      int int0 = (-1);
      String string0 = Token.name(98);
      assertEquals("HOOK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(45);
      assertEquals("SHEQ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 54;
      String string2 = Token.name(108);
      assertEquals("IF", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(33, Token.GETPROP);
      assertEquals(37, Token.CALL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(308, Token.LB);
      assertEquals(304, Token.QMARK);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(42, Token.THIS);
      assertEquals(85, Token.COMMA);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(11, Token.BITAND);
      assertEquals(22, Token.SUB);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(116, Token.BREAK);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(302, Token.STAR);
      assertEquals(44, Token.TRUE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(307, Token.EQUALS);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(35, Token.GETELEM);
      assertEquals(309, Token.LC);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals((-1), Token.ERROR);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(113, Token.WHILE);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(13, Token.NE);
      assertEquals(119, Token.WITH);
      assertEquals(40, Token.STRING);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(38, Token.NAME);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(47, Token.REGEXP);
      assertEquals(30, Token.NEW);
      assertEquals(45, Token.SHEQ);
      assertEquals(105, Token.FUNCTION);
      assertEquals(10, Token.BITXOR);
      assertEquals(122, Token.VOID);
      assertEquals(12, Token.EQ);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(23, Token.MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(269);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 269
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-1);
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      int int1 = 58;
      // Undeclared exception!
      try { 
        Token.name(58);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 58
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(143);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 41;
      String string0 = Token.name(41);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 295;
      // Undeclared exception!
      try { 
        Token.name(295);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 295
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(18, Token.LSH);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(43, Token.FALSE);
      assertEquals(100, Token.OR);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(77, Token.TRY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals(132, Token.SCRIPT);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(44, Token.TRUE);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(149, Token.CONST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(126, Token.LABEL);
      assertEquals(38, Token.NAME);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(125, Token.BLOCK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(118, Token.VAR);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(20, Token.URSH);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(306, Token.BANG);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(41, Token.NULL);
      assertEquals((-1), Token.ERROR);
      assertEquals(102, Token.INC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(21, Token.ADD);
      assertEquals(85, Token.COMMA);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(117, Token.CONTINUE);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(119, Token.WITH);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      
      String string0 = Token.name(16);
      assertEquals("GT", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(274);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 274
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(98, Token.HOOK);
      assertEquals(149, Token.CONST);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(124, Token.EMPTY);
      assertEquals(306, Token.BANG);
      assertEquals(29, Token.NEG);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(119, Token.WITH);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(38, Token.NAME);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(125, Token.BLOCK);
      assertEquals(42, Token.THIS);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(22, Token.SUB);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(40, Token.STRING);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(37, Token.CALL);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(302, Token.STAR);
      assertEquals(44, Token.TRUE);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(308, Token.LB);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(28, Token.POS);
      assertEquals(27, Token.BITNOT);
      assertEquals(41, Token.NULL);
      assertEquals(116, Token.BREAK);
      assertEquals(83, Token.LP);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(115, Token.FOR);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(112, Token.DEFAULT);
      assertEquals(31, Token.DELPROP);
      assertEquals(304, Token.QMARK);
      assertEquals((-1), Token.ERROR);
      assertEquals(32, Token.TYPEOF);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(39, Token.NUMBER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(120, Token.CATCH);
      assertEquals(47, Token.REGEXP);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(46, Token.SHNE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      
      String string0 = Token.name(29);
      assertEquals("NEG", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(261);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 261
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Token.name(28);
      assertEquals("POS", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Token.name(31);
      assertEquals("DELPROP", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(289);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 289
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(86, Token.ASSIGN);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(110, Token.SWITCH);
      assertEquals(21, Token.ADD);
      assertEquals(42, Token.THIS);
      assertEquals(307, Token.EQUALS);
      assertEquals(102, Token.INC);
      assertEquals(149, Token.CONST);
      assertEquals(32, Token.TYPEOF);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SET);
      assertEquals(306, Token.BANG);
      assertEquals(108, Token.IF);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(85, Token.COMMA);
      assertEquals(31, Token.DELPROP);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(132, Token.SCRIPT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(114, Token.DO);
      assertEquals(33, Token.GETPROP);
      assertEquals(41, Token.NULL);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(124, Token.EMPTY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(105, Token.FUNCTION);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(310, Token.COLON);
      assertEquals(125, Token.BLOCK);
      assertEquals(111, Token.CASE);
      assertEquals(303, Token.EOC);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals((-1), Token.ERROR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(38, Token.NAME);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(26, Token.NOT);
      assertEquals(126, Token.LABEL);
      assertEquals(98, Token.HOOK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(113, Token.WHILE);
      assertEquals(101, Token.AND);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      
      int int0 = (-1);
      String string0 = Token.name(98);
      assertEquals("HOOK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(45);
      assertEquals("SHEQ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 289;
      // Undeclared exception!
      try { 
        Token.name(289);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 289
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 275;
      // Undeclared exception!
      try { 
        Token.name(275);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 275
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(148, Token.SET);
      assertEquals(132, Token.SCRIPT);
      assertEquals(108, Token.IF);
      assertEquals(301, Token.PIPE);
      assertEquals(13, Token.NE);
      assertEquals(43, Token.FALSE);
      assertEquals(14, Token.LT);
      assertEquals(124, Token.EMPTY);
      assertEquals(307, Token.EQUALS);
      assertEquals(118, Token.VAR);
      assertEquals(302, Token.STAR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(306, Token.BANG);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(19, Token.RSH);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(33, Token.GETPROP);
      assertEquals(149, Token.CONST);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(18, Token.LSH);
      assertEquals(85, Token.COMMA);
      assertEquals(4, Token.RETURN);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(22, Token.SUB);
      assertEquals(309, Token.LC);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(17, Token.GE);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(147, Token.GET);
      assertEquals(39, Token.NUMBER);
      assertEquals(46, Token.SHNE);
      assertEquals(29, Token.NEG);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(310, Token.COLON);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(155, Token.CAST);
      
      String string0 = Token.name(310);
      assertEquals("COLON", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(149);
      assertEquals("CONST", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(52);
      assertEquals("INSTANCEOF", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(85);
      assertEquals("COMMA", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Token.name(15);
      assertEquals("LE", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = Token.name(35);
      assertEquals("GETELEM", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name((-2450));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2450
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(35, Token.GETELEM);
      assertEquals(30, Token.NEW);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(302, Token.STAR);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(44, Token.TRUE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(307, Token.EQUALS);
      assertEquals(124, Token.EMPTY);
      assertEquals(14, Token.LT);
      assertEquals(114, Token.DO);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(25, Token.MOD);
      assertEquals(309, Token.LC);
      assertEquals(122, Token.VOID);
      assertEquals(29, Token.NEG);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(100, Token.OR);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(310, Token.COLON);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(102, Token.INC);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(115, Token.FOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(37, Token.CALL);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(113, Token.WHILE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(46, Token.SHNE);
      assertEquals(111, Token.CASE);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(18, Token.LSH);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(41, Token.NULL);
      assertEquals(26, Token.NOT);
      assertEquals(85, Token.COMMA);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(19, Token.RSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(120, Token.CATCH);
      assertEquals(43, Token.FALSE);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(149, Token.CONST);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(303, Token.EOC);
      
      String string0 = Token.name(14);
      assertEquals("LT", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(310);
      assertEquals("COLON", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name((-1));
      assertEquals("ERROR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(113);
      assertEquals("WHILE", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Token.name(51);
      assertEquals("IN", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Token.name((-2616));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2616
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Token.name(132);
      assertEquals("SCRIPT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(102, Token.INC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(302, Token.STAR);
      assertEquals(100, Token.OR);
      assertEquals(307, Token.EQUALS);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(43, Token.FALSE);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(35, Token.GETELEM);
      assertEquals(126, Token.LABEL);
      assertEquals(17, Token.GE);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(42, Token.THIS);
      assertEquals(86, Token.ASSIGN);
      assertEquals(125, Token.BLOCK);
      assertEquals(105, Token.FUNCTION);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(28, Token.POS);
      assertEquals(27, Token.BITNOT);
      assertEquals(4, Token.RETURN);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(111, Token.CASE);
      assertEquals(31, Token.DELPROP);
      assertEquals(85, Token.COMMA);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(11, Token.BITAND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(309, Token.LC);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(24, Token.DIV);
      assertEquals(39, Token.NUMBER);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(119, Token.WITH);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(21, Token.ADD);
      assertEquals(32, Token.TYPEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(47, Token.REGEXP);
      assertEquals(148, Token.SETTER_DEF);
      
      String string0 = Token.name(304);
      assertEquals("QMARK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(149);
      assertEquals("CONST", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(24);
      assertEquals("DIV", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Token.name(77);
      assertEquals("TRY", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Token.name(95);
      assertEquals("ASSIGN_MUL", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name((-666));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -666
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(135);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(228);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 228
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(27, Token.BITNOT);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(113, Token.WHILE);
      assertEquals(4, Token.RETURN);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(46, Token.SHNE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(111, Token.CASE);
      assertEquals(122, Token.VOID);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(42, Token.THIS);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(40, Token.STRING);
      assertEquals(23, Token.MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(24, Token.DIV);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(149, Token.CONST);
      assertEquals(12, Token.EQ);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(44, Token.TRUE);
      assertEquals(148, Token.SET);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(302, Token.STAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(307, Token.EQUALS);
      assertEquals(13, Token.NE);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(16, Token.GT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(125, Token.BLOCK);
      assertEquals(26, Token.NOT);
      assertEquals(22, Token.SUB);
      assertEquals(112, Token.DEFAULT);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(47, Token.REGEXP);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(29, Token.NEG);
      assertEquals(310, Token.COLON);
      assertEquals(110, Token.SWITCH);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(301, Token.PIPE);
      assertEquals(119, Token.WITH);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(20, Token.URSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      
      String string0 = Token.name(301);
      assertEquals("PIPE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 300;
      String string0 = Token.name(300);
      assertEquals("ANNOTATION", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(300);
      assertEquals("ANNOTATION", string1);
      assertNotNull(string1);
      
      String string2 = Token.name(300);
      assertEquals("ANNOTATION", string2);
      assertNotNull(string2);
      
      String string3 = Token.name(300);
      assertEquals("ANNOTATION", string3);
      assertNotNull(string3);
      
      String string4 = Token.name(300);
      assertEquals("ANNOTATION", string4);
      assertNotNull(string4);
      
      int int1 = 355;
      // Undeclared exception!
      try { 
        Token.name(355);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 355
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 297;
      // Undeclared exception!
      try { 
        Token.name(297);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 297
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(297);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 297
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(126, Token.LABEL);
      assertEquals(47, Token.REGEXP);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(310, Token.COLON);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(301, Token.PIPE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(40, Token.STRING);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(28, Token.POS);
      assertEquals(35, Token.GETELEM);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(125, Token.BLOCK);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(16, Token.GT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(149, Token.CONST);
      assertEquals(33, Token.GETPROP);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(132, Token.SCRIPT);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(306, Token.BANG);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(124, Token.EMPTY);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      
      String string0 = Token.name(29);
      assertEquals("NEG", string0);
      assertNotNull(string0);
      
      int int0 = (-1548);
      String string1 = Token.name((-1));
      assertEquals("ERROR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(553);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 553
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(122, Token.VOID);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(310, Token.COLON);
      assertEquals(46, Token.SHNE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(105, Token.FUNCTION);
      assertEquals(31, Token.DELPROP);
      assertEquals(126, Token.LABEL);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(4, Token.RETURN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(113, Token.WHILE);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(306, Token.BANG);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.LP);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(101, Token.AND);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(147, Token.GET);
      assertEquals(302, Token.STAR);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(43, Token.FALSE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(18, Token.LSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(16, Token.GT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(26, Token.NOT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(98, Token.HOOK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(85, Token.COMMA);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals((-1), Token.ERROR);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(13, Token.NE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(117, Token.CONTINUE);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(45, Token.SHEQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      
      int int0 = (-269);
      // Undeclared exception!
      try { 
        Token.name(271);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 271
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(271);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 271
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(306, Token.BANG);
      assertEquals(119, Token.WITH);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(14, Token.LT);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(102, Token.INC);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(30, Token.NEW);
      assertEquals(40, Token.STRING);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(21, Token.ADD);
      assertEquals(12, Token.EQ);
      assertEquals(149, Token.CONST);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(41, Token.NULL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(120, Token.CATCH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(33, Token.GETPROP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(304, Token.QMARK);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(27, Token.BITNOT);
      assertEquals(28, Token.POS);
      assertEquals((-1), Token.ERROR);
      assertEquals(39, Token.NUMBER);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(116, Token.BREAK);
      assertEquals(155, Token.CAST);
      assertEquals(115, Token.FOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(29, Token.NEG);
      assertEquals(310, Token.COLON);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(302, Token.STAR);
      assertEquals(101, Token.AND);
      assertEquals(307, Token.EQUALS);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(147, Token.GET);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(309, Token.LC);
      assertEquals(113, Token.WHILE);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(125, Token.BLOCK);
      assertEquals(35, Token.GETELEM);
      assertEquals(17, Token.GE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(126, Token.LABEL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      
      // Undeclared exception!
      try { 
        Token.name(284);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 284
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(296);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 296
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(21, Token.ADD);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(98, Token.HOOK);
      assertEquals(149, Token.CONST);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(124, Token.EMPTY);
      assertEquals(12, Token.EQ);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SET);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(35, Token.GETELEM);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(14, Token.LT);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(18, Token.LSH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(26, Token.NOT);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(310, Token.COLON);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(119, Token.WITH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(111, Token.CASE);
      assertEquals(303, Token.EOC);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(27, Token.BITNOT);
      assertEquals(28, Token.POS);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(83, Token.LP);
      assertEquals(113, Token.WHILE);
      assertEquals(4, Token.RETURN);
      assertEquals(115, Token.FOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(46, Token.SHNE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(308, Token.LB);
      assertEquals(122, Token.VOID);
      assertEquals(42, Token.THIS);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(40, Token.STRING);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(114, Token.DO);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      
      String string0 = Token.name(4);
      assertEquals("RETURN", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(93);
      assertEquals("ASSIGN_ADD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(149, Token.CONST);
      assertEquals(29, Token.NEG);
      assertEquals(86, Token.ASSIGN);
      assertEquals(21, Token.ADD);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(155, Token.CAST);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(32, Token.TYPEOF);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(20, Token.URSH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(37, Token.CALL);
      assertEquals(308, Token.LB);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(119, Token.WITH);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(38, Token.NAME);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(101, Token.AND);
      assertEquals(113, Token.WHILE);
      assertEquals(35, Token.GETELEM);
      assertEquals(18, Token.LSH);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(17, Token.GE);
      assertEquals(98, Token.HOOK);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(310, Token.COLON);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(111, Token.CASE);
      assertEquals(4, Token.RETURN);
      assertEquals(122, Token.VOID);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(31, Token.DELPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(116, Token.BREAK);
      assertEquals(47, Token.REGEXP);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(28, Token.POS);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(40, Token.STRING);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(33, Token.GETPROP);
      assertEquals(85, Token.COMMA);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(11, Token.BITAND);
      assertEquals(42, Token.THIS);
      assertEquals(13, Token.NE);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(114, Token.DO);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(41, Token.NULL);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(124, Token.EMPTY);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      
      String string0 = Token.name(155);
      assertEquals("CAST", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name((-740));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -740
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(307, Token.EQUALS);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(124, Token.EMPTY);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(43, Token.FALSE);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(20, Token.URSH);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(32, Token.TYPEOF);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(39, Token.NUMBER);
      assertEquals(120, Token.CATCH);
      assertEquals(114, Token.DO);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(31, Token.DELPROP);
      assertEquals(111, Token.CASE);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(41, Token.NULL);
      assertEquals(117, Token.CONTINUE);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(49, Token.THROW);
      assertEquals(47, Token.REGEXP);
      assertEquals((-1), Token.ERROR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(301, Token.PIPE);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(37, Token.CALL);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(86, Token.ASSIGN);
      assertEquals(35, Token.GETELEM);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(63, Token.ARRAYLIT);
      
      String string0 = Token.name(305);
      assertEquals("ELLIPSIS", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(306);
      assertEquals("BANG", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(21);
      assertEquals("ADD", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(32);
      assertEquals("TYPEOF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Token.name(40);
      assertEquals("STRING", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(306, Token.BANG);
      assertEquals(21, Token.ADD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(43, Token.FALSE);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(38, Token.NAME);
      assertEquals(110, Token.SWITCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(125, Token.BLOCK);
      assertEquals(42, Token.THIS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(149, Token.CONST);
      assertEquals(302, Token.STAR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(4, Token.RETURN);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(41, Token.NULL);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(37, Token.CALL);
      assertEquals(31, Token.DELPROP);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(304, Token.QMARK);
      assertEquals(49, Token.THROW);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(310, Token.COLON);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(118, Token.VAR);
      assertEquals(11, Token.BITAND);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(46, Token.SHNE);
      
      int int0 = 0;
      String string1 = Token.name(112);
      assertEquals("DEFAULT_CASE", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(25);
      assertEquals("MOD", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(24);
      assertEquals("DIV", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(1892);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1892
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(11, Token.BITAND);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(46, Token.SHNE);
      assertEquals(149, Token.CONST);
      assertEquals(122, Token.VOID);
      assertEquals(124, Token.EMPTY);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(41, Token.NULL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(114, Token.DO);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(33, Token.GETPROP);
      assertEquals(23, Token.MUL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(40, Token.STRING);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(125, Token.BLOCK);
      assertEquals(119, Token.WITH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(10, Token.BITXOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(12, Token.EQ);
      assertEquals(307, Token.EQUALS);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(29, Token.NEG);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(44, Token.TRUE);
      assertEquals(100, Token.OR);
      assertEquals(147, Token.GET);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(105, Token.FUNCTION);
      assertEquals(302, Token.STAR);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(21, Token.ADD);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(310, Token.COLON);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(98, Token.HOOK);
      assertEquals((-1), Token.ERROR);
      assertEquals(304, Token.QMARK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      
      String string0 = Token.name(77);
      assertEquals("TRY", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(303);
      assertEquals("EOC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(94);
      assertEquals("ASSIGN_SUB", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(92);
      assertEquals("ASSIGN_URSH", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Token.name(83);
      assertEquals("PARAM_LIST", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = Token.name(24);
      assertEquals("DIV", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = Token.name(49);
      assertEquals("THROW", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        Token.name((-441));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -441
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(14, Token.LT);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(148, Token.SET);
      assertEquals(45, Token.SHEQ);
      assertEquals(12, Token.EQ);
      assertEquals(38, Token.NAME);
      assertEquals(10, Token.BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(149, Token.CONST);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(122, Token.VOID);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(43, Token.FALSE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(308, Token.LB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(28, Token.POS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(31, Token.DELPROP);
      assertEquals(304, Token.QMARK);
      assertEquals((-1), Token.ERROR);
      assertEquals(155, Token.CAST);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(303, Token.EOC);
      assertEquals(310, Token.COLON);
      assertEquals(29, Token.NEG);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(18, Token.LSH);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(16, Token.GT);
      assertEquals(125, Token.BLOCK);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(309, Token.LC);
      assertEquals(111, Token.CASE);
      assertEquals(98, Token.HOOK);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      
      String string0 = Token.name(24);
      assertEquals("DIV", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(1447);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1447
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(4, Token.RETURN);
      assertEquals(20, Token.URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(301, Token.PIPE);
      assertEquals(126, Token.LABEL);
      assertEquals(113, Token.WHILE);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(306, Token.BANG);
      assertEquals(9, Token.BITOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(149, Token.CONST);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(28, Token.POS);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(42, Token.THIS);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(132, Token.SCRIPT);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(18, Token.LSH);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(309, Token.LC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(41, Token.NULL);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(30, Token.NEW);
      
      String string0 = Token.name(130);
      assertEquals("EXPR_RESULT", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(88);
      assertEquals("ASSIGN_BITXOR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(86);
      assertEquals("ASSIGN", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name((-1109));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(98, Token.HOOK);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(13, Token.NE);
      assertEquals(302, Token.STAR);
      assertEquals(44, Token.TRUE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(14, Token.LT);
      assertEquals(307, Token.EQUALS);
      assertEquals(124, Token.EMPTY);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(86, Token.ASSIGN);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(28, Token.POS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(113, Token.WHILE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(37, Token.CALL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(46, Token.SHNE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(112, Token.DEFAULT);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(122, Token.VOID);
      assertEquals(9, Token.BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(39, Token.NUMBER);
      assertEquals(77, Token.TRY);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(304, Token.QMARK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(119, Token.WITH);
      
      String string0 = Token.name(14);
      assertEquals("LT", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(148);
      assertEquals("SETTER_DEF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(101);
      assertEquals("AND", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(20, Token.URSH);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(38, Token.NAME);
      assertEquals(13, Token.NE);
      assertEquals(306, Token.BANG);
      assertEquals(125, Token.BLOCK);
      assertEquals(114, Token.DO);
      assertEquals(15, Token.LE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(51, Token.IN);
      assertEquals(45, Token.SHEQ);
      assertEquals(119, Token.WITH);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(40, Token.STRING);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(30, Token.NEW);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SET);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(307, Token.EQUALS);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(98, Token.HOOK);
      assertEquals(17, Token.GE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(101, Token.AND);
      assertEquals((-1), Token.ERROR);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(32, Token.TYPEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(18, Token.LSH);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(103, Token.DEC);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      
      String string0 = Token.name(40);
      assertEquals("STRING", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(97);
      assertEquals("ASSIGN_MOD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(152);
      assertEquals("DEBUGGER", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(17);
      assertEquals("GE", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Token.name(309);
      assertEquals("LC", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Token.name(64);
      assertEquals("OBJECTLIT", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(112, Token.DEFAULT);
      assertEquals(122, Token.VOID);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(45, Token.SHEQ);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(118, Token.VAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(33, Token.GETPROP);
      assertEquals(23, Token.MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(24, Token.DIV);
      assertEquals(124, Token.EMPTY);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(29, Token.NEG);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(155, Token.CAST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(302, Token.STAR);
      assertEquals(100, Token.OR);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(42, Token.THIS);
      assertEquals(39, Token.NUMBER);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(30, Token.NEW);
      assertEquals(149, Token.CONST);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(12, Token.EQ);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals((-1), Token.ERROR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(38, Token.NAME);
      assertEquals(16, Token.GT);
      assertEquals(125, Token.BLOCK);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(309, Token.LC);
      assertEquals(22, Token.SUB);
      assertEquals(113, Token.WHILE);
      assertEquals(126, Token.LABEL);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(17, Token.GE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(37, Token.CALL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      
      String string1 = Token.name(14);
      assertEquals("LT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name((-2843));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2843
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(42, Token.THIS);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(308, Token.LB);
      assertEquals(39, Token.NUMBER);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(155, Token.CAST);
      assertEquals(115, Token.FOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(149, Token.CONST);
      assertEquals(28, Token.POS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(46, Token.SHNE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(23, Token.MUL);
      assertEquals(85, Token.COMMA);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(24, Token.DIV);
      assertEquals(41, Token.NULL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(114, Token.DO);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(30, Token.NEW);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(119, Token.WITH);
      assertEquals(40, Token.STRING);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(307, Token.EQUALS);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(302, Token.STAR);
      assertEquals(147, Token.GET);
      assertEquals(113, Token.WHILE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(29, Token.NEG);
      assertEquals(111, Token.CASE);
      assertEquals(44, Token.TRUE);
      assertEquals(49, Token.THROW);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(77, Token.TRY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(17, Token.GE);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(37, Token.CALL);
      assertEquals(309, Token.LC);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(98, Token.HOOK);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(35, Token.GETELEM);
      assertEquals(26, Token.NOT);
      assertEquals(126, Token.LABEL);
      
      int int0 = 4097;
      String string0 = Token.name(93);
      assertEquals("ASSIGN_ADD", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(1070);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1070
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(124, Token.EMPTY);
      assertEquals(307, Token.EQUALS);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(29, Token.NEG);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(147, Token.GET);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(12, Token.EQ);
      assertEquals(110, Token.SWITCH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(21, Token.ADD);
      assertEquals(42, Token.THIS);
      assertEquals(119, Token.WITH);
      assertEquals(102, Token.INC);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(148, Token.SET);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(108, Token.IF);
      assertEquals(39, Token.NUMBER);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(23, Token.MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(306, Token.BANG);
      assertEquals(122, Token.VOID);
      assertEquals(114, Token.DO);
      assertEquals(41, Token.NULL);
      assertEquals(103, Token.DEC);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(46, Token.SHNE);
      assertEquals(19, Token.RSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(47, Token.REGEXP);
      assertEquals((-1), Token.ERROR);
      assertEquals(310, Token.COLON);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(303, Token.EOC);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      assertEquals(38, Token.NAME);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(40, Token.STRING);
      assertEquals(126, Token.LABEL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(304, Token.QMARK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(20, Token.URSH);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(301, Token.PIPE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(101, Token.AND);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      
      String string0 = Token.name(119);
      assertEquals("WITH", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(1712);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1712
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(42, Token.THIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(155, Token.CAST);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(40, Token.STRING);
      assertEquals(119, Token.WITH);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(306, Token.BANG);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(310, Token.COLON);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(132, Token.SCRIPT);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(41, Token.NULL);
      assertEquals(21, Token.ADD);
      assertEquals(117, Token.CONTINUE);
      assertEquals(124, Token.EMPTY);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(85, Token.COMMA);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(46, Token.SHNE);
      assertEquals(13, Token.NE);
      
      String string0 = Token.name(45);
      assertEquals("SHEQ", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(16);
      assertEquals("GT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(114);
      assertEquals("DO", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Token.name(19);
      assertEquals("RSH", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(235);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 235
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(83, Token.LP);
      assertEquals(111, Token.CASE);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(4, Token.RETURN);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(46, Token.SHNE);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(125, Token.BLOCK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(119, Token.WITH);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(26, Token.NOT);
      assertEquals(37, Token.CALL);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(310, Token.COLON);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(301, Token.PIPE);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(112, Token.DEFAULT);
      assertEquals(29, Token.NEG);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(304, Token.QMARK);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(149, Token.CONST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(108, Token.IF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(13, Token.NE);
      assertEquals(307, Token.EQUALS);
      assertEquals(14, Token.LT);
      assertEquals(42, Token.THIS);
      assertEquals(118, Token.VAR);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(132, Token.SCRIPT);
      
      String string0 = Token.name(310);
      assertEquals("COLON", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(149);
      assertEquals("CONST", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(52);
      assertEquals("INSTANCEOF", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(85);
      assertEquals("COMMA", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Token.name(85);
      assertEquals("COMMA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(155, Token.CAST);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(29, Token.NEG);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(43, Token.FALSE);
      assertEquals(39, Token.NUMBER);
      assertEquals(149, Token.CONST);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(42, Token.THIS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(12, Token.EQ);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(35, Token.GETELEM);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(301, Token.PIPE);
      assertEquals(307, Token.EQUALS);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(37, Token.CALL);
      assertEquals(302, Token.STAR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(47, Token.REGEXP);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(122, Token.VOID);
      assertEquals(9, Token.BITOR);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(38, Token.NAME);
      assertEquals(83, Token.LP);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(45, Token.SHEQ);
      assertEquals(115, Token.FOR);
      assertEquals(310, Token.COLON);
      assertEquals(303, Token.EOC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(119, Token.WITH);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(108, Token.IF);
      assertEquals(85, Token.COMMA);
      assertEquals(306, Token.BANG);
      assertEquals(116, Token.BREAK);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(24, Token.DIV);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(41, Token.NULL);
      
      String string0 = Token.name(9);
      assertEquals("BITOR", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(17);
      assertEquals("GE", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(120);
      assertEquals("CATCH", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(11, Token.BITAND);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(85, Token.COMMA);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals((-1), Token.ERROR);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(113, Token.WHILE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(42, Token.THIS);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(31, Token.DELPROP);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(29, Token.NEG);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(310, Token.COLON);
      assertEquals(124, Token.EMPTY);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(41, Token.NULL);
      assertEquals(27, Token.BITNOT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(14, Token.LT);
      assertEquals(306, Token.BANG);
      assertEquals(13, Token.NE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(35, Token.GETELEM);
      assertEquals(40, Token.STRING);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(38, Token.NAME);
      assertEquals(132, Token.SCRIPT);
      assertEquals(49, Token.THROW);
      assertEquals(301, Token.PIPE);
      assertEquals(302, Token.STAR);
      assertEquals(9, Token.BITOR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(149, Token.CONST);
      assertEquals(28, Token.POS);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(125, Token.BLOCK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      
      String string0 = Token.name(115);
      assertEquals("FOR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(83, Token.LP);
      assertEquals(111, Token.CASE);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(41, Token.NULL);
      assertEquals(117, Token.CONTINUE);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(42, Token.THIS);
      assertEquals(38, Token.NAME);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(40, Token.STRING);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(126, Token.LABEL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(301, Token.PIPE);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals(37, Token.CALL);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(125, Token.BLOCK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(307, Token.EQUALS);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(43, Token.FALSE);
      assertEquals(10, Token.BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(114, Token.DO);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(24, Token.DIV);
      assertEquals(39, Token.NUMBER);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(23, Token.MUL);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      
      String string0 = Token.name(130);
      assertEquals("EXPR_RESULT", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(125);
      assertEquals("BLOCK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(33, Token.GETPROP);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(27, Token.BITNOT);
      assertEquals(16, Token.GT);
      assertEquals(41, Token.NULL);
      assertEquals(309, Token.LC);
      assertEquals(116, Token.BREAK);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(26, Token.NOT);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(43, Token.FALSE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(19, Token.RSH);
      assertEquals(149, Token.CONST);
      assertEquals(23, Token.MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(124, Token.EMPTY);
      assertEquals(10, Token.BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(115, Token.FOR);
      assertEquals(303, Token.EOC);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(148, Token.SET);
      assertEquals(301, Token.PIPE);
      assertEquals(108, Token.IF);
      assertEquals(119, Token.WITH);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(40, Token.STRING);
      assertEquals(126, Token.LABEL);
      assertEquals(98, Token.HOOK);
      assertEquals(306, Token.BANG);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(307, Token.EQUALS);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(13, Token.NE);
      assertEquals(302, Token.STAR);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(46, Token.SHNE);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(49, Token.THROW);
      assertEquals(101, Token.AND);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(113, Token.WHILE);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(38, Token.NAME);
      assertEquals(304, Token.QMARK);
      assertEquals(20, Token.URSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      
      String string0 = Token.name(27);
      assertEquals("BITNOT", string0);
      assertNotNull(string0);
      
      int int0 = 304;
      String string1 = Token.name(52);
      assertEquals("INSTANCEOF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(2680);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2680
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Token.name(91);
      assertEquals("ASSIGN_RSH", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(10, Token.BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(98, Token.HOOK);
      assertEquals(124, Token.EMPTY);
      assertEquals(12, Token.EQ);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(149, Token.CONST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(302, Token.STAR);
      assertEquals(13, Token.NE);
      assertEquals(44, Token.TRUE);
      assertEquals(14, Token.LT);
      assertEquals(307, Token.EQUALS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(120, Token.CATCH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(118, Token.VAR);
      assertEquals(42, Token.THIS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(40, Token.STRING);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(114, Token.DO);
      assertEquals(306, Token.BANG);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(23, Token.MUL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(41, Token.NULL);
      assertEquals(31, Token.DELPROP);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(117, Token.CONTINUE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(115, Token.FOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(105, Token.FUNCTION);
      assertEquals(46, Token.SHNE);
      assertEquals(122, Token.VOID);
      assertEquals(111, Token.CASE);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(18, Token.LSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(22, Token.SUB);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(47, Token.REGEXP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(17, Token.GE);
      assertEquals(119, Token.WITH);
      assertEquals(155, Token.CAST);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(310, Token.COLON);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(101, Token.AND);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(147, Token.GET);
      assertEquals((-1), Token.ERROR);
      assertEquals(301, Token.PIPE);
      assertEquals(304, Token.QMARK);
      assertEquals(29, Token.NEG);
      assertEquals(20, Token.URSH);
      
      String string1 = Token.name(110);
      assertEquals("SWITCH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(40);
      assertEquals("STRING", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(148);
      assertEquals("SETTER_DEF", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Token.name(149);
      assertEquals("CONST", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Token.name((-1704));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1704
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(33, Token.GETPROP);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(42, Token.THIS);
      assertEquals(28, Token.POS);
      assertEquals(31, Token.DELPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(304, Token.QMARK);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(117, Token.CONTINUE);
      assertEquals(155, Token.CAST);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(310, Token.COLON);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(122, Token.VOID);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(102, Token.INC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(45, Token.SHEQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(112, Token.DEFAULT);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(149, Token.CONST);
      assertEquals(47, Token.REGEXP);
      assertEquals(40, Token.STRING);
      assertEquals(110, Token.SWITCH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(86, Token.ASSIGN);
      assertEquals(9, Token.BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(105, Token.FUNCTION);
      assertEquals(147, Token.GET);
      assertEquals(17, Token.GE);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(32);
      assertEquals("TYPEOF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(35);
      assertEquals("GETELEM", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(302);
      assertEquals("STAR", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Token.name((-1));
      assertEquals("ERROR", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Token.name(116);
      assertEquals("BREAK", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name(2926);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2926
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(112, Token.DEFAULT);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(306, Token.BANG);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(4, Token.RETURN);
      assertEquals(103, Token.DEC);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(126, Token.LABEL);
      assertEquals(114, Token.DO);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(85, Token.COMMA);
      assertEquals(148, Token.SET);
      assertEquals((-1), Token.ERROR);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(310, Token.COLON);
      assertEquals(21, Token.ADD);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(102, Token.INC);
      assertEquals(12, Token.EQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(120, Token.CATCH);
      assertEquals(101, Token.AND);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(25, Token.MOD);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(43, Token.FALSE);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(11, Token.BITAND);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(22, Token.SUB);
      assertEquals(124, Token.EMPTY);
      assertEquals(309, Token.LC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(307, Token.EQUALS);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      
      String string0 = Token.name(90);
      assertEquals("ASSIGN_LSH", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(43);
      assertEquals("FALSE", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(41, Token.NULL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(28, Token.POS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(115, Token.FOR);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(46, Token.SHNE);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(86, Token.ASSIGN);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(24, Token.DIV);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(149, Token.CONST);
      assertEquals(132, Token.SCRIPT);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(31, Token.DELPROP);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(42, Token.THIS);
      assertEquals(120, Token.CATCH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(306, Token.BANG);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(119, Token.WITH);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(40, Token.STRING);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(307, Token.EQUALS);
      assertEquals(126, Token.LABEL);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(44, Token.TRUE);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(155, Token.CAST);
      assertEquals(310, Token.COLON);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(47, Token.REGEXP);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(16, Token.GT);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(301, Token.PIPE);
      assertEquals(100, Token.OR);
      assertEquals(113, Token.WHILE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(29, Token.NEG);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(223);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 223
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(119, Token.WITH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(40, Token.STRING);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(23, Token.MUL);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals((-1), Token.ERROR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(124, Token.EMPTY);
      assertEquals(12, Token.EQ);
      assertEquals(110, Token.SWITCH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(41, Token.NULL);
      assertEquals(85, Token.COMMA);
      assertEquals(148, Token.SET);
      assertEquals(122, Token.VOID);
      assertEquals(108, Token.IF);
      assertEquals(11, Token.BITAND);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(304, Token.QMARK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(309, Token.LC);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(155, Token.CAST);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(43, Token.FALSE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(100, Token.OR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(113, Token.WHILE);
      assertEquals(29, Token.NEG);
      assertEquals(33, Token.GETPROP);
      assertEquals(111, Token.CASE);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(83, Token.LP);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(10, Token.BITXOR);
      assertEquals(307, Token.EQUALS);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(98, Token.HOOK);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(35, Token.GETELEM);
      assertEquals(28, Token.POS);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      
      String string0 = Token.name(153);
      assertEquals("LABEL_NAME", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Token.name(12);
      assertEquals("EQ", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(40, Token.STRING);
      assertEquals(20, Token.URSH);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(38, Token.NAME);
      assertEquals(13, Token.NE);
      assertEquals(306, Token.BANG);
      assertEquals(125, Token.BLOCK);
      assertEquals(114, Token.DO);
      assertEquals(15, Token.LE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(51, Token.IN);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(119, Token.WITH);
      assertEquals(98, Token.HOOK);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(23, Token.MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(301, Token.PIPE);
      assertEquals(149, Token.CONST);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(303, Token.EOC);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(10, Token.BITXOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(32, Token.TYPEOF);
      assertEquals(85, Token.COMMA);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(11, Token.BITAND);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(18, Token.LSH);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(101, Token.AND);
      assertEquals((-1), Token.ERROR);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(113, Token.WHILE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(29, Token.NEG);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(43, Token.FALSE);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(102, Token.INC);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(41, Token.NULL);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(122, Token.VOID);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(39, Token.NUMBER);
      
      String string1 = Token.name(9);
      assertEquals("BITOR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 220;
      // Undeclared exception!
      try { 
        Token.name(220);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 220
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(155, Token.CAST);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(21, Token.ADD);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(113, Token.WHILE);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(35, Token.GETELEM);
      assertEquals(29, Token.NEG);
      assertEquals(101, Token.AND);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(16, Token.GT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(40, Token.STRING);
      assertEquals(112, Token.DEFAULT);
      assertEquals(14, Token.LT);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(148, Token.SET);
      assertEquals(122, Token.VOID);
      assertEquals(108, Token.IF);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(119, Token.WITH);
      assertEquals(12, Token.EQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(30, Token.NEW);
      assertEquals(10, Token.BITXOR);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(27, Token.BITNOT);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(46, Token.SHNE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(19, Token.RSH);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(23, Token.MUL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      
      String string0 = Token.name(92);
      assertEquals("ASSIGN_URSH", string0);
      assertNotNull(string0);
      
      int int0 = (-578);
      String string1 = Token.name(103);
      assertEquals("DEC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(436);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 436
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(10, Token.BITXOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(35, Token.GETELEM);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(149, Token.CONST);
      assertEquals(98, Token.HOOK);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(43, Token.FALSE);
      assertEquals(77, Token.TRY);
      assertEquals(40, Token.STRING);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(111, Token.CASE);
      assertEquals(125, Token.BLOCK);
      assertEquals(302, Token.STAR);
      assertEquals(27, Token.BITNOT);
      assertEquals(41, Token.NULL);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(117, Token.CONTINUE);
      assertEquals(310, Token.COLON);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(83, Token.LP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(304, Token.QMARK);
      assertEquals(31, Token.DELPROP);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(39, Token.NUMBER);
      assertEquals(155, Token.CAST);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(47, Token.REGEXP);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(124, Token.EMPTY);
      assertEquals(11, Token.BITAND);
      assertEquals(46, Token.SHNE);
      assertEquals(148, Token.SET);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      
      String string0 = Token.name(114);
      assertEquals("DO", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(98);
      assertEquals("HOOK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(17);
      assertEquals("GE", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(2298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Token.name(31);
      assertEquals("DELPROP", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(1127);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals((-1), Token.ERROR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(28, Token.POS);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals(41, Token.NULL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(304, Token.QMARK);
      assertEquals(37, Token.CALL);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(113, Token.WHILE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(17, Token.GE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(9, Token.BITOR);
      assertEquals(16, Token.GT);
      assertEquals(125, Token.BLOCK);
      assertEquals(26, Token.NOT);
      assertEquals(42, Token.THIS);
      assertEquals(309, Token.LC);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(302, Token.STAR);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(307, Token.EQUALS);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(119, Token.WITH);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(20, Token.URSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(100, Token.OR);
      assertEquals(124, Token.EMPTY);
      assertEquals(38, Token.NAME);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(47, Token.REGEXP);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(122, Token.VOID);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(310, Token.COLON);
      assertEquals(114, Token.DO);
      assertEquals(32, Token.TYPEOF);
      assertEquals(110, Token.SWITCH);
      assertEquals(103, Token.DEC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(45, Token.SHEQ);
      assertEquals(155, Token.CAST);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(13, Token.NE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(108, Token.IF);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(148, Token.SET);
      
      String string0 = Token.name(14);
      assertEquals("LT", string0);
      assertNotNull(string0);
      
      String string1 = Token.name((-1));
      assertEquals("ERROR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(113);
      assertEquals("WHILE", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(4, Token.RETURN);
      assertEquals(28, Token.POS);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(116, Token.BREAK);
      assertEquals(46, Token.SHNE);
      assertEquals((-1), Token.ERROR);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(85, Token.COMMA);
      assertEquals(9, Token.BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(24, Token.DIV);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(41, Token.NULL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(304, Token.QMARK);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(39, Token.NUMBER);
      assertEquals(13, Token.NE);
      assertEquals(20, Token.URSH);
      assertEquals(108, Token.IF);
      assertEquals(310, Token.COLON);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(112, Token.DEFAULT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(119, Token.WITH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(29, Token.NEG);
      assertEquals(307, Token.EQUALS);
      assertEquals(147, Token.GET);
      assertEquals(17, Token.GE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(120, Token.CATCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(306, Token.BANG);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(126, Token.LABEL);
      assertEquals(42, Token.THIS);
      assertEquals(125, Token.BLOCK);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(22, Token.SUB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(105, Token.FUNCTION);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(40, Token.STRING);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      
      String string0 = Token.name(52);
      assertEquals("INSTANCEOF", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(37);
      assertEquals("CALL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(42);
      assertEquals("THIS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(11);
      assertEquals("BITAND", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name((-206));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -206
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(23, Token.MUL);
      assertEquals(47, Token.REGEXP);
      assertEquals(9, Token.BITOR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(46, Token.SHNE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(118, Token.VAR);
      assertEquals(126, Token.LABEL);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(24, Token.DIV);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(149, Token.CONST);
      assertEquals(25, Token.MOD);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(17, Token.GE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(39, Token.NUMBER);
      assertEquals(77, Token.TRY);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(29, Token.NEG);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(302, Token.STAR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(43, Token.FALSE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(18, Token.LSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(22, Token.SUB);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(124, Token.EMPTY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(30, Token.NEW);
      assertEquals(85, Token.COMMA);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(113, Token.WHILE);
      assertEquals(11, Token.BITAND);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals((-1), Token.ERROR);
      assertEquals(14, Token.LT);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(119, Token.WITH);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(116, Token.BREAK);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(12, Token.EQ);
      
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(94);
      assertEquals("ASSIGN_SUB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(63);
      assertEquals("ARRAYLIT", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Token.name(89);
      assertEquals("ASSIGN_BITAND", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Token.name(149);
      assertEquals("CONST", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(307, Token.EQUALS);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(124, Token.EMPTY);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(43, Token.FALSE);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(148, Token.SET);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(35, Token.GETELEM);
      assertEquals(44, Token.TRUE);
      assertEquals(14, Token.LT);
      assertEquals(302, Token.STAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(42, Token.THIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(40, Token.STRING);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(41, Token.NULL);
      assertEquals(117, Token.CONTINUE);
      assertEquals(115, Token.FOR);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(122, Token.VOID);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(46, Token.SHNE);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(125, Token.BLOCK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(301, Token.PIPE);
      assertEquals(39, Token.NUMBER);
      assertEquals(37, Token.CALL);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(47, Token.REGEXP);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(20, Token.URSH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      
      String string1 = Token.name(30);
      assertEquals("NEW", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(100, Token.OR);
      assertEquals(102, Token.INC);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(110, Token.SWITCH);
      assertEquals(101, Token.AND);
      assertEquals(35, Token.GETELEM);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(98, Token.HOOK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(29, Token.NEG);
      assertEquals(309, Token.LC);
      assertEquals(124, Token.EMPTY);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(43, Token.FALSE);
      assertEquals(77, Token.TRY);
      assertEquals(120, Token.CATCH);
      assertEquals(17, Token.GE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(308, Token.LB);
      assertEquals(18, Token.LSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(86, Token.ASSIGN);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(83, Token.LP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(111, Token.CASE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(46, Token.SHNE);
      assertEquals(41, Token.NULL);
      assertEquals(310, Token.COLON);
      assertEquals(28, Token.POS);
      assertEquals((-1), Token.ERROR);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(49, Token.THROW);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(114, Token.DO);
      assertEquals(113, Token.WHILE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(19, Token.RSH);
      assertEquals(37, Token.CALL);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(301, Token.PIPE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(85, Token.COMMA);
      assertEquals(112, Token.DEFAULT);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(118, Token.VAR);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(148, Token.SET);
      
      String string0 = Token.name(305);
      assertEquals("ELLIPSIS", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name((-4556));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4556
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(122, Token.VOID);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(27, Token.BITNOT);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(40, Token.STRING);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(28, Token.POS);
      assertEquals(112, Token.DEFAULT);
      assertEquals(119, Token.WITH);
      assertEquals(310, Token.COLON);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(308, Token.LB);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(37, Token.CALL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(20, Token.URSH);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(44, Token.TRUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(302, Token.STAR);
      assertEquals(149, Token.CONST);
      assertEquals(100, Token.OR);
      assertEquals(307, Token.EQUALS);
      assertEquals(124, Token.EMPTY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(17, Token.GE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(12, Token.EQ);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(32, Token.TYPEOF);
      assertEquals(10, Token.BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(30, Token.NEW);
      assertEquals(33, Token.GETPROP);
      assertEquals(148, Token.SET);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(108, Token.IF);
      assertEquals(103, Token.DEC);
      assertEquals(39, Token.NUMBER);
      assertEquals(41, Token.NULL);
      assertEquals(120, Token.CATCH);
      assertEquals(114, Token.DO);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      
      String string0 = Token.name(22);
      assertEquals("SUB", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(23);
      assertEquals("MUL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 0;
      int int1 = 1444;
      // Undeclared exception!
      try { 
        Token.name(1444);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1444
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(132, Token.SCRIPT);
      assertEquals(307, Token.EQUALS);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(149, Token.CONST);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(110, Token.SWITCH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(306, Token.BANG);
      assertEquals(29, Token.NEG);
      assertEquals(35, Token.GETELEM);
      assertEquals(147, Token.GET);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(43, Token.FALSE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(120, Token.CATCH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(20, Token.URSH);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(4, Token.RETURN);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(41, Token.NULL);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(310, Token.COLON);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(24, Token.DIV);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(113, Token.WHILE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(23, Token.MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(125, Token.BLOCK);
      assertEquals(42, Token.THIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(105, Token.FUNCTION);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(10, Token.BITXOR);
      
      String string0 = Token.name(22);
      assertEquals("SUB", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(118);
      assertEquals("VAR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(39);
      assertEquals("NUMBER", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name((-1152));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1152
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(32, Token.TYPEOF);
      assertEquals(85, Token.COMMA);
      assertEquals(18, Token.LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(149, Token.CONST);
      assertEquals(124, Token.EMPTY);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(41, Token.NULL);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(19, Token.RSH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(33, Token.GETPROP);
      assertEquals(13, Token.NE);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(125, Token.BLOCK);
      assertEquals(306, Token.BANG);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(35, Token.GETELEM);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(307, Token.EQUALS);
      assertEquals(46, Token.SHNE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(110, Token.SWITCH);
      assertEquals(302, Token.STAR);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(310, Token.COLON);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(113, Token.WHILE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(9, Token.BITOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(49, Token.THROW);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(29, Token.NEG);
      
      String string0 = Token.name(18);
      assertEquals("LSH", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(309);
      assertEquals("LC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name((-908));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -908
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(17, Token.GE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(86, Token.ASSIGN);
      assertEquals(22, Token.SUB);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(18, Token.LSH);
      assertEquals(148, Token.SET);
      assertEquals(85, Token.COMMA);
      assertEquals(108, Token.IF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(11, Token.BITAND);
      assertEquals(30, Token.NEW);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(14, Token.LT);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals((-1), Token.ERROR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(119, Token.WITH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(12, Token.EQ);
      assertEquals(112, Token.DEFAULT);
      assertEquals(155, Token.CAST);
      assertEquals(310, Token.COLON);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(126, Token.LABEL);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(118, Token.VAR);
      assertEquals(111, Token.CASE);
      assertEquals(13, Token.NE);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(41, Token.NULL);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(306, Token.BANG);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(308, Token.LB);
      assertEquals(33, Token.GETPROP);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(10, Token.BITXOR);
      assertEquals(31, Token.DELPROP);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      
      String string0 = Token.name(95);
      assertEquals("ASSIGN_MUL", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(9);
      assertEquals("BITOR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(2683);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2683
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(38, Token.NAME);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(119, Token.WITH);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(13, Token.NE);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(148, Token.SET);
      assertEquals(30, Token.NEW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals((-1), Token.ERROR);
      assertEquals(307, Token.EQUALS);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(12, Token.EQ);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(35, Token.GETELEM);
      assertEquals(310, Token.COLON);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(25, Token.MOD);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(17, Token.GE);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(101, Token.AND);
      assertEquals(113, Token.WHILE);
      assertEquals(49, Token.THROW);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(26, Token.NOT);
      assertEquals(155, Token.CAST);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(11, Token.BITAND);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(18, Token.LSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(85, Token.COMMA);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(308, Token.LB);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(10, Token.BITXOR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(83, Token.LP);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      
      String string1 = Token.name(47);
      assertEquals("REGEXP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(83);
      assertEquals("PARAM_LIST", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(105);
      assertEquals("FUNCTION", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = 862;
      String string4 = Token.name(117);
      assertEquals("CONTINUE", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Token.name(46);
      assertEquals("SHNE", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name(1216);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1216
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals(13, Token.NE);
      assertEquals(301, Token.PIPE);
      assertEquals(40, Token.STRING);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(38, Token.NAME);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(30, Token.NEW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(117, Token.CONTINUE);
      assertEquals(44, Token.TRUE);
      assertEquals(29, Token.NEG);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(147, Token.GET);
      assertEquals(307, Token.EQUALS);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(35, Token.GETELEM);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals((-1), Token.ERROR);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(304, Token.QMARK);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(32, Token.TYPEOF);
      assertEquals(42, Token.THIS);
      assertEquals(18, Token.LSH);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(43, Token.FALSE);
      assertEquals(149, Token.CONST);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(33, Token.GETPROP);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      
      String string0 = Token.name(130);
      assertEquals("EXPR_RESULT", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(44);
      assertEquals("TRUE", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(83);
      assertEquals("PARAM_LIST", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Token.name(47);
      assertEquals("REGEXP", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(13, Token.NE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(306, Token.BANG);
      assertEquals(20, Token.URSH);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(103, Token.DEC);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(105, Token.FUNCTION);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(307, Token.EQUALS);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(302, Token.STAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(125, Token.BLOCK);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(100, Token.OR);
      assertEquals(29, Token.NEG);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(122, Token.VOID);
      assertEquals(25, Token.MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(17, Token.GE);
      assertEquals(77, Token.TRY);
      assertEquals(27, Token.BITNOT);
      assertEquals(49, Token.THROW);
      assertEquals(101, Token.AND);
      assertEquals(116, Token.BREAK);
      assertEquals(12, Token.EQ);
      assertEquals(113, Token.WHILE);
      assertEquals(45, Token.SHEQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(120, Token.CATCH);
      assertEquals(26, Token.NOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(41, Token.NULL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(111, Token.CASE);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(124, Token.EMPTY);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(23, Token.MUL);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(19, Token.RSH);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(28, Token.POS);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(40, Token.STRING);
      assertEquals(42, Token.THIS);
      assertEquals(303, Token.EOC);
      assertEquals(93, Token.ASSIGN_ADD);
      
      // Undeclared exception!
      try { 
        Token.name((-2202));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2202
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(43, Token.FALSE);
      assertEquals(302, Token.STAR);
      assertEquals(100, Token.OR);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(37, Token.CALL);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(301, Token.PIPE);
      assertEquals(119, Token.WITH);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(304, Token.QMARK);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals((-1), Token.ERROR);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(102, Token.INC);
      assertEquals(39, Token.NUMBER);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(310, Token.COLON);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(111, Token.CASE);
      assertEquals(122, Token.VOID);
      assertEquals(31, Token.DELPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(41, Token.NULL);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(113, Token.WHILE);
      assertEquals(4, Token.RETURN);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(24, Token.DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(33, Token.GETPROP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(42, Token.THIS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      
      String string0 = Token.name(87);
      assertEquals("ASSIGN_BITOR", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(9);
      assertEquals("BITOR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(10);
      assertEquals("BITXOR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(46);
      assertEquals("SHNE", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name((-1153));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1153
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(85, Token.COMMA);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(115, Token.FOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(28, Token.POS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(304, Token.QMARK);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(120, Token.CATCH);
      assertEquals(31, Token.DELPROP);
      assertEquals(42, Token.THIS);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(9, Token.BITOR);
      assertEquals(17, Token.GE);
      assertEquals(149, Token.CONST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(10, Token.BITXOR);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(125, Token.BLOCK);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(308, Token.LB);
      assertEquals(307, Token.EQUALS);
      assertEquals(44, Token.TRUE);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(119, Token.WITH);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(12, Token.EQ);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(35, Token.GETELEM);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(38, Token.NAME);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(29, Token.NEG);
      assertEquals(122, Token.VOID);
      assertEquals(310, Token.COLON);
      assertEquals(23, Token.MUL);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(19, Token.RSH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(155, Token.CAST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(27, Token.BITNOT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(116, Token.BREAK);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(39, Token.NUMBER);
      assertEquals(46, Token.SHNE);
      
      String string0 = Token.name(110);
      assertEquals("SWITCH", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(40);
      assertEquals("STRING", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(148);
      assertEquals("SETTER_DEF", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(149);
      assertEquals("CONST", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name((-1704));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1704
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Token.name(152);
      assertEquals("DEBUGGER", string0);
      assertNotNull(string0);
      
      int int0 = (-963);
      // Undeclared exception!
      try { 
        Token.name((-963));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -963
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(308, Token.LB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(39, Token.NUMBER);
      assertEquals(86, Token.ASSIGN);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(149, Token.CONST);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(114, Token.DO);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(132, Token.SCRIPT);
      assertEquals(103, Token.DEC);
      assertEquals(31, Token.DELPROP);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(120, Token.CATCH);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(40, Token.STRING);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(35, Token.GETELEM);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(119, Token.WITH);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(10, Token.BITXOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(125, Token.BLOCK);
      assertEquals(12, Token.EQ);
      assertEquals(307, Token.EQUALS);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(310, Token.COLON);
      assertEquals(29, Token.NEG);
      assertEquals(117, Token.CONTINUE);
      assertEquals(100, Token.OR);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(105, Token.FUNCTION);
      assertEquals(302, Token.STAR);
      assertEquals(47, Token.REGEXP);
      assertEquals(155, Token.CAST);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(112, Token.DEFAULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(18, Token.LSH);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(309, Token.LC);
      assertEquals(98, Token.HOOK);
      assertEquals((-1), Token.ERROR);
      assertEquals(304, Token.QMARK);
      assertEquals(25, Token.MOD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(17, Token.GE);
      assertEquals(49, Token.THROW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(9, Token.BITOR);
      assertEquals(101, Token.AND);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      
      String string0 = Token.name((-1));
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(105);
      assertEquals("FUNCTION", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(20);
      assertEquals("URSH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(96);
      assertEquals("ASSIGN_DIV", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Token.name(307);
      assertEquals("EQUALS", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(35, Token.GETELEM);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(307, Token.EQUALS);
      assertEquals(40, Token.STRING);
      assertEquals(45, Token.SHEQ);
      assertEquals(149, Token.CONST);
      assertEquals(12, Token.EQ);
      assertEquals(30, Token.NEW);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(310, Token.COLON);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(47, Token.REGEXP);
      assertEquals(86, Token.ASSIGN);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(112, Token.DEFAULT);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(304, Token.QMARK);
      assertEquals(126, Token.LABEL);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(113, Token.WHILE);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals((-1), Token.ERROR);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(115, Token.FOR);
      assertEquals(116, Token.BREAK);
      assertEquals(122, Token.VOID);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(46, Token.SHNE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(118, Token.VAR);
      assertEquals(33, Token.GETPROP);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(24, Token.DIV);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      
      String string0 = Token.name(113);
      assertEquals("WHILE", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Token.name(961);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 961
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(11, Token.BITAND);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(37, Token.CALL);
      assertEquals(85, Token.COMMA);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(18, Token.LSH);
      assertEquals(41, Token.NULL);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(16, Token.GT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(111, Token.CASE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(44, Token.TRUE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(124, Token.EMPTY);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(23, Token.MUL);
      assertEquals(86, Token.ASSIGN);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(43, Token.FALSE);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(31, Token.DELPROP);
      assertEquals(10, Token.BITXOR);
      assertEquals(40, Token.STRING);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(149, Token.CONST);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(306, Token.BANG);
      assertEquals(30, Token.NEW);
      assertEquals(301, Token.PIPE);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(114, Token.DO);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(98, Token.HOOK);
      assertEquals(307, Token.EQUALS);
      assertEquals(35, Token.GETELEM);
      assertEquals(302, Token.STAR);
      assertEquals(118, Token.VAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(310, Token.COLON);
      assertEquals(110, Token.SWITCH);
      assertEquals(29, Token.NEG);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(122, Token.VOID);
      assertEquals(147, Token.GET);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(100, Token.OR);
      assertEquals(17, Token.GE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(39, Token.NUMBER);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(304, Token.QMARK);
      assertEquals(12, Token.EQ);
      assertEquals(38, Token.NAME);
      assertEquals((-1), Token.ERROR);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(119, Token.WITH);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(102, Token.INC);
      
      String string0 = Token.name(126);
      assertEquals("LABEL", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(33);
      assertEquals("GETPROP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 284;
      // Undeclared exception!
      try { 
        Token.name(284);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 284
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 243;
      // Undeclared exception!
      try { 
        Token.name(243);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 243
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(278);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 278
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(122, Token.VOID);
      assertEquals(105, Token.FUNCTION);
      assertEquals(23, Token.MUL);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT);
      assertEquals(119, Token.WITH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(115, Token.FOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(28, Token.POS);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(40, Token.STRING);
      assertEquals(85, Token.COMMA);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(11, Token.BITAND);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(30, Token.NEW);
      assertEquals(13, Token.NE);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(14, Token.LT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(33, Token.GETPROP);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(124, Token.EMPTY);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(114, Token.DO);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(110, Token.SWITCH);
      assertEquals(17, Token.GE);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(39, Token.NUMBER);
      assertEquals(29, Token.NEG);
      assertEquals(44, Token.TRUE);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(42, Token.THIS);
      assertEquals(304, Token.QMARK);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(149, Token.CONST);
      assertEquals(12, Token.EQ);
      assertEquals(155, Token.CAST);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(20, Token.URSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(308, Token.LB);
      assertEquals(301, Token.PIPE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      
      String string0 = Token.name(304);
      assertEquals("QMARK", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(308);
      assertEquals("LB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(149);
      assertEquals("CONST", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(24);
      assertEquals("DIV", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Token.name(310);
      assertEquals("COLON", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = Token.name(77);
      assertEquals("TRY", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = Token.name(95);
      assertEquals("ASSIGN_MUL", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        Token.name((-666));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -666
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 1663;
      // Undeclared exception!
      try { 
        Token.name(1663);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1663
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(302, Token.STAR);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(307, Token.EQUALS);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(29, Token.NEG);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(77, Token.TRY);
      assertEquals(124, Token.EMPTY);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(108, Token.IF);
      assertEquals(39, Token.NUMBER);
      assertEquals(26, Token.NOT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(35, Token.GETELEM);
      assertEquals(18, Token.LSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(33, Token.GETPROP);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(40, Token.STRING);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(114, Token.DO);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(117, Token.CONTINUE);
      assertEquals(83, Token.LP);
      assertEquals(46, Token.SHNE);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(116, Token.BREAK);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(105, Token.FUNCTION);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(41, Token.NULL);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(11, Token.BITAND);
      assertEquals(111, Token.CASE);
      assertEquals(4, Token.RETURN);
      assertEquals(308, Token.LB);
      assertEquals(122, Token.VOID);
      assertEquals(118, Token.VAR);
      assertEquals(85, Token.COMMA);
      assertEquals(125, Token.BLOCK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(301, Token.PIPE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(148, Token.SET);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(30, Token.NEW);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(47, Token.REGEXP);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(112, Token.DEFAULT);
      assertEquals(101, Token.AND);
      assertEquals(45, Token.SHEQ);
      assertEquals(102, Token.INC);
      assertEquals(304, Token.QMARK);
      assertEquals(310, Token.COLON);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(38, Token.NAME);
      assertEquals(110, Token.SWITCH);
      
      String string0 = Token.name(77);
      assertEquals("TRY", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(122);
      assertEquals("VOID", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(154);
      assertEquals("STRING_KEY", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Token.name(292);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 292
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(44, Token.TRUE);
      assertEquals(100, Token.OR);
      assertEquals(124, Token.EMPTY);
      assertEquals(110, Token.SWITCH);
      assertEquals(149, Token.CONST);
      assertEquals(147, Token.GET);
      assertEquals(302, Token.STAR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(102, Token.INC);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(120, Token.CATCH);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(98, Token.HOOK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(29, Token.NEG);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(11, Token.BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(306, Token.BANG);
      assertEquals(13, Token.NE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      assertEquals(32, Token.TYPEOF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(45, Token.SHEQ);
      assertEquals(116, Token.BREAK);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(122, Token.VOID);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(47, Token.REGEXP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(4, Token.RETURN);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(113, Token.WHILE);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(308, Token.LB);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(125, Token.BLOCK);
      assertEquals(42, Token.THIS);
      assertEquals(40, Token.STRING);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(18, Token.LSH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(10, Token.BITXOR);
      assertEquals(307, Token.EQUALS);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      
      String string0 = Token.name(20);
      assertEquals("URSH", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(130);
      assertEquals("EXPR_RESULT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(12);
      assertEquals("EQ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(94);
      assertEquals("ASSIGN_SUB", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(2576);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2576
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(149, Token.CONST);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(35, Token.GETELEM);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(119, Token.WITH);
      assertEquals(100, Token.OR);
      assertEquals(20, Token.URSH);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(101, Token.AND);
      assertEquals(38, Token.NAME);
      assertEquals(25, Token.MOD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(77, Token.TRY);
      assertEquals(43, Token.FALSE);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(125, Token.BLOCK);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(42, Token.THIS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(302, Token.STAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(4, Token.RETURN);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(310, Token.COLON);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(9, Token.BITOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(31, Token.DELPROP);
      assertEquals(23, Token.MUL);
      assertEquals(304, Token.QMARK);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(114, Token.DO);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(47, Token.REGEXP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SET);
      assertEquals(122, Token.VOID);
      assertEquals(108, Token.IF);
      
      String string0 = Token.name(89);
      assertEquals("ASSIGN_BITAND", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(51);
      assertEquals("IN", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(102);
      assertEquals("INC", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(113);
      assertEquals("WHILE", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Token.name(87);
      assertEquals("ASSIGN_BITOR", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = Token.name(64);
      assertEquals("OBJECTLIT", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Token.name(19);
      assertEquals("RSH", string0);
      assertNotNull(string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(125, Token.BLOCK);
      assertEquals(24, Token.DIV);
      assertEquals(38, Token.NAME);
      assertEquals(40, Token.STRING);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(118, Token.VAR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(119, Token.WITH);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(10, Token.BITXOR);
      assertEquals(41, Token.NULL);
      assertEquals(115, Token.FOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(149, Token.CONST);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(124, Token.EMPTY);
      assertEquals(306, Token.BANG);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(120, Token.CATCH);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(304, Token.QMARK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(42, Token.THIS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(155, Token.CAST);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(302, Token.STAR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals((-1), Token.ERROR);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(29, Token.NEG);
      assertEquals(310, Token.COLON);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(110, Token.SWITCH);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(101, Token.AND);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      
      String string1 = Token.name(89);
      assertEquals("ASSIGN_BITAND", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(91);
      assertEquals("ASSIGN_RSH", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Token.name(116);
      assertEquals("BREAK", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Token.name((-1));
      assertEquals("ERROR", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = Token.name(112);
      assertEquals("DEFAULT_CASE", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Token.name((-857));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -857
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(148, Token.SET);
      assertEquals(119, Token.WITH);
      assertEquals(108, Token.IF);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(125, Token.BLOCK);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(15, Token.LE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(51, Token.IN);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(24, Token.DIV);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(29, Token.NEG);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(122, Token.VOID);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(45, Token.SHEQ);
      assertEquals(112, Token.DEFAULT);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(39, Token.NUMBER);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(47, Token.REGEXP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(33, Token.GETPROP);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(42, Token.THIS);
      assertEquals(85, Token.COMMA);
      assertEquals(304, Token.QMARK);
      assertEquals(113, Token.WHILE);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(25, Token.MOD);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(101, Token.AND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(17, Token.GE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(43, Token.FALSE);
      assertEquals(307, Token.EQUALS);
      assertEquals(31, Token.DELPROP);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(302, Token.STAR);
      assertEquals(111, Token.CASE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      
      String string0 = Token.name(38);
      assertEquals("NAME", string0);
      assertNotNull(string0);
      
      String string1 = Token.name(26);
      assertEquals("NOT", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Token.name(307);
      assertEquals("EQUALS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Token.name(147);
      assertEquals("GETTER_DEF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Token.name(208);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 208
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Token token0 = new Token();
      Token.name(27);
      Token.name(16);
      Token.name(105);
      Token.name(39);
      Token.name(93);
      // Undeclared exception!
      try { 
        Token.name((-1101));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1101
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 153;
      Token.name(302);
      // Undeclared exception!
      try { 
        Token.name(267);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 267
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Token token0 = new Token();
      int int0 = (-1);
      Token.name(98);
      Token.name(45);
      int int1 = 49;
      Token.name(108);
      Token.name(49);
      Token.name(13);
      // Undeclared exception!
      try { 
        Token.name(2314);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2314
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Token token0 = new Token();
      Token.name(125);
      Token.name(83);
      Token.name(83);
      Token.name(122);
      Token.name(47);
      Token.name(302);
      Token.name(115);
      // Undeclared exception!
      try { 
        Token.name((-3010));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3010
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}
