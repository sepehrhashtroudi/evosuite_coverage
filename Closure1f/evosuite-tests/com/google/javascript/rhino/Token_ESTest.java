/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 21:45:09 GMT 2023
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Token.name(29);
      assertNotNull(string0);
      assertEquals("NEG", string0);
      
      int int0 = (-1);
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ERROR", string1);
      
      // Undeclared exception!
      try { 
        Token.name(212);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 212
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(304, Token.QMARK);
      assertEquals(308, Token.LB);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(113, Token.WHILE);
      assertEquals(101, Token.AND);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(26, Token.NOT);
      assertEquals(100, Token.OR);
      assertEquals(147, Token.GET);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(110, Token.SWITCH);
      assertEquals(9, Token.BITOR);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(46, Token.SHNE);
      assertEquals(29, Token.NEG);
      assertEquals(112, Token.DEFAULT);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(30, Token.NEW);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(155, Token.CAST);
      assertEquals(32, Token.TYPEOF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(118, Token.VAR);
      assertEquals(148, Token.SET);
      assertEquals(38, Token.NAME);
      assertEquals(108, Token.IF);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(98, Token.HOOK);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(23, Token.MUL);
      assertEquals(125, Token.BLOCK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(126, Token.LABEL);
      assertEquals(306, Token.BANG);
      assertEquals(15, Token.LE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(51, Token.IN);
      assertEquals(35, Token.GETELEM);
      assertEquals(114, Token.DO);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(302, Token.STAR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(19, Token.RSH);
      assertEquals(111, Token.CASE);
      assertEquals(31, Token.DELPROP);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(149, Token.CONST);
      assertEquals(115, Token.FOR);
      
      String string0 = Token.name(103);
      assertNotNull(string0);
      assertEquals("DEC", string0);
      
      String string1 = Token.name(52);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("INSTANCEOF", string1);
      
      String string2 = Token.name(303);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("EOC", string2);
      
      String string3 = Token.name(37);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("CALL", string3);
      
      String string4 = Token.name(122);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("VOID", string4);
      
      // Undeclared exception!
      try { 
        Token.name(2659);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2659
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(23, Token.MUL);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(47, Token.REGEXP);
      assertEquals(40, Token.STRING);
      assertEquals(114, Token.DO);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(105, Token.FUNCTION);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(27, Token.BITNOT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(113, Token.WHILE);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(21, Token.ADD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(110, Token.SWITCH);
      assertEquals(49, Token.THROW);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(29, Token.NEG);
      assertEquals(20, Token.URSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(120, Token.CATCH);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(44, Token.TRUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(85, Token.COMMA);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(86, Token.ASSIGN);
      assertEquals(302, Token.STAR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(10, Token.BITXOR);
      assertEquals(41, Token.NULL);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(19, Token.RSH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(33, Token.GETPROP);
      assertEquals(31, Token.DELPROP);
      assertEquals(300, Token.ANNOTATION);
      
      // Undeclared exception!
      try { 
        Token.name(55);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(280);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 280
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(122, Token.VOID);
      assertEquals(310, Token.COLON);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(125, Token.BLOCK);
      assertEquals(117, Token.CONTINUE);
      assertEquals(83, Token.LP);
      assertEquals(119, Token.WITH);
      assertEquals(46, Token.SHNE);
      assertEquals(40, Token.STRING);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(108, Token.IF);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(28, Token.POS);
      assertEquals(11, Token.BITAND);
      assertEquals(303, Token.EOC);
      assertEquals(31, Token.DELPROP);
      assertEquals(14, Token.LT);
      assertEquals(132, Token.SCRIPT);
      assertEquals(85, Token.COMMA);
      assertEquals(13, Token.NE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(114, Token.DO);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(124, Token.EMPTY);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(26, Token.NOT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(18, Token.LSH);
      assertEquals(304, Token.QMARK);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(302, Token.STAR);
      assertEquals(149, Token.CONST);
      assertEquals(307, Token.EQUALS);
      assertEquals(44, Token.TRUE);
      assertEquals(21, Token.ADD);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(32, Token.TYPEOF);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(35, Token.GETELEM);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(308, Token.LB);
      assertEquals((-1), Token.ERROR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(29, Token.NEG);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(301, Token.PIPE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(113, Token.WHILE);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      
      String string0 = Token.name(87);
      assertNotNull(string0);
      assertEquals("ASSIGN_BITOR", string0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Token.name(128);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 268;
      // Undeclared exception!
      try { 
        Token.name(268);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 268
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 90;
      String string0 = Token.name(90);
      assertNotNull(string0);
      assertEquals("ASSIGN_LSH", string0);
      
      String string1 = Token.name(90);
      assertNotNull(string1);
      assertEquals("ASSIGN_LSH", string1);
      
      String string2 = Token.name(90);
      assertNotNull(string2);
      assertEquals("ASSIGN_LSH", string2);
      
      String string3 = Token.name(90);
      assertNotNull(string3);
      assertEquals("ASSIGN_LSH", string3);
      
      String string4 = Token.name(17);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("GE", string4);
      
      // Undeclared exception!
      try { 
        Token.name(268);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 268
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(304, Token.QMARK);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(155, Token.CAST);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(26, Token.NOT);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(10, Token.BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(149, Token.CONST);
      assertEquals(115, Token.FOR);
      assertEquals(19, Token.RSH);
      assertEquals(306, Token.BANG);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(126, Token.LABEL);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(119, Token.WITH);
      assertEquals(24, Token.DIV);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(103, Token.DEC);
      assertEquals(40, Token.STRING);
      assertEquals(114, Token.DO);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(105, Token.FUNCTION);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(21, Token.ADD);
      assertEquals(111, Token.CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(12, Token.EQ);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(310, Token.COLON);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(110, Token.SWITCH);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(100, Token.OR);
      assertEquals(301, Token.PIPE);
      assertEquals(147, Token.GET);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(29, Token.NEG);
      
      String string0 = Token.name(17);
      assertNotNull(string0);
      assertEquals("GE", string0);
      
      int int0 = 305;
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(132);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("SCRIPT", string2);
      
      // Undeclared exception!
      try { 
        Token.name(294);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 294
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(294);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 294
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Token.name(89);
      assertNotNull(string0);
      assertEquals("ASSIGN_BITAND", string0);
      
      String string1 = Token.name(89);
      assertNotNull(string1);
      assertEquals("ASSIGN_BITAND", string1);
      
      String string2 = Token.name(89);
      assertNotNull(string2);
      assertEquals("ASSIGN_BITAND", string2);
      
      String string3 = Token.name(89);
      assertNotNull(string3);
      assertEquals("ASSIGN_BITAND", string3);
      
      String string4 = Token.name(89);
      assertNotNull(string4);
      assertEquals("ASSIGN_BITAND", string4);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(108, Token.IF);
      assertEquals(306, Token.BANG);
      assertEquals(35, Token.GETELEM);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(21, Token.ADD);
      assertEquals(302, Token.STAR);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(12, Token.EQ);
      assertEquals(44, Token.TRUE);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(24, Token.DIV);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(23, Token.MUL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals((-1), Token.ERROR);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(46, Token.SHNE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(29, Token.NEG);
      assertEquals(105, Token.FUNCTION);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(45, Token.SHEQ);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(304, Token.QMARK);
      assertEquals(126, Token.LABEL);
      assertEquals(4, Token.RETURN);
      assertEquals(38, Token.NAME);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(16, Token.GT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(20, Token.URSH);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(113, Token.WHILE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(17, Token.GE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      
      // Undeclared exception!
      try { 
        Token.name(264);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 264
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 272;
      // Undeclared exception!
      try { 
        Token.name(272);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 272
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(46, Token.SHNE);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(9, Token.BITOR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(310, Token.COLON);
      assertEquals(47, Token.REGEXP);
      assertEquals(29, Token.NEG);
      assertEquals(117, Token.CONTINUE);
      assertEquals(39, Token.NUMBER);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(304, Token.QMARK);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(38, Token.NAME);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(35, Token.GETELEM);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(30, Token.NEW);
      assertEquals(10, Token.BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(126, Token.LABEL);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(44, Token.TRUE);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(105, Token.FUNCTION);
      assertEquals(302, Token.STAR);
      assertEquals(13, Token.NE);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(149, Token.CONST);
      assertEquals(120, Token.CATCH);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(31, Token.DELPROP);
      
      String string0 = Token.name(110);
      assertNotNull(string0);
      assertEquals("SWITCH", string0);
      
      String string1 = Token.name(89);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ASSIGN_BITAND", string1);
      
      // Undeclared exception!
      try { 
        Token.name(260);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 260
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(25, Token.MOD);
      assertEquals(86, Token.ASSIGN);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(120, Token.CATCH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(26, Token.NOT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(149, Token.CONST);
      assertEquals(32, Token.TYPEOF);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(21, Token.ADD);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(29, Token.NEG);
      assertEquals(304, Token.QMARK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(115, Token.FOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(40, Token.STRING);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(126, Token.LABEL);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(125, Token.BLOCK);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(302, Token.STAR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(307, Token.EQUALS);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(83, Token.LP);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(113, Token.WHILE);
      assertEquals(303, Token.EOC);
      assertEquals((-1), Token.ERROR);
      assertEquals(301, Token.PIPE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(108, Token.IF);
      assertEquals(85, Token.COMMA);
      assertEquals(30, Token.NEW);
      assertEquals(11, Token.BITAND);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(148, Token.SET);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(119, Token.WITH);
      assertEquals(41, Token.NULL);
      assertEquals(306, Token.BANG);
      assertEquals(12, Token.EQ);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(13, Token.NE);
      
      String string0 = Token.name(300);
      assertNotNull(string0);
      assertEquals("ANNOTATION", string0);
      
      String string1 = Token.name(30);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NEW", string1);
      
      String string2 = Token.name(119);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("WITH", string2);
      
      String string3 = Token.name(42);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("THIS", string3);
      
      String string4 = Token.name(38);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("NAME", string4);
      
      String string5 = Token.name(83);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("PARAM_LIST", string5);
      
      int int0 = 108;
      String string6 = Token.name(16);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("GT", string6);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Token.name(298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(310, Token.COLON);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(105, Token.FUNCTION);
      assertEquals(31, Token.DELPROP);
      assertEquals(49, Token.THROW);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(122, Token.VOID);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(114, Token.DO);
      assertEquals(41, Token.NULL);
      assertEquals(113, Token.WHILE);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(126, Token.LABEL);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(29, Token.NEG);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(25, Token.MOD);
      assertEquals(302, Token.STAR);
      assertEquals(101, Token.AND);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(43, Token.FALSE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(120, Token.CATCH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(17, Token.GE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(26, Token.NOT);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(148, Token.SET);
      assertEquals(13, Token.NE);
      assertEquals(37, Token.CALL);
      assertEquals(11, Token.BITAND);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(38, Token.NAME);
      assertEquals(108, Token.IF);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(301, Token.PIPE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(21, Token.ADD);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      
      String string0 = Token.name(17);
      assertNotNull(string0);
      assertEquals("GE", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(46);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("SHNE", string2);
      
      String string3 = Token.name(305);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ELLIPSIS", string3);
      
      // Undeclared exception!
      try { 
        Token.name(270);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 270
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Token.name(88);
      assertNotNull(string0);
      assertEquals("ASSIGN_BITXOR", string0);
      
      // Undeclared exception!
      try { 
        Token.name(282);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 282
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 283;
      // Undeclared exception!
      try { 
        Token.name(283);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 283
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 295;
      // Undeclared exception!
      try { 
        Token.name(295);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 295
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(306, Token.BANG);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(301, Token.PIPE);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(307, Token.EQUALS);
      assertEquals(45, Token.SHEQ);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(11, Token.BITAND);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals((-1), Token.ERROR);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(42, Token.THIS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(27, Token.BITNOT);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(39, Token.NUMBER);
      assertEquals(116, Token.BREAK);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(310, Token.COLON);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(44, Token.TRUE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(105, Token.FUNCTION);
      assertEquals(110, Token.SWITCH);
      assertEquals(302, Token.STAR);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(98, Token.HOOK);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(113, Token.WHILE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      
      String string0 = Token.name((-1));
      assertNotNull(string0);
      assertEquals("ERROR", string0);
      
      String string1 = Token.name(300);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ANNOTATION", string1);
      
      String string2 = Token.name(153);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LABEL_NAME", string2);
      
      String string3 = Token.name(119);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("WITH", string3);
      
      String string4 = Token.name(42);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("THIS", string4);
      
      String string5 = Token.name(83);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("PARAM_LIST", string5);
      
      String string6 = Token.name(16);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("GT", string6);
      
      // Undeclared exception!
      try { 
        Token.name(7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(115, Token.FOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(22, Token.SUB);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(77, Token.TRY);
      assertEquals(310, Token.COLON);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(100, Token.OR);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(21, Token.ADD);
      assertEquals(155, Token.CAST);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(304, Token.QMARK);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals((-1), Token.ERROR);
      assertEquals(38, Token.NAME);
      assertEquals(17, Token.GE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(101, Token.AND);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SET);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(14, Token.LT);
      assertEquals(30, Token.NEW);
      assertEquals(13, Token.NE);
      assertEquals(40, Token.STRING);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(119, Token.WITH);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(125, Token.BLOCK);
      assertEquals(12, Token.EQ);
      assertEquals(307, Token.EQUALS);
      assertEquals(118, Token.VAR);
      assertEquals(10, Token.BITXOR);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(108, Token.IF);
      assertEquals(44, Token.TRUE);
      assertEquals(19, Token.RSH);
      assertEquals(124, Token.EMPTY);
      assertEquals(23, Token.MUL);
      assertEquals(122, Token.VOID);
      assertEquals(149, Token.CONST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(103, Token.DEC);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(114, Token.DO);
      assertEquals(31, Token.DELPROP);
      assertEquals(120, Token.CATCH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(33, Token.GETPROP);
      
      String string0 = Token.name(26);
      assertNotNull(string0);
      assertEquals("NOT", string0);
      
      String string1 = Token.name(301);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("PIPE", string1);
      
      String string2 = Token.name(85);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("COMMA", string2);
      
      // Undeclared exception!
      try { 
        Token.name(296);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 296
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(296);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 296
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(103, Token.DEC);
      assertEquals(126, Token.LABEL);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(38, Token.NAME);
      assertEquals(105, Token.FUNCTION);
      assertEquals(13, Token.NE);
      assertEquals(119, Token.WITH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(112, Token.DEFAULT);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(306, Token.BANG);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(98, Token.HOOK);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(10, Token.BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(307, Token.EQUALS);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(115, Token.FOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(302, Token.STAR);
      assertEquals(35, Token.GETELEM);
      assertEquals(83, Token.LP);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(149, Token.CONST);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(39, Token.NUMBER);
      assertEquals(304, Token.QMARK);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(42, Token.THIS);
      assertEquals(11, Token.BITAND);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(29, Token.NEG);
      assertEquals(17, Token.GE);
      assertEquals(33, Token.GETPROP);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(43, Token.FALSE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(27, Token.BITNOT);
      assertEquals(41, Token.NULL);
      assertEquals(102, Token.INC);
      assertEquals((-1), Token.ERROR);
      assertEquals(21, Token.ADD);
      assertEquals(12, Token.EQ);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      
      String string0 = Token.name(110);
      assertNotNull(string0);
      assertEquals("SWITCH", string0);
      
      // Undeclared exception!
      try { 
        Token.name(275);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 275
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals(40, Token.STRING);
      assertEquals(301, Token.PIPE);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(125, Token.BLOCK);
      assertEquals(45, Token.SHEQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(12, Token.EQ);
      assertEquals(21, Token.ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(102, Token.INC);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(122, Token.VOID);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(11, Token.BITAND);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(304, Token.QMARK);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(85, Token.COMMA);
      assertEquals(27, Token.BITNOT);
      assertEquals(115, Token.FOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(116, Token.BREAK);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(155, Token.CAST);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(44, Token.TRUE);
      assertEquals(310, Token.COLON);
      assertEquals(147, Token.GET);
      assertEquals(86, Token.ASSIGN);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(111, Token.CASE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(18, Token.LSH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(98, Token.HOOK);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      
      String string0 = Token.name(98);
      assertNotNull(string0);
      assertEquals("HOOK", string0);
      
      String string1 = Token.name(27);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BITNOT", string1);
      
      String string2 = Token.name(122);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VOID", string2);
      
      int int0 = 2812;
      String string3 = Token.name(152);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("DEBUGGER", string3);
      
      // Undeclared exception!
      try { 
        Token.name((-3208));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3208
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(66);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 66
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(304, Token.QMARK);
      assertEquals(308, Token.LB);
      assertEquals(113, Token.WHILE);
      assertEquals(26, Token.NOT);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(4, Token.RETURN);
      assertEquals(17, Token.GE);
      assertEquals(22, Token.SUB);
      assertEquals(120, Token.CATCH);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(124, Token.EMPTY);
      assertEquals(44, Token.TRUE);
      assertEquals(43, Token.FALSE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(19, Token.RSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(13, Token.NE);
      assertEquals(148, Token.SET);
      assertEquals(118, Token.VAR);
      assertEquals(108, Token.IF);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(125, Token.BLOCK);
      assertEquals(23, Token.MUL);
      assertEquals(15, Token.LE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(29, Token.NEG);
      assertEquals(100, Token.OR);
      assertEquals(9, Token.BITOR);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(122, Token.VOID);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(45, Token.SHEQ);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      
      String string0 = Token.name(304);
      assertNotNull(string0);
      assertEquals("QMARK", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(102);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("INC", string2);
      
      int int0 = 1854;
      // Undeclared exception!
      try { 
        Token.name(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(44, Token.TRUE);
      assertEquals(307, Token.EQUALS);
      assertEquals(308, Token.LB);
      assertEquals(32, Token.TYPEOF);
      assertEquals(149, Token.CONST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(39, Token.NUMBER);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(12, Token.EQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(304, Token.QMARK);
      assertEquals(126, Token.LABEL);
      assertEquals(29, Token.NEG);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(20, Token.URSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(45, Token.SHEQ);
      assertEquals(122, Token.VOID);
      assertEquals(114, Token.DO);
      assertEquals(310, Token.COLON);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(40, Token.STRING);
      assertEquals(119, Token.WITH);
      assertEquals(13, Token.NE);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(14, Token.LT);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(41, Token.NULL);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(124, Token.EMPTY);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      
      String string0 = Token.name(10);
      assertNotNull(string0);
      assertEquals("BITXOR", string0);
      
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ERROR", string1);
      
      String string2 = Token.name(115);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FOR", string2);
      
      String string3 = Token.name(304);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("QMARK", string3);
      
      String string4 = Token.name(307);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("EQUALS", string4);
      
      // Undeclared exception!
      try { 
        Token.name(1647);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1647
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(12, Token.EQ);
      assertEquals(307, Token.EQUALS);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(149, Token.CONST);
      assertEquals(302, Token.STAR);
      assertEquals(35, Token.GETELEM);
      assertEquals(110, Token.SWITCH);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(14, Token.LT);
      assertEquals(44, Token.TRUE);
      assertEquals(30, Token.NEW);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(39, Token.NUMBER);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(42, Token.THIS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(13, Token.NE);
      assertEquals(40, Token.STRING);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(28, Token.POS);
      assertEquals((-1), Token.ERROR);
      assertEquals(31, Token.DELPROP);
      assertEquals(115, Token.FOR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(117, Token.CONTINUE);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(41, Token.NULL);
      assertEquals(310, Token.COLON);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(308, Token.LB);
      assertEquals(46, Token.SHNE);
      assertEquals(122, Token.VOID);
      assertEquals(105, Token.FUNCTION);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(125, Token.BLOCK);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(38, Token.NAME);
      assertEquals(304, Token.QMARK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(47, Token.REGEXP);
      assertEquals(155, Token.CAST);
      assertEquals(119, Token.WITH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(9, Token.BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(98, Token.HOOK);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(20, Token.URSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      
      String string0 = Token.name(93);
      assertNotNull(string0);
      assertEquals("ASSIGN_ADD", string0);
      
      String string1 = Token.name(28);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("POS", string1);
      
      String string2 = Token.name(41);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NULL", string2);
      
      String string3 = Token.name(15);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("LE", string3);
      
      // Undeclared exception!
      try { 
        Token.name(228);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 228
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(46, Token.SHNE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(118, Token.VAR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(13, Token.NE);
      assertEquals(111, Token.CASE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(303, Token.EOC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(83, Token.LP);
      assertEquals(149, Token.CONST);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(33, Token.GETPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(309, Token.LC);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(39, Token.NUMBER);
      assertEquals(26, Token.NOT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(18, Token.LSH);
      assertEquals(42, Token.THIS);
      assertEquals(22, Token.SUB);
      assertEquals(101, Token.AND);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(25, Token.MOD);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(17, Token.GE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(308, Token.LB);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(85, Token.COMMA);
      assertEquals(86, Token.ASSIGN);
      assertEquals(11, Token.BITAND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(302, Token.STAR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(116, Token.BREAK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(27, Token.BITNOT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(119, Token.WITH);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(77, Token.TRY);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(20, Token.URSH);
      
      String string0 = Token.name(103);
      assertNotNull(string0);
      assertEquals("DEC", string0);
      
      String string1 = Token.name(43);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FALSE", string1);
      
      String string2 = Token.name(52);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("INSTANCEOF", string2);
      
      String string3 = Token.name(113);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("WHILE", string3);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(32, Token.TYPEOF);
      assertEquals(304, Token.QMARK);
      assertEquals(309, Token.LC);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(39, Token.NUMBER);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(120, Token.CATCH);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(115, Token.FOR);
      assertEquals((-1), Token.ERROR);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(100, Token.OR);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(111, Token.CASE);
      assertEquals(147, Token.GET);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(10, Token.BITXOR);
      assertEquals(29, Token.NEG);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(25, Token.MOD);
      assertEquals(35, Token.GETELEM);
      assertEquals(105, Token.FUNCTION);
      assertEquals(17, Token.GE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(308, Token.LB);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(40, Token.STRING);
      assertEquals(13, Token.NE);
      assertEquals(20, Token.URSH);
      assertEquals(14, Token.LT);
      assertEquals(126, Token.LABEL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(306, Token.BANG);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(45, Token.SHEQ);
      assertEquals(119, Token.WITH);
      assertEquals(102, Token.INC);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(21, Token.ADD);
      assertEquals(31, Token.DELPROP);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(19, Token.RSH);
      assertEquals(116, Token.BREAK);
      assertEquals(23, Token.MUL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(122, Token.VOID);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(85, Token.COMMA);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      
      String string0 = Token.name(17);
      assertNotNull(string0);
      assertEquals("GE", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(46);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("SHNE", string2);
      
      String string3 = Token.name(305);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ELLIPSIS", string3);
      
      String string4 = Token.name(149);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("CONST", string4);
      
      String string5 = Token.name(18);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("LSH", string5);
      
      String string6 = Token.name(155);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("CAST", string6);
      
      String string7 = Token.name(126);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("LABEL", string7);
      
      String string8 = Token.name(112);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("DEFAULT_CASE", string8);
      
      String string9 = Token.name(52);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertEquals("INSTANCEOF", string9);
      
      // Undeclared exception!
      try { 
        Token.name(274);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 274
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(35, Token.GETELEM);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(30, Token.NEW);
      assertEquals(10, Token.BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(40, Token.STRING);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(119, Token.WITH);
      assertEquals(21, Token.ADD);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(29, Token.NEG);
      assertEquals(112, Token.DEFAULT);
      assertEquals(20, Token.URSH);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(38, Token.NAME);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(101, Token.AND);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(86, Token.ASSIGN);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(149, Token.CONST);
      assertEquals(17, Token.GE);
      assertEquals(126, Token.LABEL);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(111, Token.CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(125, Token.BLOCK);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(4, Token.RETURN);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(115, Token.FOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(31, Token.DELPROP);
      assertEquals(304, Token.QMARK);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(42, Token.THIS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(28, Token.POS);
      assertEquals(33, Token.GETPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(23, Token.MUL);
      assertEquals(47, Token.REGEXP);
      assertEquals(310, Token.COLON);
      assertEquals(155, Token.CAST);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(117, Token.CONTINUE);
      assertEquals(39, Token.NUMBER);
      assertEquals(24, Token.DIV);
      assertEquals(45, Token.SHEQ);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(114, Token.DO);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      
      String string0 = Token.name(97);
      assertNotNull(string0);
      assertEquals("ASSIGN_MOD", string0);
      
      String string1 = Token.name(110);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SWITCH", string1);
      
      String string2 = Token.name(89);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ASSIGN_BITAND", string2);
      
      // Undeclared exception!
      try { 
        Token.name(274);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 274
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(18, Token.LSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(304, Token.QMARK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(33, Token.GETPROP);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(120, Token.CATCH);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(25, Token.MOD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(308, Token.LB);
      assertEquals(124, Token.EMPTY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(44, Token.TRUE);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(302, Token.STAR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(307, Token.EQUALS);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(12, Token.EQ);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(108, Token.IF);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(148, Token.SET);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(310, Token.COLON);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(119, Token.WITH);
      assertEquals(100, Token.OR);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(155, Token.CAST);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(114, Token.DO);
      assertEquals(126, Token.LABEL);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(306, Token.BANG);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(35, Token.GETELEM);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(10, Token.BITXOR);
      assertEquals(41, Token.NULL);
      assertEquals(28, Token.POS);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(40, Token.STRING);
      assertEquals(149, Token.CONST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      
      String string0 = Token.name(18);
      assertNotNull(string0);
      assertEquals("LSH", string0);
      
      String string1 = Token.name(9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BITOR", string1);
      
      String string2 = Token.name(30);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NEW", string2);
      
      String string3 = Token.name(26);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("NOT", string3);
      
      String string4 = Token.name(9);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("BITOR", string4);
      
      String string5 = Token.name(93);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("ASSIGN_ADD", string5);
      
      String string6 = Token.name(40);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("STRING", string6);
      
      // Undeclared exception!
      try { 
        Token.name(1175);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1175
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(23, Token.MUL);
      assertEquals(105, Token.FUNCTION);
      assertEquals(47, Token.REGEXP);
      assertEquals(24, Token.DIV);
      assertEquals(122, Token.VOID);
      assertEquals(103, Token.DEC);
      assertEquals(46, Token.SHNE);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(38, Token.NAME);
      assertEquals(40, Token.STRING);
      assertEquals(31, Token.DELPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(45, Token.SHEQ);
      assertEquals(115, Token.FOR);
      assertEquals((-1), Token.ERROR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(28, Token.POS);
      assertEquals(112, Token.DEFAULT);
      assertEquals(119, Token.WITH);
      assertEquals(310, Token.COLON);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(306, Token.BANG);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(124, Token.EMPTY);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(77, Token.TRY);
      assertEquals(33, Token.GETPROP);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(149, Token.CONST);
      assertEquals(100, Token.OR);
      assertEquals(32, Token.TYPEOF);
      assertEquals(132, Token.SCRIPT);
      assertEquals(147, Token.GET);
      assertEquals(304, Token.QMARK);
      assertEquals(110, Token.SWITCH);
      assertEquals(102, Token.INC);
      assertEquals(42, Token.THIS);
      assertEquals(21, Token.ADD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(308, Token.LB);
      assertEquals(113, Token.WHILE);
      assertEquals(10, Token.BITXOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(37, Token.CALL);
      assertEquals(301, Token.PIPE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(302, Token.STAR);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(307, Token.EQUALS);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      
      String string0 = Token.name(101);
      assertNotNull(string0);
      assertEquals("AND", string0);
      
      String string1 = Token.name(39);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NUMBER", string1);
      
      String string2 = Token.name(23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MUL", string2);
      
      // Undeclared exception!
      try { 
        Token.name(8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(43, Token.FALSE);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(301, Token.PIPE);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(29, Token.NEG);
      assertEquals(149, Token.CONST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(40, Token.STRING);
      assertEquals(155, Token.CAST);
      assertEquals(102, Token.INC);
      assertEquals(24, Token.DIV);
      assertEquals(39, Token.NUMBER);
      assertEquals(103, Token.DEC);
      assertEquals(120, Token.CATCH);
      assertEquals(45, Token.SHEQ);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(33, Token.GETPROP);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(46, Token.SHNE);
      assertEquals(13, Token.NE);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(122, Token.VOID);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      assertEquals(11, Token.BITAND);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(111, Token.CASE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(27, Token.BITNOT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(113, Token.WHILE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(42, Token.THIS);
      assertEquals(31, Token.DELPROP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(112, Token.DEFAULT);
      assertEquals(26, Token.NOT);
      assertEquals(17, Token.GE);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(105, Token.FUNCTION);
      assertEquals(304, Token.QMARK);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(44, Token.TRUE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(302, Token.STAR);
      assertEquals(308, Token.LB);
      assertEquals(307, Token.EQUALS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      
      String string0 = Token.name(97);
      assertNotNull(string0);
      assertEquals("ASSIGN_MOD", string0);
      
      String string1 = Token.name(110);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SWITCH", string1);
      
      String string2 = Token.name(116);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("BREAK", string2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 132;
      String string0 = Token.name(132);
      assertNotNull(string0);
      assertEquals("SCRIPT", string0);
      
      int int1 = 46;
      String string1 = Token.name(46);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SHNE", string1);
      
      String string2 = Token.name(132);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("SCRIPT", string2);
      
      int int2 = 292;
      // Undeclared exception!
      try { 
        Token.name(292);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 292
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(112, Token.DEFAULT);
      assertEquals(47, Token.REGEXP);
      assertEquals(23, Token.MUL);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(9, Token.BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(105, Token.FUNCTION);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(122, Token.VOID);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(27, Token.BITNOT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(113, Token.WHILE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(12, Token.EQ);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(301, Token.PIPE);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(38, Token.NAME);
      assertEquals(29, Token.NEG);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GET);
      assertEquals(304, Token.QMARK);
      assertEquals(20, Token.URSH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(39, Token.NUMBER);
      assertEquals(120, Token.CATCH);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(18, Token.LSH);
      assertEquals(309, Token.LC);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(302, Token.STAR);
      assertEquals(44, Token.TRUE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(11, Token.BITAND);
      assertEquals(22, Token.SUB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(85, Token.COMMA);
      assertEquals(308, Token.LB);
      assertEquals(307, Token.EQUALS);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(41, Token.NULL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      
      String string0 = Token.name(110);
      assertNotNull(string0);
      assertEquals("SWITCH", string0);
      
      // Undeclared exception!
      try { 
        Token.name(292);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 292
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Token.name(29);
      assertNotNull(string0);
      assertEquals("NEG", string0);
      
      int int0 = (-1);
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ERROR", string1);
      
      String string2 = Token.name((-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("ERROR", string2);
      
      // Undeclared exception!
      try { 
        Token.name(215);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 215
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 132;
      String string0 = Token.name(132);
      assertNotNull(string0);
      assertEquals("SCRIPT", string0);
      
      int int1 = 46;
      String string1 = Token.name(46);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SHNE", string1);
      
      int int2 = (-682);
      // Undeclared exception!
      try { 
        Token.name((-682));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -682
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(310, Token.COLON);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(31, Token.DELPROP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(47, Token.REGEXP);
      assertEquals(115, Token.FOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(33, Token.GETPROP);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(41, Token.NULL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(23, Token.MUL);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(120, Token.CATCH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(306, Token.BANG);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(44, Token.TRUE);
      assertEquals(100, Token.OR);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(43, Token.FALSE);
      assertEquals(302, Token.STAR);
      assertEquals(110, Token.SWITCH);
      assertEquals(132, Token.SCRIPT);
      assertEquals(307, Token.EQUALS);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(42, Token.THIS);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(32, Token.TYPEOF);
      assertEquals(149, Token.CONST);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(37, Token.CALL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(304, Token.QMARK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(308, Token.LB);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(113, Token.WHILE);
      assertEquals(98, Token.HOOK);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(125, Token.BLOCK);
      assertEquals(9, Token.BITOR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(309, Token.LC);
      
      String string0 = Token.name(18);
      assertNotNull(string0);
      assertEquals("LSH", string0);
      
      String string1 = Token.name(25);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MOD", string1);
      
      String string2 = Token.name(30);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("NEW", string2);
      
      String string3 = Token.name(26);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("NOT", string3);
      
      // Undeclared exception!
      try { 
        Token.name(1883);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1883
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 188;
      // Undeclared exception!
      try { 
        Token.name(188);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 188
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 287;
      // Undeclared exception!
      try { 
        Token.name(287);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 287
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(43, Token.FALSE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(110, Token.SWITCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(102, Token.INC);
      assertEquals(10, Token.BITXOR);
      assertEquals(21, Token.ADD);
      assertEquals(12, Token.EQ);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(39, Token.NUMBER);
      assertEquals(86, Token.ASSIGN);
      assertEquals(14, Token.LT);
      assertEquals(44, Token.TRUE);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(13, Token.NE);
      assertEquals(51, Token.IN);
      assertEquals(42, Token.THIS);
      assertEquals(15, Token.LE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(118, Token.VAR);
      assertEquals(114, Token.DO);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(19, Token.RSH);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(310, Token.COLON);
      assertEquals(41, Token.NULL);
      assertEquals(4, Token.RETURN);
      assertEquals(115, Token.FOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(116, Token.BREAK);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(27, Token.BITNOT);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(38, Token.NAME);
      assertEquals(22, Token.SUB);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(309, Token.LC);
      assertEquals(18, Token.LSH);
      assertEquals(119, Token.WITH);
      assertEquals(126, Token.LABEL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(45, Token.SHEQ);
      assertEquals(16, Token.GT);
      assertEquals(47, Token.REGEXP);
      assertEquals(26, Token.NOT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(77, Token.TRY);
      assertEquals(112, Token.DEFAULT);
      assertEquals(49, Token.THROW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(29, Token.NEG);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(304, Token.QMARK);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      
      String string0 = Token.name(46);
      assertNotNull(string0);
      assertEquals("SHNE", string0);
      
      String string1 = Token.name(126);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LABEL", string1);
      
      String string2 = Token.name(49);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("THROW", string2);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(266);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 266
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(119, Token.WITH);
      assertEquals(306, Token.BANG);
      assertEquals(13, Token.NE);
      assertEquals(148, Token.SET);
      assertEquals(118, Token.VAR);
      assertEquals(108, Token.IF);
      assertEquals(38, Token.NAME);
      assertEquals(20, Token.URSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(23, Token.MUL);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(98, Token.HOOK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(100, Token.OR);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(101, Token.AND);
      assertEquals(122, Token.VOID);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(46, Token.SHNE);
      assertEquals(27, Token.BITNOT);
      assertEquals(45, Token.SHEQ);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(12, Token.EQ);
      assertEquals(39, Token.NUMBER);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(21, Token.ADD);
      assertEquals(155, Token.CAST);
      assertEquals(32, Token.TYPEOF);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(11, Token.BITAND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(304, Token.QMARK);
      assertEquals(309, Token.LC);
      assertEquals(41, Token.NULL);
      assertEquals(26, Token.NOT);
      assertEquals(113, Token.WHILE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(17, Token.GE);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(19, Token.RSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(44, Token.TRUE);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(28, Token.POS);
      assertEquals(10, Token.BITXOR);
      assertEquals(303, Token.EOC);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      
      String string0 = Token.name(307);
      assertNotNull(string0);
      assertEquals("EQUALS", string0);
      
      String string1 = Token.name(103);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DEC", string1);
      
      String string2 = Token.name(108);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IF", string2);
      
      String string3 = Token.name(108);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("IF", string3);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(281);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 281
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 273;
      // Undeclared exception!
      try { 
        Token.name(273);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 273
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(9, Token.BITOR);
      assertEquals(40, Token.STRING);
      assertEquals(20, Token.URSH);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(113, Token.WHILE);
      assertEquals(28, Token.POS);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(115, Token.FOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(37, Token.CALL);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(10, Token.BITXOR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(302, Token.STAR);
      assertEquals(126, Token.LABEL);
      assertEquals(44, Token.TRUE);
      assertEquals(22, Token.SUB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(308, Token.LB);
      assertEquals(125, Token.BLOCK);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(39, Token.NUMBER);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(155, Token.CAST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(33, Token.GETPROP);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(149, Token.CONST);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(304, Token.QMARK);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(41, Token.NULL);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(12, Token.EQ);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(306, Token.BANG);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(85, Token.COMMA);
      assertEquals(46, Token.SHNE);
      assertEquals(11, Token.BITAND);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      
      String string0 = Token.name(91);
      assertNotNull(string0);
      assertEquals("ASSIGN_RSH", string0);
      
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ERROR", string1);
      
      // Undeclared exception!
      try { 
        Token.name(277);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 277
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 271;
      int int1 = 277;
      // Undeclared exception!
      try { 
        Token.name(277);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 277
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Token.name(12);
      assertNotNull(string0);
      assertEquals("EQ", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(155, Token.CAST);
      assertEquals(29, Token.NEG);
      assertEquals(86, Token.ASSIGN);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(100, Token.OR);
      assertEquals(302, Token.STAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(42, Token.THIS);
      assertEquals(149, Token.CONST);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(21, Token.ADD);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(39, Token.NUMBER);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals((-1), Token.ERROR);
      assertEquals(308, Token.LB);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(38, Token.NAME);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(301, Token.PIPE);
      assertEquals(113, Token.WHILE);
      assertEquals(309, Token.LC);
      assertEquals(37, Token.CALL);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(19, Token.RSH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(49, Token.THROW);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(125, Token.BLOCK);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(303, Token.EOC);
      assertEquals(111, Token.CASE);
      assertEquals(83, Token.LP);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(108, Token.IF);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(31, Token.DELPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(41, Token.NULL);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(120, Token.CATCH);
      assertEquals(114, Token.DO);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(97, Token.ASSIGN_MOD);
      
      // Undeclared exception!
      try { 
        Token.name(293);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 293
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Token.name(100);
      assertNotNull(string0);
      assertEquals("OR", string0);
      
      String string1 = Token.name(100);
      assertNotNull(string1);
      assertEquals("OR", string1);
      
      // Undeclared exception!
      try { 
        Token.name(293);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 293
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(126, Token.LABEL);
      assertEquals(24, Token.DIV);
      assertEquals(301, Token.PIPE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(310, Token.COLON);
      assertEquals(119, Token.WITH);
      assertEquals(49, Token.THROW);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(149, Token.CONST);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(307, Token.EQUALS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(125, Token.BLOCK);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(302, Token.STAR);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(155, Token.CAST);
      assertEquals(39, Token.NUMBER);
      assertEquals(25, Token.MOD);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(101, Token.AND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(17, Token.GE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(29, Token.NEG);
      assertEquals(37, Token.CALL);
      assertEquals(33, Token.GETPROP);
      assertEquals(77, Token.TRY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(42, Token.THIS);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(41, Token.NULL);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(11, Token.BITAND);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(118, Token.VAR);
      assertEquals(85, Token.COMMA);
      assertEquals(13, Token.NE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      
      String string0 = Token.name(122);
      assertNotNull(string0);
      assertEquals("VOID", string0);
      
      int int0 = (-1);
      String string1 = Token.name(102);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("INC", string1);
      
      String string2 = Token.name(118);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VAR", string2);
      
      String string3 = Token.name((-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ERROR", string3);
      
      int int1 = 1863;
      // Undeclared exception!
      try { 
        Token.name(1617);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1617
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Token.name((-1));
      assertNotNull(string0);
      assertEquals("ERROR", string0);
      
      // Undeclared exception!
      try { 
        Token.name(269);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 269
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(26, Token.NOT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(37, Token.CALL);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(28, Token.POS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(10, Token.BITXOR);
      assertEquals(4, Token.RETURN);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(115, Token.FOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(35, Token.GETELEM);
      assertEquals(302, Token.STAR);
      assertEquals(149, Token.CONST);
      assertEquals(307, Token.EQUALS);
      assertEquals(125, Token.BLOCK);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(114, Token.DO);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(113, Token.WHILE);
      assertEquals(49, Token.THROW);
      assertEquals(301, Token.PIPE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals((-1), Token.ERROR);
      assertEquals(85, Token.COMMA);
      assertEquals(30, Token.NEW);
      assertEquals(11, Token.BITAND);
      assertEquals(306, Token.BANG);
      assertEquals(102, Token.INC);
      assertEquals(12, Token.EQ);
      assertEquals(119, Token.WITH);
      assertEquals(21, Token.ADD);
      assertEquals(41, Token.NULL);
      assertEquals(14, Token.LT);
      assertEquals(118, Token.VAR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(13, Token.NE);
      assertEquals(116, Token.BREAK);
      assertEquals(122, Token.VOID);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(39, Token.NUMBER);
      assertEquals(46, Token.SHNE);
      
      String string0 = Token.name(108);
      assertNotNull(string0);
      assertEquals("IF", string0);
      
      String string1 = Token.name(44);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TRUE", string1);
      
      String string2 = Token.name(38);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("NAME", string2);
      
      String string3 = Token.name(148);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SETTER_DEF", string3);
      
      String string4 = Token.name(92);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ASSIGN_URSH", string4);
      
      String string5 = Token.name(147);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("GETTER_DEF", string5);
      
      String string6 = Token.name(43);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("FALSE", string6);
      
      String string7 = Token.name(105);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("FUNCTION", string7);
      
      int int0 = 3364;
      // Undeclared exception!
      try { 
        Token.name(269);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 269
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(29, Token.NEG);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(16, Token.GT);
      assertEquals(120, Token.CATCH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(39, Token.NUMBER);
      assertEquals(43, Token.FALSE);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(33, Token.GETPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(304, Token.QMARK);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(149, Token.CONST);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(42, Token.THIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(98, Token.HOOK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(307, Token.EQUALS);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(9, Token.BITOR);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(20, Token.URSH);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(301, Token.PIPE);
      assertEquals(40, Token.STRING);
      assertEquals(117, Token.CONTINUE);
      assertEquals((-1), Token.ERROR);
      assertEquals(45, Token.SHEQ);
      assertEquals(310, Token.COLON);
      assertEquals(119, Token.WITH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(27, Token.BITNOT);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(306, Token.BANG);
      assertEquals(30, Token.NEW);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(46, Token.SHNE);
      assertEquals(41, Token.NULL);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      
      String string0 = Token.name(24);
      assertNotNull(string0);
      assertEquals("DIV", string0);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 141;
      // Undeclared exception!
      try { 
        Token.name(141);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 141
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(29, Token.NEG);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(43, Token.FALSE);
      assertEquals(39, Token.NUMBER);
      assertEquals(101, Token.AND);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(304, Token.QMARK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(10, Token.BITXOR);
      assertEquals(21, Token.ADD);
      assertEquals(12, Token.EQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(155, Token.CAST);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(42, Token.THIS);
      assertEquals(308, Token.LB);
      assertEquals(301, Token.PIPE);
      assertEquals(35, Token.GETELEM);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(113, Token.WHILE);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(307, Token.EQUALS);
      assertEquals(309, Token.LC);
      assertEquals(126, Token.LABEL);
      assertEquals(111, Token.CASE);
      assertEquals(16, Token.GT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(310, Token.COLON);
      assertEquals(122, Token.VOID);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(31, Token.DELPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(40, Token.STRING);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(83, Token.LP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(148, Token.SET);
      assertEquals(306, Token.BANG);
      assertEquals(33, Token.GETPROP);
      assertEquals(116, Token.BREAK);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(108, Token.IF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(27, Token.BITNOT);
      assertEquals(30, Token.NEW);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(103, Token.DEC);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(14, Token.LT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(118, Token.VAR);
      
      // Undeclared exception!
      try { 
        Token.name(5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 262;
      // Undeclared exception!
      try { 
        Token.name(262);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 262
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(105, Token.FUNCTION);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(20, Token.URSH);
      assertEquals(4, Token.RETURN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(301, Token.PIPE);
      assertEquals(126, Token.LABEL);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(113, Token.WHILE);
      assertEquals(9, Token.BITOR);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(14, Token.LT);
      assertEquals(85, Token.COMMA);
      assertEquals(13, Token.NE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(102, Token.INC);
      assertEquals(119, Token.WITH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(21, Token.ADD);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(30, Token.NEW);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(100, Token.OR);
      assertEquals(42, Token.THIS);
      assertEquals(302, Token.STAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(43, Token.FALSE);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(16, Token.GT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(98, Token.HOOK);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(308, Token.LB);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(149, Token.CONST);
      assertEquals(28, Token.POS);
      assertEquals(44, Token.TRUE);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.PARAM_LIST);
      
      String string0 = Token.name(17);
      assertNotNull(string0);
      assertEquals("GE", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(46);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("SHNE", string2);
      
      // Undeclared exception!
      try { 
        Token.name(262);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 262
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(310, Token.COLON);
      assertEquals(105, Token.FUNCTION);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(38, Token.NAME);
      assertEquals((-1), Token.ERROR);
      assertEquals(31, Token.DELPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(113, Token.WHILE);
      assertEquals(20, Token.URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(301, Token.PIPE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(98, Token.HOOK);
      assertEquals(115, Token.FOR);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(10, Token.BITXOR);
      assertEquals(302, Token.STAR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(101, Token.AND);
      assertEquals(110, Token.SWITCH);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(149, Token.CONST);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(155, Token.CAST);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(102, Token.INC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(304, Token.QMARK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(100, Token.OR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(33, Token.GETPROP);
      assertEquals(85, Token.COMMA);
      assertEquals(306, Token.BANG);
      assertEquals(11, Token.BITAND);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(119, Token.WITH);
      assertEquals(12, Token.EQ);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(39, Token.NUMBER);
      assertEquals(14, Token.LT);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(46, Token.SHNE);
      
      String string0 = Token.name(96);
      assertNotNull(string0);
      assertEquals("ASSIGN_DIV", string0);
      
      String string1 = Token.name(125);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BLOCK", string1);
      
      String string2 = Token.name(113);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("WHILE", string2);
      
      String string3 = Token.name(103);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("DEC", string3);
      
      // Undeclared exception!
      try { 
        Token.name(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(304, Token.QMARK);
      assertEquals(302, Token.STAR);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(37, Token.CALL);
      assertEquals(43, Token.FALSE);
      assertEquals(22, Token.SUB);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(124, Token.EMPTY);
      assertEquals(26, Token.NOT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(14, Token.LT);
      assertEquals((-1), Token.ERROR);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(310, Token.COLON);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals(49, Token.THROW);
      assertEquals(125, Token.BLOCK);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(13, Token.NE);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(4, Token.RETURN);
      assertEquals(306, Token.BANG);
      assertEquals(41, Token.NULL);
      assertEquals(126, Token.LABEL);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(149, Token.CONST);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(40, Token.STRING);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      
      String string0 = Token.name(304);
      assertNotNull(string0);
      assertEquals("QMARK", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(102);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("INC", string2);
      
      int int0 = 1861;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(148, Token.SET);
      assertEquals(306, Token.BANG);
      assertEquals(35, Token.GETELEM);
      assertEquals(98, Token.HOOK);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(38, Token.NAME);
      assertEquals(10, Token.BITXOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(12, Token.EQ);
      assertEquals(149, Token.CONST);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(40, Token.STRING);
      assertEquals(119, Token.WITH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(29, Token.NEG);
      assertEquals(105, Token.FUNCTION);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(307, Token.EQUALS);
      assertEquals(309, Token.LC);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(302, Token.STAR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(33, Token.GETPROP);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(304, Token.QMARK);
      assertEquals(303, Token.EOC);
      assertEquals(28, Token.POS);
      assertEquals(31, Token.DELPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(155, Token.CAST);
      assertEquals(83, Token.LP);
      assertEquals(310, Token.COLON);
      assertEquals(42, Token.THIS);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(43, Token.FALSE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(19, Token.RSH);
      assertEquals(120, Token.CATCH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(14, Token.LT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      
      String string0 = Token.name(10);
      assertNotNull(string0);
      assertEquals("BITXOR", string0);
      
      String string1 = Token.name(44);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TRUE", string1);
      
      // Undeclared exception!
      try { 
        Token.name(2721);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2721
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Token.name(13);
      assertNotNull(string0);
      assertEquals("NE", string0);
      
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ERROR", string1);
      
      String string2 = Token.name((-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("ERROR", string2);
      
      String string3 = Token.name(13);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NE", string3);
      
      String string4 = Token.name((-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ERROR", string4);
      
      // Undeclared exception!
      try { 
        Token.name((-2645));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2645
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(304, Token.QMARK);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(39, Token.NUMBER);
      assertEquals(33, Token.GETPROP);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(101, Token.AND);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(4, Token.RETURN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(11, Token.BITAND);
      assertEquals(22, Token.SUB);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(18, Token.LSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(9, Token.BITOR);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(46, Token.SHNE);
      assertEquals(29, Token.NEG);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(30, Token.NEW);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(310, Token.COLON);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(119, Token.WITH);
      assertEquals(155, Token.CAST);
      assertEquals(21, Token.ADD);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(301, Token.PIPE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(23, Token.MUL);
      assertEquals(105, Token.FUNCTION);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(306, Token.BANG);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(114, Token.DO);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(307, Token.EQUALS);
      assertEquals(124, Token.EMPTY);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(302, Token.STAR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(19, Token.RSH);
      assertEquals(111, Token.CASE);
      assertEquals(44, Token.TRUE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(115, Token.FOR);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      
      String string0 = Token.name(22);
      assertNotNull(string0);
      assertEquals("SUB", string0);
      
      String string1 = Token.name(64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OBJECTLIT", string1);
      
      // Undeclared exception!
      try { 
        Token.name(630);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 630
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(29, Token.NEG);
      assertEquals(101, Token.AND);
      assertEquals(86, Token.ASSIGN);
      assertEquals(43, Token.FALSE);
      assertEquals(155, Token.CAST);
      assertEquals(149, Token.CONST);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(309, Token.LC);
      assertEquals(124, Token.EMPTY);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(16, Token.GT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(26, Token.NOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(39, Token.NUMBER);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(307, Token.EQUALS);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(148, Token.SET);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(108, Token.IF);
      assertEquals(301, Token.PIPE);
      assertEquals(119, Token.WITH);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(113, Token.WHILE);
      assertEquals(45, Token.SHEQ);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(110, Token.SWITCH);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GET);
      assertEquals(304, Token.QMARK);
      assertEquals(100, Token.OR);
      assertEquals(38, Token.NAME);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(23, Token.MUL);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(126, Token.LABEL);
      assertEquals(111, Token.CASE);
      assertEquals(125, Token.BLOCK);
      assertEquals(114, Token.DO);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(27, Token.BITNOT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(4, Token.RETURN);
      assertEquals(13, Token.NE);
      assertEquals(46, Token.SHNE);
      assertEquals(118, Token.VAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(40, Token.STRING);
      assertEquals(115, Token.FOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      
      String string0 = Token.name(105);
      assertNotNull(string0);
      assertEquals("FUNCTION", string0);
      
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ERROR", string1);
      
      String string2 = Token.name(304);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("QMARK", string2);
      
      int int0 = 1647;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(126, Token.LABEL);
      assertEquals(47, Token.REGEXP);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(105, Token.FUNCTION);
      assertEquals(13, Token.NE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(310, Token.COLON);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(40, Token.STRING);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(113, Token.WHILE);
      assertEquals(12, Token.EQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(302, Token.STAR);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(20, Token.URSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(301, Token.PIPE);
      assertEquals(29, Token.NEG);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(9, Token.BITOR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(120, Token.CATCH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(39, Token.NUMBER);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(155, Token.CAST);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(308, Token.LB);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(149, Token.CONST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(27, Token.BITNOT);
      assertEquals(115, Token.FOR);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(33, Token.GETPROP);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      
      // Undeclared exception!
      try { 
        Token.name(195);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 195
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(39, Token.NUMBER);
      assertEquals(86, Token.ASSIGN);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(29, Token.NEG);
      assertEquals(42, Token.THIS);
      assertEquals(100, Token.OR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(149, Token.CONST);
      assertEquals(44, Token.TRUE);
      assertEquals(110, Token.SWITCH);
      assertEquals(21, Token.ADD);
      assertEquals(32, Token.TYPEOF);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(10, Token.BITXOR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(30, Token.NEW);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(41, Token.NULL);
      assertEquals(116, Token.BREAK);
      assertEquals(28, Token.POS);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(31, Token.DELPROP);
      assertEquals(14, Token.LT);
      assertEquals(132, Token.SCRIPT);
      assertEquals(13, Token.NE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(51, Token.IN);
      assertEquals(33, Token.GETPROP);
      assertEquals(15, Token.LE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(114, Token.DO);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(124, Token.EMPTY);
      assertEquals(306, Token.BANG);
      assertEquals(112, Token.DEFAULT);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(38, Token.NAME);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(117, Token.CONTINUE);
      assertEquals(40, Token.STRING);
      assertEquals(46, Token.SHNE);
      assertEquals(310, Token.COLON);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(119, Token.WITH);
      assertEquals(148, Token.SET);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(113, Token.WHILE);
      assertEquals(35, Token.GETELEM);
      assertEquals(102, Token.INC);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(308, Token.LB);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(4, Token.RETURN);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(18, Token.LSH);
      assertEquals(77, Token.TRY);
      assertEquals(126, Token.LABEL);
      assertEquals(9, Token.BITOR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(309, Token.LC);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      
      String string0 = Token.name(302);
      assertNotNull(string0);
      assertEquals("STAR", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Token.name(63);
      assertNotNull(string0);
      assertEquals("ARRAYLIT", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(11, Token.BITAND);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(308, Token.LB);
      assertEquals((-1), Token.ERROR);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(41, Token.NULL);
      assertEquals(113, Token.WHILE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(18, Token.LSH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(26, Token.NOT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(44, Token.TRUE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(111, Token.CASE);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SET);
      assertEquals(35, Token.GETELEM);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(301, Token.PIPE);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(38, Token.NAME);
      assertEquals(14, Token.LT);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(118, Token.VAR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(43, Token.FALSE);
      assertEquals(24, Token.DIV);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(124, Token.EMPTY);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(29, Token.NEG);
      assertEquals(101, Token.AND);
      assertEquals(310, Token.COLON);
      assertEquals(49, Token.THROW);
      assertEquals(155, Token.CAST);
      assertEquals(112, Token.DEFAULT);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(46, Token.SHNE);
      assertEquals(122, Token.VOID);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(21, Token.ADD);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(267);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 267
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(38, Token.NAME);
      assertEquals(132, Token.SCRIPT);
      assertEquals(20, Token.URSH);
      assertEquals(114, Token.DO);
      assertEquals(126, Token.LABEL);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(24, Token.DIV);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(98, Token.HOOK);
      assertEquals(43, Token.FALSE);
      assertEquals(306, Token.BANG);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(23, Token.MUL);
      assertEquals(49, Token.THROW);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(122, Token.VOID);
      assertEquals(29, Token.NEG);
      assertEquals(47, Token.REGEXP);
      assertEquals(147, Token.GET);
      assertEquals(46, Token.SHNE);
      assertEquals(110, Token.SWITCH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(116, Token.BREAK);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(39, Token.NUMBER);
      assertEquals(30, Token.NEW);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(308, Token.LB);
      assertEquals(41, Token.NULL);
      assertEquals((-1), Token.ERROR);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(31, Token.DELPROP);
      assertEquals(22, Token.SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(304, Token.QMARK);
      assertEquals(4, Token.RETURN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(18, Token.LSH);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(113, Token.WHILE);
      assertEquals(309, Token.LC);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(25, Token.MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(19, Token.RSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(105, Token.FUNCTION);
      assertEquals(302, Token.STAR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(125, Token.BLOCK);
      assertEquals(307, Token.EQUALS);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(149, Token.CONST);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(44, Token.TRUE);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      
      String string0 = Token.name(114);
      assertNotNull(string0);
      assertEquals("DO", string0);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 104;
      // Undeclared exception!
      try { 
        Token.name(104);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(21, Token.ADD);
      assertEquals(307, Token.EQUALS);
      assertEquals(10, Token.BITXOR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(12, Token.EQ);
      assertEquals(43, Token.FALSE);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(86, Token.ASSIGN);
      assertEquals(306, Token.BANG);
      assertEquals(44, Token.TRUE);
      assertEquals(14, Token.LT);
      assertEquals(124, Token.EMPTY);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(35, Token.GETELEM);
      assertEquals(302, Token.STAR);
      assertEquals(118, Token.VAR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(15, Token.LE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(51, Token.IN);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(16, Token.GT);
      assertEquals(38, Token.NAME);
      assertEquals(26, Token.NOT);
      assertEquals(304, Token.QMARK);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(101, Token.AND);
      assertEquals(39, Token.NUMBER);
      assertEquals(25, Token.MOD);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(100, Token.OR);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(47, Token.REGEXP);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(119, Token.WITH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(4, Token.RETURN);
      assertEquals(28, Token.POS);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(31, Token.DELPROP);
      assertEquals(111, Token.CASE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(9, Token.BITOR);
      assertEquals(308, Token.LB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(46, Token.SHNE);
      assertEquals(122, Token.VOID);
      assertEquals(105, Token.FUNCTION);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(125, Token.BLOCK);
      assertEquals(42, Token.THIS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(303, Token.EOC);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      
      String string0 = Token.name(86);
      assertNotNull(string0);
      assertEquals("ASSIGN", string0);
      
      String string1 = Token.name(117);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CONTINUE", string1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(10, Token.BITXOR);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(149, Token.CONST);
      assertEquals(98, Token.HOOK);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(12, Token.EQ);
      assertEquals(124, Token.EMPTY);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(35, Token.GETELEM);
      assertEquals(306, Token.BANG);
      assertEquals(77, Token.TRY);
      assertEquals(110, Token.SWITCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(29, Token.NEG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(304, Token.QMARK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(120, Token.CATCH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(118, Token.VAR);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(155, Token.CAST);
      assertEquals(119, Token.WITH);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      assertEquals(11, Token.BITAND);
      assertEquals(148, Token.SET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(122, Token.VOID);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(85, Token.COMMA);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(39, Token.NUMBER);
      assertEquals(46, Token.SHNE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals((-1), Token.ERROR);
      assertEquals(4, Token.RETURN);
      assertEquals(31, Token.DELPROP);
      assertEquals(113, Token.WHILE);
      assertEquals(83, Token.LP);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(117, Token.CONTINUE);
      assertEquals(310, Token.COLON);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(49, Token.THROW);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(42, Token.THIS);
      assertEquals(125, Token.BLOCK);
      assertEquals(40, Token.STRING);
      assertEquals(17, Token.GE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(126, Token.LABEL);
      assertEquals(26, Token.NOT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(307, Token.EQUALS);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      
      String string0 = Token.name(306);
      assertNotNull(string0);
      assertEquals("BANG", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(116, Token.BREAK);
      assertEquals(31, Token.DELPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(310, Token.COLON);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(117, Token.CONTINUE);
      assertEquals(45, Token.SHEQ);
      assertEquals(28, Token.POS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(42, Token.THIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(39, Token.NUMBER);
      assertEquals(11, Token.BITAND);
      assertEquals(306, Token.BANG);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(124, Token.EMPTY);
      assertEquals(85, Token.COMMA);
      assertEquals(13, Token.NE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(118, Token.VAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(10, Token.BITXOR);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(132, Token.SCRIPT);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(30, Token.NEW);
      assertEquals(307, Token.EQUALS);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(43, Token.FALSE);
      assertEquals(44, Token.TRUE);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(40, Token.STRING);
      assertEquals(155, Token.CAST);
      assertEquals(149, Token.CONST);
      assertEquals(119, Token.WITH);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(304, Token.QMARK);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(125, Token.BLOCK);
      assertEquals(38, Token.NAME);
      assertEquals(17, Token.GE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(20, Token.URSH);
      assertEquals(49, Token.THROW);
      assertEquals(301, Token.PIPE);
      assertEquals(77, Token.TRY);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(18, Token.LSH);
      
      String string0 = Token.name(101);
      assertNotNull(string0);
      assertEquals("AND", string0);
      
      // Undeclared exception!
      try { 
        Token.name(825);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 825
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(13, Token.NE);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(40, Token.STRING);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(47, Token.REGEXP);
      assertEquals(12, Token.EQ);
      assertEquals(105, Token.FUNCTION);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(307, Token.EQUALS);
      assertEquals(46, Token.SHNE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(310, Token.COLON);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(113, Token.WHILE);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(42, Token.THIS);
      assertEquals(85, Token.COMMA);
      assertEquals(32, Token.TYPEOF);
      assertEquals(11, Token.BITAND);
      assertEquals(22, Token.SUB);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(116, Token.BREAK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(27, Token.BITNOT);
      assertEquals(308, Token.LB);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(41, Token.NULL);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(24, Token.DIV);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(132, Token.SCRIPT);
      assertEquals(19, Token.RSH);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      
      String string0 = Token.name(92);
      assertNotNull(string0);
      assertEquals("ASSIGN_URSH", string0);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(101, Token.AND);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(42, Token.THIS);
      assertEquals(155, Token.CAST);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(16, Token.GT);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(309, Token.LC);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(100, Token.OR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GET);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(110, Token.SWITCH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(304, Token.QMARK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(77, Token.TRY);
      assertEquals(33, Token.GETPROP);
      assertEquals(29, Token.NEG);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(30, Token.NEW);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(21, Token.ADD);
      assertEquals(306, Token.BANG);
      assertEquals(102, Token.INC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(41, Token.NULL);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(11, Token.BITAND);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(118, Token.VAR);
      assertEquals(85, Token.COMMA);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(112, Token.DEFAULT);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(23, Token.MUL);
      assertEquals(125, Token.BLOCK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(114, Token.DO);
      assertEquals(117, Token.CONTINUE);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(310, Token.COLON);
      assertEquals(38, Token.NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(49, Token.THROW);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(98, Token.HOOK);
      assertEquals(113, Token.WHILE);
      assertEquals(10, Token.BITXOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(303, Token.EOC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(35, Token.GETELEM);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(302, Token.STAR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      
      String string0 = Token.name(98);
      assertNotNull(string0);
      assertEquals("HOOK", string0);
      
      String string1 = Token.name(4);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("RETURN", string1);
      
      String string2 = Token.name(122);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("VOID", string2);
      
      int int0 = 2812;
      String string3 = Token.name(152);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("DEBUGGER", string3);
      
      // Undeclared exception!
      try { 
        Token.name((-3208));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3208
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 171;
      // Undeclared exception!
      try { 
        Token.name(171);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 171
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(38, Token.NAME);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(14, Token.LT);
      assertEquals(301, Token.PIPE);
      assertEquals(13, Token.NE);
      assertEquals(20, Token.URSH);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(30, Token.NEW);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(12, Token.EQ);
      assertEquals(119, Token.WITH);
      assertEquals(10, Token.BITXOR);
      assertEquals(47, Token.REGEXP);
      assertEquals(40, Token.STRING);
      assertEquals(45, Token.SHEQ);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(85, Token.COMMA);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      assertEquals(23, Token.MUL);
      assertEquals(124, Token.EMPTY);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(41, Token.NULL);
      assertEquals(114, Token.DO);
      assertEquals(304, Token.QMARK);
      assertEquals(22, Token.SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(42, Token.THIS);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(28, Token.POS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(307, Token.EQUALS);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(302, Token.STAR);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(113, Token.WHILE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(29, Token.NEG);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(49, Token.THROW);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(77, Token.TRY);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(98, Token.HOOK);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(16, Token.GT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(309, Token.LC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(26, Token.NOT);
      
      String string0 = Token.name(309);
      assertNotNull(string0);
      assertEquals("LC", string0);
      
      String string1 = Token.name(125);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BLOCK", string1);
      
      // Undeclared exception!
      try { 
        Token.name((-498));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -498
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Token.name(20);
      assertNotNull(string0);
      assertEquals("URSH", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(155, Token.CAST);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(110, Token.SWITCH);
      assertEquals(149, Token.CONST);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(32, Token.TYPEOF);
      assertEquals(10, Token.BITXOR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(113, Token.WHILE);
      assertEquals(35, Token.GETELEM);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(307, Token.EQUALS);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(302, Token.STAR);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(29, Token.NEG);
      assertEquals(20, Token.URSH);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(101, Token.AND);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(45, Token.SHEQ);
      assertEquals(112, Token.DEFAULT);
      assertEquals(114, Token.DO);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(14, Token.LT);
      assertEquals(310, Token.COLON);
      assertEquals(40, Token.STRING);
      assertEquals(119, Token.WITH);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(115, Token.FOR);
      assertEquals(28, Token.POS);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(41, Token.NULL);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(85, Token.COMMA);
      assertEquals(132, Token.SCRIPT);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(11, Token.BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      
      String string1 = Token.name(110);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SWITCH", string1);
      
      String string2 = Token.name(97);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ASSIGN_MOD", string2);
      
      // Undeclared exception!
      try { 
        Token.name(694);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 694
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(10, Token.BITXOR);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(149, Token.CONST);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(35, Token.GETELEM);
      assertEquals(14, Token.LT);
      assertEquals(44, Token.TRUE);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(13, Token.NE);
      assertEquals(302, Token.STAR);
      assertEquals(108, Token.IF);
      assertEquals(307, Token.EQUALS);
      assertEquals(148, Token.SET);
      assertEquals(86, Token.ASSIGN);
      assertEquals(39, Token.NUMBER);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(112, Token.DEFAULT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(126, Token.LABEL);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      assertEquals(155, Token.CAST);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(110, Token.SWITCH);
      assertEquals(119, Token.WITH);
      assertEquals(100, Token.OR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(20, Token.URSH);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(304, Token.QMARK);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(115, Token.FOR);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.LP);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(122, Token.VOID);
      assertEquals(111, Token.CASE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(42, Token.THIS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(40, Token.STRING);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(31, Token.DELPROP);
      assertEquals(23, Token.MUL);
      assertEquals(132, Token.SCRIPT);
      assertEquals(19, Token.RSH);
      assertEquals(43, Token.FALSE);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      
      String string0 = Token.name(124);
      assertNotNull(string0);
      assertEquals("EMPTY", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      // Undeclared exception!
      try { 
        Token.name(709);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 709
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Token.name(12);
      assertNotNull(string0);
      assertEquals("EQ", string0);
      
      String string1 = Token.name(148);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SETTER_DEF", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(42, Token.THIS);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(41, Token.NULL);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(86, Token.ASSIGN);
      assertEquals(43, Token.FALSE);
      assertEquals(31, Token.DELPROP);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(111, Token.CASE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(132, Token.SCRIPT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(28, Token.POS);
      assertEquals(10, Token.BITXOR);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(40, Token.STRING);
      assertEquals(119, Token.WITH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(103, Token.DEC);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(24, Token.DIV);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(114, Token.DO);
      assertEquals(35, Token.GETELEM);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(19, Token.RSH);
      assertEquals(126, Token.LABEL);
      assertEquals(49, Token.THROW);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GET);
      assertEquals(46, Token.SHNE);
      assertEquals(124, Token.EMPTY);
      assertEquals(117, Token.CONTINUE);
      assertEquals(29, Token.NEG);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(122, Token.VOID);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(45, Token.SHEQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(112, Token.DEFAULT);
      assertEquals(47, Token.REGEXP);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(155, Token.CAST);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(32, Token.TYPEOF);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(148, Token.SETTER_DEF);
      
      String string0 = Token.name(90);
      assertNotNull(string0);
      assertEquals("ASSIGN_LSH", string0);
      
      // Undeclared exception!
      try { 
        Token.name(71);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 71
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals((-1), Token.ERROR);
      assertEquals(41, Token.NULL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(37, Token.CALL);
      assertEquals(116, Token.BREAK);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(33, Token.GETPROP);
      assertEquals(117, Token.CONTINUE);
      assertEquals(304, Token.QMARK);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(31, Token.DELPROP);
      assertEquals(310, Token.COLON);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(86, Token.ASSIGN);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(17, Token.GE);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(302, Token.STAR);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(307, Token.EQUALS);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(111, Token.CASE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(126, Token.LABEL);
      assertEquals(18, Token.LSH);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(35, Token.GETELEM);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(306, Token.BANG);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(119, Token.WITH);
      assertEquals(29, Token.NEG);
      assertEquals(40, Token.STRING);
      assertEquals(147, Token.GET);
      assertEquals(149, Token.CONST);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(38, Token.NAME);
      assertEquals(110, Token.SWITCH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(39, Token.NUMBER);
      assertEquals(155, Token.CAST);
      assertEquals(45, Token.SHEQ);
      assertEquals(103, Token.DEC);
      assertEquals(47, Token.REGEXP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(114, Token.DO);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(120, Token.CATCH);
      assertEquals(14, Token.LT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(124, Token.EMPTY);
      assertEquals(13, Token.NE);
      assertEquals(46, Token.SHNE);
      assertEquals(85, Token.COMMA);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(122, Token.VOID);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(11, Token.BITAND);
      assertEquals(118, Token.VAR);
      assertEquals(94, Token.ASSIGN_SUB);
      
      String string0 = Token.name(45);
      assertNotNull(string0);
      assertEquals("SHEQ", string0);
      
      String string1 = Token.name(130);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("EXPR_RESULT", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(308, Token.LB);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(304, Token.QMARK);
      assertEquals(83, Token.LP);
      assertEquals(28, Token.POS);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(32, Token.TYPEOF);
      assertEquals(115, Token.FOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(310, Token.COLON);
      assertEquals(42, Token.THIS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(105, Token.FUNCTION);
      assertEquals(29, Token.NEG);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(126, Token.LABEL);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(309, Token.LC);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(302, Token.STAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(35, Token.GETELEM);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(10, Token.BITXOR);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(102, Token.INC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(38, Token.NAME);
      assertEquals(21, Token.ADD);
      assertEquals(40, Token.STRING);
      assertEquals(20, Token.URSH);
      assertEquals(45, Token.SHEQ);
      assertEquals(149, Token.CONST);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(39, Token.NUMBER);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(43, Token.FALSE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(23, Token.MUL);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(114, Token.DO);
      assertEquals(14, Token.LT);
      assertEquals(41, Token.NULL);
      assertEquals(13, Token.NE);
      assertEquals(85, Token.COMMA);
      assertEquals(118, Token.VAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(11, Token.BITAND);
      
      String string0 = Token.name(147);
      assertNotNull(string0);
      assertEquals("GETTER_DEF", string0);
      
      String string1 = Token.name(310);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("COLON", string1);
      
      String string2 = Token.name(308);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LB", string2);
      
      // Undeclared exception!
      try { 
        Token.name(2092);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2092
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Token.name(153);
      assertNotNull(string0);
      assertEquals("LABEL_NAME", string0);
      
      // Undeclared exception!
      try { 
        Token.name((-2923));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2923
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 117;
      String string0 = Token.name(117);
      assertNotNull(string0);
      assertEquals("CONTINUE", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(31, Token.DELPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(41, Token.NULL);
      assertEquals(115, Token.FOR);
      assertEquals((-1), Token.ERROR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(310, Token.COLON);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(23, Token.MUL);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(113, Token.WHILE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(42, Token.THIS);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(308, Token.LB);
      assertEquals(10, Token.BITXOR);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(100, Token.OR);
      assertEquals(149, Token.CONST);
      assertEquals(132, Token.SCRIPT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(307, Token.EQUALS);
      assertEquals(110, Token.SWITCH);
      assertEquals(102, Token.INC);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(21, Token.ADD);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(101, Token.AND);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(35, Token.GETELEM);
      assertEquals(98, Token.HOOK);
      assertEquals(306, Token.BANG);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(301, Token.PIPE);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(77, Token.TRY);
      assertEquals(38, Token.NAME);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(14, Token.LT);
      assertEquals(304, Token.QMARK);
      assertEquals(20, Token.URSH);
      assertEquals(45, Token.SHEQ);
      assertEquals(114, Token.DO);
      assertEquals(85, Token.COMMA);
      assertEquals(112, Token.DEFAULT);
      assertEquals(119, Token.WITH);
      assertEquals(11, Token.BITAND);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(155, Token.CAST);
      assertEquals(47, Token.REGEXP);
      assertEquals(30, Token.NEW);
      assertEquals(122, Token.VOID);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(116, Token.BREAK);
      
      String string1 = Token.name(38);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NAME", string1);
      
      String string2 = Token.name(112);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DEFAULT_CASE", string2);
      
      // Undeclared exception!
      try { 
        Token.name(1485);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1485
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(25, Token.MOD);
      assertEquals(86, Token.ASSIGN);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(124, Token.EMPTY);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(29, Token.NEG);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(43, Token.FALSE);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(100, Token.OR);
      assertEquals(304, Token.QMARK);
      assertEquals(12, Token.EQ);
      assertEquals(110, Token.SWITCH);
      assertEquals(155, Token.CAST);
      assertEquals(102, Token.INC);
      assertEquals(85, Token.COMMA);
      assertEquals(30, Token.NEW);
      assertEquals(306, Token.BANG);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(33, Token.GETPROP);
      assertEquals(27, Token.BITNOT);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(13, Token.NE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(14, Token.LT);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(24, Token.DIV);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(49, Token.THROW);
      assertEquals(31, Token.DELPROP);
      assertEquals(38, Token.NAME);
      assertEquals(40, Token.STRING);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals((-1), Token.ERROR);
      assertEquals(119, Token.WITH);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(28, Token.POS);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(308, Token.LB);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(301, Token.PIPE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(113, Token.WHILE);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(302, Token.STAR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(22, Token.SUB);
      
      String string0 = Token.name(35);
      assertNotNull(string0);
      assertEquals("GETELEM", string0);
      
      String string1 = Token.name(22);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SUB", string1);
      
      String string2 = Token.name(112);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DEFAULT_CASE", string2);
      
      int int0 = 748;
      // Undeclared exception!
      try { 
        Token.name((-1134));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1134
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(28, Token.POS);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(116, Token.BREAK);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(113, Token.WHILE);
      assertEquals(9, Token.BITOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(46, Token.SHNE);
      assertEquals(308, Token.LB);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals(125, Token.BLOCK);
      assertEquals(85, Token.COMMA);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(33, Token.GETPROP);
      assertEquals(40, Token.STRING);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(114, Token.DO);
      assertEquals(120, Token.CATCH);
      assertEquals(103, Token.DEC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(306, Token.BANG);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(307, Token.EQUALS);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(44, Token.TRUE);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(10, Token.BITXOR);
      assertEquals(43, Token.FALSE);
      assertEquals(124, Token.EMPTY);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(108, Token.IF);
      assertEquals(86, Token.ASSIGN);
      assertEquals(35, Token.GETELEM);
      assertEquals(14, Token.LT);
      assertEquals(302, Token.STAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(38, Token.NAME);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(301, Token.PIPE);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(39, Token.NUMBER);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(29, Token.NEG);
      assertEquals(47, Token.REGEXP);
      assertEquals(110, Token.SWITCH);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(310, Token.COLON);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      
      String string0 = Token.name(103);
      assertNotNull(string0);
      assertEquals("DEC", string0);
      
      String string1 = Token.name(52);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("INSTANCEOF", string1);
      
      String string2 = Token.name(113);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("WHILE", string2);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(86, Token.ASSIGN);
      assertEquals(77, Token.TRY);
      assertEquals(101, Token.AND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(110, Token.SWITCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(149, Token.CONST);
      assertEquals(309, Token.LC);
      assertEquals(155, Token.CAST);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(32, Token.TYPEOF);
      assertEquals(307, Token.EQUALS);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(308, Token.LB);
      assertEquals(148, Token.SET);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(98, Token.HOOK);
      assertEquals(119, Token.WITH);
      assertEquals(12, Token.EQ);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(21, Token.ADD);
      assertEquals(304, Token.QMARK);
      assertEquals(126, Token.LABEL);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(38, Token.NAME);
      assertEquals((-1), Token.ERROR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(147, Token.GET);
      assertEquals(113, Token.WHILE);
      assertEquals(20, Token.URSH);
      assertEquals(29, Token.NEG);
      assertEquals(301, Token.PIPE);
      assertEquals(122, Token.VOID);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(19, Token.RSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(111, Token.CASE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(306, Token.BANG);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(115, Token.FOR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(40, Token.STRING);
      assertEquals(41, Token.NULL);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(83, Token.LP);
      assertEquals(31, Token.DELPROP);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      
      String string0 = Token.name(154);
      assertNotNull(string0);
      assertEquals("STRING_KEY", string0);
      
      String string1 = Token.name(9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BITOR", string1);
      
      // Undeclared exception!
      try { 
        Token.name((-4289));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -4289
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Token.name(103);
      assertNotNull(string0);
      assertEquals("DEC", string0);
      
      // Undeclared exception!
      try { 
        Token.name((-204));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -204
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(77, Token.TRY);
      assertEquals(86, Token.ASSIGN);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(110, Token.SWITCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(18, Token.LSH);
      assertEquals(309, Token.LC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(149, Token.CONST);
      assertEquals(304, Token.QMARK);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(33, Token.GETPROP);
      assertEquals(21, Token.ADD);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(42, Token.THIS);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(43, Token.FALSE);
      assertEquals(29, Token.NEG);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(10, Token.BITXOR);
      assertEquals(98, Token.HOOK);
      assertEquals(28, Token.POS);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(40, Token.STRING);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(115, Token.FOR);
      assertEquals(126, Token.LABEL);
      assertEquals(22, Token.SUB);
      assertEquals(307, Token.EQUALS);
      assertEquals(4, Token.RETURN);
      assertEquals(302, Token.STAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(111, Token.CASE);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(103, Token.DEC);
      assertEquals(117, Token.CONTINUE);
      assertEquals(24, Token.DIV);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(31, Token.DELPROP);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(38, Token.NAME);
      assertEquals((-1), Token.ERROR);
      assertEquals(301, Token.PIPE);
      assertEquals(113, Token.WHILE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(20, Token.URSH);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(30, Token.NEW);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(12, Token.EQ);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(41, Token.NULL);
      assertEquals(119, Token.WITH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(118, Token.VAR);
      assertEquals(46, Token.SHNE);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(14, Token.LT);
      assertEquals(27, Token.BITNOT);
      assertEquals(13, Token.NE);
      
      String string0 = Token.name(93);
      assertNotNull(string0);
      assertEquals("ASSIGN_ADD", string0);
      
      int int0 = 0;
      String string1 = Token.name(28);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("POS", string1);
      
      String string2 = Token.name(41);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("NULL", string2);
      
      String string3 = Token.name(15);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("LE", string3);
      
      // Undeclared exception!
      try { 
        Token.name(271);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 271
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(307, Token.EQUALS);
      assertEquals(21, Token.ADD);
      assertEquals(132, Token.SCRIPT);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(43, Token.FALSE);
      assertEquals(102, Token.INC);
      assertEquals(12, Token.EQ);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(98, Token.HOOK);
      assertEquals(149, Token.CONST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(155, Token.CAST);
      assertEquals(17, Token.GE);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(120, Token.CATCH);
      assertEquals(110, Token.SWITCH);
      assertEquals(100, Token.OR);
      assertEquals(301, Token.PIPE);
      assertEquals(29, Token.NEG);
      assertEquals(304, Token.QMARK);
      assertEquals(20, Token.URSH);
      assertEquals(147, Token.GET);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(38, Token.NAME);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(45, Token.SHEQ);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(119, Token.WITH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(85, Token.COMMA);
      assertEquals(30, Token.NEW);
      assertEquals(148, Token.SET);
      assertEquals(11, Token.BITAND);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(116, Token.BREAK);
      assertEquals(46, Token.SHNE);
      assertEquals(39, Token.NUMBER);
      assertEquals(27, Token.BITNOT);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(115, Token.FOR);
      assertEquals(117, Token.CONTINUE);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(49, Token.THROW);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(112, Token.DEFAULT);
      assertEquals((-1), Token.ERROR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(113, Token.WHILE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(126, Token.LABEL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(26, Token.NOT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(37, Token.CALL);
      assertEquals(18, Token.LSH);
      assertEquals(40, Token.STRING);
      assertEquals(309, Token.LC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(16, Token.GT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(35, Token.GETELEM);
      assertEquals(86, Token.ASSIGN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(44, Token.TRUE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      
      String string0 = Token.name(17);
      assertNotNull(string0);
      assertEquals("GE", string0);
      
      String string1 = Token.name(9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BITOR", string1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        Token.name(297);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 297
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 297;
      // Undeclared exception!
      try { 
        Token.name(297);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 297
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(112, Token.DEFAULT);
      assertEquals(114, Token.DO);
      assertEquals(45, Token.SHEQ);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(9, Token.BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(148, Token.SET);
      assertEquals(111, Token.CASE);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(13, Token.NE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(12, Token.EQ);
      assertEquals(116, Token.BREAK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(27, Token.BITNOT);
      assertEquals(21, Token.ADD);
      assertEquals(113, Token.WHILE);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(108, Token.IF);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(35, Token.GETELEM);
      assertEquals(30, Token.NEW);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(110, Token.SWITCH);
      assertEquals(301, Token.PIPE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(29, Token.NEG);
      assertEquals(117, Token.CONTINUE);
      assertEquals(310, Token.COLON);
      assertEquals(77, Token.TRY);
      assertEquals(119, Token.WITH);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(120, Token.CATCH);
      assertEquals(39, Token.NUMBER);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(32, Token.TYPEOF);
      assertEquals(17, Token.GE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      assertEquals(11, Token.BITAND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(86, Token.ASSIGN);
      assertEquals(307, Token.EQUALS);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(85, Token.COMMA);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(302, Token.STAR);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(306, Token.BANG);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(40, Token.STRING);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(42, Token.THIS);
      assertEquals(132, Token.SCRIPT);
      
      String string0 = Token.name(108);
      assertNotNull(string0);
      assertEquals("IF", string0);
      
      String string1 = Token.name(44);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TRUE", string1);
      
      String string2 = Token.name(38);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NAME", string2);
      
      String string3 = Token.name(148);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SETTER_DEF", string3);
      
      String string4 = Token.name(147);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("GETTER_DEF", string4);
      
      // Undeclared exception!
      try { 
        Token.name((-1765));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1765
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(310, Token.COLON);
      assertEquals(19, Token.RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.LP);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(114, Token.DO);
      assertEquals(28, Token.POS);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(303, Token.EOC);
      assertEquals(38, Token.NAME);
      assertEquals(31, Token.DELPROP);
      assertEquals(49, Token.THROW);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(306, Token.BANG);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(148, Token.SET);
      assertEquals(13, Token.NE);
      assertEquals(11, Token.BITAND);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(85, Token.COMMA);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(30, Token.NEW);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(118, Token.VAR);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(29, Token.NEG);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(124, Token.EMPTY);
      assertEquals(100, Token.OR);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(110, Token.SWITCH);
      assertEquals(25, Token.MOD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(155, Token.CAST);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(21, Token.ADD);
      assertEquals(149, Token.CONST);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(102, Token.INC);
      assertEquals(98, Token.HOOK);
      assertEquals(42, Token.THIS);
      assertEquals(120, Token.CATCH);
      assertEquals(17, Token.GE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(33, Token.GETPROP);
      assertEquals(101, Token.AND);
      assertEquals(132, Token.SCRIPT);
      assertEquals(43, Token.FALSE);
      assertEquals(304, Token.QMARK);
      assertEquals(147, Token.GET);
      assertEquals(308, Token.LB);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(40, Token.STRING);
      assertEquals(115, Token.FOR);
      assertEquals(126, Token.LABEL);
      assertEquals(10, Token.BITXOR);
      assertEquals(18, Token.LSH);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(22, Token.SUB);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(302, Token.STAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      
      int int0 = 3028;
      String string0 = Token.name(29);
      assertNotNull(string0);
      assertEquals("NEG", string0);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(129);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 129
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Token.name((-1));
      assertNotNull(string0);
      assertEquals("ERROR", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(115, Token.FOR);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(27, Token.BITNOT);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(22, Token.SUB);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(4, Token.RETURN);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(18, Token.LSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(111, Token.CASE);
      assertEquals(16, Token.GT);
      assertEquals(46, Token.SHNE);
      assertEquals(26, Token.NOT);
      assertEquals(308, Token.LB);
      assertEquals(41, Token.NULL);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(155, Token.CAST);
      assertEquals(77, Token.TRY);
      assertEquals(122, Token.VOID);
      assertEquals(29, Token.NEG);
      assertEquals(47, Token.REGEXP);
      assertEquals(309, Token.LC);
      assertEquals(39, Token.NUMBER);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(20, Token.URSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(32, Token.TYPEOF);
      assertEquals((-1), Token.ERROR);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(45, Token.SHEQ);
      assertEquals(100, Token.OR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(310, Token.COLON);
      assertEquals(112, Token.DEFAULT);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(12, Token.EQ);
      assertEquals(301, Token.PIPE);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(10, Token.BITXOR);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(44, Token.TRUE);
      assertEquals(114, Token.DO);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(14, Token.LT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(19, Token.RSH);
      assertEquals(86, Token.ASSIGN);
      assertEquals(105, Token.FUNCTION);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(103, Token.DEC);
      assertEquals(124, Token.EMPTY);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(24, Token.DIV);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(33, Token.GETPROP);
      assertEquals(31, Token.DELPROP);
      assertEquals(149, Token.CONST);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      
      String string1 = Token.name(28);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("POS", string1);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Token.name(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(98, Token.HOOK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(307, Token.EQUALS);
      assertEquals(35, Token.GETELEM);
      assertEquals(132, Token.SCRIPT);
      assertEquals(302, Token.STAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(21, Token.ADD);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(102, Token.INC);
      assertEquals(110, Token.SWITCH);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(44, Token.TRUE);
      assertEquals(108, Token.IF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SET);
      assertEquals(30, Token.NEW);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(304, Token.QMARK);
      assertEquals(126, Token.LABEL);
      assertEquals(47, Token.REGEXP);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(155, Token.CAST);
      assertEquals(38, Token.NAME);
      assertEquals(22, Token.SUB);
      assertEquals(310, Token.COLON);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(100, Token.OR);
      assertEquals(301, Token.PIPE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(20, Token.URSH);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(17, Token.GE);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(25, Token.MOD);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(116, Token.BREAK);
      assertEquals(41, Token.NULL);
      assertEquals(27, Token.BITNOT);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(115, Token.FOR);
      assertEquals(83, Token.LP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(303, Token.EOC);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(308, Token.LB);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(39, Token.NUMBER);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(118, Token.VAR);
      assertEquals(15, Token.LE);
      assertEquals(122, Token.VOID);
      assertEquals(51, Token.IN);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(13, Token.NE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(42, Token.THIS);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(43, Token.FALSE);
      assertEquals(306, Token.BANG);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(19, Token.RSH);
      assertEquals(33, Token.GETPROP);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      
      String string0 = Token.name(93);
      assertNotNull(string0);
      assertEquals("ASSIGN_ADD", string0);
      
      String string1 = Token.name(19);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("RSH", string1);
      
      // Undeclared exception!
      try { 
        Token.name(1659);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1659
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(114, Token.DO);
      assertEquals(306, Token.BANG);
      assertEquals(24, Token.DIV);
      assertEquals(119, Token.WITH);
      assertEquals(103, Token.DEC);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(98, Token.HOOK);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(112, Token.DEFAULT);
      assertEquals(23, Token.MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(43, Token.FALSE);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(41, Token.NULL);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(102, Token.INC);
      assertEquals(124, Token.EMPTY);
      assertEquals(21, Token.ADD);
      assertEquals(117, Token.CONTINUE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(122, Token.VOID);
      assertEquals(148, Token.SET);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(39, Token.NUMBER);
      assertEquals(14, Token.LT);
      assertEquals(46, Token.SHNE);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(33, Token.GETPROP);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(37, Token.CALL);
      assertEquals(11, Token.BITAND);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(155, Token.CAST);
      assertEquals(101, Token.AND);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(77, Token.TRY);
      assertEquals(120, Token.CATCH);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(304, Token.QMARK);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(302, Token.STAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(4, Token.RETURN);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(35, Token.GETELEM);
      assertEquals(105, Token.FUNCTION);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(308, Token.LB);
      assertEquals(86, Token.ASSIGN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(44, Token.TRUE);
      
      String string0 = Token.name(149);
      assertNotNull(string0);
      assertEquals("CONST", string0);
      
      String string1 = Token.name(22);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SUB", string1);
      
      String string2 = Token.name(11);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("BITAND", string2);
      
      int int0 = 0;
      String string3 = Token.name(148);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SETTER_DEF", string3);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        Token.name((-3005));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3005
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Token.name(152);
      assertNotNull(string0);
      assertEquals("DEBUGGER", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(125, Token.BLOCK);
      assertEquals(45, Token.SHEQ);
      assertEquals(38, Token.NAME);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(20, Token.URSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(301, Token.PIPE);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(148, Token.SET);
      assertEquals(122, Token.VOID);
      assertEquals(9, Token.BITOR);
      assertEquals(306, Token.BANG);
      assertEquals(35, Token.GETELEM);
      assertEquals(105, Token.FUNCTION);
      assertEquals(46, Token.SHNE);
      assertEquals(14, Token.LT);
      assertEquals(13, Token.NE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(118, Token.VAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(111, Token.CASE);
      assertEquals(303, Token.EOC);
      assertEquals(132, Token.SCRIPT);
      assertEquals(31, Token.DELPROP);
      assertEquals(28, Token.POS);
      assertEquals(10, Token.BITXOR);
      assertEquals(307, Token.EQUALS);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(44, Token.TRUE);
      assertEquals(43, Token.FALSE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(40, Token.STRING);
      assertEquals(83, Token.LP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(42, Token.THIS);
      assertEquals(32, Token.TYPEOF);
      assertEquals(18, Token.LSH);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(39, Token.NUMBER);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(33, Token.GETPROP);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(25, Token.MOD);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(101, Token.AND);
      assertEquals(86, Token.ASSIGN);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(124, Token.EMPTY);
      assertEquals(308, Token.LB);
      assertEquals(302, Token.STAR);
      assertEquals(41, Token.NULL);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(11, Token.BITAND);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(21, Token.ADD);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals((-1), Token.ERROR);
      assertEquals(12, Token.EQ);
      assertEquals(98, Token.HOOK);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(30, Token.NEW);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(108, Token.IF);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(47, Token.REGEXP);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(117, Token.CONTINUE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(119, Token.WITH);
      assertEquals(155, Token.CAST);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      
      // Undeclared exception!
      try { 
        Token.name((-513));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -513
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(302, Token.STAR);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(43, Token.FALSE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(110, Token.SWITCH);
      assertEquals(29, Token.NEG);
      assertEquals(100, Token.OR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(147, Token.GET);
      assertEquals(44, Token.TRUE);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(101, Token.AND);
      assertEquals(98, Token.HOOK);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(120, Token.CATCH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(17, Token.GE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(306, Token.BANG);
      assertEquals(18, Token.LSH);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(40, Token.STRING);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(22, Token.SUB);
      assertEquals(42, Token.THIS);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(125, Token.BLOCK);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(303, Token.EOC);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals((-1), Token.ERROR);
      assertEquals(111, Token.CASE);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(105, Token.FUNCTION);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(49, Token.THROW);
      assertEquals(19, Token.RSH);
      assertEquals(11, Token.BITAND);
      assertEquals(23, Token.MUL);
      assertEquals(85, Token.COMMA);
      assertEquals(9, Token.BITOR);
      assertEquals(114, Token.DO);
      assertEquals(41, Token.NULL);
      assertEquals(4, Token.RETURN);
      assertEquals(126, Token.LABEL);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(38, Token.NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(13, Token.NE);
      assertEquals(37, Token.CALL);
      assertEquals(118, Token.VAR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(14, Token.LT);
      assertEquals(39, Token.NUMBER);
      assertEquals(304, Token.QMARK);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(155, Token.CAST);
      assertEquals(30, Token.NEW);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(112, Token.DEFAULT);
      assertEquals(310, Token.COLON);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(119, Token.WITH);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(45, Token.SHEQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      
      String string0 = Token.name(91);
      assertNotNull(string0);
      assertEquals("ASSIGN_RSH", string0);
      
      // Undeclared exception!
      try { 
        Token.name(1397);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1397
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(306, Token.BANG);
      assertEquals(119, Token.WITH);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(40, Token.STRING);
      assertEquals(30, Token.NEW);
      assertEquals(35, Token.GETELEM);
      assertEquals(98, Token.HOOK);
      assertEquals(126, Token.LABEL);
      assertEquals(12, Token.EQ);
      assertEquals(10, Token.BITXOR);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(125, Token.BLOCK);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(302, Token.STAR);
      assertEquals(105, Token.FUNCTION);
      assertEquals(13, Token.NE);
      assertEquals(122, Token.VOID);
      assertEquals(14, Token.LT);
      assertEquals(44, Token.TRUE);
      assertEquals(307, Token.EQUALS);
      assertEquals(310, Token.COLON);
      assertEquals(29, Token.NEG);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(9, Token.BITOR);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(110, Token.SWITCH);
      assertEquals(47, Token.REGEXP);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(17, Token.GE);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(26, Token.NOT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(16, Token.GT);
      assertEquals((-1), Token.ERROR);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(113, Token.WHILE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(38, Token.NAME);
      assertEquals(301, Token.PIPE);
      assertEquals(100, Token.OR);
      assertEquals(20, Token.URSH);
      assertEquals(304, Token.QMARK);
      assertEquals(147, Token.GET);
      assertEquals(37, Token.CALL);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(85, Token.COMMA);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(11, Token.BITAND);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(32, Token.TYPEOF);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(115, Token.FOR);
      assertEquals(27, Token.BITNOT);
      assertEquals(4, Token.RETURN);
      assertEquals(41, Token.NULL);
      assertEquals(39, Token.NUMBER);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(116, Token.BREAK);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(46, Token.SHNE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(24, Token.DIV);
      assertEquals(124, Token.EMPTY);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(149, Token.CONST);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(120, Token.CATCH);
      assertEquals(42, Token.THIS);
      assertEquals(33, Token.GETPROP);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(43, Token.FALSE);
      assertEquals(31, Token.DELPROP);
      assertEquals(132, Token.SCRIPT);
      
      String string0 = Token.name(303);
      assertNotNull(string0);
      assertEquals("EOC", string0);
      
      String string1 = Token.name(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DELPROP", string1);
      
      String string2 = Token.name(83);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("PARAM_LIST", string2);
      
      // Undeclared exception!
      try { 
        Token.name(3394);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3394
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(42, Token.THIS);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(304, Token.QMARK);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(155, Token.CAST);
      assertEquals(11, Token.BITAND);
      assertEquals(22, Token.SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(86, Token.ASSIGN);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(308, Token.LB);
      assertEquals(39, Token.NUMBER);
      assertEquals(44, Token.TRUE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(21, Token.ADD);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(307, Token.EQUALS);
      assertEquals(12, Token.EQ);
      assertEquals(117, Token.CONTINUE);
      assertEquals((-1), Token.ERROR);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(4, Token.RETURN);
      assertEquals(102, Token.INC);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(35, Token.GETELEM);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(98, Token.HOOK);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(37, Token.CALL);
      assertEquals(147, Token.GET);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(29, Token.NEG);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(301, Token.PIPE);
      assertEquals(17, Token.GE);
      assertEquals(101, Token.AND);
      assertEquals(113, Token.WHILE);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(40, Token.STRING);
      assertEquals(114, Token.DO);
      assertEquals(20, Token.URSH);
      assertEquals(103, Token.DEC);
      assertEquals(14, Token.LT);
      assertEquals(119, Token.WITH);
      assertEquals(45, Token.SHEQ);
      assertEquals(13, Token.NE);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(108, Token.IF);
      assertEquals(30, Token.NEW);
      assertEquals(47, Token.REGEXP);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(46, Token.SHNE);
      assertEquals(148, Token.SET);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.LP);
      assertEquals(132, Token.SCRIPT);
      assertEquals(149, Token.CONST);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(28, Token.POS);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(303, Token.EOC);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(306, Token.BANG);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(124, Token.EMPTY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      
      int int0 = 0;
      String string0 = Token.name(95);
      assertNotNull(string0);
      assertEquals("ASSIGN_MUL", string0);
      
      // Undeclared exception!
      try { 
        Token.name(1018);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1018
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(302, Token.STAR);
      assertEquals(307, Token.EQUALS);
      assertEquals(21, Token.ADD);
      assertEquals(43, Token.FALSE);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(147, Token.GET);
      assertEquals(149, Token.CONST);
      assertEquals(44, Token.TRUE);
      assertEquals(29, Token.NEG);
      assertEquals(102, Token.INC);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(110, Token.SWITCH);
      assertEquals(155, Token.CAST);
      assertEquals(108, Token.IF);
      assertEquals(86, Token.ASSIGN);
      assertEquals(10, Token.BITXOR);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(148, Token.SET);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(30, Token.NEW);
      assertEquals(33, Token.GETPROP);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(40, Token.STRING);
      assertEquals(11, Token.BITAND);
      assertEquals(14, Token.LT);
      assertEquals(42, Token.THIS);
      assertEquals(85, Token.COMMA);
      assertEquals(13, Token.NE);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(114, Token.DO);
      assertEquals(306, Token.BANG);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(124, Token.EMPTY);
      assertEquals(120, Token.CATCH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(46, Token.SHNE);
      assertEquals(117, Token.CONTINUE);
      assertEquals(28, Token.POS);
      assertEquals(41, Token.NULL);
      assertEquals((-1), Token.ERROR);
      assertEquals(310, Token.COLON);
      assertEquals(31, Token.DELPROP);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(105, Token.FUNCTION);
      assertEquals(122, Token.VOID);
      assertEquals(115, Token.FOR);
      assertEquals(45, Token.SHEQ);
      assertEquals(47, Token.REGEXP);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(38, Token.NAME);
      assertEquals(304, Token.QMARK);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(20, Token.URSH);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(126, Token.LABEL);
      assertEquals(308, Token.LB);
      assertEquals(22, Token.SUB);
      assertEquals(125, Token.BLOCK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(35, Token.GETELEM);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(49, Token.THROW);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(309, Token.LC);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(113, Token.WHILE);
      assertEquals(77, Token.TRY);
      assertEquals(9, Token.BITOR);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(98, Token.HOOK);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      
      // Undeclared exception!
      try { 
        Token.name(183);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 183
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Token.name(9);
      assertNotNull(string0);
      assertEquals("BITOR", string0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(122, Token.VOID);
      assertEquals(49, Token.THROW);
      assertEquals(310, Token.COLON);
      assertEquals(9, Token.BITOR);
      assertEquals(19, Token.RSH);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(46, Token.SHNE);
      assertEquals(112, Token.DEFAULT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(31, Token.DELPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(125, Token.BLOCK);
      assertEquals(126, Token.LABEL);
      assertEquals(114, Token.DO);
      assertEquals(41, Token.NULL);
      assertEquals(113, Token.WHILE);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(24, Token.DIV);
      assertEquals(103, Token.DEC);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(23, Token.MUL);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(306, Token.BANG);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(35, Token.GETELEM);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(308, Token.LB);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(83, Token.LP);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(115, Token.FOR);
      assertEquals(149, Token.CONST);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(10, Token.BITXOR);
      assertEquals(77, Token.TRY);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(101, Token.AND);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(147, Token.GET);
      assertEquals(110, Token.SWITCH);
      assertEquals(307, Token.EQUALS);
      assertEquals(302, Token.STAR);
      assertEquals(100, Token.OR);
      assertEquals(132, Token.SCRIPT);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(33, Token.GETPROP);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(18, Token.LSH);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(98, Token.HOOK);
      assertEquals(43, Token.FALSE);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(17, Token.GE);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(120, Token.CATCH);
      assertEquals(309, Token.LC);
      assertEquals(25, Token.MOD);
      assertEquals(37, Token.CALL);
      assertEquals(124, Token.EMPTY);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(85, Token.COMMA);
      assertEquals(148, Token.SET);
      assertEquals(11, Token.BITAND);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(108, Token.IF);
      assertEquals(301, Token.PIPE);
      assertEquals(119, Token.WITH);
      assertEquals(13, Token.NE);
      assertEquals(20, Token.URSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(38, Token.NAME);
      assertEquals(118, Token.VAR);
      assertEquals((-1), Token.ERROR);
      assertEquals(14, Token.LT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(27, Token.BITNOT);
      assertEquals(45, Token.SHEQ);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(21, Token.ADD);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(12, Token.EQ);
      assertEquals(30, Token.NEW);
      
      int int0 = 1276;
      // Undeclared exception!
      try { 
        Token.name(1129);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1129
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(85, Token.COMMA);
      assertEquals(11, Token.BITAND);
      assertEquals(42, Token.THIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(309, Token.LC);
      assertEquals(26, Token.NOT);
      assertEquals((-1), Token.ERROR);
      assertEquals(41, Token.NULL);
      assertEquals(120, Token.CATCH);
      assertEquals(16, Token.GT);
      assertEquals(113, Token.WHILE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(4, Token.RETURN);
      assertEquals(18, Token.LSH);
      assertEquals(25, Token.MOD);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(101, Token.AND);
      assertEquals(77, Token.TRY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(37, Token.CALL);
      assertEquals(17, Token.GE);
      assertEquals(43, Token.FALSE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(149, Token.CONST);
      assertEquals(44, Token.TRUE);
      assertEquals(31, Token.DELPROP);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(132, Token.SCRIPT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(307, Token.EQUALS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(302, Token.STAR);
      assertEquals(10, Token.BITXOR);
      assertEquals(115, Token.FOR);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(28, Token.POS);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(119, Token.WITH);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(40, Token.STRING);
      assertEquals(118, Token.VAR);
      assertEquals(38, Token.NAME);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(13, Token.NE);
      assertEquals(125, Token.BLOCK);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(49, Token.THROW);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(9, Token.BITOR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(147, Token.GET);
      assertEquals(46, Token.SHNE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(110, Token.SWITCH);
      assertEquals(310, Token.COLON);
      assertEquals(100, Token.OR);
      assertEquals(124, Token.EMPTY);
      assertEquals(117, Token.CONTINUE);
      assertEquals(29, Token.NEG);
      assertEquals(155, Token.CAST);
      assertEquals(122, Token.VOID);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(112, Token.DEFAULT);
      assertEquals(45, Token.SHEQ);
      assertEquals(116, Token.BREAK);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(47, Token.REGEXP);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      
      String string0 = Token.name(94);
      assertNotNull(string0);
      assertEquals("ASSIGN_SUB", string0);
      
      String string1 = Token.name(100);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OR", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(132, Token.SCRIPT);
      assertEquals(102, Token.INC);
      assertEquals(10, Token.BITXOR);
      assertEquals(21, Token.ADD);
      assertEquals(307, Token.EQUALS);
      assertEquals(12, Token.EQ);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(302, Token.STAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SET);
      assertEquals(86, Token.ASSIGN);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(44, Token.TRUE);
      assertEquals(149, Token.CONST);
      assertEquals(39, Token.NUMBER);
      assertEquals(108, Token.IF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(30, Token.NEW);
      assertEquals(18, Token.LSH);
      assertEquals(22, Token.SUB);
      assertEquals(304, Token.QMARK);
      assertEquals(309, Token.LC);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(16, Token.GT);
      assertEquals(32, Token.TYPEOF);
      assertEquals(26, Token.NOT);
      assertEquals(20, Token.URSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(155, Token.CAST);
      assertEquals(105, Token.FUNCTION);
      assertEquals(38, Token.NAME);
      assertEquals(119, Token.WITH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(112, Token.DEFAULT);
      assertEquals(125, Token.BLOCK);
      assertEquals(77, Token.TRY);
      assertEquals(147, Token.GET);
      assertEquals(301, Token.PIPE);
      assertEquals(35, Token.GETELEM);
      assertEquals(29, Token.NEG);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(98, Token.HOOK);
      assertEquals(113, Token.WHILE);
      assertEquals(37, Token.CALL);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(28, Token.POS);
      assertEquals(303, Token.EOC);
      assertEquals(4, Token.RETURN);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(41, Token.NULL);
      assertEquals(111, Token.CASE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(31, Token.DELPROP);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(83, Token.LP);
      assertEquals(85, Token.COMMA);
      assertEquals(310, Token.COLON);
      assertEquals(122, Token.VOID);
      assertEquals(308, Token.LB);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(46, Token.SHNE);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(116, Token.BREAK);
      assertEquals(27, Token.BITNOT);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(13, Token.NE);
      assertEquals(40, Token.STRING);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(14, Token.LT);
      assertEquals(42, Token.THIS);
      assertEquals(11, Token.BITAND);
      assertEquals(118, Token.VAR);
      assertEquals(306, Token.BANG);
      assertEquals(124, Token.EMPTY);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(43, Token.FALSE);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(19, Token.RSH);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(120, Token.CATCH);
      assertEquals(23, Token.MUL);
      
      String string0 = Token.name(14);
      assertNotNull(string0);
      assertEquals("LT", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(306, Token.BANG);
      assertEquals(98, Token.HOOK);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(301, Token.PIPE);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(132, Token.SCRIPT);
      assertEquals(21, Token.ADD);
      assertEquals(102, Token.INC);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(12, Token.EQ);
      assertEquals(110, Token.SWITCH);
      assertEquals(119, Token.WITH);
      assertEquals(10, Token.BITXOR);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(47, Token.REGEXP);
      assertEquals(45, Token.SHEQ);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(155, Token.CAST);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(77, Token.TRY);
      assertEquals(49, Token.THROW);
      assertEquals(105, Token.FUNCTION);
      assertEquals(112, Token.DEFAULT);
      assertEquals(9, Token.BITOR);
      assertEquals(17, Token.GE);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(147, Token.GET);
      assertEquals(100, Token.OR);
      assertEquals(86, Token.ASSIGN);
      assertEquals(44, Token.TRUE);
      assertEquals(29, Token.NEG);
      assertEquals(307, Token.EQUALS);
      assertEquals(22, Token.SUB);
      assertEquals(4, Token.RETURN);
      assertEquals(302, Token.STAR);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(125, Token.BLOCK);
      assertEquals(37, Token.CALL);
      assertEquals(26, Token.NOT);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(11, Token.BITAND);
      assertEquals(85, Token.COMMA);
      assertEquals(116, Token.BREAK);
      assertEquals((-1), Token.ERROR);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(308, Token.LB);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(111, Token.CASE);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(31, Token.DELPROP);
      assertEquals(304, Token.QMARK);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(42, Token.THIS);
      assertEquals(115, Token.FOR);
      assertEquals(310, Token.COLON);
      assertEquals(32, Token.TYPEOF);
      assertEquals(28, Token.POS);
      assertEquals(117, Token.CONTINUE);
      assertEquals(23, Token.MUL);
      assertEquals(19, Token.RSH);
      assertEquals(122, Token.VOID);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(46, Token.SHNE);
      assertEquals(120, Token.CATCH);
      assertEquals(43, Token.FALSE);
      assertEquals(39, Token.NUMBER);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(118, Token.VAR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(13, Token.NE);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(114, Token.DO);
      assertEquals(103, Token.DEC);
      assertEquals(41, Token.NULL);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(124, Token.EMPTY);
      
      String string0 = Token.name(77);
      assertNotNull(string0);
      assertEquals("TRY", string0);
      
      String string1 = Token.name(120);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CATCH", string1);
      
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Token.name((-1));
      assertNotNull(string0);
      assertEquals("ERROR", string0);
      
      String string1 = Token.name((-1));
      assertNotNull(string1);
      assertEquals("ERROR", string1);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(11, Token.BITAND);
      assertEquals(37, Token.CALL);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(308, Token.LB);
      assertEquals(33, Token.GETPROP);
      assertEquals(4, Token.RETURN);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(22, Token.SUB);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(16, Token.GT);
      assertEquals(309, Token.LC);
      assertEquals(41, Token.NULL);
      assertEquals(26, Token.NOT);
      assertEquals(18, Token.LSH);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(9, Token.BITOR);
      assertEquals(49, Token.THROW);
      assertEquals(122, Token.VOID);
      assertEquals(77, Token.TRY);
      assertEquals(310, Token.COLON);
      assertEquals(101, Token.AND);
      assertEquals(110, Token.SWITCH);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(25, Token.MOD);
      assertEquals(17, Token.GE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(100, Token.OR);
      assertEquals(39, Token.NUMBER);
      assertEquals(147, Token.GET);
      assertEquals(29, Token.NEG);
      assertEquals(46, Token.SHNE);
      assertEquals(102, Token.INC);
      assertEquals(32, Token.TYPEOF);
      assertEquals(21, Token.ADD);
      assertEquals(304, Token.QMARK);
      assertEquals(38, Token.NAME);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals((-1), Token.ERROR);
      assertEquals(112, Token.DEFAULT);
      assertEquals(119, Token.WITH);
      assertEquals(12, Token.EQ);
      assertEquals(45, Token.SHEQ);
      assertEquals(155, Token.CAST);
      assertEquals(117, Token.CONTINUE);
      assertEquals(47, Token.REGEXP);
      assertEquals(306, Token.BANG);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(30, Token.NEW);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(20, Token.URSH);
      assertEquals(13, Token.NE);
      assertEquals(14, Token.LT);
      assertEquals(301, Token.PIPE);
      assertEquals(125, Token.BLOCK);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(307, Token.EQUALS);
      assertEquals(118, Token.VAR);
      assertEquals(302, Token.STAR);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(98, Token.HOOK);
      assertEquals(124, Token.EMPTY);
      assertEquals(103, Token.DEC);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(126, Token.LABEL);
      assertEquals(35, Token.GETELEM);
      assertEquals(86, Token.ASSIGN);
      assertEquals(19, Token.RSH);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(105, Token.FUNCTION);
      assertEquals(23, Token.MUL);
      assertEquals(43, Token.FALSE);
      assertEquals(120, Token.CATCH);
      assertEquals(44, Token.TRUE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(132, Token.SCRIPT);
      assertEquals(42, Token.THIS);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(10, Token.BITXOR);
      assertEquals(31, Token.DELPROP);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(149, Token.CONST);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(115, Token.FOR);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      
      String string2 = Token.name(33);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("GETPROP", string2);
      
      String string3 = Token.name(87);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ASSIGN_BITOR", string3);
      
      String string4 = Token.name(110);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("SWITCH", string4);
      
      String string5 = Token.name(47);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("REGEXP", string5);
      
      String string6 = Token.name((-1));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("ERROR", string6);
      
      // Undeclared exception!
      try { 
        Token.name((-1004));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1004
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Token.name(33);
      assertNotNull(string0);
      assertEquals("GETPROP", string0);
      
      String string1 = Token.name(33);
      assertNotNull(string1);
      assertEquals("GETPROP", string1);
      
      String string2 = Token.name(33);
      assertNotNull(string2);
      assertEquals("GETPROP", string2);
      
      String string3 = Token.name(33);
      assertNotNull(string3);
      assertEquals("GETPROP", string3);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(37, Token.CALL);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(308, Token.LB);
      assertEquals(11, Token.BITAND);
      assertEquals(304, Token.QMARK);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(33, Token.GETPROP);
      assertEquals(120, Token.CATCH);
      assertEquals(113, Token.WHILE);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(16, Token.GT);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(17, Token.GE);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(22, Token.SUB);
      assertEquals(85, Token.COMMA);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(4, Token.RETURN);
      assertEquals(41, Token.NULL);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(18, Token.LSH);
      assertEquals(117, Token.CONTINUE);
      assertEquals(46, Token.SHNE);
      assertEquals(100, Token.OR);
      assertEquals(110, Token.SWITCH);
      assertEquals(147, Token.GET);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(49, Token.THROW);
      assertEquals(9, Token.BITOR);
      assertEquals(77, Token.TRY);
      assertEquals(122, Token.VOID);
      assertEquals(101, Token.AND);
      assertEquals(25, Token.MOD);
      assertEquals(29, Token.NEG);
      assertEquals(39, Token.NUMBER);
      assertEquals(12, Token.EQ);
      assertEquals((-1), Token.ERROR);
      assertEquals(45, Token.SHEQ);
      assertEquals(27, Token.BITNOT);
      assertEquals(116, Token.BREAK);
      assertEquals(112, Token.DEFAULT);
      assertEquals(30, Token.NEW);
      assertEquals(32, Token.TYPEOF);
      assertEquals(47, Token.REGEXP);
      assertEquals(310, Token.COLON);
      assertEquals(102, Token.INC);
      assertEquals(21, Token.ADD);
      assertEquals(155, Token.CAST);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(119, Token.WITH);
      assertEquals(301, Token.PIPE);
      assertEquals(14, Token.LT);
      assertEquals(20, Token.URSH);
      assertEquals(38, Token.NAME);
      assertEquals(306, Token.BANG);
      assertEquals(13, Token.NE);
      assertEquals(108, Token.IF);
      assertEquals(148, Token.SET);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(24, Token.DIV);
      assertEquals(114, Token.DO);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(103, Token.DEC);
      assertEquals(105, Token.FUNCTION);
      assertEquals(98, Token.HOOK);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(126, Token.LABEL);
      assertEquals(125, Token.BLOCK);
      assertEquals(118, Token.VAR);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(35, Token.GETELEM);
      assertEquals(44, Token.TRUE);
      assertEquals(124, Token.EMPTY);
      assertEquals(149, Token.CONST);
      assertEquals(302, Token.STAR);
      assertEquals(31, Token.DELPROP);
      assertEquals(19, Token.RSH);
      assertEquals(307, Token.EQUALS);
      assertEquals(132, Token.SCRIPT);
      assertEquals(23, Token.MUL);
      assertEquals(111, Token.CASE);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(43, Token.FALSE);
      assertEquals(86, Token.ASSIGN);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(115, Token.FOR);
      assertEquals(10, Token.BITXOR);
      assertEquals(83, Token.LP);
      assertEquals(303, Token.EOC);
      assertEquals(42, Token.THIS);
      assertEquals(40, Token.STRING);
      assertEquals(28, Token.POS);
      assertEquals(93, Token.ASSIGN_ADD);
      
      int int0 = 1323;
      // Undeclared exception!
      try { 
        Token.name(1323);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1323
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(28, Token.POS);
      assertEquals(92, Token.ASSIGN_URSH);
      assertEquals(41, Token.NULL);
      assertEquals(31, Token.DELPROP);
      assertEquals((-1), Token.ERROR);
      assertEquals(115, Token.FOR);
      assertEquals(111, Token.CASE);
      assertEquals(300, Token.ANNOTATION);
      assertEquals(116, Token.BREAK);
      assertEquals(113, Token.WHILE);
      assertEquals(27, Token.BITNOT);
      assertEquals(11, Token.BITAND);
      assertEquals(96, Token.ASSIGN_DIV);
      assertEquals(85, Token.COMMA);
      assertEquals(46, Token.SHNE);
      assertEquals(105, Token.FUNCTION);
      assertEquals(308, Token.LB);
      assertEquals(305, Token.ELLIPSIS);
      assertEquals(122, Token.VOID);
      assertEquals(152, Token.DEBUGGER);
      assertEquals(87, Token.ASSIGN_BITOR);
      assertEquals(63, Token.ARRAYLIT);
      assertEquals(4, Token.RETURN);
      assertEquals(22, Token.SUB);
      assertEquals(64, Token.OBJECTLIT);
      assertEquals(125, Token.BLOCK);
      assertEquals(103, Token.DEC);
      assertEquals(114, Token.DO);
      assertEquals(24, Token.DIV);
      assertEquals(88, Token.ASSIGN_BITXOR);
      assertEquals(33, Token.GETPROP);
      assertEquals(154, Token.STRING_KEY);
      assertEquals(97, Token.ASSIGN_MOD);
      assertEquals(83, Token.PARAM_LIST);
      assertEquals(153, Token.LABEL_NAME);
      assertEquals(120, Token.CATCH);
      assertEquals(19, Token.RSH);
      assertEquals(23, Token.MUL);
      assertEquals(93, Token.ASSIGN_ADD);
      assertEquals(149, Token.CONST);
      assertEquals(40, Token.STRING);
      assertEquals(42, Token.THIS);
      assertEquals(303, Token.EOC);
      assertEquals(83, Token.LP);
      assertEquals(52, Token.INSTANCEOF);
      assertEquals(12, Token.EQ);
      assertEquals(132, Token.SCRIPT);
      assertEquals(10, Token.BITXOR);
      assertEquals(307, Token.EQUALS);
      assertEquals(98, Token.HOOK);
      assertEquals(112, Token.DEFAULT_CASE);
      assertEquals(30, Token.NEW);
      assertEquals(147, Token.GETTER_DEF);
      assertEquals(43, Token.FALSE);
      assertEquals(148, Token.SET);
      assertEquals(108, Token.IF);
      assertEquals(306, Token.BANG);
      assertEquals(86, Token.ASSIGN);
      assertEquals(124, Token.EMPTY);
      assertEquals(44, Token.TRUE);
      assertEquals(14, Token.LT);
      assertEquals(302, Token.STAR);
      assertEquals(94, Token.ASSIGN_SUB);
      assertEquals(13, Token.NE);
      assertEquals(35, Token.GETELEM);
      assertEquals(118, Token.VAR);
      assertEquals(90, Token.ASSIGN_LSH);
      assertEquals(15, Token.LE);
      assertEquals(51, Token.IN);
      assertEquals(130, Token.EXPR_RESULT);
      assertEquals(18, Token.LSH);
      assertEquals(32, Token.TYPEOF);
      assertEquals(45, Token.SHEQ);
      assertEquals(126, Token.LABEL);
      assertEquals(16, Token.GT);
      assertEquals(38, Token.NAME);
      assertEquals(26, Token.NOT);
      assertEquals(309, Token.LC);
      assertEquals(304, Token.QMARK);
      assertEquals(91, Token.ASSIGN_RSH);
      assertEquals(301, Token.PIPE);
      assertEquals(95, Token.ASSIGN_MUL);
      assertEquals(17, Token.GE);
      assertEquals(37, Token.CALL);
      assertEquals(39, Token.NUMBER);
      assertEquals(9, Token.BITOR);
      assertEquals(25, Token.MOD);
      assertEquals(101, Token.AND);
      assertEquals(49, Token.THROW);
      assertEquals(77, Token.TRY);
      assertEquals(29, Token.NEG);
      assertEquals(147, Token.GET);
      assertEquals(117, Token.CONTINUE);
      assertEquals(148, Token.SETTER_DEF);
      assertEquals(20, Token.URSH);
      assertEquals(100, Token.OR);
      assertEquals(47, Token.REGEXP);
      assertEquals(89, Token.ASSIGN_BITAND);
      assertEquals(155, Token.CAST);
      assertEquals(119, Token.WITH);
      assertEquals(110, Token.SWITCH);
      assertEquals(21, Token.ADD);
      assertEquals(112, Token.DEFAULT);
      assertEquals(102, Token.INC);
      assertEquals(310, Token.COLON);
      
      String string0 = Token.name(98);
      assertNotNull(string0);
      assertEquals("HOOK", string0);
      
      String string1 = Token.name(20);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("URSH", string1);
      
      String string2 = Token.name(122);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VOID", string2);
      
      String string3 = Token.name(152);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("DEBUGGER", string3);
      
      String string4 = Token.name(118);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("VAR", string4);
      
      // Undeclared exception!
      try { 
        Token.name(2812);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2812
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 267;
      // Undeclared exception!
      try { 
        Token.name(267);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 267
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Token.name(100);
      assertNotNull(string0);
      assertEquals("OR", string0);
      
      String string1 = Token.name(100);
      assertNotNull(string1);
      assertEquals("OR", string1);
      
      // Undeclared exception!
      try { 
        Token.name(282);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 282
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Token.name(29);
      int int0 = (-1);
      Token.name((-1));
      Token.name((-1));
      int int1 = 215;
      // Undeclared exception!
      try { 
        Token.name(215);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 215
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Token token0 = new Token();
      Token.name(105);
      Token.name(32);
      Token.name(304);
      Token.name(309);
      Token.name(113);
      Token.name(17);
      // Undeclared exception!
      try { 
        Token.name(141);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 141
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Token token0 = new Token();
      Token.name(300);
      Token.name(30);
      Token.name(119);
      Token.name(42);
      Token.name(38);
      Token.name(83);
      int int0 = 108;
      Token.name(16);
      Token.name((-1));
      // Undeclared exception!
      try { 
        Token.name((-60));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -60
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Token token0 = new Token();
      Token.name(17);
      Token.name(31);
      Token.name(46);
      Token.name(305);
      Token.name(149);
      Token.name(18);
      Token.name(155);
      Token.name(126);
      // Undeclared exception!
      try { 
        Token.name(178);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 178
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Token token0 = new Token();
      Token.name(300);
      Token.name(153);
      Token.name(119);
      Token.name(42);
      Token.name(83);
      Token.name(16);
      Token.name((-1));
      Token.name(30);
      Token.name(51);
      Token.name(301);
      Token.name(105);
      Token.name(21);
      Token.name(132);
      // Undeclared exception!
      try { 
        Token.name(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Token token0 = new Token();
      Token.name(33);
      Token.name(87);
      Token.name(110);
      Token.name(47);
      Token.name((-1));
      // Undeclared exception!
      try { 
        Token.name((-1004));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1004
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}
