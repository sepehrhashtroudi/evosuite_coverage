/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 10:23:31 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.DiagnosticType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiagnosticType_ESTest extends DiagnosticType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("(~7@]XHDXiN!&aij@l", "(~7@]XHDXiN!&aij@l");
      Object[] objectArray0 = new Object[8];
      String string0 = diagnosticType0.format(objectArray0);
      assertEquals("(~7@]XHDXiN!&aij@l", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("JV<\"=", "Y5Y<Ey");
      DiagnosticType diagnosticType1 = DiagnosticType.disabled("&OcbZ6n|`~F-vE-$[r", "");
      int int0 = diagnosticType0.compareTo(diagnosticType1);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("39M[{S@", "");
      DiagnosticType diagnosticType1 = DiagnosticType.disabled(": ", "$VALUES");
      int int0 = diagnosticType0.compareTo(diagnosticType1);
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiagnosticType.warning("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiagnosticType.warning("", "_1,!C{^6()r%bfb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.OFF;
      // Undeclared exception!
      try { 
        DiagnosticType.make((String) null, checkLevel0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      // Undeclared exception!
      try { 
        DiagnosticType.make("{H!*S+K\"?z", checkLevel0, "{H!*S+K\"?z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled((String) null, ":X3(r}#Ly&u[");
      // Undeclared exception!
      try { 
        diagnosticType0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DiagnosticType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiagnosticType.error("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiagnosticType.error("SC:!0{C[X7\"9]^", "SC:!0{C[X7\"9]^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.make("rr1z=", checkLevel0, "rr1z=");
      DiagnosticType diagnosticType1 = DiagnosticType.warning((String) null, "UolM+");
      // Undeclared exception!
      try { 
        diagnosticType0.equals(diagnosticType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiagnosticType.disabled("Y%$^A C%=$)q9b~=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiagnosticType.disabled("", "688%/&{B9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", "");
      DiagnosticType diagnosticType1 = DiagnosticType.disabled((String) null, "");
      // Undeclared exception!
      try { 
        diagnosticType0.compareTo(diagnosticType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("(~7@]XHDXiN!&aij@l", "(~7@]XHDXiN!&aij@l");
      DiagnosticType diagnosticType1 = DiagnosticType.disabled(";C", "(~7@]XHDXiN!&aij@l");
      boolean boolean0 = diagnosticType1.equals(diagnosticType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.make("rr1z=", checkLevel0, "rr1z=");
      boolean boolean0 = diagnosticType0.equals(diagnosticType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.make("rr1z=", checkLevel0, "rr1z=");
      Object object0 = new Object();
      boolean boolean0 = diagnosticType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("(~7@]XHDXiN!&aij@l", "(~7@]XHDXiN!&aij@l");
      int int0 = diagnosticType0.compareTo(diagnosticType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", "");
      String string0 = diagnosticType0.toString();
      assertEquals(": ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", "");
      Object[] objectArray0 = new Object[7];
      String string0 = diagnosticType0.format(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", "");
      diagnosticType0.hashCode();
  }
}
