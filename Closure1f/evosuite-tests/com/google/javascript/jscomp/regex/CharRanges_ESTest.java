/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:09:34 GMT 2023
 */

package com.google.javascript.jscomp.regex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.regex.CharRanges;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharRanges_ESTest extends CharRanges_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      charRanges0.hashCode();
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.inclusive(0, 1003);
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(0, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      boolean boolean0 = charRanges0.containsAll(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertTrue(boolean0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(0, charRanges1.minSetBit());
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[4] = (-1);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals((-1), charRanges0.minSetBit());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0, 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      CharRanges charRanges2 = charRanges0.difference(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals((-1), charRanges0.minSetBit());
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertFalse(charRanges2.isEmpty());
      assertEquals(1, charRanges2.getNumRanges());
      assertEquals((-1), charRanges2.minSetBit());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0, 0, 0}, intArray0);
      assertNotNull(charRanges2);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges1, charRanges0);
      assertNotSame(charRanges1, charRanges2);
      assertNotSame(charRanges2, charRanges0);
      assertNotSame(charRanges2, charRanges1);
      
      boolean boolean0 = charRanges2.containsAll(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges0.equals((Object)charRanges2));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges1.equals((Object)charRanges2));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertFalse(boolean0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals((-1), charRanges0.minSetBit());
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertFalse(charRanges2.isEmpty());
      assertEquals(1, charRanges2.getNumRanges());
      assertEquals((-1), charRanges2.minSetBit());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0, 0, 0}, intArray0);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges1, charRanges0);
      assertNotSame(charRanges1, charRanges2);
      assertNotSame(charRanges2, charRanges0);
      assertNotSame(charRanges2, charRanges1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      int[] intArray0 = new int[9];
      intArray0[4] = (-1211);
      CharRanges charRanges1 = CharRanges.withMembers(intArray0);
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(2, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals((-1211), charRanges1.minSetBit());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1211), 0, 0, 0, 0}, intArray0);
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      CharRanges charRanges2 = charRanges0.intersection(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals((-1211), charRanges1.minSetBit());
      assertEquals(0, charRanges2.minSetBit());
      assertFalse(charRanges2.isEmpty());
      assertEquals(1, charRanges2.getNumRanges());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1211), 0, 0, 0, 0}, intArray0);
      assertNotNull(charRanges2);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges1, charRanges2);
      assertNotSame(charRanges1, charRanges0);
      assertNotSame(charRanges2, charRanges1);
      assertNotSame(charRanges2, charRanges0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = (-1188);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals((-1188), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-1188), 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      CharRanges charRanges2 = charRanges0.intersection(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertEquals((-1188), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertFalse(charRanges2.isEmpty());
      assertEquals(0, charRanges2.minSetBit());
      assertEquals(1, charRanges2.getNumRanges());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-1188), 0, 0}, intArray0);
      assertNotNull(charRanges2);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
      assertNotSame(charRanges1, charRanges2);
      assertNotSame(charRanges2, charRanges0);
      assertNotSame(charRanges2, charRanges1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[4] = (-1);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals((-1), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0, 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      CharRanges charRanges2 = charRanges0.difference(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertEquals((-1), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertEquals((-1), charRanges2.minSetBit());
      assertEquals(1, charRanges2.getNumRanges());
      assertFalse(charRanges2.isEmpty());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0, 0, 0}, intArray0);
      assertNotNull(charRanges2);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges1, charRanges0);
      assertNotSame(charRanges1, charRanges2);
      assertNotSame(charRanges2, charRanges0);
      assertNotSame(charRanges2, charRanges1);
      
      CharRanges charRanges3 = charRanges2.union(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges0.equals((Object)charRanges2));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges1.equals((Object)charRanges2));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertFalse(charRanges3.equals((Object)charRanges2));
      assertFalse(charRanges3.equals((Object)charRanges1));
      assertFalse(charRanges3.equals((Object)charRanges0));
      assertEquals((-1), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertEquals(0, charRanges1.minSetBit());
      assertEquals((-1), charRanges2.minSetBit());
      assertEquals(1, charRanges2.getNumRanges());
      assertFalse(charRanges2.isEmpty());
      assertEquals((-1), charRanges3.minSetBit());
      assertEquals(1, charRanges3.getNumRanges());
      assertFalse(charRanges3.isEmpty());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1), 0, 0, 0}, intArray0);
      assertNotNull(charRanges3);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges0, charRanges3);
      assertNotSame(charRanges1, charRanges3);
      assertNotSame(charRanges1, charRanges0);
      assertNotSame(charRanges1, charRanges2);
      assertNotSame(charRanges2, charRanges0);
      assertNotSame(charRanges2, charRanges1);
      assertNotSame(charRanges2, charRanges3);
      assertNotSame(charRanges3, charRanges2);
      assertNotSame(charRanges3, charRanges1);
      assertNotSame(charRanges3, charRanges0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-823);
      // Undeclared exception!
      try { 
        CharRanges.withRanges(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -823 > 0
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-648);
      // Undeclared exception!
      try { 
        CharRanges.withRanges(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > 0
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 216;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 216}, intArray0);
      assertNotNull(charRanges0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2727;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals(2727, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2727}, intArray0);
      assertNotNull(charRanges0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.EMPTY;
      assertTrue(charRanges0.isEmpty());
      assertEquals(0, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.inclusive(2, 2);
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(2, charRanges1.minSetBit());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      CharRanges charRanges2 = charRanges1.union(charRanges0);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertTrue(charRanges0.isEmpty());
      assertEquals(0, charRanges0.getNumRanges());
      assertEquals(2, charRanges1.minSetBit());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertFalse(charRanges2.isEmpty());
      assertEquals(1, charRanges2.getNumRanges());
      assertEquals(2, charRanges2.minSetBit());
      assertNotNull(charRanges2);
      assertNotSame(charRanges0, charRanges2);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
      assertSame(charRanges1, charRanges2);
      assertNotSame(charRanges2, charRanges0);
      assertSame(charRanges2, charRanges1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.start(0);
      assertEquals(0, int0);
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.inclusive(1646, 1646);
      assertEquals(1646, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.start(0);
      assertEquals(1646, int0);
      assertEquals(1646, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1343);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals((-1343), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1343), 0, 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.start(0);
      assertEquals((-1343), int0);
      assertEquals((-1343), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1343), 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = charRanges0.shift((-861));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals((-861), charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.minSetBit();
      assertEquals(0, int0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.inclusive(3758, 3758);
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(3758, charRanges0.minSetBit());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.minSetBit();
      assertEquals(3758, int0);
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(3758, charRanges0.minSetBit());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.minSetBit();
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.inclusive(3758, 3758);
      assertEquals(3758, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = charRanges0.intersection(charRanges0);
      assertTrue(charRanges1.equals((Object)charRanges0));
      assertEquals(3758, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(3758, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.getNumRanges();
      assertEquals(1, int0);
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.end(Integer.MIN_VALUE);
      assertEquals(0, int0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.end(Integer.MIN_VALUE);
      assertEquals(65536, int0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.inclusive((-2940), (-2940));
      assertEquals((-2940), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      int int0 = charRanges0.end(0);
      assertEquals((-2939), int0);
      assertEquals((-2940), charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharRanges.withRanges((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharRanges.withMembers((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.inclusive(872, 872);
      assertEquals(872, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertNotNull(charRanges0);
      
      // Undeclared exception!
      try { 
        charRanges0.union((CharRanges) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertTrue(charRanges0.isEmpty());
      assertEquals(0, charRanges0.getNumRanges());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charRanges0);
      
      // Undeclared exception!
      try { 
        charRanges0.intersection((CharRanges) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.EMPTY;
      assertEquals(0, charRanges0.getNumRanges());
      assertTrue(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      // Undeclared exception!
      try { 
        charRanges0.difference((CharRanges) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.EMPTY;
      assertEquals(0, charRanges0.getNumRanges());
      assertTrue(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      // Undeclared exception!
      try { 
        charRanges0.containsAll((CharRanges) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges0);
      
      charRanges0.hashCode();
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.EMPTY;
      assertEquals(0, charRanges0.getNumRanges());
      assertTrue(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      boolean boolean0 = charRanges0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, charRanges0.getNumRanges());
      assertTrue(charRanges0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals(0, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      boolean boolean0 = charRanges0.equals(charRanges0);
      assertTrue(boolean0);
      assertEquals(0, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 565;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {565, 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      String string0 = charRanges0.toString();
      assertEquals("[0x0 0x235]", string0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {565, 0, 0}, intArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges0);
      
      String string0 = charRanges0.ALL_CODE_UNITS.toString();
      assertEquals("[0x0-0xffff]", string0);
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = charRanges0.shift(16);
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(16, charRanges1.minSetBit());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertNotNull(charRanges1);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = charRanges0.EMPTY.shift((-211));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(0, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertTrue(charRanges1.isEmpty());
      assertEquals(0, charRanges1.getNumRanges());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charRanges1);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = charRanges0.shift(Integer.MIN_VALUE);
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges0.getNumRanges());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(0, charRanges1.minSetBit());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges1);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = charRanges0.shift(0);
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(0, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertSame(charRanges0, charRanges1);
      assertSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.inclusive((-291), 0);
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals((-291), charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      boolean boolean0 = charRanges1.containsAll(charRanges0);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(boolean0);
      assertEquals(0, charRanges0.minSetBit());
      assertEquals(1, charRanges0.getNumRanges());
      assertFalse(charRanges0.isEmpty());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals((-291), charRanges1.minSetBit());
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-211);
      intArray0[2] = 1;
      intArray0[3] = (-5954);
      intArray0[4] = 45;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(4, charRanges0.getNumRanges());
      assertEquals((-5954), charRanges0.minSetBit());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1, (-211), 1, (-5954), 45}, intArray0);
      assertNotNull(charRanges0);
      
      CharRanges charRanges1 = CharRanges.ALL_CODE_UNITS;
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(0, charRanges1.minSetBit());
      assertNotNull(charRanges1);
      assertNotSame(charRanges1, charRanges0);
      
      boolean boolean0 = charRanges0.containsAll(charRanges1);
      assertFalse(charRanges0.equals((Object)charRanges1));
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertFalse(boolean0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(4, charRanges0.getNumRanges());
      assertEquals((-5954), charRanges0.minSetBit());
      assertEquals(1, charRanges1.getNumRanges());
      assertFalse(charRanges1.isEmpty());
      assertEquals(0, charRanges1.minSetBit());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1, (-211), 1, (-5954), 45}, intArray0);
      assertNotSame(charRanges0, charRanges1);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
      assertNotNull(charRanges0);
      
      boolean boolean0 = charRanges0.containsAll(charRanges0);
      assertTrue(boolean0);
      assertFalse(charRanges0.isEmpty());
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(Integer.MIN_VALUE, charRanges0.minSetBit());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      int[] intArray0 = new int[3];
      intArray0[0] = 565;
      CharRanges charRanges1 = CharRanges.withMembers(intArray0);
      CharRanges charRanges2 = charRanges0.difference(charRanges1);
      assertEquals(2, charRanges2.getNumRanges());
      assertEquals(1, charRanges2.minSetBit());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1719);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = charRanges0.difference(charRanges0);
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals((-1719), charRanges0.minSetBit());
      assertTrue(charRanges1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      CharRanges charRanges1 = charRanges0.ALL_CODE_UNITS.difference(charRanges0);
      assertEquals(1, charRanges1.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      CharRanges charRanges1 = charRanges0.ALL_CODE_UNITS.difference(charRanges0);
      CharRanges charRanges2 = charRanges1.shift(Integer.MIN_VALUE);
      assertEquals(1, charRanges2.getNumRanges());
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertEquals(Integer.MIN_VALUE, charRanges2.minSetBit());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      int[] intArray0 = new int[3];
      intArray0[0] = 565;
      intArray0[2] = 854;
      CharRanges charRanges1 = CharRanges.withMembers(intArray0);
      CharRanges charRanges2 = charRanges0.intersection(charRanges1);
      assertNotSame(charRanges2, charRanges1);
      assertTrue(charRanges2.equals((Object)charRanges1));
      assertEquals(3, charRanges2.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = charRanges0.intersection(charRanges0);
      assertEquals(2, charRanges1.getNumRanges());
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      CharRanges charRanges1 = charRanges0.EMPTY.intersection(charRanges0);
      assertNotSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = CharRanges.inclusive((-1719), (-1719));
      CharRanges charRanges2 = charRanges1.union(charRanges0);
      assertEquals(2, charRanges2.getNumRanges());
      assertEquals((-1719), charRanges2.minSetBit());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1719);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = charRanges0.union(charRanges0);
      assertNotSame(charRanges1, charRanges0);
      assertEquals(2, charRanges1.getNumRanges());
      assertEquals((-1719), charRanges1.minSetBit());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      int[] intArray0 = new int[3];
      intArray0[0] = 565;
      CharRanges charRanges1 = CharRanges.withMembers(intArray0);
      CharRanges charRanges2 = charRanges1.union(charRanges0);
      assertNotSame(charRanges2, charRanges0);
      assertTrue(charRanges2.equals((Object)charRanges0));
      assertEquals(2, charRanges1.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = charRanges0.ALL_CODE_UNITS.union(charRanges0);
      assertEquals(Integer.MIN_VALUE, charRanges1.minSetBit());
      assertFalse(charRanges1.equals((Object)charRanges0));
      assertEquals(2, charRanges1.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[7] = 65551;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = CharRanges.ALL_CODE_UNITS;
      CharRanges charRanges2 = charRanges0.union(charRanges1);
      assertFalse(charRanges2.equals((Object)charRanges0));
      assertEquals(0, charRanges2.minSetBit());
      assertEquals(2, charRanges2.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      CharRanges charRanges1 = charRanges0.EMPTY.union(charRanges0);
      assertSame(charRanges1, charRanges0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = charRanges0.difference(charRanges0);
      boolean boolean0 = charRanges1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      boolean boolean0 = charRanges0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      // Undeclared exception!
      try { 
        charRanges0.minSetBit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      boolean boolean0 = charRanges0.contains(2162);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 861;
      intArray0[4] = (-1);
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals((-1), charRanges0.minSetBit());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 565;
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      CharRanges charRanges1 = charRanges0.ALL_CODE_UNITS.union(charRanges0);
      assertEquals(2, charRanges0.getNumRanges());
      assertEquals(1, charRanges1.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      assertTrue(charRanges0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MIN_VALUE;
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      CharRanges charRanges1 = charRanges0.ALL_CODE_UNITS.union(charRanges0);
      CharRanges charRanges2 = charRanges1.intersection(charRanges0);
      assertTrue(charRanges2.equals((Object)charRanges0));
      assertFalse(charRanges2.equals((Object)charRanges1));
      assertEquals(1, charRanges1.getNumRanges());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        CharRanges.withRanges(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharRanges charRanges0 = CharRanges.withRanges(intArray0);
      boolean boolean0 = charRanges0.contains(1395);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharRanges.inclusive(65536, 717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 65536 > 717
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.ALL_CODE_UNITS;
      // Undeclared exception!
      try { 
        charRanges0.end((-386));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -771
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharRanges charRanges0 = CharRanges.withMembers(intArray0);
      // Undeclared exception!
      try { 
        charRanges0.start(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("com.google.javascript.jscomp.regex.CharRanges", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharRanges charRanges0 = CharRanges.EMPTY;
      int int0 = charRanges0.getNumRanges();
      assertEquals(0, int0);
  }
}
