/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 17:38:45 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.StrictWarningsGuard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrictWarningsGuard_ESTest extends StrictWarningsGuard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
      DiagnosticType diagnosticType0 = StrictWarningsGuard.UNRAISABLE_WARNING;
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(">T*f$|qtXi-?", (-3052), 100, diagnosticType0, stringArray0);
      strictWarningsGuard0.level(jSError0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
      // Undeclared exception!
      try { 
        strictWarningsGuard0.level((JSError) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.StrictWarningsGuard", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
      DiagnosticType diagnosticType0 = DiagnosticType.error("JSC_UNRAISABLE_WARNING", "JSC_UNRAISABLE_WARNING");
      String[] stringArray0 = new String[19];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      CheckLevel checkLevel0 = strictWarningsGuard0.level(jSError0);
      assertEquals(CheckLevel.ERROR, checkLevel0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("WT", checkLevel0, "WT");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("WT", 100, 100, checkLevel0, diagnosticType0, stringArray0);
      strictWarningsGuard0.level(jSError0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StrictWarningsGuard strictWarningsGuard0 = new StrictWarningsGuard();
      int int0 = strictWarningsGuard0.getPriority();
      assertEquals(100, int0);
  }
}
