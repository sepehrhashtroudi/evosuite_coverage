/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:45:10 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.NameGenerator;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NameGenerator_ESTest extends NameGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char[] charArray0 = new char[0];
      NameGenerator nameGenerator0 = new NameGenerator(linkedHashSet0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$", charArray0);
      linkedHashSet0.add("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$");
      nameGenerator0.generateNextName();
      String string0 = nameGenerator0.generateNextName();
      assertEquals("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$b", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NameGenerator nameGenerator0 = new NameGenerator(linkedHashSet0, "", (char[]) null);
      nameGenerator0.generateNextName();
      String string0 = nameGenerator0.generateNextName();
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = NameGenerator.reserveCharacters((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = NameGenerator.reserveCharacters(charArray0, (char[]) null);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NameGenerator nameGenerator0 = new NameGenerator((Set<String>) null, "", (char[]) null);
      // Undeclared exception!
      try { 
        nameGenerator0.generateNextName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[6];
      NameGenerator nameGenerator0 = null;
      try {
        nameGenerator0 = new NameGenerator((Set<String>) null, "I-n", charArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/primitives/Chars
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = NameGenerator.reserveCharacters(charArray0, charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NameGenerator nameGenerator0 = null;
      try {
        nameGenerator0 = new NameGenerator(linkedHashSet0, "ctL);OWDWw", charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix has invalid characters, must be one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(2339);
      char[] charArray0 = new char[0];
      NameGenerator nameGenerator0 = null;
      try {
        nameGenerator0 = new NameGenerator(linkedHashSet0, "2E='ee(\"x", charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix must start with one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char[] charArray0 = new char[0];
      NameGenerator nameGenerator0 = new NameGenerator(linkedHashSet0, "default", charArray0);
      String string0 = nameGenerator0.generateNextName();
      assertEquals("defaulta", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[4];
      // Undeclared exception!
      try { 
        NameGenerator.reserveCharacters(charArray0, charArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/primitives/Chars
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NameGenerator nameGenerator0 = null;
      try {
        nameGenerator0 = new NameGenerator(linkedHashSet0, (String) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }
}
