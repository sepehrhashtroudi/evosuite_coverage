/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 16 17:15:35 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSError_ESTest extends JSError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      DiagnosticType diagnosticType0 = DiagnosticType.make("J=W;", checkLevel0, "Computing Control Flow Graph");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("J=W;", (-106), (-106), checkLevel0, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make("Computing Control Flow Graph", (Node) null, diagnosticType0, stringArray0);
      boolean boolean0 = jSError0.equals(jSError1);
      assertFalse(boolean0);
      assertEquals((-106), jSError0.lineNumber);
      assertEquals((-106), jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node(796, 796, 31);
      DiagnosticType diagnosticType0 = DiagnosticType.warning("", "StringNode: str is null");
      String[] stringArray0 = new String[2];
      JSError.make("", node0, diagnosticType0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node(42, 49, 42);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("jIE> Rb3@=dV", "");
      String[] stringArray0 = new String[4];
      JSError.make("jIE> Rb3@=dV", node0, checkLevel0, diagnosticType0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("6=*qd6p:70cP%GN?h$V", checkLevel0, "the error manager cannot be null");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("6=*qd6p:70cP%GN?h$V", 0, 0, diagnosticType0, stringArray0);
      assertEquals(0, jSError0.lineNumber);
      assertEquals(0, jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("&YAdYD|)e7|", "Y}_)Mc|rLy!s:+FNp");
      Node node0 = new Node((-1473), 2, 31);
      JSError.make(node0, diagnosticType0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiagnosticType diagnosticType0 = AbstractCompiler.READ_ERROR;
      String[] stringArray0 = new String[6];
      JSError jSError0 = JSError.make("", 0, (-2561), diagnosticType0.level, diagnosticType0, stringArray0);
      int int0 = jSError0.getLineNumber();
      assertEquals((-2561), jSError0.getCharno());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("", "");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      int int0 = jSError0.getLineNumber();
      assertEquals((-1), int0);
      assertEquals((-1), jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("Exceeded max number of optimization iterations: {0}", "JSC_DUPLICATE_EXTERN_INPUT");
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make("Exceeded max number of optimization iterations: {0}", 31, 131072, diagnosticType0, stringArray0);
      int int0 = jSError0.getCharno();
      assertEquals(31, jSError0.lineNumber);
      assertEquals(131072, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      DiagnosticType diagnosticType0 = DiagnosticType.make("J=W;", checkLevel0, "Computing Control Flow Graph");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("J=W;", (-106), (-106), checkLevel0, diagnosticType0, stringArray0);
      int int0 = jSError0.getCharno();
      assertEquals((-106), int0);
      assertEquals((-106), jSError0.lineNumber);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(436);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JSError.make("second new child has existing parent", node0, (DiagnosticType) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSError.make("vB+", (-4066), 31, (DiagnosticType) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      // Undeclared exception!
      try { 
        JSError.make("1Jw4", 1353, 1882, checkLevel0, (DiagnosticType) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("", "");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JSError.make((Node) null, diagnosticType0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JSError.make((DiagnosticType) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning((String) null, "e8PkC>");
      String[] stringArray0 = new String[0];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      // Undeclared exception!
      try { 
        jSError0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DiagnosticType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node(436);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make((String) null, checkLevel0, "");
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make((String) null, node0, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make(node0, diagnosticType0, stringArray0);
      // Undeclared exception!
      try { 
        jSError0.equals(jSError1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DiagnosticType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("ReferenceError", "ReferenceError");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make("ReferenceError", (Node) null, diagnosticType0, stringArray0);
      jSError0.hashCode();
      assertEquals((-1), jSError0.getCharno());
      assertEquals((-1), jSError0.lineNumber);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("ReferenceError", "ReferenceError");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(stringArray0[5], (-1), (-18), diagnosticType0, stringArray0);
      jSError0.hashCode();
      assertEquals((-1), jSError0.lineNumber);
      assertEquals((-18), jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = new Node((-253), (-253), (-253));
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("D_4SUH", checkLevel0, "D_4SUH");
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make(node0, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make("D_4SUH", node0, diagnosticType0.level, diagnosticType0, stringArray0);
      jSError0.equals(jSError1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node((-253), (-253), (-253));
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("D_4SUH", checkLevel0, "D_4SUH");
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make(node0, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make(diagnosticType0, stringArray0);
      jSError0.equals(jSError1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("Refe4enceErroJ", "Refe4enceErroJ");
      String[] stringArray0 = new String[8];
      DiagnosticType diagnosticType1 = DiagnosticType.error("Refe4enceErroJ", "Refe4enceErroJ");
      JSError jSError0 = JSError.make("Refe4enceErroJ", (Node) null, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make((String) null, (Node) null, diagnosticType1, stringArray0);
      boolean boolean0 = jSError0.equals(jSError1);
      assertEquals((-1), jSError1.getCharno());
      assertEquals((-1), jSError1.lineNumber);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("RefereceError", "RefereceError");
      String[] stringArray0 = new String[8];
      DiagnosticType diagnosticType1 = DiagnosticType.make("RefereceError", diagnosticType0.level, "(unknown line)");
      JSError jSError0 = JSError.make("RefereceError", (Node) null, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make((String) null, (Node) null, diagnosticType1, stringArray0);
      boolean boolean0 = jSError0.equals(jSError1);
      assertFalse(boolean0);
      assertEquals((-1), jSError1.getCharno());
      assertEquals((-1), jSError1.lineNumber);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("Refe4enceErroJ", "Refe4enceErroJ");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make("Refe4enceErroJ", (Node) null, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make(diagnosticType0, stringArray0);
      boolean boolean0 = jSError0.equals(jSError1);
      assertEquals((-1), jSError1.lineNumber);
      assertFalse(boolean0);
      assertEquals((-1), jSError1.getCharno());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = new Node((-253), (-253), (-253));
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("D_4SUH", checkLevel0, "D_4SUH");
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make(node0, diagnosticType0, stringArray0);
      jSError0.equals("D_4SUH");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("Computing Cobtrol Nlow Graph", "Computing Cobtrol Nlow Graph");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("J=W;", (-106), 0, checkLevel0, diagnosticType0, stringArray0);
      boolean boolean0 = jSError0.equals((Object) null);
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getCharno());
      assertEquals((-106), jSError0.lineNumber);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.error("", "");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", (-1809), (-598), diagnosticType0, stringArray0);
      boolean boolean0 = jSError0.equals(jSError0);
      assertEquals((-1809), jSError0.lineNumber);
      assertEquals((-598), jSError0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("Computing Cobtrol Nlow Graph", "Computing Cobtrol Nlow Graph");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("J=W;", (-106), 0, checkLevel0, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make("Computing Cobtrol Nlow Graph", (Node) null, diagnosticType0, stringArray0);
      boolean boolean0 = jSError0.equals(jSError1);
      assertFalse(boolean0);
      assertEquals((-1), jSError1.getCharno());
      assertEquals(0, jSError0.getCharno());
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals((-106), jSError0.lineNumber);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = new Node((-253), (-253), (-253));
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("D_4SUH", checkLevel0, "D_4SUH");
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make(node0, diagnosticType0, stringArray0);
      jSError0.getNodeLength();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("Refe4enceErroJ", "Refe4enceErroJ");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make("Refe4enceErroJ", (Node) null, diagnosticType0, stringArray0);
      int int0 = jSError0.getNodeLength();
      assertEquals((-1), jSError0.lineNumber);
      assertEquals((-1), jSError0.getCharno());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      jSError0.getNodeSourceOffset();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("Computing Cobtrol Nlow Graph", "Computing Cobtrol Nlow Graph");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("J=W;", (-106), 0, checkLevel0, diagnosticType0, stringArray0);
      int int0 = jSError0.getNodeSourceOffset();
      assertEquals((-1), int0);
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getCharno());
      assertEquals((-106), jSError0.lineNumber);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      JSError jSError1 = JSError.make(". ", 32, (-1784), jSError0.level, diagnosticType0, stringArray0);
      jSError1.toString();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      jSError0.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.warning("Refe4enceErroJ", "Refe4enceErroJ");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(stringArray0[5], (-209), (-18), diagnosticType0, stringArray0);
      String string0 = jSError0.toString();
      assertEquals("Refe4enceErroJ. Refe4enceErroJ at (unknown source) line -209 : -18", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = new Node(0, 304, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      // Undeclared exception!
      try { 
        jSError0.format(checkLevel0, (MessageFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      jSError0.format(diagnosticType0.defaultLevel, (MessageFormatter) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      JSError jSError1 = JSError.make("", node0, checkLevel0, diagnosticType0, stringArray0);
      // Undeclared exception!
      try { 
        jSError0.format(jSError1.level, (MessageFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("Computing Cobtrol Nlow Graph", "Computing Cobtrol Nlow Graph");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("Computing Cobtrol Nlow Graph", (Node) null, diagnosticType0, stringArray0);
      String string0 = jSError0.toString();
      assertEquals("Computing Cobtrol Nlow Graph. Computing Cobtrol Nlow Graph at Computing Cobtrol Nlow Graph line (unknown line) : (unknown column)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError.make(node0, diagnosticType0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.error("(unknown source)", ">");
      String[] stringArray0 = new String[4];
      JSError jSError0 = JSError.make("(unknown source)", 4415, 4415, checkLevel0, diagnosticType0, stringArray0);
      int int0 = jSError0.getLineNumber();
      assertEquals(4415, int0);
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(4415, jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = new Node(0, 304, 0);
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("", ". ");
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make("", node0, diagnosticType0, stringArray0);
      jSError0.getCharno();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("oi\rB?#CbE'|k", "[$L?4%FU");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make("z~R\"Nn(L", (-3434), (-3434), diagnosticType0, stringArray0);
      jSError0.getType();
      assertEquals((-3434), jSError0.getCharno());
      assertEquals((-3434), jSError0.lineNumber);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("oi\rB?#CbE'|k", "[$L?4%FU");
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make("z~R\"Nn(L", (-3434), (-3434), diagnosticType0, stringArray0);
      jSError0.getDefaultLevel();
      assertEquals((-3434), jSError0.getCharno());
      assertEquals((-3434), jSError0.lineNumber);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DiagnosticType diagnosticType0 = AbstractCompiler.READ_ERROR;
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        JSError.make((String) null, (Node) null, diagnosticType0.level, diagnosticType0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }
}
