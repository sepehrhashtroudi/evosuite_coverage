/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:42:26 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.GlobalVarReferenceMap;
import com.google.javascript.rhino.Node;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlobalVarReferenceMap_ESTest extends GlobalVarReferenceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GlobalVarReferenceMap.GlobalVarRefCleanupPass globalVarReferenceMap_GlobalVarRefCleanupPass0 = new GlobalVarReferenceMap.GlobalVarRefCleanupPass((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        globalVarReferenceMap_GlobalVarRefCleanupPass0.hotSwapScript((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.GlobalVarReferenceMap$GlobalVarRefCleanupPass", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GlobalVarReferenceMap globalVarReferenceMap0 = null;
      try {
        globalVarReferenceMap0 = new GlobalVarReferenceMap((List<CompilerInput>) null, (List<CompilerInput>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Maps
         //
         verifyException("com.google.javascript.jscomp.GlobalVarReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GlobalVarReferenceMap.GlobalVarRefCleanupPass globalVarReferenceMap_GlobalVarRefCleanupPass0 = new GlobalVarReferenceMap.GlobalVarRefCleanupPass((AbstractCompiler) null);
      Node node0 = new Node((-1));
      globalVarReferenceMap_GlobalVarRefCleanupPass0.process(node0, node0);
  }
}
