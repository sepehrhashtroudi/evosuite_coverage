/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:25:28 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorPass;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ErrorPass_ESTest extends ErrorPass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ErrorPass errorPass0 = null;
      try {
        errorPass0 = new ErrorPass((AbstractCompiler) null, (DiagnosticType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ErrorPass errorPass0 = new ErrorPass((AbstractCompiler) null, (JSError) null);
      Node node0 = new Node((-2263), (-2263), 0);
      // Undeclared exception!
      try { 
        errorPass0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ErrorPass", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiagnosticType diagnosticType0 = AbstractCompiler.READ_ERROR;
      ErrorPass errorPass0 = new ErrorPass((AbstractCompiler) null, diagnosticType0);
  }
}
