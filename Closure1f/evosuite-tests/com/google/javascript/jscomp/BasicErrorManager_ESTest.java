/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:02:17 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.BasicErrorManager;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicErrorManager_ESTest extends BasicErrorManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicErrorManager.LeveledJSErrorComparator basicErrorManager_LeveledJSErrorComparator0 = new BasicErrorManager.LeveledJSErrorComparator();
      DiagnosticType diagnosticType0 = DiagnosticType.warning("-C", "");
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("", 124, 0, diagnosticType0, stringArray0);
      BasicErrorManager.ErrorWithLevel basicErrorManager_ErrorWithLevel0 = new BasicErrorManager.ErrorWithLevel(jSError0, diagnosticType0.level);
      BasicErrorManager.ErrorWithLevel basicErrorManager_ErrorWithLevel1 = new BasicErrorManager.ErrorWithLevel(jSError0, diagnosticType0.defaultLevel);
      int int0 = basicErrorManager_LeveledJSErrorComparator0.compare(basicErrorManager_ErrorWithLevel1, basicErrorManager_ErrorWithLevel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicErrorManager.LeveledJSErrorComparator basicErrorManager_LeveledJSErrorComparator0 = new BasicErrorManager.LeveledJSErrorComparator();
      DiagnosticType diagnosticType0 = DiagnosticType.disabled("L9Oi;!uaHv=yyHR#", "L9Oi;!uaHv=yyHR#");
      String[] stringArray0 = new String[4];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      BasicErrorManager.ErrorWithLevel basicErrorManager_ErrorWithLevel0 = new BasicErrorManager.ErrorWithLevel(jSError0, diagnosticType0.level);
      int int0 = basicErrorManager_LeveledJSErrorComparator0.compare(basicErrorManager_ErrorWithLevel0, basicErrorManager_ErrorWithLevel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicErrorManager.LeveledJSErrorComparator basicErrorManager_LeveledJSErrorComparator0 = new BasicErrorManager.LeveledJSErrorComparator();
      int int0 = basicErrorManager_LeveledJSErrorComparator0.compare((BasicErrorManager.ErrorWithLevel) null, (BasicErrorManager.ErrorWithLevel) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = null;
      try {
        loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("com.google.javascript.jscomp.BasicErrorManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicErrorManager.LeveledJSErrorComparator basicErrorManager_LeveledJSErrorComparator0 = new BasicErrorManager.LeveledJSErrorComparator();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = DiagnosticType.make("com.google.javascript.jscomp.BasicErrorManager", checkLevel0, "");
      String[] stringArray0 = new String[5];
      JSError jSError0 = JSError.make("uR)3!t'S;x$G", 0, 0, diagnosticType0, stringArray0);
      BasicErrorManager.ErrorWithLevel basicErrorManager_ErrorWithLevel0 = new BasicErrorManager.ErrorWithLevel(jSError0, checkLevel0);
      int int0 = basicErrorManager_LeveledJSErrorComparator0.compare(basicErrorManager_ErrorWithLevel0, basicErrorManager_ErrorWithLevel0);
      assertEquals(0, int0);
  }
}
