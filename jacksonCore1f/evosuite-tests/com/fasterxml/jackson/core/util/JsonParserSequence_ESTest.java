/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:31:29 GMT 2023
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonParserSequence_ESTest extends JsonParserSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[6];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (byte) (-76), true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      jsonParserArray0[0] = (JsonParser) readerBasedJsonParser0;
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonParser jsonParser0 = jsonParserSequence1.setFeatureMask(33);
      jsonParserArray0[1] = jsonParser0;
      JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParserSequence1, readerBasedJsonParser0);
      jsonParserArray0[2] = (JsonParser) jsonParserSequence2;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      jsonParserArray0[3] = (JsonParser) readerBasedJsonParser0;
      JsonParser jsonParser1 = jsonParserSequence0.enable(jsonParser_Feature0);
      jsonParserArray0[5] = (JsonParser) uTF8StreamJsonParser0;
      JsonParserSequence jsonParserSequence3 = new JsonParserSequence(jsonParserArray0);
      JsonParser jsonParser2 = jsonParserSequence3.disable(jsonParser_Feature0);
      JsonParserSequence.createFlattened(jsonParser2, jsonParserSequence0);
      jsonParserSequence2.nextToken();
      // Undeclared exception!
      try { 
        jsonParser1.nextToken();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[2];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2000);
      StringReader stringReader0 = new StringReader(";-g/M_D");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer.createRoot();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, bufferedInputStream0, objectCodec1, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, true);
      jsonParserArray0[0] = (JsonParser) uTF8StreamJsonParser0;
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParserSequence0, readerBasedJsonParser0);
      jsonParserArray0[1] = (JsonParser) jsonParserSequence1;
      JsonParserSequence jsonParserSequence2 = new JsonParserSequence(jsonParserArray0);
      jsonParserSequence0.canReadTypeId();
      // Undeclared exception!
      try { 
        jsonParserSequence2.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[7];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.JsonParserSequence");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-507), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      jsonParserArray0[0] = (JsonParser) jsonParserSequence1;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonParserSequence0.delegate;
      jsonParserArray0[1] = (JsonParser) readerBasedJsonParser1;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParserSequence jsonParserSequence2 = (JsonParserSequence)jsonParserSequence0.configure(jsonParser_Feature0, false);
      jsonParserArray0[2] = (JsonParser) jsonParserSequence2;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ReaderBasedJsonParser readerBasedJsonParser2 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature1);
      jsonParserArray0[3] = (JsonParser) readerBasedJsonParser2;
      JsonParserSequence jsonParserSequence3 = JsonParserSequence.createFlattened(readerBasedJsonParser2, jsonParserArray0[3]);
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParserSequence jsonParserSequence4 = (JsonParserSequence)jsonParserSequence3.enable(jsonParser_Feature2);
      jsonParserArray0[4] = (JsonParser) jsonParserSequence4;
      JsonParserSequence jsonParserSequence5 = JsonParserSequence.createFlattened(readerBasedJsonParser2, jsonParserArray0[4]);
      jsonParserArray0[5] = (JsonParser) jsonParserSequence5;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ReaderBasedJsonParser readerBasedJsonParser3 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature3);
      jsonParserArray0[6] = (JsonParser) readerBasedJsonParser3;
      JsonParserSequence jsonParserSequence6 = new JsonParserSequence(jsonParserArray0);
      jsonParserSequence1._nextParser = 1231;
      jsonParserSequence6.close();
      jsonParserSequence0.containedParsersCount();
      jsonParserSequence1.containedParsersCount();
      System.setCurrentTimeMillis((-507));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[v");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      JsonToken jsonToken0 = jsonParserSequence0.nextToken();
      assertEquals(JsonToken.START_ARRAY, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[2];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)6;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 16, bufferedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, (byte)6, 346, true);
      jsonParserArray0[0] = (JsonParser) uTF8StreamJsonParser0;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(true, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-76), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      jsonParserArray0[1] = jsonParser0;
      JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
      // Undeclared exception!
      try { 
        jsonParserSequence0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")n4.r5Pc\"O-LT&8");
      System.setCurrentTimeMillis((-1L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ")n4.r5Pc\"O-LT&8", true);
      StringReader stringReader0 = new StringReader(")n4.r5Pc\"O-LT&8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      try { 
        jsonParserSequence0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (')' (code 41)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000017; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened((JsonParser) null, jsonParserSequence0);
      jsonParserSequence1._nextParser = 2547;
      String string0 = "=0)0";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=0)0");
      JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParserSequence0, jsonParserSequence1);
      // Undeclared exception!
      try { 
        jsonParserSequence2.getTextOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , nullable(java.lang.Class.class));
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      mockFileInputStream0.release();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, 0, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      jsonParserSequence0.getCodec();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(true, false);
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserArray0);
      jsonParserSequence1.switchToNext();
      Class<InputStream> class0 = InputStream.class;
      uTF8StreamJsonParser0.readValueAs(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uosgg{{\"A");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jsonParserSequence0.containedParsersCount();
      try { 
        jsonParserSequence0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 0 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[2];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2000);
      StringReader stringReader0 = new StringReader(";-g/M_D");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer.createRoot();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, bufferedInputStream0, objectCodec1, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, true);
      jsonParserArray0[0] = (JsonParser) uTF8StreamJsonParser0;
      JsonParser jsonParser0 = jsonParserSequence0.skipChildren();
      jsonParserArray0[1] = jsonParser0;
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserArray0);
      boolean boolean0 = jsonParserSequence1.switchToNext();
      assertTrue(boolean0);
      
      jsonParserSequence1.close();
      boolean boolean1 = jsonParserSequence1.switchToNext();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      jsonParserSequence0.containedParsersCount();
      LinkedList<JsonParser> linkedList0 = new LinkedList<JsonParser>();
      linkedList0.add((JsonParser) jsonParserSequence0);
      jsonParserSequence0.addFlattenedActiveParsers(linkedList0);
      jsonParserSequence0.switchToNext();
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened((JsonParser) null, jsonParserSequence0);
      jsonParserSequence1.containedParsersCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        jsonParserSequence1.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[7];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.JsonParserSequence");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-507), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonParser jsonParser0 = jsonParserSequence0.skipChildren();
      jsonParserArray0[0] = jsonParser0;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonParserSequence0.delegate;
      jsonParserArray0[1] = (JsonParser) readerBasedJsonParser1;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParser jsonParser1 = jsonParserSequence0.configure(jsonParser_Feature0, false);
      jsonParserArray0[2] = jsonParser1;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser2 = readerBasedJsonParser0.enable(jsonParser_Feature1);
      jsonParserArray0[3] = jsonParser2;
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParser2, jsonParserArray0[3]);
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser3 = jsonParserSequence1.enable(jsonParser_Feature2);
      jsonParserArray0[4] = jsonParser3;
      JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParser2, jsonParserArray0[4]);
      jsonParserArray0[5] = (JsonParser) jsonParserSequence2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser4 = readerBasedJsonParser0.enable(jsonParser_Feature3);
      jsonParserArray0[6] = jsonParser4;
      JsonParserSequence jsonParserSequence3 = new JsonParserSequence(jsonParserArray0);
      jsonParserSequence3.close();
      assertFalse(jsonParserSequence3.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[6];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (byte) (-76), false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      jsonParserArray0[0] = (JsonParser) readerBasedJsonParser0;
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonParser jsonParser0 = jsonParserSequence1.setFeatureMask(0);
      jsonParserArray0[1] = jsonParser0;
      JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParserSequence1, readerBasedJsonParser0);
      assertEquals(3, jsonParserSequence2.containedParsersCount());
      
      jsonParserArray0[2] = (JsonParser) jsonParserSequence2;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser1 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      jsonParserArray0[3] = jsonParser1;
      JsonParser jsonParser2 = jsonParserSequence0.enable(jsonParser_Feature0);
      jsonParserArray0[4] = jsonParser2;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-76);
      byteArray1[4] = (byte) (-76);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec1, bytesToNameCanonicalizer0, byteArray1, 0, (byte)2, true);
      jsonParserArray0[5] = (JsonParser) uTF8StreamJsonParser1;
      JsonParserSequence jsonParserSequence3 = new JsonParserSequence(jsonParserArray0);
      JsonParser jsonParser3 = jsonParserSequence3.disable(jsonParser_Feature0);
      JsonParserSequence jsonParserSequence4 = JsonParserSequence.createFlattened(jsonParser3, jsonParserSequence0);
      assertEquals(12, jsonParserSequence4.containedParsersCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[3];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParserSequence0, jsonParserSequence0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonParserSequence1, false);
      StringReader stringReader0 = new StringReader("-Infinity");
      // Undeclared exception!
      try { 
        jsonParserSequence1.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      jsonParserSequence0.nextToken();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-917L));
      JsonParser[] jsonParserArray0 = new JsonParser[1];
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      JsonParser jsonParser0 = jsonParserSequence0.delegate;
      jsonParserArray0[0] = null;
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserArray0);
      int int0 = jsonParserSequence1.containedParsersCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      boolean boolean0 = jsonParserSequence0.switchToNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[9];
      JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParserSequence0);
      jsonParserArray0[0] = (JsonParser) jsonParserDelegate0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[0];
      JsonParserSequence jsonParserSequence0 = null;
      try {
        jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonParser jsonParser0 = null;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        jsonParserSequence0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonParser[] jsonParserArray0 = null;
      JsonParserSequence jsonParserSequence0 = null;
      try {
        jsonParserSequence0 = new JsonParserSequence((JsonParser[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      double double0 = 3707.922318582496;
      // Undeclared exception!
      try { 
        jsonParserSequence0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        jsonParserSequence0.addFlattenedActiveParsers((List<JsonParser>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParserDelegate0, (JsonParser) null);
      LinkedList<JsonParser> linkedList0 = new LinkedList<JsonParser>();
      jsonParserSequence0.addFlattenedActiveParsers(linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened((JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        jsonParserSequence0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      jsonParserSequence0.nextToken();
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[15];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.JsonParserSequence");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      jsonParserArray0[0] = (JsonParser) jsonParserSequence0;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonParserSequence0.delegate;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParserArray0[3] = (JsonParser) readerBasedJsonParser1;
      JsonParser jsonParser0 = jsonParserSequence0.enable(jsonParser_Feature0);
      jsonParserArray0[4] = jsonParser0;
      JsonParserSequence.createFlattened(readerBasedJsonParser1, jsonParserArray0[4]);
      JsonParser jsonParser1 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      jsonParserArray0[6] = jsonParser1;
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserArray0);
      // Undeclared exception!
      try { 
        jsonParserSequence1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      jsonParserSequence0.nextToken();
      int int0 = jsonParserSequence0.containedParsersCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      jsonParserSequence0.nextToken();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[6];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-76), (byte) (-76), true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      ObjectCodec objectCodec1 = jsonParserSequence0.getCodec();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      jsonParserArray0[0] = (JsonParser) readerBasedJsonParser0;
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      JsonParser jsonParser0 = jsonParserSequence1.setFeatureMask(33);
      jsonParserArray0[1] = jsonParser0;
      JsonParserSequence jsonParserSequence2 = JsonParserSequence.createFlattened(jsonParserSequence1, readerBasedJsonParser0);
      assertEquals(3, jsonParserSequence2.containedParsersCount());
      
      jsonParserArray0[2] = (JsonParser) jsonParserSequence2;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      jsonParserArray0[3] = (JsonParser) readerBasedJsonParser0;
      jsonParserSequence0.enable(jsonParser_Feature0);
      jsonParserArray0[5] = (JsonParser) uTF8StreamJsonParser0;
      JsonParserSequence jsonParserSequence3 = new JsonParserSequence(jsonParserArray0);
      JsonParser jsonParser1 = jsonParserSequence3.disable(jsonParser_Feature0);
      JsonParserSequence jsonParserSequence4 = JsonParserSequence.createFlattened(jsonParser1, jsonParserSequence0);
      assertEquals(11, jsonParserSequence4.containedParsersCount());
  }
}
