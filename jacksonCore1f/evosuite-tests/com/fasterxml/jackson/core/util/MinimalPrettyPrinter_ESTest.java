/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:29:30 GMT 2023
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinimalPrettyPrinter_ESTest extends MinimalPrettyPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("UTF8");
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeRootValueSeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      minimalPrettyPrinter0.writeObjectFieldValueSeparator(uTF8JsonGenerator0);
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("^!+f|+Yk%V9(.QslCY");
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeStartObject((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("qI|pQC,?");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 177, true);
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeStartArray((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " ", false);
      MockFile mockFile0 = new MockFile("1.W72_Z` BjA<eHj");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2485), false);
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2485
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " ", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, (OutputStream) null, byteArray0, 100, true);
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeObjectEntrySeparator(uTF8JsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(" ");
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeEndObject((JsonGenerator) null, 1685);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2000, false);
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeEndObject(uTF8JsonGenerator0, (byte)31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeEndArray((JsonGenerator) null, 2412);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 4063, true);
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 1003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeArrayValueSeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-23), false);
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeRootValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter((String) null);
      minimalPrettyPrinter0.writeRootValueSeparator((JsonGenerator) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.writeEndObject(uTF8JsonGenerator0, (-2453));
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.beforeObjectEntries(uTF8JsonGenerator0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.writeObjectEntrySeparator(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.writeArrayValueSeparator(uTF8JsonGenerator0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      minimalPrettyPrinter0.setRootValueSeparator("H2C!n]X2Hfi#|s9");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      // Undeclared exception!
      try { 
        minimalPrettyPrinter0.writeObjectFieldValueSeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minimalPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1032, (ObjectCodec) null, pipedOutputStream0);
      minimalPrettyPrinter0.beforeArrayValues(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
  }
}
