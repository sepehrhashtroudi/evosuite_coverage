/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:16:52 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.CharTypes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharTypes_ESTest extends CharTypes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = CharTypes.charToHex(127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = CharTypes.charToHex(48);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = CharTypes.charToHex(98);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharTypes.charToHex((-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("com.fasterxml.jackson.core.io.CharTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharTypes.appendQuoted((StringBuilder) null, "6^;OPB'hZGq*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.CharTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharTypes.appendQuoted(stringBuilder0, "ZeH1+r(jnQ%\"5");
      assertEquals("ZeH1+r(jnQ%\\\"5", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = CharTypes.charToHex(1356);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = CharTypes.copyHexBytes();
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = CharTypes.getInputCodeUtf8();
      assertEquals(256, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharTypes charTypes0 = new CharTypes();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = CharTypes.getInputCodeComment();
      assertEquals(256, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = CharTypes.getInputCodeLatin1JsNames();
      assertEquals(256, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = CharTypes.getInputCodeUtf8JsNames();
      assertEquals(256, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = CharTypes.getInputCodeLatin1();
      assertEquals(256, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = CharTypes.copyHexChars();
      assertEquals(16, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = CharTypes.get7BitOutputEscapes();
      assertEquals(128, intArray0.length);
  }
}
