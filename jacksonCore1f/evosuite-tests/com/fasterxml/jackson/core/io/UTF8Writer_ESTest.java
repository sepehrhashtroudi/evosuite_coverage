/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:17:33 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.UTF8Writer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UTF8Writer_ESTest extends UTF8Writer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = UTF8Writer.illegalSurrogateDesc(55296);
      assertEquals("Unmatched first part of surrogate pair (0xd800)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        UTF8Writer.illegalSurrogate(1114111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unmatched second part of surrogate pair (0x10ffff)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[6];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write("q$[");
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("q$", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("!?", "!?");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      uTF8Writer0.write(".'");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-zDo<", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_LE", false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      uTF8Writer0.write(128);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Unmatched first part of surrogate pair (0xdbf9)", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.write(56313);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      File file0 = MockFile.createTempFile(" _7);T@x*", " _7);T@x*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.close();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[9];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      char[] charArray0 = new char[7];
      try { 
        uTF8Writer0.write(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "P}`([L6fQL=>Ra*xu", true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8Writer0.write((String) null, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.close();
      // Undeclared exception!
      try { 
        uTF8Writer0.write("q$[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      File file0 = MockFile.createTempFile(" _7);T@x*", " _7);T@x*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.close();
      // Undeclared exception!
      try { 
        uTF8Writer0.write(3996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[1];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write(2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, filterOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.append('<');
      try { 
        uTF8Writer0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, bufferedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRITE_ENCODING_BUFFER", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, objectOutputStream0);
      byte[] byteArray0 = new byte[0];
      iOContext0._writeEncodingBuffer = byteArray0;
      // Undeclared exception!
      try { 
        uTF8Writer0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.append('<');
      try { 
        uTF8Writer0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile(" _7);T@x*", " _7);T@x*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.close();
      // Undeclared exception!
      try { 
        uTF8Writer0.append('');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = null;
      try {
        uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "HD'gW&?u3tU}aaBr");
      iOContext0.allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8Writer uTF8Writer0 = null;
      try {
        uTF8Writer0 = new UTF8Writer(iOContext0, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write("Unmatched first part of surrogate pair (0x", 0, 57343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8Writer0.write("UTF32_BE", 0, 329);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[1];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write("q$[", (-884), 1245);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write((String) null, (-2252), 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(1602);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(740);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0, 740, 1602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1602
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[1];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0, 1264, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1264
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = UTF8Writer.illegalSurrogateDesc(56319);
      assertEquals("Unmatched first part of surrogate pair (0xdbff)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        UTF8Writer.illegalSurrogate(1114118);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character point (0x110006) to output; max is 0x10FFFF as per RFC 4627
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRITE_CONCAT_BUFFER", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2445);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      try { 
        uTF8Writer0.convertSurrogate(1114111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken surrogate pair: first char 0x0, second 0x10ffff; illegal combination
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      try { 
        uTF8Writer0.convertSurrogate(2000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken surrogate pair: first char 0x0, second 0x7d0; illegal combination
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0080';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Writer writer0 = uTF8Writer0.append((CharSequence) charBuffer0);
      assertSame(uTF8Writer0, writer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile(") to output; max is 0x10FFFF as per RFC 4627", "a/Xo#<0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write("B5^d<8", 2000, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      File file0 = MockFile.createTempFile(" _7);T@x*", " _7);T@x*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.write(3996);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[1];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write((-884));
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Unmatched second part of surrogate pair (0xdc35)", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      try { 
        uTF8Writer0.write(56373);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unmatched second part of surrogate pair (0xdc35)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      uTF8Writer0.write(262145);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[2] = '\u0080';
      uTF8Writer0.write(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0080';
      uTF8Writer0.write(charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER;
      byte[] byteArray0 = new byte[1];
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      char[] charArray0 = new char[2];
      uTF8Writer0.write(charArray0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Unmatched first part of surrogate pair (0xdbff)", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.write(56319);
      // Undeclared exception!
      try { 
        uTF8Writer0.write(iOContext0._concatCBuffer, (-426), 181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      char[] charArray0 = new char[1];
      uTF8Writer0.write(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      File file0 = MockFile.createTempFile(" _7);T@x*", " _7);T@x*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      char[] charArray0 = new char[2];
      uTF8Writer0.write(charArray0, 2000, (-398));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write("q$[");
      uTF8Writer0.flush();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("q$[", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      File file0 = MockFile.createTempFile(" _7);T@x*", " _7);T@x*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      uTF8Writer0.close();
      uTF8Writer0.flush();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile(") to output; max is 0x10FFFF as per RFC 4627", "a/Xo#<0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      uTF8Writer0.append('7');
      uTF8Writer0.close();
      assertEquals(1L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile(") to output; max is 0x10FFFF as per RFC 4627", "a/Xo#<0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      uTF8Writer0.close();
      uTF8Writer0.close();
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        UTF8Writer.illegalSurrogate(16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character point (0x10) to output
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }
}
