/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:19:45 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.MergedStream;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MergedStream_ESTest extends MergedStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.io.MergedStream", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 2000, 2000);
      long long0 = mergedStream0.skip((-1155L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[10];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, dataInputStream0, byteArray0, 4, 4);
      long long0 = mergedStream0.skip(4);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      byte[] byteArray0 = new byte[2];
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 255, 2000);
      long long0 = mergedStream0.skip((byte) (-16));
      assertEquals((-16L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, sequenceInputStream0, byteArray0, 5, (byte)14);
      mergedStream0.close();
      int int0 = mergedStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, sequenceInputStream0, (byte[]) null, 2138, 422);
      int int0 = mergedStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "4f!py5", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write(0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 2000, 2000);
      int int0 = mergedStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      byte[] byteArray0 = new byte[6];
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, (byte)88, (byte)65);
      int int0 = mergedStream0.available();
      assertEquals((-23), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, (byte[]) null, 2000, 2000);
      // Undeclared exception!
      try { 
        mergedStream0.skip(5279L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3599), (-3599));
      MergedStream mergedStream0 = new MergedStream(iOContext0, byteArrayInputStream0, byteArray0, 2000, (-3599));
      // Undeclared exception!
      try { 
        mergedStream0.skip(2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 2000, (-1237));
      try { 
        mergedStream0.skip(2000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, sequenceInputStream0, byteArray0, 5, (byte)14);
      mergedStream0.close();
      try { 
        mergedStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2000);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      byte[] byteArray0 = new byte[2];
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, (byte)0, (byte)0);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, dataInputStream0, (byte[]) null, 255, 255);
      try { 
        mergedStream0.read((byte[]) null, 255, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "--6dBo4*ub", false);
      byte[] byteArray0 = new byte[8];
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, byteArray0, (byte)0, (byte)1);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream(931);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      MergedStream mergedStream0 = new MergedStream((IOContext) null, dataInputStream0, byteArray0, 4, 4);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, (byte)0, 0);
      mergedStream0.read();
      // Undeclared exception!
      try { 
        mergedStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1218, 0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, byteArrayInputStream0, byteArray0, (byte)0, 0);
      // Undeclared exception!
      try { 
        mergedStream0.read();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[9];
      MergedStream mergedStream0 = new MergedStream(iOContext0, sequenceInputStream0, byteArray0, (byte)88, 808);
      // Undeclared exception!
      try { 
        mergedStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 1354, 0);
      try { 
        mergedStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, dataInputStream0, true);
      MergedStream mergedStream0 = new MergedStream(iOContext0, dataInputStream0, (byte[]) null, 164, 164);
      // Undeclared exception!
      try { 
        mergedStream0.markSupported();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, 2000, 2000);
      // Undeclared exception!
      try { 
        mergedStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[10];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, dataInputStream0, byteArray0, 4, 4);
      mergedStream0.read(byteArray0, 4, 4);
      try { 
        mergedStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16LE", false);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, byteArrayInputStream0, byteArray0, (byte) (-87), 255);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, sequenceInputStream0, byteArray0, 5, (byte)14);
      mergedStream0.close();
      mergedStream0.close();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, (byte)0, 0);
      long long0 = mergedStream0.skip((byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[10];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, dataInputStream0, byteArray0, 4, 4);
      mergedStream0.reset();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, (byte)0, 0);
      mergedStream0.read(byteArray0, 1, 1238);
      // Undeclared exception!
      try { 
        mergedStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream(iOContext0, sequenceInputStream0, byteArray0, (byte)0, 2000);
      int int0 = mergedStream0.read(byteArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, byteArray0, (byte)0, (byte)55);
      // Undeclared exception!
      try { 
        mergedStream0.read(iOContext0._base64Buffer, 1472, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, sequenceInputStream0, byteArray0, 5, (byte)14);
      mergedStream0.close();
      int int0 = mergedStream0.read(byteArray0, 4391, (-3462));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, (byte)0, 0);
      mergedStream0.read();
      // Undeclared exception!
      try { 
        mergedStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, byteArray0, (byte)0, (byte)55);
      int int0 = mergedStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.io.MergedStream", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write(376);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 376, 2000);
      int int0 = mergedStream0.read();
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, sequenceInputStream0, byteArray0, 5, (byte)14);
      mergedStream0.close();
      boolean boolean0 = mergedStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, byteArray0, (byte)0, (byte)55);
      boolean boolean0 = mergedStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, dataInputStream0, true);
      MergedStream mergedStream0 = new MergedStream(iOContext0, dataInputStream0, (byte[]) null, 164, 164);
      // Undeclared exception!
      try { 
        mergedStream0.mark(175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      MergedStream mergedStream0 = new MergedStream(iOContext0, sequenceInputStream0, byteArray0, (byte)0, 2000);
      mergedStream0.mark((byte) (-96));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, (byte)0, 0);
      int int0 = mergedStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[0];
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        mergedStream0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.io.MergedStream", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 376, 2000);
      // Undeclared exception!
      try { 
        mergedStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.io.MergedStream", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 2000, 2000);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0, (int) (byte)1, 1882);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
