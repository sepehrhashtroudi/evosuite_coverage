/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:18:08 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.UTF32Reader;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseReader_ESTest extends BaseReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, pipedInputStream0, (byte[]) null, (-782), (-782), true);
      uTF32Reader0.close();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, (InputStream) null, byteArray0, 0, 8, false);
      int int0 = uTF32Reader0.read();
      assertEquals(110, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, (byte[]) null, (-1789), (-1669), false);
      // Undeclared exception!
      try { 
        uTF32Reader0.reportBounds((char[]) null, (-4783), (-1669));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1395), (-1395));
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, byteArrayInputStream0, byteArray0, (-1395), (-1395), true);
      // Undeclared exception!
      try { 
        uTF32Reader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "", true);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, 0, 0, true);
      // Undeclared exception!
      try { 
        uTF32Reader0.read();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      byte[] byteArray0 = new byte[8];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte) (-30), 1114111, true);
      // Undeclared exception!
      try { 
        uTF32Reader0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[2];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, dataInputStream0, byteArray0, (byte)87, (-721), true);
      try { 
        uTF32Reader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, (InputStream) null, byteArray0, (byte) (-1), 1, true);
      try { 
        uTF32Reader0.read();
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unexpected EOF in the middle of a 4-byte UTF-32 char: got 2, needed 4, at char #0, byte #1)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, byteArrayInputStream0, byteArray0, (byte) (-88), 0, true);
      // Undeclared exception!
      try { 
        uTF32Reader0.freeBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, pipedInputStream0, byteArray0, (byte)82, (byte)1, false);
      // Undeclared exception!
      try { 
        uTF32Reader0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[5];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, pipedInputStream0, byteArray0, (byte)0, (-1), true);
      // Undeclared exception!
      try { 
        uTF32Reader0.freeBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, pipedInputStream0, (byte[]) null, (-782), (-782), true);
      uTF32Reader0.freeBuffers();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[7];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, (InputStream) null, byteArray0, 0, 8, false);
      int int0 = uTF32Reader0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, pipedInputStream0, (byte[]) null, (-782), (-782), true);
      uTF32Reader0.read();
      int int0 = uTF32Reader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, dataInputStream0, byteArray0, (-91), (-1), true);
      // Undeclared exception!
      try { 
        uTF32Reader0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[9];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, (InputStream) null, byteArray0, 2414, 1, true);
      uTF32Reader0.close();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      File file0 = MockFile.createTempFile("#ody=U", "UTF-32BE");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[9];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, mockFileInputStream0, byteArray0, 0, (byte)87, false);
      try { 
        uTF32Reader0.reportStrangeStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Strange I/O stream, returned 0 bytes on read
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      byte[] byteArray0 = new byte[3];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, mockFileInputStream0, byteArray0, (byte)60, 0, false);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        uTF32Reader0.reportBounds(charArray0, (byte) (-2), (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // read(buf,-2,60), cbuf[5]
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }
}
