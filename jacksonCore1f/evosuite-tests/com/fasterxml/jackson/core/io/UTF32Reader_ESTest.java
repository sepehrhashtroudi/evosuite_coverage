/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:21:04 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.UTF32Reader;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UTF32Reader_ESTest extends UTF32Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, (InputStream) null, byteArray0, 1, 1, true);
      char[] charArray0 = new char[2];
      int int0 = uTF32Reader0.read(charArray0);
      assertEquals((-1), int0);
      
      int int1 = uTF32Reader0.read(charArray0, 1, 1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-117);
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)0, (byte)4, false);
      char[] charArray0 = new char[6];
      uTF32Reader0._length = 2000;
      try { 
        uTF32Reader0.read(charArray0, (int) (byte)0, 3);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x8b0000(above 10ffff)  at char #0, byte #3)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 6);
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, byteArrayInputStream0, byteArray0, 2110, (-2726), false);
      char[] charArray0 = new char[6];
      try { 
        uTF32Reader0.read(charArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0xff0000(above 10ffff)  at char #0, byte #2113)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 1);
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, byteArrayInputStream0, byteArray0, 2110, (-2726), false);
      char[] charArray0 = new char[6];
      uTF32Reader0._charCount = (int) (byte)38;
      uTF32Reader0._surrogate = 't';
      // Undeclared exception!
      try { 
        uTF32Reader0.read(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2110
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[1];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, mockFileInputStream0, byteArray0, 3022, 2000, false);
      int int0 = uTF32Reader0.read((char[]) null, (-2387), (-2387));
      assertEquals((-2387), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      byte[] byteArray0 = new byte[5];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, pushbackInputStream0, byteArray0, (byte)5, 56320, true);
      // Undeclared exception!
      try { 
        uTF32Reader0.read((char[]) null, (int) (byte)2, (int) (byte)2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)0, (byte) (-117), false);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        uTF32Reader0.read(charArray0, (int) (byte)0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)1, (byte)4, true);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        uTF32Reader0.read(charArray0, (int) (byte)1, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)0, (byte)89, true);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        uTF32Reader0.read(charArray0, (int) (byte)0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)4;
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)0, (byte)4, false);
      char[] charArray0 = new char[6];
      int int0 = uTF32Reader0.read(charArray0, (int) (byte)0, 3);
      assertArrayEquals(new char[] {'\uD8C0', '\uDC00', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)0, (byte)4, false);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        uTF32Reader0.read(charArray0, (int) (byte)4, 3434);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // read(buf,4,3434), cbuf[6]
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, (InputStream) null, byteArray0, 0, 0, true);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        uTF32Reader0.read(charArray0, (-1), 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // read(buf,-1,65536), cbuf[2]
         //
         verifyException("com.fasterxml.jackson.core.io.BaseReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UTF32Reader uTF32Reader0 = new UTF32Reader((IOContext) null, (InputStream) null, byteArray0, 0, 0, true);
      char[] charArray0 = new char[2];
      int int0 = uTF32Reader0.read(charArray0, (-1292), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.TEXT_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 2000);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, (InputStream) null, (byte[]) null, 2000, (-3628), true);
      int int0 = uTF32Reader0.read(charArray0, (-3628), 994);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      UTF32Reader uTF32Reader0 = new UTF32Reader(iOContext0, sequenceInputStream0, byteArray0, (byte)0, (byte)4, true);
      char[] charArray0 = new char[6];
      try { 
        uTF32Reader0.read(charArray0, (int) (byte)0, 3);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x68000000(above 10ffff)  at char #0, byte #3)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }
}
