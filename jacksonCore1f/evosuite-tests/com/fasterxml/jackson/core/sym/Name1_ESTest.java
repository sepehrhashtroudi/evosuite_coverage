/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:25:40 GMT 2023
 */

package com.fasterxml.jackson.core.sym;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.sym.Name1;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Name1_ESTest extends Name1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name1 name1_0 = new Name1("", 1024, 1024);
      int[] intArray0 = new int[8];
      boolean boolean0 = name1_0.equals(intArray0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Name1 name1_0 = new Name1("DM8%ZV >`P#P", (-2640), (-189));
      int[] intArray0 = new int[3];
      boolean boolean0 = name1_0.equals(intArray0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name1 name1_0 = new Name1("", 1024, 1024);
      boolean boolean0 = name1_0.equals(1024, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name1 name1_0 = Name1.getEmptyName();
      boolean boolean0 = name1_0.equals(1883, (-214));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name1 name1_0 = new Name1("DM8%ZV >`P#P", (-2640), (-189));
      boolean boolean0 = name1_0.equals((-2640), (-189));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Name1 name1_0 = Name1.getEmptyName();
      boolean boolean0 = name1_0.equals(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Name1 name1_0 = new Name1("", 1, 0);
      boolean boolean0 = name1_0.equals(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name1 name1_0 = Name1.getEmptyName();
      // Undeclared exception!
      try { 
        name1_0.equals((int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.Name1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Name1 name1_0 = new Name1("", (-1), (-1));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        name1_0.equals(intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.sym.Name1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name1 name1_0 = new Name1("'", (-1099), (-1099));
      int[] intArray0 = new int[7];
      boolean boolean0 = name1_0.equals(intArray0, (-1099));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Name1 name1_0 = Name1.sEmptyName;
      boolean boolean0 = name1_0.equals(0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name1 name1_0 = new Name1("'", (-1099), (-1099));
      boolean boolean0 = name1_0.equals((-1099), (-1099));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Name1 name1_0 = Name1.sEmptyName;
      boolean boolean0 = name1_0.equals((-1099));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Name1 name1_0 = Name1.getEmptyName();
      int[] intArray0 = new int[1];
      boolean boolean0 = name1_0.equals(intArray0, 1);
      assertTrue(boolean0);
  }
}
