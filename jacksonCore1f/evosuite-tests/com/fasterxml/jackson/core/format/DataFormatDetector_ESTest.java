/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:11:29 GMT 2023
 */

package com.fasterxml.jackson.core.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.format.DataFormatDetector;
import com.fasterxml.jackson.core.format.DataFormatMatcher;
import com.fasterxml.jackson.core.format.MatchStrength;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataFormatDetector_ESTest extends DataFormatDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[4];
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactoryArray0[0] = jsonFactory0;
      jsonFactoryArray0[1] = jsonFactory0;
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMinimalMatch(matchStrength0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dataFormatDetector1.findFormat(byteArray0, 1946, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.DataFormatDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMaxInputLookahead((-69));
      DataFormatDetector dataFormatDetector2 = dataFormatDetector1.withMaxInputLookahead(64);
      assertNotSame(dataFormatDetector2, dataFormatDetector1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[4];
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMaxInputLookahead(3069);
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatDetector dataFormatDetector2 = dataFormatDetector1.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatDetector2, dataFormatDetector1);
      assertNotSame(dataFormatDetector1, dataFormatDetector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMaxInputLookahead((-2495));
      DataFormatDetector dataFormatDetector2 = dataFormatDetector1.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatDetector2, dataFormatDetector1);
      assertNotSame(dataFormatDetector1, dataFormatDetector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector((JsonFactory[]) null);
      MatchStrength matchStrength0 = MatchStrength.FULL_MATCH;
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatDetector1, dataFormatDetector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[3];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      jsonFactoryArray0[0] = jsonFactory0;
      jsonFactoryArray0[1] = jsonFactory0;
      jsonFactoryArray0[2] = jsonFactory0;
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      DataFormatMatcher dataFormatMatcher0 = dataFormatDetector0.findFormat(byteArray0, 0, (int) (byte)54);
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatMatcher0.getMatchStrength());
      assertTrue(dataFormatMatcher0.hasMatch());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[3];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      jsonFactoryArray0[0] = jsonFactory0;
      jsonFactoryArray0[1] = jsonFactory0;
      jsonFactoryArray0[2] = jsonFactory0;
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      DataFormatMatcher dataFormatMatcher0 = dataFormatDetector0.findFormat(byteArray0);
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatMatcher0.getMatchStrength());
      assertTrue(dataFormatMatcher0.hasMatch());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector((JsonFactory[]) null);
      // Undeclared exception!
      try { 
        dataFormatDetector0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.DataFormatDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[2];
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactoryArray0[0] = jsonFactory0;
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        dataFormatDetector0.findFormat(byteArray0, (int) (byte)6, 2362);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMaxInputLookahead((-2495));
      // Undeclared exception!
      try { 
        dataFormatDetector1.findFormat((InputStream) pushbackInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.DataFormatDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[7];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      jsonFactoryArray0[0] = jsonFactory0;
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        dataFormatDetector0.findFormat((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      JsonFactory jsonFactory0 = new JsonFactory();
      linkedList0.addFirst(jsonFactory0);
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      byte[] byteArray0 = new byte[4];
      DataFormatMatcher dataFormatMatcher0 = dataFormatDetector0.findFormat(byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatMatcher0.getMatchStrength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      JsonFactory jsonFactory0 = new JsonFactory();
      linkedList0.addFirst(jsonFactory0);
      linkedList0.add(jsonFactory0);
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      String string0 = dataFormatDetector0.toString();
      assertEquals("[JSON, JSON]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      String string0 = dataFormatDetector0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMaxInputLookahead(64);
      assertSame(dataFormatDetector1, dataFormatDetector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withMinimalMatch(matchStrength0);
      assertSame(dataFormatDetector1, dataFormatDetector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatDetector dataFormatDetector1 = dataFormatDetector0.withOptimalMatch(matchStrength0);
      assertSame(dataFormatDetector1, dataFormatDetector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataFormatMatcher dataFormatMatcher0 = dataFormatDetector0.findFormat((InputStream) pushbackInputStream0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatMatcher0.getMatchStrength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonFactory[] jsonFactoryArray0 = new JsonFactory[3];
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(jsonFactoryArray0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        dataFormatDetector0.findFormat(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.DataFormatDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<JsonFactory> linkedList0 = new LinkedList<JsonFactory>();
      DataFormatDetector dataFormatDetector0 = new DataFormatDetector(linkedList0);
      byte[] byteArray0 = new byte[6];
      DataFormatMatcher dataFormatMatcher0 = dataFormatDetector0.findFormat(byteArray0, (-1), (-1));
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatMatcher0.getMatchStrength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataFormatDetector dataFormatDetector0 = null;
      try {
        dataFormatDetector0 = new DataFormatDetector((Collection<JsonFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.DataFormatDetector", e);
      }
  }
}
