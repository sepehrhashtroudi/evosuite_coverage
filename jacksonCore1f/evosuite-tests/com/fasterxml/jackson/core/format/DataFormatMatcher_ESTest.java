/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:10:50 GMT 2023
 */

package com.fasterxml.jackson.core.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.format.DataFormatMatcher;
import com.fasterxml.jackson.core.format.InputAccessor;
import com.fasterxml.jackson.core.format.MatchStrength;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataFormatMatcher_ESTest extends DataFormatMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, byteArray0, (byte) (-4), (byte) (-4), (JsonFactory) null, matchStrength0);
      dataFormatMatcher0.getMatch();
      assertEquals(MatchStrength.NO_MATCH, dataFormatMatcher0.getMatchStrength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArrayInputStream0, byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonFactory0.disable(jsonParser_Feature0);
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      dataFormatMatcher0.createParserWithMatch();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, byteArray0, (byte) (-4), 93, (JsonFactory) null, matchStrength0);
      // Undeclared exception!
      try { 
        dataFormatMatcher0.getMatchedFormatName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.DataFormatMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, (byte[]) null, 1, 0, jsonFactory0, matchStrength0);
      // Undeclared exception!
      try { 
        dataFormatMatcher0.getDataStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std((byte[]) null, (-3237), (-3237));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      inputAccessor_Std0._bufferedEnd = 12;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      // Undeclared exception!
      try { 
        dataFormatMatcher0.createParserWithMatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[9];
      JsonFactory jsonFactory0 = new JsonFactory();
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher(sequenceInputStream0, byteArray0, (byte)0, 1717, jsonFactory0, matchStrength0);
      // Undeclared exception!
      try { 
        dataFormatMatcher0.createParserWithMatch();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[3];
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(pipedInputStream0, byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      try { 
        dataFormatMatcher0.createParserWithMatch();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-87);
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      try { 
        dataFormatMatcher0.createParserWithMatch();
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      MatchStrength matchStrength0 = MatchStrength.FULL_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher(byteArrayInputStream0, byteArray0, (byte) (-29), (byte)7, jsonFactory0, matchStrength0);
      dataFormatMatcher0.getDataStream();
      assertEquals(MatchStrength.FULL_MATCH, dataFormatMatcher0.getMatchStrength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArrayInputStream0, byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      dataFormatMatcher0.createParserWithMatch();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, byteArray0, (byte) (-4), (byte) (-4), (JsonFactory) null, matchStrength0);
      dataFormatMatcher0.createParserWithMatch();
      assertEquals(MatchStrength.NO_MATCH, dataFormatMatcher0.getMatchStrength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, byteArray0, (byte) (-4), (byte) (-4), (JsonFactory) null, matchStrength0);
      MatchStrength matchStrength1 = dataFormatMatcher0.getMatchStrength();
      assertEquals(MatchStrength.NO_MATCH, matchStrength1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      boolean boolean0 = dataFormatMatcher0.hasMatch();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, byteArray0, (byte) (-4), (byte) (-4), (JsonFactory) null, matchStrength0);
      boolean boolean0 = dataFormatMatcher0.hasMatch();
      assertEquals(MatchStrength.NO_MATCH, dataFormatMatcher0.getMatchStrength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatMatcher dataFormatMatcher0 = inputAccessor_Std0.createMatcher(jsonFactory0, matchStrength0);
      String string0 = dataFormatMatcher0.getMatchedFormatName();
      assertEquals("JSON", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatMatcher dataFormatMatcher0 = new DataFormatMatcher((InputStream) null, (byte[]) null, 1, 0, jsonFactory0, matchStrength0);
      JsonFactory jsonFactory1 = dataFormatMatcher0.getMatch();
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatMatcher0.getMatchStrength());
      assertNotNull(jsonFactory1);
  }
}
