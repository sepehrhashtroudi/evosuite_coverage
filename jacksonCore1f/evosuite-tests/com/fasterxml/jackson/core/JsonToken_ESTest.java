/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 20:53:02 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonToken_ESTest extends JsonToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      boolean boolean0 = jsonToken0.isScalarValue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonToken[] jsonTokenArray0 = JsonToken.values();
      assertEquals(13, jsonTokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.valueOf("VALUE_NUMBER_INT");
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.valueOf("VALUE_FALSE");
      assertEquals("false", jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      String string0 = jsonToken0.asString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      char[] charArray0 = jsonToken0.asCharArray();
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      byte[] byteArray0 = jsonToken0.asByteArray();
      assertArrayEquals(new byte[] {(byte)123}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      boolean boolean0 = jsonToken0.isScalarValue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      boolean boolean0 = jsonToken0.isScalarValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      boolean boolean0 = jsonToken0.isNumeric();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      boolean boolean0 = jsonToken0.isNumeric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      boolean boolean0 = jsonToken0.isNumeric();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      char[] charArray0 = jsonToken0.asCharArray();
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      byte[] byteArray0 = jsonToken0.asByteArray();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      String string0 = jsonToken0.asString();
      assertEquals("[", string0);
  }
}
