/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:04:15 GMT 2023
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonWriteContext_ESTest extends JsonWriteContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(123, jsonWriteContext0);
      String string0 = jsonWriteContext1.toString();
      assertEquals("/", string0);
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals("?", jsonWriteContext1.getTypeDesc());
      assertEquals(0, jsonWriteContext1.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(241, jsonWriteContext0);
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(1, jsonWriteContext1.getEntryCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext1._currentName = "W}}u%$";
      jsonWriteContext2.writeValue();
      jsonWriteContext2.writeFieldName("P'uDf?7 w=h>L#Ff).");
      jsonWriteContext1.writeValue();
      int int0 = jsonWriteContext1.writeFieldName("P'uDf?7 w=h>L#Ff).");
      assertEquals(2, jsonWriteContext1.getEntryCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(3, jsonWriteContext0);
      int int0 = jsonWriteContext1.writeFieldName("P'uDf?7 w=h>L#Ff).");
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(4, int0);
      assertFalse(jsonWriteContext1.inRoot());
      assertEquals(0, jsonWriteContext1.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
      assertFalse(jsonWriteContext2.inRoot());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertTrue(jsonWriteContext3.inObject());
      assertNotNull(jsonWriteContext3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildObjectContext();
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertEquals("ARRAY", jsonWriteContext3.getTypeDesc());
      assertNotNull(jsonWriteContext3);
      assertTrue(jsonWriteContext2.inObject());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.getParent();
      assertTrue(jsonWriteContext1.inArray());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertTrue(jsonWriteContext2.inRoot());
      assertNotNull(jsonWriteContext2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext0.writeValue();
      jsonWriteContext0.writeValue();
      jsonWriteContext1.getParent();
      assertEquals(1, jsonWriteContext0.getCurrentIndex());
      assertEquals(2, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      int int0 = jsonWriteContext1.writeFieldName("com.fasterxml.jackson.core.json.JsonWriteContext");
      assertEquals(0, int0);
      
      String string0 = jsonWriteContext1.getCurrentName();
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertNotNull(string0);
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0._currentName = "";
      jsonWriteContext0.getCurrentName();
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertEquals(0, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      // Undeclared exception!
      try { 
        jsonWriteContext0.appendDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.JsonWriteContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      assertFalse(jsonWriteContext1.inArray());
      
      jsonWriteContext0.createChildArrayContext();
      jsonWriteContext1.toString();
      assertEquals("ARRAY", jsonWriteContext1.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      int int0 = jsonWriteContext1.writeFieldName("{?}");
      assertEquals(0, int0);
      
      String string0 = jsonWriteContext1.toString();
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertFalse(jsonWriteContext0.inArray());
      assertEquals("{\"{?}\"}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      jsonWriteContext0.createChildObjectContext();
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonWriteContext1.appendDesc(stringBuilder0);
      assertEquals("{?}", stringBuilder0.toString());
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      jsonWriteContext1.writeValue();
      jsonWriteContext1.writeValue();
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(2, jsonWriteContext1.getCurrentIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      assertNotNull(jsonWriteContext1);
      
      jsonWriteContext0.createChildObjectContext();
      int int0 = jsonWriteContext1.writeValue();
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      int int0 = jsonWriteContext0.writeFieldName("");
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      assertNotNull(jsonWriteContext1);
      
      int int0 = jsonWriteContext1.writeFieldName("'uDf?7 w=h>L#Ff).");
      assertEquals(0, int0);
      
      int int1 = jsonWriteContext1.writeFieldName("|7'0&6XFj2nyza8zu");
      assertEquals(4, int1);
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(0, jsonWriteContext1.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.getParent();
      assertNull(jsonWriteContext1);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.getCurrentName();
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(0, jsonWriteContext0.getEntryCount());
  }
}
