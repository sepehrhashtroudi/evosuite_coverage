/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 01 21:12:17 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Variant_ESTest extends Base64Variant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'U', 101);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)87;
      String string0 = base64Variant0.encode(byteArray0);
      assertEquals("VwAAAAAAAAAAAAAAAAUU", string0);
      assertEquals("", base64Variant0.toString());
      assertEquals(101, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>q:tZ6M8z/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', (-2));
      byte[] byteArray0 = new byte[14];
      String string0 = base64Variant1.encode(byteArray0);
      assertEquals((-2), base64Variant1.getMaxLineLength());
      assertEquals("AAAA\\nAAAA\\nAAAA\\nAAAA\\nAAAh", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'h', 13);
      byte[] byteArray0 = new byte[14];
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Partial((-2), (-1), byteArray0, (int) (byte)47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)40;
      String string0 = base64Variant0.encode(byteArray0);
      assertEquals("AAAAAAAAKAA", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'X', 13);
      StringBuilder stringBuilder0 = new StringBuilder("ACWA\nAAAA\nAAAA\nAAAA\nAAA");
      base64Variant0.encodeBase64Partial(stringBuilder0, 893, (int) (byte)87);
      assertEquals("ACWA\nAAAA\nAAAA\nAAAA\nAAAAA", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 101);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-116);
      String string0 = base64Variant0.encode(byteArray0);
      assertEquals("AAAAjAAh", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "AB0A\nAAAh");
      base64Variant0.encodeBase64Partial(stringBuilder0, (-2), 2000);
      assertEquals("AB0A\nAAAh//hh", stringBuilder0.toString());
      assertEquals(13, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'U', 101);
      boolean boolean0 = base64Variant0.usesPaddingChar(101);
      assertFalse(boolean0);
      assertTrue(base64Variant0.usesPadding());
      assertEquals('U', base64Variant0.getPaddingChar());
      assertEquals("", base64Variant0.toString());
      assertEquals(101, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("MODIFIED-FOR-URL", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '6', 4);
      String string0 = base64Variant0.toString();
      assertFalse(base64Variant0.usesPadding());
      assertEquals(4, base64Variant0.getMaxLineLength());
      assertEquals("MODIFIED-FOR-URL", string0);
      assertEquals('6', base64Variant0.getPaddingChar());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      char char0 = base64Variant0.getPaddingChar();
      assertFalse(base64Variant0.usesPadding());
      assertEquals('.', char0);
      assertEquals(40, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      int int0 = base64Variant0.getMaxLineLength();
      assertEquals(40, int0);
      assertFalse(base64Variant0.usesPadding());
      assertEquals('.', base64Variant0.getPaddingChar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'S', 43);
      char char0 = base64Variant0.encodeBase64BitsAsChar(44);
      assertFalse(base64Variant0.usesPadding());
      assertEquals((byte)83, base64Variant0.getPaddingByte());
      assertEquals(43, base64Variant0.getMaxLineLength());
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      byte byte0 = base64Variant0.encodeBase64BitsAsByte((byte)29);
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertTrue(base64Variant0.usesPadding());
      assertEquals((byte)104, base64Variant0.getPaddingByte());
      assertEquals("^\"UTm7>}:rtZ6M8#/-", base64Variant0.toString());
      assertEquals((byte)100, byte0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'h', 101);
      byte[] byteArray0 = new byte[0];
      String string0 = base64Variant0.encode(byteArray0, false);
      assertEquals(101, base64Variant0.getMaxLineLength());
      assertEquals('h', base64Variant0.getPaddingChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      int int0 = base64Variant0.decodeBase64Char((int) (byte)87);
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals(22, int0);
      assertEquals('.', base64Variant0.getPaddingChar());
      assertFalse(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 'X');
      int int0 = base64Variant0.decodeBase64Char('h');
      assertTrue(base64Variant0.usesPadding());
      assertEquals(88, base64Variant0.getMaxLineLength());
      assertEquals('h', base64Variant0.getPaddingChar());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      int int0 = base64Variant0.decodeBase64Byte((byte)40);
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals('.', base64Variant0.getPaddingChar());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'h', 13);
      base64Variant0.decode("");
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertEquals("^\"UTm7>}:rtZ6M8#/I-n", base64Variant0.toString());
      assertEquals((byte)104, base64Variant0.getPaddingByte());
      assertFalse(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'h', 101);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Partial((StringBuilder) null, 101, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>q:tZ6M8z/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Partial((int) (byte)47, (-946), charArray0, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("'U?X6o<Tw6U", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'B', (byte)87);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Partial(3, 2101, (byte[]) null, 2371);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 0);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Chunk((StringBuilder) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Chunk((int) (byte)47, byteArray0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'U', 101);
      // Undeclared exception!
      try { 
        base64Variant0.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 0);
      // Undeclared exception!
      try { 
        base64Variant0.encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 'h');
      // Undeclared exception!
      try { 
        base64Variant0.decodeBase64Byte((byte) (-27));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      try { 
        base64Variant0._reportInvalidBase64('R', (-1), "'U?X6o<Tw6U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character 'R' (code 0x52) in base64 content: 'U?X6o<Tw6U
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 0);
      try { 
        base64Variant0._reportBase64EOF();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected end-of-String in base64 content
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, (String) null, true, '\"', (-2625));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "CT5;U&^3'( 0B$uh", false, 'I', 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "}8 ", (-1442));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, 3231);
      try { 
        base64Variant0.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", byteArrayBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected padding character ('h') as character #2 of 4-char base64 unit: padding only legal as 3rd or 4th character
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'z', 13);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2000);
      base64Variant0.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", byteArrayBuilder0);
      assertEquals(47, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'a', 0);
      byte[] byteArray0 = new byte[8];
      String string0 = base64Variant0.encode(byteArray0, false);
      assertEquals(0, base64Variant0.getMaxLineLength());
      assertEquals("AAAA\\nAAAA\\nAAAa", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'h', 101);
      byte[] byteArray0 = new byte[13];
      String string0 = base64Variant0.encode(byteArray0, false);
      assertEquals(101, base64Variant0.getMaxLineLength());
      assertEquals("AAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'h', 13);
      int int0 = base64Variant0.decodeBase64Char('B');
      assertFalse(base64Variant0.usesPadding());
      assertEquals(1, int0);
      assertEquals("^\"UTm7>}:rtZ6M8#/I-n", base64Variant0.getName());
      assertEquals('h', base64Variant0.getPaddingChar());
      assertEquals(13, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'h', 13);
      boolean boolean0 = base64Variant0.usesPaddingChar('h');
      assertEquals("^\"UTm7>}:rtZ6M8#/I-n", base64Variant0.getName());
      assertTrue(boolean0);
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertFalse(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'h', 13);
      boolean boolean0 = base64Variant0.usesPadding();
      assertEquals((byte)104, base64Variant0.getPaddingByte());
      assertFalse(boolean0);
      assertEquals("^\"UTm7>}:rtZ6M8#/I-n", base64Variant0.getName());
      assertEquals(13, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)0);
      int int0 = base64Variant0.getMaxLineLength();
      assertEquals(0, int0);
      assertEquals('.', base64Variant0.getPaddingChar());
      assertFalse(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      StringBuilder stringBuilder0 = new StringBuilder();
      base64Variant0.encodeBase64Chunk(stringBuilder0, (-3084));
      assertEquals("//P0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'h', 101);
      try { 
        base64Variant0.decode("expected padding character '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal white space character (code 0x20) as character #4 of 4-char base64 unit: can only used between units
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      boolean boolean0 = base64Variant0.equals((Object) null);
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals('.', base64Variant0.getPaddingChar());
      assertFalse(boolean0);
      assertFalse(base64Variant0.usesPadding());
      assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", base64Variant0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      try { 
        base64Variant0.decode("com.fasterxml.jackson.core.util.BufferRecycler$CharBufferType", (ByteArrayBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected padding character ('.') as character #4 of 4-char base64 unit: padding only legal as 3rd or 4th character
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'L', 0);
      try { 
        base64Variant0.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklmnopqrstuvwxyz0123456789+/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected end-of-String in base64 content
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      assertFalse(base64Variant0.usesPadding());
      
      byte[] byteArray0 = base64Variant0.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/");
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals(47, byteArray0.length);
      assertEquals((byte)46, base64Variant0.getPaddingByte());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'a', 0);
      try { 
        base64Variant0.decode("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character 'b' (code 0x62) in base64 content: expected padding character 'a'
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'h', 101);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      try { 
        base64Variant0.decode("kV[x}`7&`cB5cn", byteArrayBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character '[' (code 0x5b) in base64 content
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzU123456789+/", false, '.', (byte)87);
      // Undeclared exception!
      try { 
        base64Variant0.decode("o2", (ByteArrayBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      base64Variant0.decode("+", (ByteArrayBuilder) null);
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals((byte)46, base64Variant0.getPaddingByte());
      assertFalse(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      assertEquals((byte)104, base64Variant0.getPaddingByte());
      
      byte[] byteArray0 = base64Variant0.decode("ACgA\nAAAA\nAAAA\nAAAA\nAAAh");
      assertTrue(base64Variant0.usesPadding());
      assertEquals(14, byteArray0.length);
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertEquals("^\"UTm7>}:rtZ6M8#/-n", base64Variant0.getName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 101);
      byte[] byteArray0 = new byte[3];
      String string0 = base64Variant0.encode(byteArray0, true);
      assertEquals((byte)104, base64Variant0.getPaddingByte());
      assertEquals("\"AAAA\"", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rutZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      byte[] byteArray0 = new byte[14];
      String string0 = base64Variant0.encode(byteArray0);
      assertEquals("AAAAAAAAAAAA\\nAAAAAAAh", string0);
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertEquals("^\"UTm7>}:rutZ6M8#/-n", base64Variant0.getName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      int int0 = base64Variant0.decodeBase64Byte((byte)47);
      assertEquals(63, int0);
      assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", base64Variant0.getName());
      assertFalse(base64Variant0.usesPadding());
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals((byte)46, base64Variant0.getPaddingByte());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      int int0 = base64Variant0.decodeBase64Char((int) (byte)0);
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals((-1), int0);
      assertFalse(base64Variant0.usesPadding());
      assertEquals((byte)46, base64Variant0.getPaddingByte());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'X', 13);
      int int0 = base64Variant0.decodeBase64Char(2665);
      assertFalse(base64Variant0.usesPadding());
      assertEquals((-1), int0);
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertEquals('X', base64Variant0.getPaddingChar());
      assertEquals("^\"UTm7>}:rtZ6M8#/I-n", base64Variant0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 'h');
      boolean boolean0 = base64Variant0.usesPaddingChar((int) 'h');
      assertEquals(104, base64Variant0.getMaxLineLength());
      assertEquals("", base64Variant0.getName());
      assertTrue(base64Variant0.usesPadding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rutZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      boolean boolean0 = base64Variant0.usesPaddingChar((int) (byte)0);
      assertTrue(base64Variant0.usesPadding());
      assertFalse(boolean0);
      assertEquals((byte)104, base64Variant0.getPaddingByte());
      assertEquals("^\"UTm7>}:rutZ6M8#/-n", base64Variant0.toString());
      assertEquals(13, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      try { 
        base64Variant0.decode("'U?X6o<Tw6U", (ByteArrayBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character ''' (code 0x27) in base64 content
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '9', Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'h', 13);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Chunk((-2), (byte[]) null, (int) (byte)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      base64Variant0.hashCode();
      assertTrue(base64Variant0.usesPadding());
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertEquals('h', base64Variant0.getPaddingChar());
      assertEquals("^\"UTm7>}:rtZ6M8#/-n", base64Variant0.getName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, 'h', 101);
      String string0 = base64Variant0.toString();
      assertEquals('h', base64Variant0.getPaddingChar());
      assertEquals(101, base64Variant0.getMaxLineLength());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 22);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64BitsAsByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'X', 13);
      // Undeclared exception!
      try { 
        base64Variant0.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64Chunk((-2501), charArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, '.', (byte)40);
      try { 
        base64Variant0.decode("o2", (ByteArrayBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected end-of-String in base64 content
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      // Undeclared exception!
      try { 
        base64Variant0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No Base64Variant with name 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
         //
         verifyException("com.fasterxml.jackson.core.Base64Variants", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'y', (-2501));
      String string0 = base64Variant0.getName();
      assertTrue(base64Variant0.usesPadding());
      assertEquals((byte)121, base64Variant0.getPaddingByte());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals((-2501), base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rutZ6M8#/-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, 'h', 13);
      byte byte0 = base64Variant0.getPaddingByte();
      assertEquals(13, base64Variant0.getMaxLineLength());
      assertEquals((byte)104, byte0);
      assertTrue(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("^\"UTm7>}:rtZ6M8#/I-n", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefWhijklmnopqrstuvwxyz0123456789+/", false, 'X', 13);
      char char0 = base64Variant0.getPaddingChar();
      assertEquals("^\"UTm7>}:rtZ6M8#/I-n", base64Variant0.getName());
      assertEquals('X', char0);
      assertFalse(base64Variant0.usesPadding());
      assertEquals(13, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 'X');
      assertEquals(40, base64Variant0.getMaxLineLength());
      assertEquals('.', base64Variant1.getPaddingChar());
      assertFalse(base64Variant1.usesPadding());
      assertEquals(88, base64Variant1.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, '.', (byte)40);
      // Undeclared exception!
      try { 
        base64Variant0.encodeBase64BitsAsChar((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }
}
