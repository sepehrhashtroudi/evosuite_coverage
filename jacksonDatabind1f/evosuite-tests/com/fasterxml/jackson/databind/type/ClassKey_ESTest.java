/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 05:57:37 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.type.ClassKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassKey_ESTest extends ClassKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassKey classKey0 = new ClassKey();
      String string0 = classKey0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassKey classKey0 = new ClassKey(class0);
      Class<ClassKey> class1 = ClassKey.class;
      ClassKey classKey1 = new ClassKey(class1);
      int int0 = classKey0.compareTo(classKey1);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ClassKey> class0 = ClassKey.class;
      ClassKey classKey0 = new ClassKey(class0);
      Class<String> class1 = String.class;
      ClassKey classKey1 = new ClassKey(class1);
      int int0 = classKey0.compareTo(classKey1);
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassKey classKey0 = new ClassKey();
      // Undeclared exception!
      try { 
        classKey0.reset((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ClassKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      ClassKey classKey1 = new ClassKey();
      // Undeclared exception!
      try { 
        classKey0.compareTo(classKey1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassKey classKey0 = null;
      try {
        classKey0 = new ClassKey((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ClassKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassKey classKey0 = new ClassKey();
      ClassKey classKey1 = new ClassKey();
      boolean boolean0 = classKey0.equals(classKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      Object object0 = new Object();
      boolean boolean0 = classKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      boolean boolean0 = classKey0.equals(classKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      ClassKey classKey1 = new ClassKey();
      boolean boolean0 = classKey0.equals(classKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      classKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      int int0 = classKey0.compareTo(classKey0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassKey classKey0 = new ClassKey();
      boolean boolean0 = classKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      classKey0.reset(class0);
      assertEquals("java.lang.Object", classKey0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassKey classKey0 = new ClassKey(class0);
      String string0 = classKey0.toString();
      assertEquals("java.lang.Object", string0);
  }
}
