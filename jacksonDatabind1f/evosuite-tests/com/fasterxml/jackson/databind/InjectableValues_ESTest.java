/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 06:10:11 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InjectableValues_ESTest extends InjectableValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        injectableValues_Std0.findInjectableValue(object0, (DeserializationContext) null, (BeanProperty) null, object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized inject value id type (java.lang.Object), expecting String
         //
         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("com.fasterxml.jackson.databind.DatabindContext", (Object) class0);
      Class class1 = (Class)injectableValues_Std1.findInjectableValue("com.fasterxml.jackson.databind.DatabindContext", (DeserializationContext) null, (BeanProperty) null, object0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.put("h;h>v3;", "(L\"}VFrSh{2");
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      // Undeclared exception!
      try { 
        injectableValues_Std0.findInjectableValue("|f}>", (DeserializationContext) null, (BeanProperty) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(",teDv", (Object) injectableValues_Std0);
      Object object0 = new Object();
      Object object1 = injectableValues_Std0.findInjectableValue(",teDv", (DeserializationContext) null, (BeanProperty) null, object0);
      assertSame(object1, injectableValues_Std1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        injectableValues_Std0.findInjectableValue((Object) null, (DeserializationContext) null, (BeanProperty) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized inject value id type ([null]), expecting String
         //
         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<Object> class0 = Object.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      hashMap0.put("r;UwB3=qSW.K}*uf", (Object) null);
      Object object0 = injectableValues_Std0.findInjectableValue("r;UwB3=qSW.K}*uf", (DeserializationContext) null, (BeanProperty) null, (Object) null);
      assertNull(object0);
  }
}
