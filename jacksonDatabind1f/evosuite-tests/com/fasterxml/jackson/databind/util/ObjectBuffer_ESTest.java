/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 05:56:26 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectBuffer_ESTest extends ObjectBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      objectBuffer0.completeAndClearBuffer(objectArray0, (-1836), (List<Object>) linkedList0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = objectBuffer0.appendCompletedChunk(objectArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray1, 4652, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[1];
      objectBuffer0.appendCompletedChunk(objectArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray0, (-1256), class0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = objectBuffer0.completeAndClearBuffer(objectArray0, 0);
      Object[] objectArray2 = objectBuffer0.appendCompletedChunk(objectArray1);
      assertEquals(0, objectArray2.length);
      
      Object[] objectArray3 = objectBuffer0.resetAndStart();
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectArray3.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[2];
      Class<Object> class0 = Object.class;
      Object[] objectArray1 = objectBuffer0.completeAndClearBuffer(objectArray0, 1, class0);
      assertEquals(1, objectArray1.length);
      assertEquals(0, objectBuffer0.bufferedSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[9];
      objectBuffer0.appendCompletedChunk(objectArray0);
      int int0 = objectBuffer0.bufferedSize();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[86];
      Object[] objectArray1 = objectBuffer0.appendCompletedChunk(objectArray0);
      Object[] objectArray2 = objectBuffer0.appendCompletedChunk(objectArray1);
      Object[] objectArray3 = objectBuffer0.appendCompletedChunk(objectArray2);
      Object[] objectArray4 = objectBuffer0.appendCompletedChunk(objectArray3);
      Object[] objectArray5 = objectBuffer0.appendCompletedChunk(objectArray4);
      Object[] objectArray6 = objectBuffer0.appendCompletedChunk(objectArray5);
      objectBuffer0.appendCompletedChunk(objectArray6);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      objectBuffer0.completeAndClearBuffer(objectArray0, 172, (List<Object>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray0, 365, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ObjectBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer((Object[]) null, 0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectBuffer0;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray0, 1, class0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer((Object[]) null, 124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ObjectBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray0, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      // Undeclared exception!
      try { 
        objectBuffer0.appendCompletedChunk((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ObjectBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objectBuffer0._copyTo(object0, 0, (Object[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer((-3126));
      // Undeclared exception!
      try { 
        objectBuffer0._copyTo(integer0, (-3126), objectArray0, 0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ObjectBuffer.Node objectBuffer_Node0 = new ObjectBuffer.Node(objectArray0);
      Object[] objectArray1 = objectBuffer_Node0.getData();
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ObjectBuffer.Node objectBuffer_Node0 = new ObjectBuffer.Node(objectArray0);
      ObjectBuffer.Node objectBuffer_Node1 = objectBuffer_Node0.next();
      assertNull(objectBuffer_Node1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ObjectBuffer.Node objectBuffer_Node0 = new ObjectBuffer.Node(objectArray0);
      objectBuffer_Node0.linkNext(objectBuffer_Node0);
      // Undeclared exception!
      try { 
        objectBuffer_Node0.linkNext(objectBuffer_Node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ObjectBuffer$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = objectBuffer0.appendCompletedChunk(objectArray0);
      assertEquals(5, objectBuffer0.bufferedSize());
      
      objectBuffer0.completeAndClearBuffer(objectArray1, 0);
      assertEquals(10, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      int int0 = objectBuffer0.initialCapacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[5];
      objectBuffer0.appendCompletedChunk(objectArray0);
      objectBuffer0._reset();
      int int0 = objectBuffer0.initialCapacity();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = objectBuffer0.appendCompletedChunk(objectArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      objectBuffer0.completeAndClearBuffer(objectArray1, 0, (List<Object>) linkedList0);
      assertEquals(5, objectBuffer0.bufferedSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[131];
      Object[] objectArray1 = objectBuffer0.appendCompletedChunk(objectArray0);
      Object[] objectArray2 = objectBuffer0.appendCompletedChunk(objectArray1);
      Object[] objectArray3 = objectBuffer0.appendCompletedChunk(objectArray2);
      Object[] objectArray4 = objectBuffer0.appendCompletedChunk(objectArray3);
      Object[] objectArray5 = objectBuffer0.appendCompletedChunk(objectArray4);
      Object[] objectArray6 = objectBuffer0.appendCompletedChunk(objectArray5);
      Object[] objectArray7 = objectBuffer0.appendCompletedChunk(objectArray6);
      objectBuffer0.appendCompletedChunk(objectArray7);
      assertEquals(33405, objectBuffer0.bufferedSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = objectBuffer0.resetAndStart();
      assertNotNull(objectArray0);
      assertEquals(12, objectArray0.length);
      assertEquals(0, objectBuffer0.bufferedSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      int int0 = objectBuffer0.bufferedSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[4];
      Class<String> class0 = String.class;
      String[] stringArray0 = objectBuffer0.completeAndClearBuffer(objectArray0, 0, class0);
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object[] objectArray0 = new Object[0];
      objectBuffer0.appendCompletedChunk(objectArray0);
      Object[] objectArray1 = new Object[86];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        objectBuffer0.completeAndClearBuffer(objectArray1, 172, (List<Object>) linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("com.fasterxml.jackson.databind.util.ObjectBuffer", e);
      }
  }
}
