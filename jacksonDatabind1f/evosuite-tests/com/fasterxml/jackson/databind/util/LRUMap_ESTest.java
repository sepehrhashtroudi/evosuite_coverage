/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 05:46:44 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.AbstractMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LRUMap_ESTest extends LRUMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(0, 1485);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(lRUMap0, lRUMap0);
      boolean boolean0 = lRUMap0.removeEldestEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LRUMap<String, String> lRUMap0 = new LRUMap<String, String>(1339, (-375));
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("com.fasterxml.jackson.databind.util.LRUMap", "]j;T*lSa");
      boolean boolean0 = lRUMap0.removeEldestEntry(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>(756, (-786));
      lRUMap0._jdkSerializeMaxEntries = (-1);
      // Undeclared exception!
      try { 
        lRUMap0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LRUMap<Integer, String> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Integer, String>((-694), (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -694
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(0, 0);
      boolean boolean0 = lRUMap0.removeEldestEntry((Map.Entry<Object, Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(0, 0);
      LRUMap lRUMap1 = (LRUMap)lRUMap0.readResolve();
      assertTrue(lRUMap1.isEmpty());
  }
}
