/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 05:45:39 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayBuilders_ESTest extends ArrayBuilders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.LongBuilder arrayBuilders_LongBuilder0 = arrayBuilders0.getLongBuilder();
      long[] longArray0 = arrayBuilders_LongBuilder0._constructArray(16384);
      assertEquals(16384, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayBuilders.ShortBuilder arrayBuilders_ShortBuilder0 = new ArrayBuilders.ShortBuilder();
      short[] shortArray0 = arrayBuilders_ShortBuilder0._constructArray(2687);
      assertEquals(2687, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.FloatBuilder arrayBuilders_FloatBuilder0 = arrayBuilders0.getFloatBuilder();
      assertNotNull(arrayBuilders_FloatBuilder0);
      
      float[] floatArray0 = arrayBuilders_FloatBuilder0._constructArray(0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.IntBuilder arrayBuilders_IntBuilder0 = arrayBuilders0.getIntBuilder();
      assertNotNull(arrayBuilders_IntBuilder0);
      
      int[] intArray0 = arrayBuilders_IntBuilder0._constructArray(2086);
      assertEquals(2086, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linkedHashSet0;
      linkedHashSet0.add(objectArray0[0]);
      // Undeclared exception!
      try { 
        ArrayBuilders.setAndArray((Set<Object>) linkedHashSet0, objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      // Undeclared exception!
      try { 
        ArrayBuilders.insertInListNoDup((Object[]) null, (Object) arrayBuilders0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ArrayBuilders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.BooleanBuilder arrayBuilders_BooleanBuilder0 = arrayBuilders0.getBooleanBuilder();
      // Undeclared exception!
      try { 
        ArrayBuilders.insertInListNoDup((Object[]) integerArray0, (Object) arrayBuilders_BooleanBuilder0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // com.fasterxml.jackson.databind.util.ArrayBuilders$BooleanBuilder
         //
         verifyException("com.fasterxml.jackson.databind.util.ArrayBuilders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayBuilders.insertInList((String[]) null, "Should have gotten ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ArrayBuilders", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Iterable<Object> iterable0 = ArrayBuilders.arrayAsIterable((Object[]) integerArray0);
      // Undeclared exception!
      try { 
        ArrayBuilders.insertInList((Object[]) integerArray0, (Object) iterable0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // com.fasterxml.jackson.databind.util.ArrayBuilders$ArrayIterator
         //
         verifyException("com.fasterxml.jackson.databind.util.ArrayBuilders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayBuilders.DoubleBuilder arrayBuilders_DoubleBuilder0 = new ArrayBuilders.DoubleBuilder();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = arrayBuilders_DoubleBuilder0.appendCompletedChunk(doubleArray0, 0);
      Object object0 = ArrayBuilders.getArrayComparator(doubleArray1);
      // Undeclared exception!
      try { 
        ArrayBuilders.getArrayComparator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) linkedHashSet0;
      linkedHashSet0.add(objectArray0[1]);
      // Undeclared exception!
      try { 
        ArrayBuilders.arrayToSet(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayBuilders.IntBuilder arrayBuilders_IntBuilder0 = new ArrayBuilders.IntBuilder();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayBuilders.BooleanBuilder arrayBuilders_BooleanBuilder0 = new ArrayBuilders.BooleanBuilder();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayBuilders.ByteBuilder arrayBuilders_ByteBuilder0 = new ArrayBuilders.ByteBuilder();
      byte[] byteArray0 = arrayBuilders_ByteBuilder0._constructArray(1995);
      assertEquals(1995, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayBuilders.LongBuilder arrayBuilders_LongBuilder0 = new ArrayBuilders.LongBuilder();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.LongBuilder arrayBuilders_LongBuilder0 = arrayBuilders0.getLongBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayBuilders0;
      objectArray0[1] = (Object) arrayBuilders_LongBuilder0;
      objectArray0[2] = (Object) arrayBuilders_LongBuilder0;
      objectArray0[3] = (Object) arrayBuilders_LongBuilder0;
      objectArray0[4] = (Object) arrayBuilders0;
      objectArray0[5] = (Object) arrayBuilders0;
      Object[] objectArray1 = ArrayBuilders.insertInListNoDup(objectArray0, (Object) null);
      assertEquals(7, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayBuilders.FloatBuilder arrayBuilders_FloatBuilder0 = new ArrayBuilders.FloatBuilder();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) arrayBuilders_FloatBuilder0;
      Object[] objectArray1 = ArrayBuilders.insertInListNoDup(objectArray0, (Object) arrayBuilders_FloatBuilder0);
      assertEquals(2, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayBuilders0;
      Object[] objectArray1 = ArrayBuilders.insertInListNoDup(objectArray0, objectArray0[5]);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = ArrayBuilders.insertInListNoDup(objectArray0, objectArray0[5]);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = ArrayBuilders.insertInList(stringArray0, ".zt{)5mT");
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayBuilders.insertInList(stringArray0, "_+H");
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.DoubleBuilder arrayBuilders_DoubleBuilder0 = arrayBuilders0.getDoubleBuilder();
      assertNotNull(arrayBuilders_DoubleBuilder0);
      
      double[] doubleArray0 = arrayBuilders_DoubleBuilder0._constructArray(2687);
      ArrayBuilders.addToList((List<Object>) null, (Object) doubleArray0);
      assertEquals(2687, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayBuilders.addToList((List<Object>) linkedList0, (Object) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[2];
      HashSet<Object> hashSet0 = ArrayBuilders.setAndArray((Set<Object>) linkedHashSet0, objectArray0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<Object> hashSet0 = ArrayBuilders.setAndArray((Set<Object>) null, (Object[]) null);
      HashSet<Object> hashSet1 = ArrayBuilders.setAndArray((Set<Object>) hashSet0, (Object[]) null);
      assertNotSame(hashSet1, hashSet0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ArrayList<String> arrayList0 = ArrayBuilders.arrayToList(stringArray0);
      assertEquals(9, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Object> arrayList0 = ArrayBuilders.arrayToList((Object[]) null);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      HashSet<Object> hashSet0 = ArrayBuilders.arrayToSet(objectArray0);
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashSet<Integer> hashSet0 = ArrayBuilders.arrayToSet((Integer[]) null);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.DoubleBuilder arrayBuilders_DoubleBuilder0 = arrayBuilders0.getDoubleBuilder();
      ArrayBuilders.DoubleBuilder arrayBuilders_DoubleBuilder1 = arrayBuilders0.getDoubleBuilder();
      assertSame(arrayBuilders_DoubleBuilder1, arrayBuilders_DoubleBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.LongBuilder arrayBuilders_LongBuilder0 = arrayBuilders0.getLongBuilder();
      ArrayBuilders.LongBuilder arrayBuilders_LongBuilder1 = arrayBuilders0.getLongBuilder();
      assertSame(arrayBuilders_LongBuilder1, arrayBuilders_LongBuilder0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.IntBuilder arrayBuilders_IntBuilder0 = arrayBuilders0.getIntBuilder();
      ArrayBuilders.IntBuilder arrayBuilders_IntBuilder1 = arrayBuilders0.getIntBuilder();
      assertSame(arrayBuilders_IntBuilder1, arrayBuilders_IntBuilder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.ByteBuilder arrayBuilders_ByteBuilder0 = arrayBuilders0.getByteBuilder();
      ArrayBuilders.ByteBuilder arrayBuilders_ByteBuilder1 = arrayBuilders0.getByteBuilder();
      assertSame(arrayBuilders_ByteBuilder1, arrayBuilders_ByteBuilder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.BooleanBuilder arrayBuilders_BooleanBuilder0 = arrayBuilders0.getBooleanBuilder();
      ArrayBuilders.BooleanBuilder arrayBuilders_BooleanBuilder1 = arrayBuilders0.getBooleanBuilder();
      assertSame(arrayBuilders_BooleanBuilder1, arrayBuilders_BooleanBuilder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.ShortBuilder arrayBuilders_ShortBuilder0 = arrayBuilders0.getShortBuilder();
      ArrayBuilders.ShortBuilder arrayBuilders_ShortBuilder1 = arrayBuilders0.getShortBuilder();
      assertSame(arrayBuilders_ShortBuilder1, arrayBuilders_ShortBuilder0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayBuilders.FloatBuilder arrayBuilders_FloatBuilder0 = new ArrayBuilders.FloatBuilder();
      // Undeclared exception!
      try { 
        arrayBuilders_FloatBuilder0._constructArray((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.FloatBuilder arrayBuilders_FloatBuilder0 = arrayBuilders0.getFloatBuilder();
      ArrayBuilders.FloatBuilder arrayBuilders_FloatBuilder1 = arrayBuilders0.getFloatBuilder();
      assertSame(arrayBuilders_FloatBuilder1, arrayBuilders_FloatBuilder0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.BooleanBuilder arrayBuilders_BooleanBuilder0 = arrayBuilders0.getBooleanBuilder();
      assertNotNull(arrayBuilders_BooleanBuilder0);
      
      boolean[] booleanArray0 = arrayBuilders_BooleanBuilder0._constructArray(3878);
      assertEquals(3878, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayBuilders arrayBuilders0 = new ArrayBuilders();
      ArrayBuilders.LongBuilder arrayBuilders_LongBuilder0 = arrayBuilders0.getLongBuilder();
      assertNotNull(arrayBuilders_LongBuilder0);
      
      long[] longArray0 = arrayBuilders_LongBuilder0._constructArray(0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayBuilders.getArrayComparator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayBuilders.insertInListNoDup(stringArray0, "_+H");
      ArrayBuilders.arrayAsIterator(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
  }
}
