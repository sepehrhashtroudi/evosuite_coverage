/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 05:55:02 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ISO8601DateFormat_ESTest extends ISO8601DateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ISO8601DateFormat iSO8601DateFormat0 = new ISO8601DateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = iSO8601DateFormat0.parse("0598-01-15T15:47:00Z", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ISO8601DateFormat iSO8601DateFormat0 = new ISO8601DateFormat();
      MockDate mockDate0 = new MockDate(554L);
      StringBuffer stringBuffer0 = new StringBuffer(60000);
      StringBuffer stringBuffer1 = iSO8601DateFormat0.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      assertEquals(20, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ISO8601DateFormat iSO8601DateFormat0 = new ISO8601DateFormat();
      ParsePosition parsePosition0 = new ParsePosition(13);
      // Undeclared exception!
      try { 
        iSO8601DateFormat0.parse("Uc=3", parsePosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse date Uc=3
         //
         verifyException("com.fasterxml.jackson.databind.util.ISO8601Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ISO8601DateFormat iSO8601DateFormat0 = new ISO8601DateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), 0, 0, 1026, 1611);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-4009));
      // Undeclared exception!
      try { 
        iSO8601DateFormat0.format(date0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ISO8601DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ISO8601DateFormat iSO8601DateFormat0 = new ISO8601DateFormat();
      Object object0 = iSO8601DateFormat0.clone();
      assertSame(object0, iSO8601DateFormat0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ISO8601DateFormat iSO8601DateFormat0 = new ISO8601DateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1267));
      // Undeclared exception!
      try { 
        iSO8601DateFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ISO8601DateFormat", e);
      }
  }
}
