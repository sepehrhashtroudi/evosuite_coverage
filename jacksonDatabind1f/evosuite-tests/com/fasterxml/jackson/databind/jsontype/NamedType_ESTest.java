/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 05:33:45 GMT 2023
 */

package com.fasterxml.jackson.databind.jsontype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "6t>@G*:D7$.@M");
      String string0 = namedType0.getName();
      assertNotNull(string0);
      assertTrue(namedType0.hasName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "");
      namedType0._name = "";
      String string0 = namedType0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamedType namedType0 = null;
      try {
        namedType0 = new NamedType((Class<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamedType namedType0 = null;
      try {
        namedType0 = new NamedType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "d)xEglHiL_;YhrrP~");
      namedType0.setName("d)xEglHiL_;YhrrP~");
      assertTrue(namedType0.hasName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      assertTrue(namedType0.hasName());
      
      namedType0.setName((String) null);
      String string0 = namedType0.toString();
      assertEquals("[NamedType, class java.lang.Object, name: null]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      String string0 = namedType0.toString();
      assertEquals("[NamedType, class java.lang.Object, name: '7Egob9a\"N<']", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      NamedType namedType1 = new NamedType(class0, "7Egob9a\"N<");
      boolean boolean0 = namedType0.equals(namedType1);
      assertTrue(namedType1.hasName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0);
      boolean boolean0 = namedType0.equals(":?M>;%7uGAX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NamedType namedType0 = new NamedType(class0);
      boolean boolean0 = namedType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      boolean boolean0 = namedType0.equals(namedType0);
      assertTrue(namedType0.hasName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      Class<String> class1 = String.class;
      NamedType namedType1 = new NamedType(class1, "7Egob9a\"N<");
      boolean boolean0 = namedType0.equals(namedType1);
      assertFalse(boolean0);
      assertTrue(namedType1.hasName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      boolean boolean0 = namedType0.hasName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      assertTrue(namedType0.hasName());
      
      namedType0.setName((String) null);
      boolean boolean0 = namedType0.hasName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NamedType namedType0 = new NamedType(class0);
      namedType0.setName("");
      assertFalse(namedType0.hasName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NamedType namedType0 = new NamedType(class0);
      String string0 = namedType0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0, "7Egob9a\"N<");
      Class<?> class1 = namedType0.getType();
      assertNotNull(class1);
      assertTrue(namedType0.hasName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NamedType namedType0 = new NamedType(class0);
      namedType0.hashCode();
  }
}
