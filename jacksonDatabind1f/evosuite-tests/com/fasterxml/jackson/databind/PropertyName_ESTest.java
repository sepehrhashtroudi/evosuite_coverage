/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 06:11:21 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.PropertyName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyName_ESTest extends PropertyName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, "#disabled");
      String string0 = propertyName0.toString();
      assertEquals("{#disabled}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("d3kM(", "d3kM(");
      propertyName0.hashCode();
      assertTrue(propertyName0.hasNamespace());
      assertEquals("d3kM(", propertyName0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace("z");
      propertyName1.hashCode();
      assertEquals("z", propertyName1.getNamespace());
      assertEquals("", propertyName1.getSimpleName());
      assertTrue(propertyName1.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      boolean boolean0 = propertyName0.equals(propertyName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      boolean boolean0 = propertyName0.hasSimpleName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = (PropertyName)propertyName0.readResolve();
      assertTrue(propertyName1.hasSimpleName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("m[d9f3", "");
      String string0 = propertyName0.getSimpleName();
      assertEquals("m[d9f3", string0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      String string0 = propertyName0.getNamespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "RJ0!}1Hwg");
      String string0 = propertyName0.getNamespace();
      assertEquals("RJ0!}1Hwg", string0);
      assertFalse(propertyName0.hasSimpleName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("qe*#~]|Qd,S_&1Y-pA>", "Kw,f>+0Ky=");
      PropertyName propertyName1 = propertyName0.withNamespace("F'1~[<vC``_%>G");
      PropertyName propertyName2 = (PropertyName)propertyName0.readResolve();
      boolean boolean0 = propertyName1.equals(propertyName2);
      assertEquals("qe*#~]|Qd,S_&1Y-pA>", propertyName1.getSimpleName());
      assertFalse(boolean0);
      assertEquals("F'1~[<vC``_%>G", propertyName1.getNamespace());
      assertEquals("qe*#~]|Qd,S_&1Y-pA>", propertyName2.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      assertFalse(propertyName0.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      String string0 = propertyName0.USE_DEFAULT.toString();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      propertyName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("}", "}");
      PropertyName propertyName1 = propertyName0.withSimpleName("{");
      boolean boolean0 = propertyName1.equals(propertyName0);
      assertTrue(propertyName1.hasNamespace());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(boolean0);
      assertEquals("}", propertyName1.getNamespace());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      boolean boolean0 = propertyName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("#disabled", "#disabled");
      boolean boolean0 = propertyName0.hasNamespace();
      assertTrue(boolean0);
      assertEquals("#disabled", propertyName0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      boolean boolean0 = propertyName0.hasNamespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      boolean boolean0 = propertyName0.hasSimpleName();
      assertFalse(boolean0);
      assertTrue(propertyName0.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      assertSame(propertyName1, propertyName0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("}", "}");
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      boolean boolean0 = propertyName1.equals(propertyName0);
      assertFalse(boolean0);
      assertEquals("}", propertyName1.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      PropertyName propertyName1 = propertyName0.withNamespace("");
      assertSame(propertyName1, propertyName0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("}", "}");
      PropertyName propertyName1 = propertyName0.withSimpleName((String) null);
      PropertyName propertyName2 = propertyName1.withSimpleName((String) null);
      assertEquals("}", propertyName2.getNamespace());
      assertNotSame(propertyName2, propertyName0);
      assertTrue(propertyName2.hasNamespace());
      assertSame(propertyName2, propertyName1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      PropertyName propertyName1 = propertyName0.NO_NAME.withSimpleName("");
      Object object0 = propertyName0.readResolve();
      boolean boolean0 = propertyName1.equals(object0);
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertTrue(boolean0);
      assertFalse(propertyName0.equals((Object)propertyName1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("}", (String) null);
      assertFalse(propertyName0.hasNamespace());
      assertEquals("}", propertyName0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      assertEquals("", propertyName0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      boolean boolean0 = propertyName0.equals("#disabled");
      assertFalse(boolean0);
      assertFalse(propertyName0.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      String string0 = propertyName0.getNamespace();
      assertNotNull(string0);
      assertTrue(propertyName0.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      String string0 = propertyName0.getSimpleName();
      assertNotNull(string0);
      assertTrue(propertyName0.hasNamespace());
  }
}
