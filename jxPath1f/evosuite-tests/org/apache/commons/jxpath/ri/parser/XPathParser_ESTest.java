/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 01:53:57 GMT 2023
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
import org.apache.commons.jxpath.ri.parser.ParseException;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParser;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParser_ESTest extends XPathParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathParser.JJCalls xPathParser_JJCalls0 = new XPathParser.JJCalls();
      assertNotNull(xPathParser_JJCalls0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 940, 940, 940);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(939, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      try { 
        xPathParser0.parseExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YLe{Br`1h>\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-206), (-206));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals((-204), simpleCharStream0.getColumn());
      assertEquals((-206), simpleCharStream0.getLine());
      assertEquals((-206), simpleCharStream0.getBeginLine());
      assertEquals((-206), simpleCharStream0.getBeginColumn());
      assertEquals((-204), simpleCharStream0.getEndColumn());
      assertEquals((-206), simpleCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        xPathParser0.UnionExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -206, column -203.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A];mX");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1136), (-1136));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals((-1136), simpleCharStream0.getColumn());
      assertEquals((-1136), simpleCharStream0.getBeginLine());
      assertEquals((-1136), simpleCharStream0.getEndLine());
      assertEquals((-1136), simpleCharStream0.getEndColumn());
      assertEquals((-1136), simpleCharStream0.getLine());
      assertEquals((-1136), simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        xPathParser0.SubtractiveExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.RelativeLocationPath();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N1R:&K&^ef(P");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.RelationalExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = xPathParser0.jj_input_stream;
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      
      simpleCharStream0.backup(2143);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1952, simpleCharStream0.bufpos);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        xPathParser0.ReInit(xPathParser0.token_source);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wz'C34>V~tPc");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: <EOF> after : \"\\'C34>V~tPc\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vqMZz-7arsmm}3iP");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.NodeType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: \"}\" (125), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.jxpath.ri.parser.XPathParser", "\"");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.apache.commons.jxpath.ri.parser.XPathParser0\"", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/org.apache.commons.jxpath.ri.parser.XPathParser0\"", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      XPathParser xPathParser0 = new XPathParser(mockFileInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.apache.commons.jxpath.ri.parser.XPathParser0\"", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/org.apache.commons.jxpath.ri.parser.XPathParser0\"", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      try { 
        xPathParser0.MultiplicativeExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParser0.token_source = xPathParserTokenManager0;
      // Undeclared exception!
      try { 
        xPathParser0.FilterExpr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.EqualityExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.CoreFunctionCall();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      XPathParser xPathParser0 = new XPathParser(mockFileInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        xPathParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting:
         //     \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gO',s#PV");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.Argument();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\',s#PV\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.AndExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)51);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        xPathParser0.AndExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      
      try { 
        xPathParser0.AdditiveExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~x");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 119, (-1564), 119);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser(xPathParserTokenManager0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 119, column -1564.  Encountered: \"~\" (126), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser((XPathParserTokenManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser(xPathParserTokenManager0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%o3");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser(stringReader0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser(byteArrayInputStream0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathParser xPathParser0 = null;
      try {
        xPathParser0 = new XPathParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 43, (byte)120);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      
      ParseException parseException0 = xPathParser0.generateParseException();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(parseException0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1528);
      assertNotNull(pushbackInputStream0);
      
      XPathParser xPathParser0 = new XPathParser(pushbackInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.FilterExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R>8wmZ'E<__' iO)t?`");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w9E\"Ynh?FL;X4J%");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.UnaryExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\\"Ynh?FL;X4J%\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.UnaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParser");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 872);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(pushbackInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = xPathParser0.AbbreviatedAxisSpecifier();
      assertEquals(2, int0);
      assertFalse(xPathParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      int int0 = xPathParser0.AxisSpecifier();
      assertEquals(2, int0);
      assertFalse(xPathParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls"));
      assertEquals(0, linkedList0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>(linkedList0);
      assertNotNull(arrayList0);
      assertFalse(linkedList0.contains("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls"));
      assertFalse(arrayList0.contains("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls"));
      assertEquals(0, linkedList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      try { 
        xPathParser0.NodeTest(arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R>8wmZ'E<__' iO)t?`");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.NodeTest((ArrayList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        xPathParser0.LocationPath();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\t\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      
      try { 
        xPathParser0.QName_Without_CoreFunctions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"\\\"\\t\\\"\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     <NCName> ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"key\" ...
         //     \"format-number\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R>8wmZ'E<__' iO)t?`");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      String string0 = xPathParser0.NCName();
      assertEquals("R", string0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)68, (byte)47);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals((-64), byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(4, byteArray0.length);
      assertEquals((-64), byteArrayInputStream0.available());
      
      try { 
        xPathParser0.FunctionName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     <NCName> ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"key\" ...
         //     \"format-number\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("._=Q_i");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      Token token0 = xPathParser0.getToken(48);
      assertFalse(xPathParser0.lookingAhead);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(6, token0.beginColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      Token token0 = xPathParser0.getNextToken();
      assertFalse(xPathParser0.lookingAhead);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      xPathParser0.ReInit(xPathParser0.token_source);
      assertFalse(xPathParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      XPathParser xPathParser0 = new XPathParser(sequenceInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      StringReader stringReader0 = new StringReader("J{.+s<<|");
      assertNotNull(stringReader0);
      
      xPathParser0.ReInit((Reader) stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        xPathParser0.QName();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      xPathParser0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        xPathParser0.AbsoluteLocationPath();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B3:teXO3zo");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((byte)113);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[N3b");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.SubtractiveExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"[\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">BC: ,k'S4F,");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.OrExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \">\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<BaseChar>");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.RelationalExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-6zk");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.OrExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.UnionExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 872);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(pushbackInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)51);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        xPathParser0.OrExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-673?qN)]p/Tk#*JG`r");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.AxisName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"-\" at line 1, column 1.
         // Was expecting one of:
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+v");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.RelativeLocationPath();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"+\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("._=Q_i");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.RelativeLocationPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      try { 
        xPathParser0.LocationStep(arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.AbsoluteLocationPath();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*@6KHP0R|g'Uze@");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.MultiplicativeExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.LocationPath();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertNotNull(sequenceInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        xPathParser0.FilterExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B3:teXO3zo");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.QName_Without_CoreFunctions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HNh .N");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 255, 1371);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(1371, simpleCharStream0.getBeginColumn());
      assertEquals(255, simpleCharStream0.getLine());
      assertEquals(1373, simpleCharStream0.getColumn());
      assertEquals(1373, simpleCharStream0.getEndColumn());
      assertEquals(255, simpleCharStream0.getBeginLine());
      assertEquals(255, simpleCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        xPathParser0.QName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParser");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.CoreFunctionName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message (getMessage() has thrown an exception)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[NTd1y>uW!eo`Nr.m4.");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      try { 
        xPathParser0.NCName_Without_CoreFunctions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"[\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     <NCName> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      XPathParser xPathParser0 = new XPathParser(sequenceInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.QName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"round\"");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.EqualityExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$'NDb>8g04XV, k?");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      // Undeclared exception!
      try { 
        xPathParser0.FunctionCall();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 17.  Encountered: <EOF> after : \"\\'NDb>8g04XV, k?\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.Predicate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting:
         //     \"[\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("._=Q_i");
      assertNotNull(stringReader0);
      
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.VariableReference();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \".\" at line 1, column 1.
         // Was expecting:
         //     \"$\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 872);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      XPathParser xPathParser0 = new XPathParser(pushbackInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, pipedInputStream0.available());
      
      TreeCompiler treeCompiler0 = new TreeCompiler();
      assertNotNull(treeCompiler0);
      
      xPathParser0.setCompiler(treeCompiler0);
      assertFalse(xPathParser0.lookingAhead);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 940, 940, 940);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParser xPathParser0 = new XPathParser(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(939, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      xPathParser0.disable_tracing();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(939, simpleCharStream0.bufpos);
      assertFalse(xPathParser0.lookingAhead);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      assertNotNull(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      XPathParser xPathParser0 = new XPathParser(sequenceInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        xPathParser0.Argument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"-\" ...
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
      XPathParser xPathParser0 = new XPathParser(dataInputStream0);
      assertFalse(xPathParser0.lookingAhead);
      assertNotNull(xPathParser0);
      
      try { 
        xPathParser0.NodeType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }
}
