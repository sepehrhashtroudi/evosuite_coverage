/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 01:57:13 GMT 2023
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.ri.parser.ParseException;
import org.apache.commons.jxpath.ri.parser.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParseException_ESTest extends ParseException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseException parseException0 = new ParseException("Encountered \"");
      String string0 = parseException0.add_escapes("'V~.@87J@=");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseException parseException0 = new ParseException("*@P6<SfL8XE[<");
      String string0 = parseException0.add_escapes("    ");
      assertEquals("    ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token token0 = new Token();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[2];
      intArray0[0] = intArray1;
      String[] stringArray0 = new String[8];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      // Undeclared exception!
      try { 
        parseException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseException parseException0 = new ParseException();
      String string0 = parseException0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseException parseException0 = new ParseException("");
      String string0 = parseException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParseException parseException0 = new ParseException("");
      String string0 = parseException0.add_escapes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token token0 = Token.newToken((-892));
      int[][] intArray0 = new int[6][5];
      int[] intArray1 = new int[4];
      intArray1[2] = (-1);
      intArray0[4] = intArray1;
      String[] stringArray0 = new String[9];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      // Undeclared exception!
      try { 
        parseException0.getMessage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParseException parseException0 = new ParseException();
      // Undeclared exception!
      try { 
        parseException0.add_escapes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseException parseException0 = new ParseException();
      String string0 = parseException0.add_escapes("|C:<Ch`8{=]sW");
      assertEquals("|C:<C\\u007fh`8{=]sW", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseException parseException0 = new ParseException("*@P6<SfL8XE[<");
      String string0 = parseException0.add_escapes("\n");
      assertEquals("\\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token token0 = new Token();
      int[][] intArray0 = new int[1][4];
      token0.next = token0;
      String[] stringArray0 = new String[8];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      String string0 = parseException0.getMessage();
      assertEquals("Encountered \"null\" at line 0, column 0.\nWas expecting:\n    null null null null \n    ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token token0 = new Token();
      token0.image = "B4&[FK";
      int[][] intArray0 = new int[2][4];
      token0.kind = 3;
      token0.next = token0;
      String[] stringArray0 = new String[7];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      String string0 = parseException0.getMessage();
      assertEquals("Encountered \"B4&[FK B4&[FK B4&[FK B4&[FK\" at line 0, column 0.\nWas expecting one of:\n    null null null null \n    null null null null \n    ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token token0 = new Token();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[2];
      intArray0[0] = intArray1;
      intArray1[1] = 3;
      String[] stringArray0 = new String[8];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      // Undeclared exception!
      try { 
        parseException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseException parseException0 = new ParseException();
      String string0 = parseException0.add_escapes("2Cfe3K'#T\"'Gg:>L}");
      assertEquals("2Cf\\u007fe3K\\'#T\\\"\\'Gg:>L}", string0);
  }
}
