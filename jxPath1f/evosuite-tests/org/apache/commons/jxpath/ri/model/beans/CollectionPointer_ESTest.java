/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 02:16:43 GMT 2023
 */

package org.apache.commons.jxpath.ri.model.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.CollectionPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollectionPointer_ESTest extends CollectionPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = new CollectionPointer((Object) null, (Locale) null);
      assertTrue(collectionPointer1.equals((Object)collectionPointer0));
      assertTrue(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertFalse(collectionPointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      collectionPointer0.setIndex(698);
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(698, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = collectionPointer1.equals(collectionPointer0);
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(698, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(boolean0);
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(93);
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(93, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      collectionPointer0.hashCode();
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(93, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      boolean boolean0 = collectionPointer0.isCollection();
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      int int0 = collectionPointer0.getLength();
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(0, int0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, (Locale) null);
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Object object0 = collectionPointer0.getBaseValue();
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) collectionPointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isRoot());
      assertEquals(0, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isNode());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isCollection());
      assertSame(collectionPointer0, collectionPointer1);
      assertSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("tx", "tx");
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, qName0);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertSame(collectionPointer0, collectionPointer1);
      assertSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("", (String) null);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, object0);
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer1.isContainer());
      assertTrue(collectionPointer1.isNode());
      assertFalse(collectionPointer1.isAttribute());
      assertFalse(collectionPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertSame(collectionPointer0, collectionPointer1);
      assertSame(collectionPointer1, collectionPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setAttribute(true);
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(collectionPointer1.isContainer());
      assertTrue(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertTrue(collectionPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertNull(collectionPointer1.getNamespaceURI());
      assertSame(collectionPointer0, collectionPointer1);
      assertSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isContainer());
      assertEquals(0, collectionPointer1.getIndex());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertSame(collectionPointer0, collectionPointer1);
      assertSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("tx", "tx");
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, qName0);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) nodeNameTest0);
      assertTrue(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(collectionPointer1.isNode());
      assertFalse(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setAttribute(true);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName((String) null, "<<unknown namespace>>");
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNotNull(qName0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-2147483647), object0);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertTrue(collectionPointer1.isAttribute());
      assertEquals((-2147483647), collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isRoot());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer("", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "T2q:%}yv18OK@IsY;r");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, (QName) null, 0, (Object) null);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertEquals(0, collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "GAL+y,[)N9/r?s");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("GAL+y,[)N9/r?s", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 4750, (Object) nodeNameTest0);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("GAL+y,[)N9/r?s", nodeNameTest0.getNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isAttribute());
      assertFalse(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isRoot());
      assertEquals(4750, collectionPointer1.getIndex());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("tx", "tx");
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, qName0);
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-4303));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("tx", qName0.getPrefix());
      assertEquals("tx", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isNode());
      assertFalse(collectionPointer1.isAttribute());
      assertEquals((-4303), collectionPointer1.getIndex());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, (QName) null, 0);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer1.isContainer());
      assertTrue(collectionPointer1.isCollection());
      assertTrue(collectionPointer1.isRoot());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals(0, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertNotNull(qName0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, 2277);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertEquals(2277, collectionPointer1.getIndex());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = collectionPointer0.getName();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0);
      
      collectionPointer0.setIndex(1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(1, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(1, collectionPointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      int int0 = collectionPointer0.compareChildNodePointers(variablePointer0, collectionPointer0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(1, collectionPointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("pS", "");
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) variablePointer0, locale0);
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      CollectionPointer collectionPointer1 = (CollectionPointer)collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, (-1112), (Object) nodeTypeTest0);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertEquals((-1112), collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      int int0 = collectionPointer0.compareChildNodePointers(variablePointer0, collectionPointer1);
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isRoot());
      assertEquals((-1112), collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals((-2147482536), int0);
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodePointerFactory nodePointerFactory0 = mock(NodePointerFactory.class, new ViolatedAssumptionAnswer());
      JXPathContextReferenceImpl.addNodePointerFactory(nodePointerFactory0);
      QName qName0 = new QName("[", "");
      assertEquals("[", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      collectionPointer0.setIndex((-592));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isContainer());
      assertEquals((-592), collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "GAL+y,[)N9/r?s");
      assertEquals("[", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("GAL+y,[)N9/r?s", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.testNode(nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, object0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.setValue(nodeNameTest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(nodeNameTest0, (Locale) null);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(collectionPointer0, qName0, beanPointer0);
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
      
      CollectionPointer collectionPointer1 = new CollectionPointer(beanPointer1, collectionPointer0);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isNode());
      assertFalse(collectionPointer1.isRoot());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      // Undeclared exception!
      try { 
        collectionPointer1.setValue(beanPointer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot setValue of an object that is not some other object's property
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex((-4281));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointerFactory nodePointerFactory0 = mock(NodePointerFactory.class, new ViolatedAssumptionAnswer());
      JXPathContextReferenceImpl.addNodePointerFactory(nodePointerFactory0);
      // Undeclared exception!
      try { 
        collectionPointer0.namespacePointer("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(698);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(698, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl.addNodePointerFactory((NodePointerFactory) null);
      // Undeclared exception!
      try { 
        collectionPointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      collectionPointer0.setIndex(93);
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(93, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("", "<<unknown namespace>>");
      assertEquals("", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot turn java.lang.Object into a collection of size 94
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QName qName0 = new QName("", (String) null);
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, "");
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isContainer());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
      
      CollectionPointer collectionPointer0 = new CollectionPointer("", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = new CollectionPointer(beanPointer1, collectionPointer0);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isContainer());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isCollection());
      assertTrue(collectionPointer1.isNode());
      assertFalse(collectionPointer1.isRoot());
      assertFalse(collectionPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      // Undeclared exception!
      try { 
        collectionPointer1.createPath((JXPathContext) null, (Object) beanPointer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot setValue of an object that is not some other object's property
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = new CollectionPointer((Object) collectionPointer0, locale0);
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      collectionPointer1.setIndex(694);
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer1.isNode());
      assertEquals(694, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertTrue(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "<<unknown namespace>>");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        collectionPointer1.createPath((JXPathContext) jXPathContextReferenceImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot turn org.apache.commons.jxpath.ri.model.beans.CollectionPointer into a collection of size 695
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(jXPathContextReferenceImpl0.getDefaultNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("<<unknown namespace>>", "S");
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("S", qName0.getName());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.CollectionPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(variablePointer0, variablePointer0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.createChild((JXPathContext) null, qName0, 1145);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot turn org.apache.commons.jxpath.ri.model.VariablePointer into a collection of size 1146
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4194304);
      assertEquals(4194304, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(nodeTypeTest0, locale0);
      assertEquals(4194304, nodeTypeTest0.getNodeType());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodePointerFactory nodePointerFactory0 = mock(NodePointerFactory.class, new ViolatedAssumptionAnswer());
      JXPathContextReferenceImpl.addNodePointerFactory(nodePointerFactory0);
      // Undeclared exception!
      try { 
        collectionPointer0.createChild((JXPathContext) null, (QName) null, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", "<<unknown namespace>>");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, "Qx'&$9{P1$Fgrt.W7");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.compareChildNodePointers(beanPointer0, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.CollectionPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = new QName("Jp{uO-a_Ac4z9z/w");
      assertNull(qName0.getPrefix());
      assertEquals("Jp{uO-a_Ac4z9z/w", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Jp{uO-a_Ac4z9z/w");
      assertNull(qName0.getPrefix());
      assertEquals("Jp{uO-a_Ac4z9z/w", qName0.getName());
      assertEquals("Jp{uO-a_Ac4z9z/w", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      collectionPointer0.setIndex((-4281));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isContainer());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        collectionPointer0.childIterator(nodeNameTest0, true, collectionPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex((-4281));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.childIterator(nodeNameTest0, true, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isNode());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        collectionPointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex((-592));
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals((-592), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = collectionPointer0.asPath();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals((-592), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isContainer());
      assertEquals("/.[-591]", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      String string0 = collectionPointer0.asPath();
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertEquals("/", string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex((-4281));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)collectionPointer0.getValuePointer();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Object object0 = collectionPointer0.getNode();
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      
      NodePointer nodePointer0 = collectionPointer0.getValuePointer();
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isCollection());
      assertNull(nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isAttribute());
      assertSame(collectionPointer0, nodePointer0);
      assertSame(nodePointer0, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, (Locale) null);
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodePointer nodePointer0 = collectionPointer0.getValuePointer();
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isCollection());
      assertNull(nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isRoot());
      assertSame(collectionPointer0, nodePointer0);
      assertSame(nodePointer0, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer("", locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      // Undeclared exception!
      try { 
        collectionPointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.CollectionPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      collectionPointer0.setValue(object0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(0, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      QName qName0 = new QName("pS", "");
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) variablePointer0, locale0);
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      VariablePointer variablePointer1 = (VariablePointer)collectionPointer0.getImmediateNode();
      assertEquals("", qName0.getName());
      assertEquals("pS", qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertFalse(variablePointer1.isActual());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex(755);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(755, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = collectionPointer0.getImmediateNode();
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(755, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      Object object1 = collectionPointer0.getBaseValue();
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = new CollectionPointer(collectionPointer0, (Object) null);
      assertTrue(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isAttribute());
      assertFalse(collectionPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isContainer());
      assertTrue(collectionPointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      collectionPointer1.setIndex(755);
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertEquals(755, collectionPointer1.getIndex());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isNode());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      collectionPointer0.setIndex((-592));
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals((-592), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isContainer());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = collectionPointer1.asPath();
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals((-592), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isContainer());
      assertEquals(755, collectionPointer1.getIndex());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isNode());
      assertEquals("/.[-591]/.[756]", string0);
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = new CollectionPointer(collectionPointer0, (Object) null);
      assertTrue(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer1.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertFalse(collectionPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      collectionPointer1.setIndex(755);
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isAttribute());
      assertEquals(755, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isRoot());
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = collectionPointer1.asPath();
      assertFalse(collectionPointer0.equals((Object)collectionPointer1));
      assertFalse(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer1.isCollection());
      assertFalse(collectionPointer1.isNode());
      assertNull(collectionPointer1.getNamespaceURI());
      assertTrue(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isAttribute());
      assertEquals(755, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isRoot());
      assertEquals("/[756]", string0);
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      CollectionPointer collectionPointer1 = new CollectionPointer(collectionPointer0, (Object) null);
      assertTrue(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isNode());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer1);
      
      String string0 = collectionPointer1.asPath();
      assertTrue(collectionPointer0.equals((Object)collectionPointer1));
      assertTrue(collectionPointer1.equals((Object)collectionPointer0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer1.isContainer());
      assertFalse(collectionPointer1.isRoot());
      assertTrue(collectionPointer1.isNode());
      assertEquals(Integer.MIN_VALUE, collectionPointer1.getIndex());
      assertFalse(collectionPointer1.isAttribute());
      assertTrue(collectionPointer1.isCollection());
      assertNull(collectionPointer1.getNamespaceURI());
      assertEquals("/", string0);
      assertNotSame(collectionPointer0, collectionPointer1);
      assertNotSame(collectionPointer1, collectionPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = collectionPointer0.testNode(processingInstructionTest0);
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isContainer());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = collectionPointer0.testNode(nodeTypeTest0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, (Object) null);
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      boolean boolean0 = collectionPointer0.testNode((NodeTest) null);
      assertTrue(collectionPointer0.isCollection());
      assertTrue(collectionPointer0.isNode());
      assertFalse(collectionPointer0.isAttribute());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      QName qName0 = new QName("[", "");
      assertEquals("", qName0.getName());
      assertEquals("[", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "GAL+y,[)N9/r?s");
      assertEquals("", qName0.getName());
      assertEquals("[", qName0.getPrefix());
      assertEquals("GAL+y,[)N9/r?s", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = collectionPointer0.testNode(nodeNameTest0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(collectionPointer0.isContainer());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertNull(collectionPointer0.getNamespaceURI());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isNode());
      assertEquals("", qName0.getName());
      assertEquals("[", qName0.getPrefix());
      assertEquals("GAL+y,[)N9/r?s", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      NodePointer nodePointer0 = collectionPointer0.namespacePointer("");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertFalse(collectionPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, collectionPointer0.getIndex());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isNode());
      assertTrue(collectionPointer0.isCollection());
      assertFalse(collectionPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(collectionPointer0);
      
      collectionPointer0.setIndex((-4281));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = collectionPointer0.namespacePointer("");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(collectionPointer0.isAttribute());
      assertTrue(collectionPointer0.isRoot());
      assertFalse(collectionPointer0.isNode());
      assertNull(collectionPointer0.getNamespaceURI());
      assertTrue(collectionPointer0.isContainer());
      assertEquals((-4281), collectionPointer0.getIndex());
      assertTrue(collectionPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      NodeIterator nodeIterator0 = collectionPointer0.namespaceIterator();
      assertNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      QName qName0 = new QName("", "<<unknown namespace>>");
      NodeIterator nodeIterator0 = collectionPointer0.attributeIterator(qName0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      collectionPointer0.setIndex(93);
      collectionPointer0.childIterator(processingInstructionTest0, true, collectionPointer0);
      assertEquals(93, collectionPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      collectionPointer0.setIndex(93);
      QName qName0 = new QName("", "<<unknown namespace>>");
      NodePointer nodePointer0 = collectionPointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
      boolean boolean0 = collectionPointer0.equals(nodePointer0);
      assertEquals(93, collectionPointer0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      CollectionPointer collectionPointer1 = new CollectionPointer((Object) collectionPointer0, locale0);
      boolean boolean0 = collectionPointer1.equals(collectionPointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      boolean boolean0 = collectionPointer0.equals(collectionPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NodeIterator nodeIterator0 = collectionPointer0.childIterator(processingInstructionTest0, true, (NodePointer) null);
      boolean boolean0 = collectionPointer0.equals(nodeIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      collectionPointer0.setIndex(694);
      collectionPointer0.isLeaf();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
      collectionPointer0.createPath(jXPathContext0);
      assertEquals(694, collectionPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CollectionPointer collectionPointer0 = new CollectionPointer((Object) null, locale0);
      collectionPointer0.setIndex(698);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "<<unknown namespace>>");
      collectionPointer0.createPath(jXPathContext0, (Object) collectionPointer0);
      assertEquals(698, collectionPointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CHINESE;
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      collectionPointer0.setIndex((-4281));
      boolean boolean0 = collectionPointer0.isContainer();
      assertEquals((-4281), collectionPointer0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      boolean boolean0 = collectionPointer0.isContainer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      CollectionPointer collectionPointer0 = new CollectionPointer("", locale0);
      boolean boolean0 = collectionPointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      boolean boolean0 = collectionPointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("", "<<unknown namespace>>");
      NodePointer nodePointer0 = collectionPointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
      boolean boolean0 = collectionPointer0.equals(nodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CANADA;
      CollectionPointer collectionPointer0 = new CollectionPointer(object0, locale0);
      int int0 = collectionPointer0.compareChildNodePointers(collectionPointer0, collectionPointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CollectionPointer collectionPointer0 = new CollectionPointer("", locale0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeNameTest0);
      // Undeclared exception!
      try { 
        collectionPointer0.createChild(jXPathContext0, qName0, 1, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot turn java.lang.String into a collection of size 2
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      collectionPointer0.setIndex(93);
      collectionPointer0.namespaceIterator();
      assertFalse(collectionPointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object object0 = new Object();
      CollectionPointer collectionPointer0 = new CollectionPointer((NodePointer) null, object0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("", "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        collectionPointer0.createPath(jXPathContext0, (Object) qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.CollectionPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CollectionPointer collectionPointer0 = new CollectionPointer("", locale0);
      int int0 = collectionPointer0.getLength();
      assertEquals(1, int0);
  }
}
