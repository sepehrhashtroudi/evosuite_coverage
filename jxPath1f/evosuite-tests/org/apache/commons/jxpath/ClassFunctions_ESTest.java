/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 02 02:37:41 GMT 2023
 */

package org.apache.commons.jxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.commons.jxpath.ClassFunctions;
import org.apache.commons.jxpath.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassFunctions_ESTest extends ClassFunctions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        classFunctions0.getFunction("", "", objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "41t");
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        classFunctions0.getFunction((String) null, "41t", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        classFunctions0.getFunction("", "", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/beanutils/ConvertUtils
         //
         verifyException("org.apache.commons.jxpath.util.BasicTypeConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<String> class0 = String.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "new");
      Function function0 = classFunctions0.getFunction("new", "new", objectArray0);
      assertNull(function0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "EF&UMBak#V3U;?9");
      Function function0 = classFunctions0.getFunction("EF&UMBak#V3U;?9", "new", (Object[]) null);
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "new");
      String string0 = "0";
      Object[] objectArray0 = new Object[9];
      Function function0 = classFunctions0.getFunction(string0, string0, objectArray0);
      assertNull(function0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "");
      Object[] objectArray0 = new Object[2];
      Function function0 = classFunctions0.getFunction("", "", objectArray0);
      assertNull(function0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassFunctions classFunctions0 = new ClassFunctions(class0, "");
      Set set0 = classFunctions0.getUsedNamespaces();
      assertEquals(1, set0.size());
  }
}
