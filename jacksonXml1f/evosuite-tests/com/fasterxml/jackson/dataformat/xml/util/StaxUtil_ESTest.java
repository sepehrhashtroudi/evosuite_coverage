/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 07:17:52 GMT 2023
 */

package com.fasterxml.jackson.dataformat.xml.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;
import java.io.IOException;
import javax.xml.stream.Location;
import javax.xml.stream.XMLStreamException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StaxUtil_ESTest extends StaxUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("z}");
      assertEquals("z_", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("H4T0<E&TYIJf dSa'm");
      assertEquals("H4T0_E_TYIJf_dSa_m", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Location location0 = mock(Location.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(location0).getColumnNumber();
      doReturn(0).when(location0).getLineNumber();
      XMLStreamException xMLStreamException0 = new XMLStreamException("1E ", location0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(xMLStreamException0);
      xMLStreamException0.initCause(mockRuntimeException0);
      // Undeclared exception!
      StaxUtil.throwXmlAsIOException(xMLStreamException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        StaxUtil.throwXmlAsIOException((XMLStreamException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        StaxUtil.sanitizeXmlTypeName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("$E9mfdHxl*8f:5Z-<!");
      assertEquals(".E9mfdHxl_8f_5Z-__", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName(".E9mfdHxl_8f_5Z-__");
      assertEquals(".E9mfdHxl_8f_5Z-__", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("Q&t.nA`|XriBDg7");
      assertEquals("Q_t._nA__XriBDg7", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("s[]");
      assertEquals("ses", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("[][]");
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StaxUtil.sanitizeXmlTypeName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLStreamException xMLStreamException0 = new XMLStreamException();
      try { 
        StaxUtil.throwXmlAsIOException(xMLStreamException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // javax.xml.stream.XMLStreamException
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      XMLStreamException xMLStreamException0 = new XMLStreamException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        StaxUtil.throwXmlAsIOException(xMLStreamException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockError mockError0 = new MockError("");
      XMLStreamException xMLStreamException0 = new XMLStreamException(mockError0);
      // Undeclared exception!
      try { 
        StaxUtil.throwXmlAsIOException(xMLStreamException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StaxUtil staxUtil0 = new StaxUtil();
  }
}
