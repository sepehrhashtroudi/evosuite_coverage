/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 20 02:27:10 GMT 2022
 */

package org.apache.commons.codec.language;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.language.Metaphone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Metaphone_ESTest extends Metaphone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode("+o-(&1j-].aL~Z(04");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("JLS", string0);
      
      String string1 = metaphone0.metaphone("+o-(&1j-].aL~Z(04");
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("JLS", string1);
      
      Object object0 = metaphone0.encode((Object) "JLS");
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("JLS", object0);
      
      Object object1 = metaphone0.encode((Object) "JLS");
      //  // Unstable assertion: assertTrue(object1.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("JLS", object1);
      
      String string2 = metaphone0.encode("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("ORPX", string2);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("+o-(&1j-].aL~Z(04", "Y354f1@$s");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      metaphone0.setMaxCodeLen((-2312));
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      
      String string3 = metaphone0.encode("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("", string3);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "4p]G^L[N{t");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean1);
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("ADD@7w{:8ne(Z?$3", "ADD@7w{:8ne(Z?$3");
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean2);
      
      boolean boolean3 = metaphone0.isMetaphoneEqual("4p]G^L[N{t", "4p]G^L[N{t");
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertTrue(boolean3 == boolean2);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean3);
      
      String string4 = metaphone0.encode("JLS");
      //  // Unstable assertion: assertFalse(string4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      String string5 = metaphone0.encode("4p]G^L[N{t");
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object0));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("", string5);
      
      Object object2 = metaphone0.encode((Object) "cDF8");
      //  // Unstable assertion: assertTrue(object2.equals((Object)string4));
      //  // Unstable assertion: assertTrue(object2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object1));
      //  // Unstable assertion: assertTrue(object2.equals((Object)string5));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string1));
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertEquals("", object2);
      
      Object object3 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object3.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object3.equals((Object)object2));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object3.equals((Object)string4));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object1));
      //  // Unstable assertion: assertTrue(object3.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object3.equals((Object)string5));
      //  // Unstable assertion: assertEquals((-2312), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object3);
      //  // Unstable assertion: assertEquals("", object3);
      
      metaphone0.setMaxCodeLen(67);
      //  // Unstable assertion: assertEquals(67, metaphone0.getMaxCodeLen());
      
      String string6 = metaphone0.metaphone("org.apache.commons.codec.language.Metaphone");
      //  // Unstable assertion: assertFalse(string6.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertEquals(67, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("ORPXXMNXXTKLNMXFN", string6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("AEIOU", "AEIOU");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
      
      metaphone0.setMaxCodeLen(48);
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      
      String string0 = metaphone0.metaphone("SH");
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("X", string0);
      
      String string1 = metaphone0.encode("SH");
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("X", string1);
      
      String string2 = metaphone0.metaphone("AEIOU");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("E", string2);
      
      String string3 = metaphone0.metaphone("EIY");
      //  // Unstable assertion: assertTrue(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("E", string3);
      
      String string4 = metaphone0.metaphone("167y)bv!7Sgg");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("BFX", string4);
      
      String string5 = metaphone0.metaphone("E");
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("E", string5);
      
      String string6 = metaphone0.metaphone("I9uSj=p;q<A");
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("IXJPK", string6);
      
      Object object0 = metaphone0.encode((Object) "I9uSj=p;q<A");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string4));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string5));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string6));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("IXJPK", object0);
      
      String string7 = metaphone0.encode("7JtO}#!L0");
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object0));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("JXL", string7);
      
      String string8 = metaphone0.encode("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string8.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertEquals("ORPXXMNXXTXNXTRKSXPXN", string8);
      
      Object object1 = metaphone0.encode((Object) "'-$uV'0");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string6));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string8));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string7));
      //  // Unstable assertion: assertEquals(48, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("F", object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("I8p");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("IP", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("IP", (String) null);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string1 = metaphone0.encode("I8p");
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("IP", string1);
      
      metaphone0.setMaxCodeLen(23);
      //  // Unstable assertion: assertEquals(23, metaphone0.getMaxCodeLen());
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("AEIOU", (String) null);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(23, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      Object object0 = metaphone0.encode((Object) "AEIOU");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(23, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("E", object0);
      
      String string2 = metaphone0.metaphone("1@/I~NGw~<JheL66");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(23, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("NJHL", string2);
      
      Object object1 = new Object();
      //  // Unstable assertion: assertNotNull(object1);
      
      try { 
        metaphone0.encode(object1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("CIA");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("X", string0);
      
      String string1 = metaphone0.metaphone("V");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("V", string1);
      
      String string2 = metaphone0.encode("V");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("V", string2);
      
      metaphone0.setMaxCodeLen(84);
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      
      String string3 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("", string3);
      
      String string4 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      String string5 = metaphone0.encode("xmBg6Z'W;;-$eVdRC1s");
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("XMBKSFTRXS", string5);
      
      metaphone0.setMaxCodeLen(84);
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      
      Object object0 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string5));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      String string6 = metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("ORPXXMNXXTXNXTRKSXPXN", string6);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("Km\u0004*s", "XMBKSFTRXS");
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string7 = metaphone0.metaphone("!vuv");
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("FF", string7);
      
      String string8 = metaphone0.metaphone("$oOel");
      //  // Unstable assertion: assertFalse(string8.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertEquals("L", string8);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "V");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(84, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      metaphone0.setMaxCodeLen(3301);
      //  // Unstable assertion: assertEquals(3301, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(70);
      //  // Unstable assertion: assertEquals(70, metaphone0.getMaxCodeLen());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("TCH");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("X", string0);
      
      String string1 = metaphone0.encode("");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = metaphone0.encode((Object) "X");
      assertTrue(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)string1));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(object1);
      assertEquals("X", object1);
      
      try { 
        metaphone0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      Object object0 = metaphone0.encode((Object) "*WXI3ve(");
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("", object0);
      
      String string0 = metaphone0.metaphone("Wsr4YY");
      assertTrue(string0.equals((Object)object0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = metaphone0.encode("*WXI3ve(");
      assertTrue(string1.equals((Object)object0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen((-42));
      assertEquals((-42), metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("GI>,");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("J", string0);
      
      String string1 = "GN";
      int int0 = 1204;
      metaphone0.setMaxCodeLen(1204);
      assertEquals(1204, metaphone0.getMaxCodeLen());
      
      String string2 = "oXH";
      Object object0 = metaphone0.encode((Object) "oXH");
      assertFalse(object0.equals((Object)string2));
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertEquals(1204, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("OKS", object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      try { 
        metaphone0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("GNED", "GNED");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string0 = metaphone0.encode("GNED");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("NT", string0);
      
      metaphone0.setMaxCodeLen(1115);
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      Object object0 = metaphone0.encode((Object) "@_DA{}A^+G");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("TK", object0);
      
      String string2 = metaphone0.encode("Parameter supplied to Metaphone encode is not of type java.lang.String");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("PRM0RXPLTXMXFNNXTXNXFXPJFLNXXRNK", string2);
      
      String string3 = metaphone0.metaphone("NT");
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("NT", string3);
      
      Object object1 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("NT", object1);
      
      Object object2 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object2.equals((Object)object1));
      //  // Unstable assertion: assertTrue(object2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object2.equals((Object)string3));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertEquals("NT", object2);
      
      Object object3 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertFalse(object3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object3.equals((Object)object2));
      //  // Unstable assertion: assertTrue(object3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object3.equals((Object)object1));
      //  // Unstable assertion: assertTrue(object3.equals((Object)string3));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object3);
      //  // Unstable assertion: assertEquals("NT", object3);
      
      String string4 = metaphone0.encode("@_DA{}A^+G");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object2));
      //  // Unstable assertion: assertTrue(string4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("TK", string4);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(1115, int0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("TCH", "P");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      metaphone0.setMaxCodeLen(1115);
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      
      Object object4 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertFalse(object4.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object2));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object3));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string4));
      //  // Unstable assertion: assertTrue(object4.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object4.equals((Object)string3));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object4);
      //  // Unstable assertion: assertEquals("NT", object4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int0);
      
      String string0 = metaphone0.encode("4--iST|I-]+Km");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("XXKM", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("XXKM", "");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "b{Fu");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      metaphone0.setMaxCodeLen(301);
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("", "b{Fu");
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean2);
      
      String string1 = metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("ORPXXMNXXTXNXTRKSXPXN", string1);
      
      String string2 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
      
      String string3 = metaphone0.encode("AEIOU");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("E", string3);
      
      Object object0 = metaphone0.encode((Object) "4--iST|I-]+Km");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("XXKM", object0);
      
      String string4 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      String string5 = metaphone0.metaphone("AEIOU");
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("E", string5);
      
      String string6 = metaphone0.metaphone("E");
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object0));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("E", string6);
      
      String string7 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertEquals(301, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("", string7);
      
      metaphone0.setMaxCodeLen((-2169));
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      
      boolean boolean3 = metaphone0.isMetaphoneEqual("", "TCH");
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean3);
      
      Object object1 = metaphone0.encode((Object) "b{Fu");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string6));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string4));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string7));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string3));
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("", object1);
      
      int int1 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals((-2169), int1);
      
      boolean boolean4 = metaphone0.isMetaphoneEqual("E", "");
      //  // Unstable assertion: assertTrue(boolean4 == boolean2);
      //  // Unstable assertion: assertTrue(boolean4 == boolean0);
      //  // Unstable assertion: assertTrue(boolean4 == boolean1);
      //  // Unstable assertion: assertFalse(boolean4 == boolean3);
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean4);
      
      String string8 = metaphone0.encode("4--iST|I-]+Km");
      //  // Unstable assertion: assertTrue(string8.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string7));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string6));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string2));
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertEquals("", string8);
      
      int int2 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertTrue(int2 == int1);
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals((-2169), int2);
      
      boolean boolean5 = metaphone0.isMetaphoneEqual("", "n{&/6q$xD0IXkl(_>Z");
      //  // Unstable assertion: assertFalse(boolean5 == boolean2);
      //  // Unstable assertion: assertFalse(boolean5 == boolean4);
      //  // Unstable assertion: assertFalse(boolean5 == boolean0);
      //  // Unstable assertion: assertFalse(boolean5 == boolean1);
      //  // Unstable assertion: assertTrue(boolean5 == boolean3);
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean5);
      
      String string9 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string9.equals((Object)string5));
      //  // Unstable assertion: assertTrue(string9.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string9.equals((Object)string8));
      //  // Unstable assertion: assertFalse(string9.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string6));
      //  // Unstable assertion: assertEquals((-2169), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string9);
      //  // Unstable assertion: assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("lxfB,Wta6[0}c3kj", "GrK(3y28");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("6", "6");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean1);
      
      metaphone0.setMaxCodeLen(258);
      //  // Unstable assertion: assertEquals(258, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(1970);
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      
      String string0 = metaphone0.encode("AG{R\"cOL[Z*");
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("ARKLS", string0);
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("", (String) null);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean2);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(1970, int0);
      
      String string1 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      boolean boolean3 = metaphone0.isMetaphoneEqual("7OrIz\"eVa4z)o{", "AG{R\"cOL[Z*");
      //  // Unstable assertion: assertTrue(boolean3 == boolean0);
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean3);
      
      int int1 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(1970, int1);
      
      String string2 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1970, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode("a2_gp");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("AKP", string0);
      
      String string1 = metaphone0.encode("P$}hPgQST");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("PPKX", string1);
      
      String string2 = metaphone0.encode("P$}hPgQST");
      //  // Unstable assertion: assertTrue(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("PPKX", string2);
      
      Object object0 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      String string3 = metaphone0.metaphone("P$}hPgQST");
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("PPKX", string3);
      
      Object object1 = new Object();
      //  // Unstable assertion: assertNotNull(object1);
      
      try { 
        metaphone0.encode(object1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("A(7PcYnI;J:~o9ga5");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("APSN", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        metaphone0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode(";");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals(";", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "`#V?JiMU[D[");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("ORPX", string0);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int0);
      
      Object object0 = metaphone0.encode((Object) "ORPX");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("ORPK", object0);
      
      Object object1 = metaphone0.encode((Object) "ORPK");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("ORPK", object1);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "3+%ZDSD#");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int1 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int1);
      
      int int2 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertTrue(int2 == int0);
      //  // Unstable assertion: assertTrue(int2 == int1);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int2);
      
      String string1 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      String string2 = metaphone0.metaphone("KnX<0XLcv_4yFC|y");
      //  // Unstable assertion: assertFalse(string2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("NKSK", string2);
      
      int int3 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertTrue(int3 == int2);
      //  // Unstable assertion: assertTrue(int3 == int1);
      //  // Unstable assertion: assertTrue(int3 == int0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int3);
      
      String string3 = metaphone0.encode("TV2WN/)~");
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("XFN", string3);
      
      Object object2 = metaphone0.encode((Object) "TV2WN/)~");
      //  // Unstable assertion: assertFalse(object2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertEquals("XFN", object2);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", "org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      Object object3 = metaphone0.encode((Object) "XFN");
      //  // Unstable assertion: assertTrue(object3.equals((Object)string3));
      //  // Unstable assertion: assertTrue(object3.equals((Object)object2));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object3);
      //  // Unstable assertion: assertEquals("XFN", object3);
      
      String string4 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      metaphone0.setMaxCodeLen(2);
      //  // Unstable assertion: assertEquals(2, metaphone0.getMaxCodeLen());
      
      Object object4 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object3));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object2));
      //  // Unstable assertion: assertEquals(2, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object4);
      //  // Unstable assertion: assertEquals("", object4);
      
      Object object5 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object5.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object5.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object5.equals((Object)object3));
      //  // Unstable assertion: assertFalse(object5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object5.equals((Object)object2));
      //  // Unstable assertion: assertFalse(object5.equals((Object)string0));
      //  // Unstable assertion: assertEquals(2, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object5);
      //  // Unstable assertion: assertEquals("", object5);
      
      String string5 = metaphone0.metaphone("GQi");
      //  // Unstable assertion: assertFalse(string5.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object5));
      //  // Unstable assertion: assertEquals(2, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("KK", string5);
      
      metaphone0.setMaxCodeLen((-1));
      //  // Unstable assertion: assertEquals((-1), metaphone0.getMaxCodeLen());
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("ORPX", "org.apache.commons.codec.language.Metaphone");
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertEquals((-1), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean2);
      
      Object object6 = metaphone0.encode((Object) "ORPX");
      //  // Unstable assertion: assertTrue(object6.equals((Object)object5));
      //  // Unstable assertion: assertFalse(object6.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object6.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object6.equals((Object)string4));
      //  // Unstable assertion: assertFalse(object6.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(object6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object6.equals((Object)object2));
      //  // Unstable assertion: assertTrue(object6.equals((Object)object4));
      //  // Unstable assertion: assertFalse(object6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object6.equals((Object)object3));
      //  // Unstable assertion: assertEquals((-1), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object6);
      //  // Unstable assertion: assertEquals("", object6);
      
      String string6 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string6.equals((Object)object6));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)object0));
      //  // Unstable assertion: assertEquals((-1), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("", string6);
      
      String string7 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string7.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object1));
      //  // Unstable assertion: assertTrue(string7.equals((Object)object6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertEquals((-1), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("*/oOOnE5K", "*/oOOnE5K");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int0);
      
      String string0 = metaphone0.encode((String) null);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      
      metaphone0.setMaxCodeLen(0);
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", (String) null);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean1);
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("tV)y_|m/VX", "S. '");
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean2);
      
      boolean boolean3 = metaphone0.isMetaphoneEqual((String) null, ")JgqOK@$e");
      //  // Unstable assertion: assertTrue(boolean3 == boolean0);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertTrue(boolean3 == boolean2);
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean3);
      
      String string1 = metaphone0.encode("a,S#&4J6fbi(Xvt]");
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      String string2 = metaphone0.metaphone(")JgqOK@$e");
      //  // Unstable assertion: assertTrue(string2.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
      
      int int1 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(0, int1);
      
      String string3 = metaphone0.metaphone((String) null);
      //  // Unstable assertion: assertTrue(string3.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string2));
      //  // Unstable assertion: assertEquals(0, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("", string3);
      
      metaphone0.setMaxCodeLen(4);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      
      String string4 = metaphone0.metaphone(":'qGSH9NUje5[F)");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("KXNJ", string4);
      
      String string5 = metaphone0.encode("`DGPp!M-R u^&");
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("TPMR", string5);
      
      String string6 = metaphone0.encode("M?K%'HJ>nOCym'l");
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("MKJN", string6);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("jA'5YJc");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("JJK", string0);
      
      metaphone0.setMaxCodeLen((-146));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.metaphone("K,d@8k6E");
      assertFalse(string1.equals((Object)string0));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "RF?:g'Kn?AXypzO=F, ";
      String string3 = metaphone0.metaphone("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = metaphone0.metaphone("RF?:g'Kn?AXypzO=F, ");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = metaphone0.metaphone("};Ra");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = metaphone0.encode("K,d@8k6E");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(string6);
      assertEquals("", string6);
      
      Object object0 = metaphone0.encode((Object) "");
      assertTrue(object0.equals((Object)string1));
      assertTrue(object0.equals((Object)string5));
      assertTrue(object0.equals((Object)string4));
      assertFalse(object0.equals((Object)string2));
      assertTrue(object0.equals((Object)string6));
      assertFalse(object0.equals((Object)string0));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("", object0);
      
      Object object1 = metaphone0.encode((Object) "K,d@8k6E");
      assertTrue(object1.equals((Object)string6));
      assertFalse(object1.equals((Object)string2));
      assertTrue(object1.equals((Object)string5));
      assertTrue(object1.equals((Object)string4));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)string1));
      assertTrue(object1.equals((Object)string3));
      assertFalse(object1.equals((Object)string0));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(object1);
      assertEquals("", object1);
      
      String string7 = metaphone0.metaphone("");
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)object1));
      assertFalse(string7.equals((Object)string0));
      assertEquals((-146), metaphone0.getMaxCodeLen());
      assertNotNull(string7);
      assertEquals("", string7);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      try { 
        metaphone0.encode(object2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("t:by~j");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("XBJ", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("6~", "W\"|6*EQ.c.WX@jB");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string1 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      Object object0 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      Object object1 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("", object1);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("", "");
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean2);
      
      String string2 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
      
      String string3 = metaphone0.metaphone("XBJ");
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("XBJ", string3);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      Object object0 = metaphone0.encode((Object) "K1@sc|5W");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("KXK", object0);
      
      Object object1 = metaphone0.encode((Object) "KXK");
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("KKSK", object1);
      
      try { 
        metaphone0.encode((Object) null);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode("");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual(")hEs!cCp-5G -FX:9)h", "");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual(">h9Xx", "");
      assertTrue(boolean1 == boolean0);
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean1);
      
      String string1 = metaphone0.encode("");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      metaphone0.setMaxCodeLen(1008);
      assertEquals(1008, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen((-1353));
      assertEquals((-1353), metaphone0.getMaxCodeLen());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      Object object0 = metaphone0.encode((Object) "");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("", object0);
      
      String string0 = metaphone0.metaphone("");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      metaphone0.setMaxCodeLen(1952);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.metaphone((String) null);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", "");
      assertTrue(boolean1 == boolean0);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertTrue(boolean1);
      
      metaphone0.setMaxCodeLen(1952);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      
      Object object1 = metaphone0.encode((Object) "");
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertNotNull(object1);
      assertEquals("", object1);
      
      String string2 = metaphone0.metaphone("|a9 m|b {$Y");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertNotNull(string2);
      assertEquals("MB", string2);
      
      metaphone0.setMaxCodeLen(1952);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      
      String string3 = metaphone0.encode("");
      assertFalse(string3.equals((Object)string2));
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertEquals(1952, int0);
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("w", "s");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertFalse(boolean2);
      
      int int1 = metaphone0.getMaxCodeLen();
      assertTrue(int1 == int0);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertEquals(1952, int1);
      
      String string4 = metaphone0.metaphone("MB");
      assertFalse(string4.equals((Object)object1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertNotNull(string4);
      assertEquals("M", string4);
      
      int int2 = metaphone0.getMaxCodeLen();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1952, metaphone0.getMaxCodeLen());
      assertEquals(1952, int2);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      try { 
        metaphone0.encode(object2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode("g4ua^ ");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("K", string0);
      
      Object object0 = metaphone0.encode((Object) "K");
      assertTrue(object0.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("K", object0);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.encode("TIO");
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = metaphone0.encode("TIO");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = metaphone0.metaphone("TH");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)object0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = metaphone0.metaphone("gEOY).?xoGSc=x'");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = metaphone0.metaphone("TIO");
      assertFalse(string5.equals((Object)object0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertEquals(0, int0);
      
      Object object1 = metaphone0.encode((Object) "");
      assertTrue(object1.equals((Object)string1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)string4));
      assertTrue(object1.equals((Object)string3));
      assertTrue(object1.equals((Object)string2));
      assertTrue(object1.equals((Object)string5));
      assertFalse(object1.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object1);
      assertEquals("", object1);
      
      metaphone0.setMaxCodeLen(74);
      assertEquals(74, metaphone0.getMaxCodeLen());
      
      String string6 = metaphone0.metaphone("IyA");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)object1));
      assertFalse(string6.equals((Object)object0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertNotNull(string6);
      assertEquals("IY", string6);
      
      String string7 = metaphone0.metaphone("");
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)object0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertNotNull(string7);
      assertEquals("", string7);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "IyA");
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertFalse(boolean0);
      
      int int1 = metaphone0.getMaxCodeLen();
      assertFalse(int1 == int0);
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertEquals(74, int1);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      int int2 = metaphone0.getMaxCodeLen();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertEquals(0, int2);
      
      Object object2 = metaphone0.encode((Object) "");
      assertTrue(object2.equals((Object)string4));
      assertFalse(object2.equals((Object)string6));
      assertTrue(object2.equals((Object)string3));
      assertTrue(object2.equals((Object)string5));
      assertFalse(object2.equals((Object)string0));
      assertTrue(object2.equals((Object)string1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)string2));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = metaphone0.encode((Object) "");
      assertTrue(object3.equals((Object)string4));
      assertTrue(object3.equals((Object)string3));
      assertFalse(object3.equals((Object)string6));
      assertTrue(object3.equals((Object)string1));
      assertFalse(object3.equals((Object)object0));
      assertTrue(object3.equals((Object)string2));
      assertTrue(object3.equals((Object)string5));
      assertFalse(object3.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object3);
      assertEquals("", object3);
      
      Object object4 = metaphone0.encode((Object) "");
      assertTrue(object4.equals((Object)string2));
      assertTrue(object4.equals((Object)string3));
      assertTrue(object4.equals((Object)string5));
      assertFalse(object4.equals((Object)string0));
      assertFalse(object4.equals((Object)string6));
      assertTrue(object4.equals((Object)string4));
      assertTrue(object4.equals((Object)string1));
      assertFalse(object4.equals((Object)object0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object4);
      assertEquals("", object4);
      
      metaphone0.setMaxCodeLen((-1));
      assertEquals((-1), metaphone0.getMaxCodeLen());
      
      metaphone0.metaphone("gEOY).?xoGSc=x'");
      metaphone0.encode("wj");
      assertEquals((-1), metaphone0.getMaxCodeLen());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode("g4ua^ ");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("K", string0);
      
      Object object0 = metaphone0.encode((Object) "K");
      assertTrue(object0.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("K", object0);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.encode("TIO");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = metaphone0.encode("TIO");
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = metaphone0.metaphone("TH");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = metaphone0.metaphone("TIO");
      assertFalse(string4.equals((Object)object0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertEquals(0, int0);
      
      Object object1 = metaphone0.encode((Object) "");
      assertTrue(object1.equals((Object)string1));
      assertTrue(object1.equals((Object)string3));
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)string2));
      assertFalse(object1.equals((Object)string0));
      assertTrue(object1.equals((Object)string4));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object1);
      assertEquals("", object1);
      
      metaphone0.setMaxCodeLen(74);
      assertEquals(74, metaphone0.getMaxCodeLen());
      
      String string5 = metaphone0.metaphone("");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)object0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "IyA");
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertFalse(boolean0);
      
      int int1 = metaphone0.getMaxCodeLen();
      assertFalse(int1 == int0);
      assertEquals(74, metaphone0.getMaxCodeLen());
      assertEquals(74, int1);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      int int2 = metaphone0.getMaxCodeLen();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertEquals(0, int2);
      
      Object object2 = metaphone0.encode((Object) "");
      assertFalse(object2.equals((Object)string0));
      assertTrue(object2.equals((Object)string4));
      assertFalse(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)string3));
      assertTrue(object2.equals((Object)string2));
      assertTrue(object2.equals((Object)string1));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object2);
      assertEquals("", object2);
      
      Object object3 = metaphone0.encode((Object) "");
      assertTrue(object3.equals((Object)string1));
      assertTrue(object3.equals((Object)string4));
      assertFalse(object3.equals((Object)string0));
      assertFalse(object3.equals((Object)object0));
      assertTrue(object3.equals((Object)string2));
      assertTrue(object3.equals((Object)string3));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object3);
      assertEquals("", object3);
      
      Object object4 = metaphone0.encode((Object) "");
      assertTrue(object4.equals((Object)string2));
      assertTrue(object4.equals((Object)string1));
      assertTrue(object4.equals((Object)string3));
      assertFalse(object4.equals((Object)object0));
      assertTrue(object4.equals((Object)string4));
      assertFalse(object4.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object4);
      assertEquals("", object4);
      
      metaphone0.setMaxCodeLen((-1));
      assertEquals((-1), metaphone0.getMaxCodeLen());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      Metaphone metaphone1 = new Metaphone();
      assertFalse(metaphone1.equals((Object)metaphone0));
      assertEquals(4, metaphone1.getMaxCodeLen());
      assertNotNull(metaphone1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "2r+CJ|EgT09]64";
      String string1 = metaphone1.metaphone("2r+CJ|EgT09]64");
      assertFalse(metaphone1.equals((Object)metaphone0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, metaphone1.getMaxCodeLen());
      assertNotNull(string1);
      assertNotSame(metaphone1, metaphone0);
      assertEquals("RKJK", string1);
      
      try { 
        metaphone0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      metaphone0.setMaxCodeLen(630);
      //  // Unstable assertion: assertEquals(630, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(1);
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(1);
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      
      String string0 = metaphone0.metaphone("CSPTG");
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("K", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("(Z", "K");
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("K", "S$B]");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      metaphone0.setMaxCodeLen((-909));
      //  // Unstable assertion: assertEquals((-909), metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(1);
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      
      metaphone0.setMaxCodeLen(65);
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(65, int0);
      
      String string1 = metaphone0.encode("=vyU$Vr");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("FYFR", string1);
      
      boolean boolean2 = metaphone0.isMetaphoneEqual("", "TIA");
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean2);
      
      String string2 = metaphone0.metaphone("FYFR");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("FFR", string2);
      
      String string3 = metaphone0.metaphone("CSPTG");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("KXPTK", string3);
      
      metaphone0.setMaxCodeLen(65);
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      
      String string4 = metaphone0.metaphone("CSPTG");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertEquals(65, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("KXPTK", string4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("c2?6>*RZhCV");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("XRSK", string0);
      
      Object object0 = metaphone0.encode((Object) "XRSK");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("XRXK", object0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("K<Cv91=6", (String) null);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object1 = metaphone0.encode((Object) "c2?6>*RZhCV");
      //  // Unstable assertion: assertTrue(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("XRSK", object1);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", "SIO");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("^@cN3cGc", "^@cN3cGc");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("^@cN3cGc", "");
      assertFalse(boolean1 == boolean0);
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean1);
      
      String string0 = metaphone0.encode("^@cN3cGc");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("KNKK", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("FmT0");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("FMT", string0);
      
      String string1 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      String string2 = metaphone0.metaphone("2ieN=:M3U");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("NM", string2);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("FmT0", "org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string3 = metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("ORPX", string3);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", "AEIOU");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      Object object0 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      String string4 = metaphone0.metaphone("TH");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("0", string4);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(4, int0);
      
      String string5 = metaphone0.encode("FMT");
      //  // Unstable assertion: assertFalse(string5.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("FMT", string5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("SH");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("X", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("SH", "");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string1 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      Object object0 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      metaphone0.setMaxCodeLen(683);
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      
      String string2 = metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("ORPXXMNXXTXNXTRKSXPXN", string2);
      
      String string3 = metaphone0.metaphone("ORPXXMNXXTXNXTRKSXPXN");
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("ORPKSMNKSXKSNKSXRKXKSPKSN", string3);
      
      String string4 = metaphone0.metaphone((String) null);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      String string5 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("", string5);
      
      String string6 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("", string6);
      
      Object object1 = metaphone0.encode((Object) "CIA");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string5));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string6));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("X", object1);
      
      String string7 = metaphone0.encode("ORPXXMNXXTXNXTRKSXPXN");
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("ORPKSMNKSXKSNKSXRKXKSPKSN", string7);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", "");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(683, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("XT+-Bo");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("XXB", string0);
      
      metaphone0.setMaxCodeLen(1);
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      
      Object object0 = metaphone0.encode((Object) "");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      String string1 = metaphone0.metaphone("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "XT+-Bo");
      //  // Unstable assertion: assertEquals(1, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("ORPX", string0);
      
      String string1 = metaphone0.metaphone("C$}uxsv^C62ks[<Ygm");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("XKSX", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("IGb%TJoEE W&w$dXC#");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("IBTJ", string0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("Y7@3", "Y7@3");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone(":'H6q d$pda0Ne&!");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("KTPT", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.encode("l$%");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("L", string0);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      Object object0 = metaphone0.encode((Object) "L");
      assertTrue(object0.equals((Object)string0));
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("L", object0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("5UqNu", "");
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      metaphone0.setMaxCodeLen(0);
      assertEquals(0, metaphone0.getMaxCodeLen());
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(0, metaphone0.getMaxCodeLen());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      metaphone0.setMaxCodeLen(6);
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      
      String string0 = metaphone0.metaphone("&_Z5EgHc<|I%Fra|");
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("SXFR", string0);
      
      Object object0 = metaphone0.encode((Object) "SXFR");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("XKSFR", object0);
      
      Object object1 = metaphone0.encode((Object) "XKSFR");
      //  // Unstable assertion: assertFalse(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("XKXFR", object1);
      
      Object object2 = metaphone0.encode((Object) "XKSFR");
      //  // Unstable assertion: assertFalse(object2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object2.equals((Object)object1));
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertEquals("XKXFR", object2);
      
      Object object3 = metaphone0.encode((Object) "XKXFR");
      //  // Unstable assertion: assertFalse(object3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object2));
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object3);
      //  // Unstable assertion: assertEquals("XKKSFR", object3);
      
      Object object4 = metaphone0.encode((Object) "XKKSFR");
      //  // Unstable assertion: assertFalse(object4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object3));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object2));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object0));
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object4);
      //  // Unstable assertion: assertEquals("XKXFR", object4);
      
      String string1 = metaphone0.metaphone((String) null);
      //  // Unstable assertion: assertFalse(string1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)object4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)object1));
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      metaphone0.setMaxCodeLen(6);
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(6, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("GNED");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("NT", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("SIA", "SIA");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string0 = metaphone0.encode("Parameter supplied to Metaphone encode is not of type java.lang.String");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("PRM0", string0);
      
      String string1 = metaphone0.metaphone("SIA");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("X", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("Eiy\"%gc$sbm");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("EXSB", string0);
      
      String string1 = metaphone0.metaphone("EXSB");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("EKSS", string1);
      
      String string2 = metaphone0.metaphone((String) null);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone(",S@E#7FSJ7");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("XFXJ", string0);
      
      String string1 = metaphone0.encode("ab42f>");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("ABF", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertEquals(4, int0);
      
      metaphone0.setMaxCodeLen((-31));
      assertEquals((-31), metaphone0.getMaxCodeLen());
      
      int int1 = metaphone0.getMaxCodeLen();
      assertFalse(int1 == int0);
      assertEquals((-31), metaphone0.getMaxCodeLen());
      assertEquals((-31), int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("ri;UV?VZ^yvEQ2F6");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("RFFS", string0);
      
      Object object0 = metaphone0.encode((Object) "");
      assertFalse(object0.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(object0);
      assertEquals("", object0);
      
      String string1 = metaphone0.metaphone("");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "s)2[+2:.oP:5QEX%E");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("(OlRRqmAuT~ XrVZT~");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("LRKM", string0);
      
      String string1 = metaphone0.metaphone((String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("?>GYh2");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      
      String string1 = "";
      String string2 = metaphone0.metaphone("");
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
      
      metaphone0.setMaxCodeLen(77);
      //  // Unstable assertion: assertEquals(77, metaphone0.getMaxCodeLen());
      
      String string3 = metaphone0.encode("");
      //  // Unstable assertion: assertTrue(string3.equals((Object)string0));
      //  // Unstable assertion: assertEquals(77, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("", string3);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("", "");
      //  // Unstable assertion: assertEquals(77, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string4 = metaphone0.metaphone("");
      //  // Unstable assertion: assertTrue(string4.equals((Object)string0));
      //  // Unstable assertion: assertEquals(77, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      metaphone0.setMaxCodeLen((-480));
      //  // Unstable assertion: assertEquals((-480), metaphone0.getMaxCodeLen());
      
      String string5 = metaphone0.metaphone("?>GYh2");
      //  // Unstable assertion: assertTrue(string5.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string4));
      //  // Unstable assertion: assertEquals((-480), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("", string5);
      
      Object object0 = metaphone0.encode((Object) "?>GYh2");
      //  // Unstable assertion: assertTrue(object0.equals((Object)string4));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string3));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string5));
      //  // Unstable assertion: assertEquals((-480), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("", object0);
      
      String string6 = metaphone0.metaphone("");
      //  // Unstable assertion: assertTrue(string6.equals((Object)string5));
      //  // Unstable assertion: assertTrue(string6.equals((Object)object0));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string0));
      //  // Unstable assertion: assertEquals((-480), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("", string6);
      
      String string7 = metaphone0.encode("AEIOU");
      //  // Unstable assertion: assertTrue(string7.equals((Object)object0));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string5));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string4));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string7.equals((Object)string6));
      //  // Unstable assertion: assertEquals((-480), metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("", string7);
      
      Object object1 = new Object();
      //  // Unstable assertion: assertNotNull(object1);
      
      try { 
        metaphone0.encode(object1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      try { 
        metaphone0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone((String) null);
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      
      String string1 = metaphone0.encode("CSPTG");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("KXPT", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("kUWvjqyW5&\"A8pW");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("KFJK", string0);
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "org.apache.commons.codec.EncoderException");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      String string0 = metaphone0.metaphone("SH");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("X", string0);
      
      String string1 = metaphone0.metaphone("X");
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("X", string1);
      
      String string2 = metaphone0.metaphone("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("&4 Dvl");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("TFL", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("SIO", "SIO");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("AEIOU", ">&i~&T%;T6$q{gE(");
      assertFalse(boolean1 == boolean0);
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      String string0 = metaphone0.metaphone("b&IwnJ5;v*(");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("BNJF", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("^@cN3cGc", "^@cN3cGc");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      String string0 = metaphone0.metaphone("");
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("^@cN3cGc", "");
      assertFalse(boolean1 == boolean0);
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertFalse(boolean1);
      
      String string1 = metaphone0.encode("^@cN3cGc");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("KNKK", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(metaphone0);
      
      boolean boolean0 = metaphone0.isMetaphoneEqual("GNED", "GNED");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string0 = metaphone0.encode("GNED");
      //  // Unstable assertion: assertEquals(4, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("NT", string0);
      
      metaphone0.setMaxCodeLen(1115);
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.encode("");
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("", string1);
      
      Object object0 = metaphone0.encode((Object) "@_DA{}A^+G");
      //  // Unstable assertion: assertFalse(object0.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals("TK", object0);
      
      String string2 = metaphone0.encode("Parameter supplied to Metaphone encode is not of type java.lang.String");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)object0));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("PRM0RXPLTXMXFNNXTXNXFXPJFLNXXRNK", string2);
      
      String string3 = metaphone0.metaphone("NT");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("NT", string3);
      
      Object object1 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertTrue(object1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertTrue(object1.equals((Object)string3));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals("NT", object1);
      
      Object object2 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertTrue(object2.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertEquals("NT", object2);
      
      Object object3 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertTrue(object3.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object3.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object3.equals((Object)object2));
      //  // Unstable assertion: assertFalse(object3.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object3.equals((Object)object1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object3);
      //  // Unstable assertion: assertEquals("NT", object3);
      
      String string4 = metaphone0.encode("@_DA{}A^+G");
      //  // Unstable assertion: assertFalse(string4.equals((Object)object2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("TK", string4);
      
      int int0 = metaphone0.getMaxCodeLen();
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertEquals(1115, int0);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("TCH", "TK");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertFalse(boolean1);
      
      metaphone0.setMaxCodeLen(1115);
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      
      Object object4 = metaphone0.encode((Object) "NT");
      //  // Unstable assertion: assertTrue(object4.equals((Object)string0));
      //  // Unstable assertion: assertTrue(object4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object3));
      //  // Unstable assertion: assertFalse(object4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string4));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object2));
      //  // Unstable assertion: assertTrue(object4.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object4.equals((Object)string1));
      //  // Unstable assertion: assertEquals(1115, metaphone0.getMaxCodeLen());
      //  // Unstable assertion: assertNotNull(object4);
      //  // Unstable assertion: assertEquals("NT", object4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      assertEquals(4, metaphone0.getMaxCodeLen());
      assertNotNull(metaphone0);
      
      metaphone0.setMaxCodeLen((-1853));
      assertEquals((-1853), metaphone0.getMaxCodeLen());
      
      String string0 = "TCH";
      boolean boolean0 = metaphone0.isMetaphoneEqual("TCH", "TIA");
      assertEquals((-1853), metaphone0.getMaxCodeLen());
      assertTrue(boolean0);
      
      metaphone0.setMaxCodeLen(2300);
      assertEquals(2300, metaphone0.getMaxCodeLen());
      
      String string1 = metaphone0.encode((String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = metaphone0.encode("TCH");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertNotNull(string2);
      assertEquals("X", string2);
      
      boolean boolean1 = metaphone0.isMetaphoneEqual("", (String) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertTrue(boolean1);
      
      String string3 = "llbcr=ZF";
      boolean boolean2 = metaphone0.isMetaphoneEqual("llbcr=ZF", "org.apache.commons.codec.EncoderException");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertFalse(boolean2);
      
      int int0 = metaphone0.getMaxCodeLen();
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertEquals(2300, int0);
      
      String string4 = metaphone0.encode("TIA");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertNotNull(string4);
      assertEquals("X", string4);
      
      String string5 = metaphone0.metaphone("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2300, metaphone0.getMaxCodeLen());
      assertNotNull(string5);
      assertEquals("", string5);
      
      try { 
        metaphone0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Metaphone encode is not of type java.lang.String
         //
         verifyException("org.apache.commons.codec.language.Metaphone", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      metaphone0.metaphone("Z<RKBNW");
      metaphone0.isMetaphoneEqual("", "Z<RKBNW");
      metaphone0.encode("org.apache.commons.codec.EncoderException");
      metaphone0.setMaxCodeLen((-3937));
      metaphone0.metaphone("HJ,)4!l@oB&w");
      metaphone0.isMetaphoneEqual("", "");
      metaphone0.isMetaphoneEqual("", "");
      metaphone0.encode((Object) "");
      metaphone0.metaphone("TCH");
      metaphone0.isMetaphoneEqual("k$mhYHB_eYO_y9", "k$mhYHB_eYO_y9");
      metaphone0.setMaxCodeLen(84);
      metaphone0.encode((Object) "");
      metaphone0.isMetaphoneEqual("k$mhYHB_eYO_y9", "k$mhYHB_eYO_y9");
      metaphone0.isMetaphoneEqual("iomR}IM", "k$mhYHB_eYO_y9");
      metaphone0.getMaxCodeLen();
      metaphone0.getMaxCodeLen();
      metaphone0.metaphone("HJ,)4!l@oB&w");
      metaphone0.isMetaphoneEqual("k$mhYHB_eYO_y9", "JLB");
      metaphone0.setMaxCodeLen(84);
      boolean boolean0 = metaphone0.isMetaphoneEqual("W^g^6tn", "-bSi9TqWLjQx");
      assertEquals(84, metaphone0.getMaxCodeLen());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Metaphone metaphone0 = new Metaphone();
      metaphone0.getMaxCodeLen();
      metaphone0.encode("9mzqCH=");
      metaphone0.isMetaphoneEqual("MSKX", "");
      metaphone0.isMetaphoneEqual("org.apache.commons.codec.EncoderException", "b{Fu");
      metaphone0.setMaxCodeLen(301);
      metaphone0.isMetaphoneEqual("", "b{Fu");
      metaphone0.metaphone("org.apache.commons.codec.EncoderException");
      metaphone0.encode("");
      metaphone0.encode("AEIOU");
      metaphone0.encode((Object) "9mzqCH=");
      metaphone0.metaphone("");
      metaphone0.metaphone("AEIOU");
      metaphone0.metaphone("E");
      metaphone0.encode("");
      metaphone0.setMaxCodeLen((-2169));
      metaphone0.isMetaphoneEqual("", "TCH");
      metaphone0.encode((Object) "b{Fu");
      metaphone0.getMaxCodeLen();
      metaphone0.isMetaphoneEqual("E", "");
      metaphone0.encode("9mzqCH=");
      metaphone0.getMaxCodeLen();
      metaphone0.isMetaphoneEqual("", "n{&/6q$xD0IXkl(_>Z");
      metaphone0.metaphone("");
      metaphone0.encode((Object) "MSKX");
      assertEquals((-2169), metaphone0.getMaxCodeLen());
  }
}
