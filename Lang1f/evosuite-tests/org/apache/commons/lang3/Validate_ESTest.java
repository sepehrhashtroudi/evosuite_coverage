/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 19:58:11 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.Validate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Validate_ESTest extends Validate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("", "EO6q&J%(d?Y", (Comparable<String>) "", "3oz", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3oz
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Validate.inclusiveBetween(locale_FilteringMode0, locale_FilteringMode1, (Comparable<Locale.FilteringMode>) locale_FilteringMode0, "ZgYM=f+{v(D", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Validate.inclusiveBetween(locale_FilteringMode0, locale_FilteringMode1, (Comparable<Locale.FilteringMode>) locale_FilteringMode1, "ZgYM=f+{v(D", objectArray0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      // Undeclared exception!
      try { 
        Validate.validIndex((HashSet<SQLException>) linkedHashSet0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 0);
      // Undeclared exception!
      try { 
        Validate.validIndex(stackArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      EnumSet<ClientInfoStatus> enumSet1 = Validate.notEmpty(enumSet0);
      assertTrue(enumSet1.contains(clientInfoStatus0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Validate.notEmpty("'ti.xY$P#", "'ti.xY$P#", objectArray0);
      assertEquals("'ti.xY$P#", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray1 = Validate.noNullElements(sQLFeatureNotSupportedExceptionArray0, "~%", (Object[]) sQLFeatureNotSupportedExceptionArray0);
      assertEquals(0, sQLFeatureNotSupportedExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = Validate.noNullElements(sQLSyntaxErrorExceptionArray0);
      assertSame(sQLSyntaxErrorExceptionArray1, sQLSyntaxErrorExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 1369);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/m;", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)Validate.noNullElements((SQLException) sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false, "<;LJzd%W", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'W'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLDataExceptionArray0, 959, (String) null, (Object[]) sQLDataExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.validIndex((SQLException[]) null, (-26), "chDMZ}", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((SQLWarning[]) null, 777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ZgYM=f+{v(D";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        Validate.validIndex(enumSet0, 3, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.validIndex((LinkedList<CharBuffer>) null, 715, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The validated collection co~tains null element 7t indexw %d";
      // Undeclared exception!
      try { 
        Validate.validIndex("The validated collection co~tains null element 7t indexw %d", 1350, "The validated collection co~tains null element 7t indexw %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.validIndex("The validated collection contains null element at index: %d", 1350, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer) null, 744, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notNull(objectArray0[0], (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNull((PriorityQueue<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<SQLException>[] stackArray0 = (Stack<SQLException>[]) Array.newInstance(Stack.class, 0);
      // Undeclared exception!
      try { 
        Validate.notEmpty(stackArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) hashMap0, "The validated array contains null element at indexe %d", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<DataTruncation, SQLClientInfoException> hashMap0 = new HashMap<DataTruncation, SQLClientInfoException>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "The validated array contains null element at index: %d";
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<SQLDataException, Integer> hashMap0 = new HashMap<SQLDataException, Integer>();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<CharBuffer, SQLInvalidAuthorizationSpecException>) null, ", Length: 0", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // , Length: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<SQLNonTransientException, SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) "j}Bjc?e";
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>(linkedList0);
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, "`M`4Y%gm++*-G0;8", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharBuffer) null, "", (Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1336);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1336, 1336);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.notEmpty(charBuffer1, "]cR2VH+B,+ |'4',:1H", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]cR2VH+B,+ |'4',:1H
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) null, "-Vl0@6{4'{Pg%jFt> ", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'j'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.noNullElements((EnumSet<Locale.FilteringMode>[]) null, "1TTr", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLNonTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLInvalidAuthorizationSpecException) null, "({~m]I?pW3Jc", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "&S(=0p\"7'8jF_", "&S(=0p\"7'8jF_", objectArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 14
         // &S(=0p\"7'8jF_
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "L49PGYQ]", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(137);
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "+:kD\"g_'IPW:'T@");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +:kD\"g_'IPW:'T@
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "A',-1bJ=G\"Y'r1,q", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "The validated array contains null element at indexe %d", "<#&mS/Dq\"2a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, (-375L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "A3w{e~)4(N%v:`'", 1.0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'v'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "Cannot assign a %s to a %s", 4199.182468115576);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, 287.1223259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) null, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<SQLException> class1 = SQLException.class;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "UW\"XEu0LTTw3]T`I<", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // UW\"XEu0LTTw3]T`I<
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom((Class<?>) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(enumSet0, enumSet0, (Comparable<EnumSet<Locale.FilteringMode>>) null, "v,FAm`", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((DataTruncation) null, (DataTruncation) null, (Comparable<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("iDI/ %hBpbv)@LtM/", "'VW,>Nm'Ciws=", (-1880));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-feU)a+}7S=N[0h-*[1", "0", 59, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(sQLTransientConnectionException0, sQLTransientConnectionException0, (Comparable<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.validIndex("The validated collection contains null element at index: %d", 1350, "The validated collection contains null element at index: %d", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection contains null element at index: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = Validate.validIndex("The validated collection contains null element at index: %d", 10, (String) null, objectArray0);
      assertEquals("The validated collection contains null element at index: %d", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.validIndex((Vector<SQLIntegrityConstraintViolationException>) stack0, (-1), "", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<SQLTimeoutException>[] hashSetArray0 = (HashSet<SQLTimeoutException>[]) Array.newInstance(HashSet.class, 4);
      HashSet<SQLTimeoutException>[] hashSetArray1 = Validate.validIndex(hashSetArray0, 0, "The validated character sequence is blank", (Object[]) hashSetArray0);
      assertSame(hashSetArray0, hashSetArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 3);
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedHashSetArray0, (-1939), "", (Object[]) linkedHashSetArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      // Undeclared exception!
      try { 
        Validate.noNullElements(sQLSyntaxErrorExceptionArray0, "", (Object[]) sQLSyntaxErrorExceptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<BatchUpdateException>[] arrayListArray0 = (ArrayList<BatchUpdateException>[]) Array.newInstance(ArrayList.class, 6);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      arrayListArray0[0] = arrayList0;
      arrayListArray0[1] = arrayList0;
      arrayListArray0[2] = arrayListArray0[1];
      arrayListArray0[3] = arrayListArray0[2];
      arrayListArray0[4] = arrayList0;
      arrayListArray0[5] = arrayListArray0[4];
      ArrayList<BatchUpdateException>[] arrayListArray1 = Validate.noNullElements(arrayListArray0, ".5-oN=>>p@Nu@", (Object[]) arrayListArray0);
      assertEquals(6, arrayListArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Validate.notBlank(charBuffer0, "nLD`sw&-v cqCO", (Object[]) sQLExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nLD`sw&-v cqCO
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) null, "\r", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \r
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Validate.notBlank("The validated map is empty", "23&h", objectArray0);
      assertEquals("The validated map is empty", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) charBuffer0, "N1ksga..@~7g$I%!=Q", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '!'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharBuffer) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>();
      Object[] objectArray0 = new Object[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      hashMap0.putIfAbsent(sQLNonTransientConnectionException0, (SQLIntegrityConstraintViolationException) null);
      HashMap<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> hashMap1 = Validate.notEmpty(hashMap0, "'rXm J", objectArray0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<DataTruncation, SQLClientInfoException> hashMap0 = new HashMap<DataTruncation, SQLClientInfoException>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>(linkedList0);
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notEmpty((PriorityQueue<CharBuffer>) null, "k:.NxU\"BjHU{;", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // k:.NxU\"BjHU{;
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray1 = Validate.notEmpty(sQLIntegrityConstraintViolationExceptionArray0, "", (Object[]) sQLIntegrityConstraintViolationExceptionArray0);
      assertSame(sQLIntegrityConstraintViolationExceptionArray0, sQLIntegrityConstraintViolationExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The string %s does not match the pattern %s", "8]SWti<I'^/", (-810));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4", "8]SWti<I'^/", (-810), sQLNonTransientConnectionException0);
      objectArray0[1] = (Object) sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)Validate.notNull(objectArray0[1], "The string %s does not match the pattern %s", objectArray0);
      assertEquals("4", sQLRecoverableException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The string %s does not match the pattern %s", "8]SWti<I'^/", (-810));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4", "8]SWti<I'^/", (-810), sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)Validate.notNull((Object) sQLRecoverableException0);
      assertEquals("8]SWti<I'^/", sQLRecoverableException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "y2;^W m;>&&st i%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Object[] objectArray0 = new Object[5];
      Validate.isAssignableFrom(class0, class0, "", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.sql.SQLClientInfoException to a java.sql.BatchUpdateException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Validate.isAssignableFrom(class0, class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, "Wv#XQj%RHc", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      SQLException sQLException0 = new SQLException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("j}Bjc?e", "j}Bjc?e", sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`M`4Y%gm++*-G0;8", (String) null, 2160, sQLTransientException0);
      Object[] objectArray0 = new Object[4];
      Validate.isInstanceOf((Class<?>) class0, (Object) sQLFeatureNotSupportedException0, "`M`4Y%gm++*-G0;8", objectArray0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: `M`4Y%gm++*-G0;8", sQLFeatureNotSupportedException0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.SQLNonTransientException, actual: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.BatchUpdateException, actual: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      SQLWarning sQLWarning0 = new SQLWarning();
      Validate.isInstanceOf((Class<?>) class0, (Object) sQLWarning0);
      assertNull(sQLWarning0.getMessage());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Validate.inclusiveBetween("HOOa_5. l", "HOOa_5. l", (Comparable<String>) "HOOa_5. l");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The validated character sequence is blank", "HOOa_5. l", (-43), intArray0, (Throwable) null);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-43)).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((Object) batchUpdateException0, (Object) batchUpdateException0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified inclusive range of java.sql.BatchUpdateException: The validated character sequence is blank to java.sql.BatchUpdateException: The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("o YnRh>", "o YnRh>", hashMap0);
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      Validate.matchesPattern((CharSequence) "o YnRh>", "o YnRh>", "o YnRh>", (Object[]) throwableArray0);
      assertEquals(0, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "W)m^C(p4nUkSlo", " 6`5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string W)m^C(p4nUkSlo does not match the pattern  6`5
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Validate.matchesPattern((CharSequence) "The validated array contains null element at index: %d", "The validated array contains null element at index: %d");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.validState(false, "", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Validate.validState(true, "G<xY`G(mc5", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Validate.validState(true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Validate.validIndex("Bu5+a#", 0);
      assertEquals("Bu5+a#", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.validIndex("Cannot assign a %s to a %s", (-222), "", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      SQLException[] sQLExceptionArray1 = Validate.validIndex(sQLExceptionArray0, 0);
      assertSame(sQLExceptionArray1, sQLExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      linkedList0.add((SQLIntegrityConstraintViolationException) null);
      // Undeclared exception!
      try { 
        Validate.noNullElements(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\r", "\r", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLSyntaxErrorException0);
      Object[] objectArray0 = new Object[0];
      SQLWarning sQLWarning1 = Validate.noNullElements(sQLWarning0, "The validated array contains null element at indexe %d", objectArray0);
      assertEquals("java.sql.SQLSyntaxErrorException: \r", sQLWarning1.getMessage());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.noNullElements(locale_FilteringModeArray0);
      assertSame(locale_FilteringModeArray1, locale_FilteringModeArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<SQLTransientException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLTransientException, SQLInvalidAuthorizationSpecException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("HOOa_5. l");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("HOOa_5. l", "HOOa_5. l", (-2584));
      hashMap0.put(sQLTransientException0, sQLInvalidAuthorizationSpecException0);
      HashMap<SQLTransientException, SQLInvalidAuthorizationSpecException> hashMap1 = Validate.notEmpty(hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<SQLFeatureNotSupportedException, SQLSyntaxErrorException>) null, "L6a}Cg=%vQR*{~`Wh3?", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'v'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Object[] objectArray0 = new Object[2];
      stack0.add("org\u0000apache\u0000commons\u0000lang3\u0000ArrayUtils");
      Stack<String> stack1 = Validate.notEmpty(stack0, "\r", objectArray0);
      assertTrue(stack1.contains("org\u0000apache\u0000commons\u0000lang3\u0000ArrayUtils"));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((EnumSet<ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLClientInfoExceptionArray0, "kl6'&42", (Object[]) sQLClientInfoExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // kl6'&42
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((Locale.FilteringMode[]) null, "U27aM!R  ;", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // U27aM!R  ;
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Validate.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", (Object[]) dataTruncationArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Validate.isTrue(true, "23&h", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "top9Wt9BmOK", (double) (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // top9Wt9BmOK
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Validate.isTrue(true, "", 966.5853376968);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "23&h", (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 23&h
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Validate.isTrue(true, "", 0L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      // Undeclared exception!
      try { 
        Validate.noNullElements(locale_FilteringModeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Validate.notBlank("top9Wt9BmOK");
      assertEquals("top9Wt9BmOK", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Validate.notEmpty("HOOa_5. l");
      assertEquals("HOOa_5. l", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = Validate.notEmpty(objectArray0);
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Validate validate0 = new Validate();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex("", 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((ArrayList<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.FilteringMode> enumSet1 = Validate.validIndex(enumSet0, 0);
      assertEquals(5, enumSet1.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
