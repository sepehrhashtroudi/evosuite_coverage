/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:15:08 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.swapCase("b[8(#/pW7Aa9)x%");
      assertNotNull(string0);
      assertEquals("B[8(#/Pw7aA9)X%", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", 1672, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotEmpty("B[8(#/Pw7aA9)X%");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "B[8(#/Pw7aA9)X%", (-1064));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase(string1);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b[8(#/pW7Aa9)x%";
      stringArray0[1] = "b[8(#/pW7Aa9)x%";
      stringArray0[2] = "";
      stringArray0[3] = string1;
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'D';
      charArray0[2] = 'j';
      charArray0[3] = 'S';
      charArray0[4] = ']';
      charArray0[5] = 'g';
      charArray0[6] = '\"';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'z', 'D', 'j', 'S', ']', 'g', '\"'}, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" G`?-GU%2@}r G`?-GU%2@}r");
      assertNotNull(string0);
      assertEquals("G`?-GU%2@}rG`?-GU%2@}r", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "G`?-GU%2@}rG`?-GU%2@}r", 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfBlank(";g$", ":}9?YL!8& w8zpNj1cJ");
      assertNotNull(string1);
      assertEquals(";g$", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(":}9?YL!8& w8zpNj1cJ", (-1), "|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA");
      assertNotNull(string2);
      assertEquals(":}9?YL!8& w8zpNj1cJ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("8& w8zpNj1cJ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '}';
      int int1 = StringUtils.indexOfAny((CharSequence) "|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'S', '}'}, charArray0);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.join((short[]) null, 'o', (-1564), 1301);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString(" vs ");
      assertNotNull(string4);
      assertEquals(" vs ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int2 = StringUtils.indexOfAny((CharSequence) " vs ", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'S', '}'}, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      long[] longArray0 = new long[0];
      String string5 = StringUtils.join(longArray0, 'Y', (-1), (-1910));
      assertEquals(0, longArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA|k.pqA";
      objectArray0[1] = (Object) null;
      String string6 = StringUtils.join(objectArray0, "G`?-GU%2@}rG`?-GU%2@}r", 711, (-1));
      assertEquals(2, objectArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.substringBetween(";k51ETvr[", ";k51ETvr[", ";k51ETvr[");
      assertNull(string0);
      
      String string1 = StringUtils.replace(";k51ETvr[", (String) null, "org.apache.commons.lang3.CharSequenceUtils", 0);
      assertNotNull(string1);
      assertEquals(";k51ETvr[", string1);
      
      String string2 = StringUtils.repeat('$', 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("=n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeStart("G.tYGxnKo^eCfg", "7Y%L%");
      assertNotNull(string3);
      assertEquals("G.tYGxnKo^eCfg", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.join(doubleArray0, '~');
      assertEquals(0, doubleArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '$';
      charArray0[2] = '~';
      charArray0[3] = '~';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'~', '$', '~', '~'}, charArray0);
      
      String string7 = StringUtils.defaultString("7Y%L%", "");
      assertNotNull(string7);
      assertEquals("7Y%L%", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.removeStart(", Length: ", "7Y%L%");
      assertNotNull(string8);
      assertEquals(", Length: ", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string9 = StringUtils.remove("", ' ');
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      
      String string10 = StringUtils.normalizeSpace("\"c&7M?$M$");
      assertNotNull(string10);
      assertEquals("\"c&7M?$M$", string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      
      String string11 = StringUtils.substring((String) null, 16, 16);
      assertNull(string11);
      
      String string12 = StringUtils.chop("=n");
      assertNotNull(string12);
      assertEquals("=", string12);
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string5));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) '$';
      String string13 = StringUtils.join(floatArray0, 'u', 31, 0);
      assertEquals(4, floatArray0.length);
      assertNotNull(string13);
      assertEquals("", string13);
      assertArrayEquals(new float[] {16.0F, 0.0F, (-1.0F), 36.0F}, floatArray0, 0.01F);
      assertFalse(string13.equals((Object)string3));
      assertTrue(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertTrue(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      int int1 = 54;
      Integer integer3 = new Integer(54);
      assertNotNull(integer3);
      assertEquals(54, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      assertNotNull(integer4);
      assertEquals(54, (int)integer4);
      assertFalse(int1 == int0);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int1));
      
      integerArray0[4] = integer4;
      String string0 = StringUtils.join(integerArray0);
      assertEquals(5, integerArray0.length);
      assertNotNull(string0);
      assertEquals("0005454", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "0005454", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("0005454", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("B", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'B'}, charArray0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer1);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("B", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("B", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      String string4 = StringUtils.swapCase("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.capitalize("^DmV<$!o`Zt");
      assertNotNull(string5);
      assertEquals("^DmV<$!o`Zt", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.rightPad("a'D*", int0);
      assertNotNull(string6);
      assertEquals("a'D*", string6);
      assertFalse(int0 == int1);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.replace("", "a'D*", (String) null, 65);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      
      String string8 = StringUtils.chomp("0005454");
      assertNotNull(string8);
      assertEquals("0005454", string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.center("", (-2256), 'Q');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2256);
      doubleArray0[2] = (double) 'Q';
      doubleArray0[3] = (double) (-2256);
      String string2 = StringUtils.join(doubleArray0, 'k');
      assertEquals(4, doubleArray0.length);
      assertNotNull(string2);
      assertEquals("0.0k-2256.0k81.0k-2256.0", string2);
      assertArrayEquals(new double[] {0.0, (-2256.0), 81.0, (-2256.0)}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "0.0k-2256.0k81.0k-2256.0";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.removeStart((String) null, "");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[+1d,", "z5{n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Af{!", "z5{n", 13);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Af{!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Af{!");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "[+1d,", 13, (-1873));
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.isBlank("Af{!");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "[+1d,");
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'M', (-1), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[+1d,", "z5{n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Af{!", "z5{n", 13);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Af{!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Af{!");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "[+1d,", 13, (-1873));
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.isBlank("Af{!");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'M', (-1), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = null;
      charSequenceArray0[7] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = null;
      charSequenceArray0[8] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      String string1 = StringUtils.join(longArray0, 's', (-1), (-1));
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      String string2 = StringUtils.center("", (-1), 's');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.repeat("HNj", 685);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'h';
      charArray0[2] = 'O';
      String string1 = StringUtils.join(charArray0, 'A', 685, (-1));
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'A', 'h', 'O'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace(" G`?-GU%2@}r G`?-GU%2@}r", "HNj", (String) null, 31);
      assertNotNull(string2);
      assertEquals(" G`?-GU%2@}r G`?-GU%2@}r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removePattern("#r|gbogM", "...");
      assertNotNull(string3);
      assertEquals("gM", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat((String) null, 1672);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Minimum abbreviation width with offset is 7");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = (double) 'A';
      doubleArray0[4] = 956.0881;
      doubleArray0[5] = (double) 'h';
      doubleArray0[6] = (double) 685;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'O', 31, 243);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", "\r");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\r", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.left("pF'", 2257);
      assertNotNull(string1);
      assertEquals("pF'", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) "pF'", (CharSequence) "\r");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "pF'";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "pF'";
      charSequenceArray0[6] = (CharSequence) "pF'";
      charSequenceArray0[7] = (CharSequence) null;
      int int3 = StringUtils.lastIndexOfAny("\r", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      long[] longArray0 = new long[21];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      String string2 = StringUtils.join(longArray0, 'g', 0, 0);
      assertEquals(21, longArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int4 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "");
      assertEquals(8, charSequenceArray0.length);
      assertEquals(1, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      String string3 = StringUtils.substring("", 0, (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripEnd((String) null, "\r");
      assertNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
      
      linkedList0.add(0, (Object) "pF'");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("pF'"));
      assertFalse(linkedList0.contains("\r"));
      
      String string5 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("pF'"));
      assertFalse(linkedList0.contains("\r"));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.join(longArray0, 'g', 0, 0);
      assertEquals(21, longArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int5 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "pF'", (CharSequence) "", 1);
      assertEquals(1, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.repeat("r'FZ;^|O64=O", (-32768));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-32768));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart("r'FZ;^|O64=O", " is not in the range '0' - '9'");
      assertNotNull(string1);
      assertEquals("FZ;^|O64=O", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach("(?: s|[s&&[^ ]])s*", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("(?: s|[s&&[^ ]])s*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((char[]) null, 'J', (-32768), (-1));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.split("fi_tNLO", "+?%FNsn", (-1));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.rightPad("Threshold must not be negative", (-1), "A8:LU9,_{");
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("(?: s|[s&&[^ ]])s*");
      assertFalse(boolean0);
      
      String string5 = StringUtils.abbreviateMiddle("fi_tNLO", "uMP{.Q", (-32768));
      assertNotNull(string5);
      assertEquals("fi_tNLO", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.join((Object[]) stringArray1, "C- ZT3/&T+ ;", 31, (-1));
      assertEquals(2, stringArray1.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.capitalize("fi_tNLO");
      assertNotNull(string7);
      assertEquals("Fi_tNLO", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "C- ZT3/&T+ ;", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("FZ;^|O64=O", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string8 = StringUtils.rightPad("w", 31, "uMP{.Q");
      assertNotNull(string8);
      assertEquals("wuMP{.QuMP{.QuMP{.QuMP{.QuMP{.Q", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      
      String string9 = StringUtils.join((char[]) null, 'J', 31, (-1));
      assertNull(string9);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Fi_tNLO");
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray2);
      assertEquals(5, stringArray2.length);
      assertEquals(0, int1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string10 = StringUtils.trim((String) null);
      assertNull(string10);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "\ntZx~O=sAS.WhcQ[";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      String string0 = StringUtils.replaceEach("", stringArray1, stringArray1);
      assertEquals(5, stringArray1.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly("fbygkq", stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(string1);
      assertEquals("fbygkq", string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.chop("...");
      assertNotNull(string0);
      assertEquals("..", string0);
      
      boolean boolean0 = StringUtils.isEmpty("..");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("eaI.Qs30E0q{o>|na[", "..", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("..");
      assertNotNull(string2);
      assertEquals("..", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "eaI.Qs30E0q{o>|na[", (CharSequence) "", 47);
      assertEquals(18, int0);
      
      String[] stringArray0 = StringUtils.split((String) null, 'C');
      assertNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "...", charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'a', 'C', 'C', 'C'}, charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Y8XF)6p7+5C{()~VYBSv");
      assertNotNull(string0);
      assertEquals("Y8XF)6p7+5C{()~VYBSv", string0);
      
      String string1 = StringUtils.substringAfter("Ua", "Y8XF)6p7+5C{()~VYBSv");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Y8XF)6p7+5C{()~VYBSv");
      assertEquals(20, int0);
      
      String string2 = StringUtils.uncapitalize("2UA");
      assertNotNull(string2);
      assertEquals("2UA", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2UA", (CharSequence) "");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y8XF)6p7+5C{()~VYBSv";
      objectArray0[1] = (Object) "Ua";
      objectArray0[2] = (Object) "Y8XF)6p7+5C{()~VYBSv";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "2UA";
      String string3 = StringUtils.join(objectArray0, '%');
      assertEquals(7, objectArray0.length);
      assertNotNull(string3);
      assertEquals("Y8XF)6p7+5C{()~VYBSv%Ua%Y8XF)6p7+5C{()~VYBSv%%%%2UA", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Y8XF)6p7+5C{()~VYBSv%Ua%Y8XF)6p7+5C{()~VYBSv%%%%2UA");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "2UA", (CharSequence) "", 20);
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.mid("Vz.mtVz.mt", 20, (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substring("2UA", 24, 20);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-@R", "...", (-2239));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = new Locale("d(qu5GY>!u#CE", "(?: s|[s&&[^ ]])s*");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("d(qu5gy>!u#ce_(?: S|[S&&[^ ]])S*", locale0.toString());
      assertEquals("d(qu5gy>!u#ce", locale0.getLanguage());
      assertEquals("(?: S|[S&&[^ ]])S*", locale0.getCountry());
      
      String string6 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string6);
      assertEquals("", locale0.getVariant());
      assertEquals("d(qu5gy>!u#ce_(?: S|[S&&[^ ]])S*", locale0.toString());
      assertEquals("d(qu5gy>!u#ce", locale0.getLanguage());
      assertEquals("(?: S|[S&&[^ ]])S*", locale0.getCountry());
      
      String string7 = StringUtils.deleteWhitespace("]Osf>~O-");
      assertNotNull(string7);
      assertEquals("]Osf>~O-", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      int int1 = 54;
      Integer integer3 = new Integer(54);
      assertNotNull(integer3);
      assertEquals(54, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      assertNotNull(integer4);
      assertEquals(54, (int)integer4);
      assertFalse(int1 == int0);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      String string0 = StringUtils.join(integerArray0);
      assertEquals(5, integerArray0.length);
      assertNotNull(string0);
      assertEquals("0005454", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "0005454", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("0005454", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      boolean boolean0 = linkedList0.add("J");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("J"));
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals("B", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'B'}, charArray0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer1);
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals("B", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("B", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      String string4 = StringUtils.swapCase("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.capitalize("^DmV<$!o`Zt");
      assertNotNull(string5);
      assertEquals("^DmV<$!o`Zt", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.rightPad("a'D*", int0);
      assertNotNull(string6);
      assertEquals("a'D*", string6);
      assertFalse(int0 == int1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.replace("", "a'D*", (String) null, 65);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      
      String string8 = StringUtils.remove("...", "");
      assertNotNull(string8);
      assertEquals("...", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.swapCase("D(QU5gy>!U#ce");
      assertNotNull(string0);
      assertEquals("d(qu5GY>!u#CE", string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1216);
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "d(qu5GY>!u#CE", (CharSequence) "d(qu5GY>!u#CE");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("D(QU5gy>!U#ce", "d(qu5GY>!u#CE");
      assertTrue(boolean0);
      
      String string1 = StringUtils.uncapitalize("d(qu5GY>!u#CE");
      assertNotNull(string1);
      assertEquals("d(qu5GY>!u#CE", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("D(QU5gy>!U#ce");
      assertNotNull(string2);
      assertEquals("D(QU5gy>!U#ce", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("{}");
      assertNotNull(string3);
      assertEquals("{}", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("{}", "d(qu5GY>!u#CE", Integer.MAX_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string4 = StringUtils.join(floatArray0, 'r', 32767, (-1144));
      assertEquals(1, floatArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'c');
      assertEquals(0, floatArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'c', 'c', 'c'}, charArray0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", 5);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBetween("^Qk0amc", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.center(".c[SO^3pPtfH", 5, 'c');
      assertNotNull(string4);
      assertEquals(".c[SO^3pPtfH", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = ":}9?YL!";
      String string6 = StringUtils.join((Iterator<?>) null, ":}9?YL!");
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("^Qk0amc", 0, (-3612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.repeat("Threshold must not be negative", "?Iv@h", 327);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring(string0, 327, 2);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "?Iv@h", (CharSequence) "Threshold must not be negative", 636);
      assertEquals(29, int0);
      
      String[] stringArray0 = StringUtils.split(string0, " has no clone method", 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.leftPad("KKby8WeA7`3:0kG", (-2538), 'b');
      assertNotNull(string2);
      assertEquals("KKby8WeA7`3:0kG", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("?Iv@h"));
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("?Iv@h"));
      
      String string3 = StringUtils.join(iterator0, "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", " has no clone method");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.substringBefore("@MG\"", "@MG\"");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("@MG\"", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "@MG\"", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '=';
      charArray0[2] = 'I';
      charArray0[3] = 'A';
      charArray0[4] = 'W';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'m', '=', 'I', 'A', 'W'}, charArray0);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.remove("@MG\"", "H|EYst]5iwsd{,()I9");
      assertNotNull(string1);
      assertEquals("@MG\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("H|EYst]5iwsd{,()I9");
      assertNotNull(string2);
      assertEquals("h|eyST]5IWSD{,()i9", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((byte[]) null, 'm');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3576);
      assertNotNull(integer0);
      assertEquals(3576, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertNotNull(integer1);
      assertEquals(3576, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2938));
      assertNotNull(integer2);
      assertEquals((-2938), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[1] = integer2;
      String string0 = StringUtils.join(integerArray0);
      assertEquals(3, integerArray0.length);
      assertNotNull(string0);
      assertEquals("3576-2938", string0);
      
      String string1 = StringUtils.abbreviateMiddle("3576-2938", "^P@~mk#_7%Ulwj~!*F!", (int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertNotNull(string1);
      assertEquals("3576-2938", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("3576-2938");
      assertNotNull(string2);
      assertEquals("3576-2938", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = (-2938);
      intArray0[2] = 3576;
      intArray0[4] = 3576;
      intArray0[5] = 0;
      intArray0[6] = (-2938);
      intArray0[7] = (int) integerArray0[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '+', 0, 1157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.removePattern(":/i%g=d?wGJ>X", "");
      assertNotNull(string0);
      assertEquals(":/i%g=d?wGJ>X", string0);
      
      boolean boolean0 = StringUtils.isNumeric(":/i%g=d?wGJ>X");
      assertFalse(boolean0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.stripToNull("\n");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isBlank("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      String string3 = StringUtils.join((Iterable<?>) enumSet0, 'R');
      assertNotNull(string3);
      assertEquals("AUTOSELECT_FILTERINGREXTENDED_FILTERINGRIGNORE_EXTENDED_RANGESRMAP_EXTENDED_RANGESRREJECT_EXTENDED_RANGES", string3);
      assertEquals(5, enumSet0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "AUTOSELECT_FILTERINGREXTENDED_FILTERINGRIGNORE_EXTENDED_RANGESRMAP_EXTENDED_RANGESRREJECT_EXTENDED_RANGES", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string4 = StringUtils.lowerCase("*{Tz_nPT``/DuX:a*J", locale0);
      assertNotNull(string4);
      assertEquals("*{tz_npt``/dux:a*j", string4);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("%sq9=b_*9D'JR?('", 16, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("(?: s|[s&&[^ ]])s*");
      assertNotNull(string0);
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "(?: s|[s&&[^ ]])s*", (CharSequence) "(?: s|[s&&[^ ]])s*");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("(?: s|[s&&[^ ]])s*", 13, "(?: s|[s&&[^ ]])s*");
      assertNotNull(string1);
      assertEquals("(?: s|[s&&[^ ]])s*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("(?: s|[s&&[^ ]])s*", "(?: s|[s&&[^ ]])s*");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceEach("(?: s|[s&&[^ ]])s*", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("(?: s|[s&&[^ ]])s*", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = 1856.876437380185;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = 2910.0;
      String string3 = StringUtils.join(doubleArray0, 'g');
      assertEquals(6, doubleArray0.length);
      assertNotNull(string3);
      assertEquals("13.0g13.0g13.0g1856.876437380185g13.0g2910.0", string3);
      assertArrayEquals(new double[] {13.0, 13.0, 13.0, 1856.876437380185, 13.0, 2910.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithAny("(?: s|[s&&[^ ]])s*", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "(?: s|[s&&[^ ]])s*", 2806, 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore("(?: s|[s&&[^ ]])s*", "Search and Replace array lengths don't match: ");
      assertNotNull(string4);
      assertEquals("(?: s|[s&&[^ ]])s*", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "(?: s|[s&&[^ ]])s*", (CharSequence) "Search and Replace array lengths don't match: ", 122);
      assertEquals(43, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.center("", (-2375), '\\');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("0&[Y,tL~M=,1");
      assertNotNull(string2);
      assertEquals("1,=M~Lt,Y[&0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("", 1293, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "0&[Y,tL~M=,1");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '\\';
      intArray0[1] = (-2375);
      intArray0[2] = 1918;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1293;
      intArray0[6] = 0;
      String string4 = StringUtils.join(intArray0, 'Q');
      assertEquals(7, intArray0.length);
      assertNotNull(string4);
      assertEquals("92Q-2375Q1918Q0Q0Q1293Q0", string4);
      assertArrayEquals(new int[] {92, (-2375), 1918, 0, 0, 1293, 0}, intArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.mid("The Character must not be null", 0, 170);
      assertNotNull(string5);
      assertEquals("The Character must not be null", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 23);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      boolean boolean0 = StringUtils.isAlpha("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 57);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[2] = "";
      stringArray0[3] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[4] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[5] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[6] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[7] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "t<]B");
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.substringsBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "");
      assertNull(stringArray2);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = ':';
      charArray0[2] = '}';
      charArray0[3] = '^';
      charArray0[4] = 'p';
      charArray0[5] = '6';
      charArray0[6] = '(';
      charArray0[7] = 'X';
      charArray0[8] = 'l';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'`', ':', '}', '^', 'p', '6', '(', 'X', 'l'}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      int int0 = (-29);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>((-29));
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      boolean boolean0 = linkedList0.addAll((Collection<?>) arrayDeque0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(linkedList0.contains((-29)));
      
      Iterator<Object> iterator1 = linkedList0.descendingIterator();
      assertNotNull(iterator1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-29)));
      assertFalse(iterator1.equals((Object)iterator0));
      
      String string2 = StringUtils.join(iterator1, "n;s");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("n;s"));
      assertFalse(iterator1.equals((Object)iterator0));
      
      char char0 = '`';
      String[] stringArray0 = StringUtils.split("n;s", '`');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultString("Minimum abbreviation width is 4");
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width is 4", string3);
      assertFalse(string3.equals((Object)string2));
      
      int int1 = 35;
      boolean boolean1 = StringUtils.contains((CharSequence) "n;s", 35);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.uncapitalize("Minimum abbreviation width is 4");
      assertNotNull(string4);
      assertEquals("minimum abbreviation width is 4", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeEnd("{~90$]D4^aGyI-@R", "n;s");
      assertNotNull(string5);
      assertEquals("{~90$]D4^aGyI-@R", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = "yK{-AHi)BJyIh";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("null/empty items", "yK{-AHi)BJyIh");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // yK{-AHi)BJyIh
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)39;
      shortArray0[1] = (short) (-1);
      String string1 = StringUtils.join(shortArray0, '/', 31, (int) (short) (-1));
      assertEquals(2, shortArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)39, (short) (-1)}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("p{InCombiningDiacriticalMarks}+", (int) (short)39, '/');
      assertNotNull(string2);
      assertEquals("////p{InCombiningDiacriticalMarks}+////", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "///p{InCombiningDiacriticalMarks}+////", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(7, int0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripAccents("ka+(gKvt~`ka+(gKvt~`");
      assertNotNull(string0);
      assertEquals("ka+(gKvt~`ka+(gKvt~`", string0);
      
      String string1 = StringUtils.substringAfterLast(";g$", ";g$");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("ka+(gKvt~`ka+(gKvt~`", "ka+(gKvt~`ka+(gKvt~`");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ka+(gKvt~`ka+(gKvt~`";
      stringArray0[1] = "lhm[(";
      stringArray0[2] = ";g$";
      stringArray0[3] = "ka+(gKvt~`ka+(gKvt~`";
      stringArray0[4] = ";g$";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringBetween("Cannot get the toString of a null identity", "ka+(gKvt~`ka+(gKvt~`", "EMlz~Y<Ch");
      assertNull(string4);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'K';
      charArray0[2] = 'D';
      charArray0[3] = 'M';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'^', 'K', 'D', 'M'}, charArray0);
      
      String string5 = StringUtils.deleteWhitespace("EMlz~Y<Ch");
      assertNotNull(string5);
      assertEquals("EMlz~Y<Ch", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '~', (-1477), (-1477));
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "", 1004);
      assertEquals(1, int0);
      
      String string2 = StringUtils.repeat("", 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.mid("", 4096, (-1090));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'F');
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((Object[]) null, 'F', 37, (-1090));
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "p}op5<l=O", "nn<te0nR&VYiFX)E#[");
      assertNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nn<te0nR&VYiFX)E#[";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "nn<te0nR&VYiFX)E#[";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("p}op5<l=O", '5');
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("p}op5<l=O", "nn<te0nR&VYiFX)E#[", 231);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String[] stringArray3 = StringUtils.split("", '5');
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      
      String string2 = StringUtils.leftPad("p}op5<l=O", 256);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                                                                                                       p}op5<l=O", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWith("nn<te0nR&VYiFX)E#[", string0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars((String) null, "P8 b&xKISM~V\"NZP#s", "");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "                                                                                                                                                                                                                                                       p}op5<l=O", (CharSequence) "nn<te0nR&VYiFX)E#[");
      assertEquals(0, int0);
      
      String[] stringArray4 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '5';
      String string4 = StringUtils.join(floatArray0, '5');
      assertEquals(2, floatArray0.length);
      assertNotNull(string4);
      assertEquals("0.0553.0", string4);
      assertArrayEquals(new float[] {0.0F, 53.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray5 = StringUtils.splitByWholeSeparator("0.0553.0", string0);
      assertEquals(1, stringArray5.length);
      assertNotNull(stringArray5);
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray0));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray0);
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray2);
      
      String string5 = StringUtils.abbreviate("Arguments cannot both be null", 256, 13);
      assertNotNull(string5);
      assertEquals("...th be null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAlphaSpace("nn<te0nR&VYiFX)E#[");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.defaultString(string0, "minimum abbreviation width is 4");
      assertNotNull(string6);
      assertEquals("minimum abbreviation width is 4", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.center("", (-2375), '\\');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("0&[Y,tL~M=,1");
      assertNotNull(string2);
      assertEquals("1,=M~Lt,Y[&0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.mid("", 1293, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "0&[Y,tL~M=,1");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '\\';
      intArray0[1] = (-2375);
      intArray0[2] = 1918;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1293;
      intArray0[6] = 0;
      String string4 = StringUtils.join(intArray0, 'Q');
      assertEquals(7, intArray0.length);
      assertNotNull(string4);
      assertEquals("92Q-2375Q1918Q0Q0Q1293Q0", string4);
      assertArrayEquals(new int[] {92, (-2375), 1918, 0, 0, 1293, 0}, intArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("1,=M~Lt,Y[&0");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.left("1,=M~Lt,Y[&0", (-2375));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.center("", (-2256), 'Q');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2256);
      doubleArray0[2] = (double) 'Q';
      doubleArray0[3] = (double) (-2256);
      String string2 = StringUtils.join(doubleArray0, 'k');
      assertEquals(4, doubleArray0.length);
      assertNotNull(string2);
      assertEquals("0.0k-2256.0k81.0k-2256.0", string2);
      assertArrayEquals(new double[] {0.0, (-2256.0), 81.0, (-2256.0)}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "0.0k-2256.0k81.0k-2256.0";
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.reverse("Z4");
      assertNotNull(string0);
      assertEquals("4Z", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 379L;
      longArray0[1] = (-1448L);
      longArray0[2] = (-595L);
      longArray0[3] = 1L;
      longArray0[4] = (-614L);
      longArray0[5] = 312L;
      longArray0[6] = (-1L);
      longArray0[7] = (-595L);
      String string1 = StringUtils.join(longArray0, 'f');
      assertEquals(8, longArray0.length);
      assertNotNull(string1);
      assertEquals("379f-1448f-595f1f-614f312f-1f-595", string1);
      assertArrayEquals(new long[] {379L, (-1448L), (-595L), 1L, (-614L), 312L, (-1L), (-595L)}, longArray0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Z4", "Z4");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Z4", 0, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((int[]) null, 'f');
      assertNull(string2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(int0));
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(int0));
      
      String string3 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f', 'f'}, charArray0);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.chop(":Jr0^");
      assertNotNull(string4);
      assertEquals(":Jr0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("", "p{InCombiningDiacriticalMarks}+", (-489), 103);
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "org.apache.commons.lang3.StringUtils", "p{InCombiningDiacriticalMarks}+");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.right("z~U^+%SAW4?}$'", 90);
      assertNotNull(string3);
      assertEquals("z~U^+%SAW4?}$'", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringAfter("z~U^+%SAW4?}$'", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumeric("z~U^+%SAW4?}$'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removePattern(";|\"vRe2RNjC", "']'");
      assertNotNull(string5);
      assertEquals(";|\"vRe2RNjC", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("']'", "p{InCombiningDiacriticalMarks}+", (CharSequence[]) null);
      assertNotNull(string6);
      assertEquals("']'p{InCombiningDiacriticalMarks}+", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.join((short[]) null, 'z');
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "z~U^+%SAW4?}$'");
      assertNull(stringArray1);
      
      String string8 = StringUtils.removeEndIgnoreCase((String) null, "V");
      assertNull(string8);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 90;
      longArray0[1] = (long) 'z';
      longArray0[2] = (long) 103;
      longArray0[3] = (long) 103;
      longArray0[4] = (long) 90;
      longArray0[5] = (long) 103;
      longArray0[6] = (long) 103;
      longArray0[7] = (long) 103;
      longArray0[8] = (long) 90;
      String string9 = StringUtils.join(longArray0, 'J');
      assertEquals(9, longArray0.length);
      assertNotNull(string9);
      assertEquals("90J122J103J103J90J103J103J103J90", string9);
      assertArrayEquals(new long[] {90L, 122L, 103L, 103L, 90L, 103L, 103L, 103L, 90L}, longArray0);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      
      int int0 = StringUtils.lastIndexOfAny(";|\"vRe2RNjC", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string10 = StringUtils.normalizeSpace("");
      assertNotNull(string10);
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      char[] charArray0 = new char[5];
      String string1 = StringUtils.join(charArray0, '~', (-1477), (-1477));
      assertEquals(5, charArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '~';
      String string2 = StringUtils.join(doubleArray0, '~', 549, 17);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new double[] {126.0}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("-_J,$'O1,;C#G,DG9,Minimum abbreviation width is 4", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = '~';
      charArray1[2] = '~';
      charArray1[3] = '~';
      charArray1[4] = '~';
      charArray1[5] = '~';
      charArray1[6] = '~';
      charArray1[7] = '~';
      charArray1[8] = '~';
      String string4 = StringUtils.join(charArray1, '~', 1916, 1004);
      assertEquals(9, charArray1.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray1);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[2] = "dY-l8I1%Gc_%,";
      stringArray0[3] = "\r";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "dY-l8I1%Gc_%,");
      assertFalse(boolean0);
      
      String string1 = StringUtils.lowerCase("dY-l8I1%Gc_%,");
      assertNotNull(string1);
      assertEquals("dy-l8i1%gc_%,", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "dY-l8I1%Gc_%,", (CharSequence) "dY-l8I1%Gc_%,");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "l8{'WWk[", 4, 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.countMatches("dY-l8I1%Gc_%,", "dY-l8I1%Gc_%,");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("", "org.apache.commons.lang3.ArrayUtils");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("l8{'WWk[");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals((-1), int2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(stringArray1, stringArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "");
      assertEquals(35, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      boolean boolean3 = StringUtils.endsWith("org.apache.commons.lang3.ArrayUtils", "\r");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.overlay((String) null, "dY-l8I1%Gc_%,", 1, 1);
      assertNull(string4);
      
      boolean boolean4 = StringUtils.isEmpty("\r");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      String string5 = StringUtils.replaceOnce("", "*l", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      int int4 = StringUtils.countMatches("\r", "");
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.SPACE;
      assertNotNull(string6);
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      int int5 = StringUtils.indexOfAny((CharSequence) " ", "Y8XF)6p7+5C{(");
      assertEquals((-1), int5);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = null;
      int int0 = (-8);
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, (-8), 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "p}op5<l=O", "nn<te0nR&VYiFX)E#[");
      assertNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nn<te0nR&VYiFX)E#[";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "nn<te0nR&VYiFX)E#[";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("p}op5<l=O", '5');
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("p}op5<l=O", "nn<te0nR&VYiFX)E#[", 231);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String[] stringArray3 = StringUtils.split("", '5');
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      
      String string2 = StringUtils.leftPad("p}op5<l=O", 256);
      assertNotNull(string2);
      assertEquals("                                                                                                                                                                                                                                                       p}op5<l=O", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWith("nn<te0nR&VYiFX)E#[", string0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars((String) null, "P8 b&xKISM~V\"NZP#s", "");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "                                                                                                                                                                                                                                                       p}op5<l=O", (CharSequence) "nn<te0nR&VYiFX)E#[");
      assertEquals(0, int0);
      
      String[] stringArray4 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '5';
      String string4 = StringUtils.join(floatArray0, '5');
      assertEquals(2, floatArray0.length);
      assertNotNull(string4);
      assertEquals("0.0553.0", string4);
      assertArrayEquals(new float[] {0.0F, 53.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray5 = StringUtils.splitByWholeSeparator("0.0553.0", string0);
      assertEquals(1, stringArray5.length);
      assertNotNull(stringArray5);
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray0));
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray0);
      
      String string5 = StringUtils.abbreviate("Arguments cannot both be null", 256, 13);
      assertNotNull(string5);
      assertEquals("...th be null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.overlay("nn<te0nR&VYiFX)E#[", (String) null, 231, 3611);
      assertNotNull(string6);
      assertEquals("nn<te0nR&VYiFX)E#[", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.removeStart(")~VYBSv", "Y8XF)6p7+5C{(");
      assertNotNull(string7);
      assertEquals(")~VYBSv", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.capitalize("OP%%D=4Bv_RV");
      assertNotNull(string0);
      assertEquals("OP%%D=4Bv_RV", string0);
      
      String string1 = StringUtils.remove("OP%%D=4Bv_RV", "OP%%D=4Bv_RV");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      String string2 = StringUtils.join(intArray0, '+', 2805, 0);
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.removePattern("org.apache.commons.lang3.ArrayUtils", " vs ");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) "org.apache.commons.lang3.ArrayUtils");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", 85, 85);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "_DN(EGT3qH\"\"Z";
      String string1 = "org.apache.commons.lang3.CharUtils";
      String string2 = StringUtils.substringBetween("_DN(EGT3qH\"\"Z", "org.apache.commons.lang3.CharUtils", "_DN(EGT3qH\"\"Z");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("_DN(EGT3qH\"\"Z");
      assertTrue(boolean0);
      
      String string3 = StringUtils.left("C;IIPJKB9+OuG", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence charSequence0 = null;
      boolean boolean1 = StringUtils.endsWith((CharSequence) null, "org.apache.commons.lang3.CharUtils");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.right("Arguments cannot both be null", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("Arguments cannot both be null", 1, "");
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[5] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.left("", 1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.equals(charSequenceArray0[1], charSequenceArray0[6]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string3 = "\\u";
      String string4 = StringUtils.center("\"vpnx", 1, string3);
      assertNotNull(string4);
      assertEquals("\"vpnx", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Arguments cannot both be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[3], 1, 0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)17;
      byteArray0[3] = (byte)0;
      String string5 = StringUtils.center("6#{TbkeEv84|`BZ=>$", (-699), "Arguments cannot both be null");
      assertNotNull(string5);
      assertEquals("6#{TbkeEv84|`BZ=>$", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("fh+wUN[FNFu=U0+*", "fh+wUN[FNFu=U0+*", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("fh+wUN[FNFu=U0+*", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "fh+wUN[FNFu=U0+*", (CharSequence) "fh+wUN[FNFu=U0+*", (-1684));
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'p', (-1684), (-1684));
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", 24, 'g');
      assertNotNull(string2);
      assertEquals("gggggggggggggggggggggggg", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("jp:tq+2SRF^\"*vj`", "H~&4~aN", 4);
      assertNotNull(string3);
      assertEquals("jp:tq+2SRF^\"*vj`", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("fh+wUN[FNFu=U0+*");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "fh+wUN[FNFu=U0+*");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "gggggggggggggggggggggggg";
      stringArray0[1] = "H~&4~aN";
      stringArray0[2] = "fh+wUN[FNFu=U0+*";
      stringArray0[3] = "gggggggggggggggggggggggg";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "jp:tq+2SRF^\"*vj`");
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.replaceChars("t`", "t`", "t`");
      assertNotNull(string4);
      assertEquals("t`", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "fh+wUN[FNFu=U0+*", 4366);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = null;
      charSequenceArray0[8] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      String string1 = StringUtils.join(longArray0, 't', (-1), (-1));
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      String string2 = StringUtils.center("", (-1), 't');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[3] = null;
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = null;
      charSequenceArray0[8] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      String string1 = StringUtils.join(longArray0, 't', (-1), (-1));
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      String string2 = StringUtils.center("", (-1), 't');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1223);
      intArray0[1] = 0;
      String string0 = StringUtils.join(intArray0, 'r', 589, (-1144));
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new int[] {(-1223), 0}, intArray0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("D(QU5gy>!U#ce", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "D(QU5gy>!U#ce";
      charSequenceArray0[1] = (CharSequence) "D(QU5gy>!U#ce";
      String string1 = StringUtils.trimToNull(" vs ");
      assertNotNull(string1);
      assertEquals("vs", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "vs";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "D(QU5gy>!U#ce";
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = '2';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      String string2 = StringUtils.join(charArray0, 'r');
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
      assertEquals("rr2rrrrrrrr", string2);
      assertArrayEquals(new char[] {'r', '2', 'r', 'r', 'r', 'r'}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "rr2rrrrrrrr";
      int int0 = StringUtils.lastIndexOfAny("D(QU5gy>!U#ce", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(14, int0);
      
      String string3 = StringUtils.defaultString("D(QU5gy>!U#ce");
      assertNotNull(string3);
      assertEquals("D(QU5gy>!U#ce", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char char0 = ')';
      int int0 = 3;
      int int1 = (-1684);
      String string0 = StringUtils.join(objectArray0, ')', 3, (-1684));
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "]bh(R(>5{A|E*<aK$";
      int int2 = (-601);
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "]bh(R(>5{A|E*<aK$", (-1684), (-601));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1684
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", ";g$");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 603);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";g$", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ";g$", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 603);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.removeStart(",b2", "");
      assertNotNull(string1);
      assertEquals(",b2", string1);
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 603;
      doubleArray0[1] = (double) 603;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 965.259;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 603;
      doubleArray0[6] = (double) 603;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      String string2 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "");
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("p{InCombiningDiacriticalMarks}+", "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "p{InCombiningDiacriticalMarks}+", 3533);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.uncapitalize("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.substringAfterLast("zaySCe$_'u)L", "Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "zaySCe$_'u)L", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("zaySCe$_'u)L");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("', is neither of type Map.Entry nor an Array", "zaySCe$_'u)L", (-2273));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string3 = StringUtils.upperCase("', is neither of type Map.Entry nor an Array", locale0);
      assertNotNull(string3);
      assertEquals("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", string3);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.countMatches("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", "', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY");
      assertEquals(1, int0);
      
      String string4 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.replaceEach("O`zl\"0vat6nDCK26w2", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertEquals("O`zl\"0vat6nDCK26w2", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("jtO|RKi", "Threshold must not be negative", (CharSequence[]) null);
      assertNotNull(string6);
      assertEquals("jtO|RKiThreshold must not be negative", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean3 = StringUtils.startsWith("", "jtO|RKiThreshold must not be negative");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string7 = StringUtils.difference("", "zaySCe$_'u)L");
      assertNotNull(string7);
      assertEquals("zaySCe$_'u)L", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean4 = StringUtils.isAlphaSpace("zaySCe$_'u)L");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      String string8 = StringUtils.center("Threshold must not be negative", (-2273));
      assertNotNull(string8);
      assertEquals("Threshold must not be negative", string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      
      long[] longArray0 = new long[0];
      String string9 = StringUtils.join(longArray0, 's');
      assertEquals(0, longArray0.length);
      assertNotNull(string9);
      assertEquals("", string9);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      
      String string10 = StringUtils.join(longArray0, 's', 1, (-2273));
      assertEquals(0, longArray0.length);
      assertNotNull(string10);
      assertEquals("", string10);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "f");
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd("rL2,=Pfy'+JQz7e|aF", (String) null);
      assertNotNull(string1);
      assertEquals("rL2,=Pfy'+JQz7e|aF", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "rL2,=Pfy'+JQz7e|aF";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "f", (-8));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringBeforeLast("f", "aA");
      assertNotNull(string2);
      assertEquals("f", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-8);
      floatArray0[1] = (float) (-1);
      String string4 = StringUtils.join(floatArray0, 'D');
      assertEquals(2, floatArray0.length);
      assertNotNull(string4);
      assertEquals("-8.0D-1.0", string4);
      assertArrayEquals(new float[] {(-8.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.mid("Minimum abbreviation width with offset is 7", 8, (-595));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("rL2,=Pfy'+JQz7e|aF");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-35);
      String string2 = StringUtils.join(byteArray0, '=');
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("88=-3=-23=75=107=-63=-35", string2);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-3), (byte) (-23), (byte)75, (byte)107, (byte) (-63), (byte) (-35)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("FQB)l1=`=__E'Eik'", "y^:zUUqUFsBy", "/6c~4WvjB1-S$mD~n5");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "FQB)l1=`=__E'Eik'";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "/6c~4WvjB1-S$mD~n5";
      String string4 = StringUtils.prependIfMissing((String) null, "y^:zUUqUFsBy", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '$';
      charArray0[1] = '1';
      charArray0[2] = 'I';
      charArray0[3] = 'U';
      charArray0[4] = 'w';
      charArray0[5] = '1';
      charArray0[6] = 'm';
      charArray0[7] = '8';
      String string0 = StringUtils.join(charArray0, '1', 0, 0);
      assertEquals(14, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("3FOAX<");
      assertNotNull(string0);
      assertEquals("3FOAX<", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "3FOAX<", (CharSequence) "3FOAX<", 256);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 179;
      intArray0[4] = (-694);
      intArray0[5] = 256;
      intArray0[6] = 256;
      intArray0[7] = 256;
      String string1 = StringUtils.join(intArray0, ' ', 1654, (-1998));
      assertEquals(8, intArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 179, (-694), 256, 256, 256}, intArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("3FOAX<");
      assertNotNull(string2);
      assertEquals("3foax<", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "3FOAX<");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) 256;
      longArray0[3] = 1605L;
      longArray0[4] = (long) 179;
      String string3 = StringUtils.replace("\r", "\n", "3FOAX<", 256);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.rightPad("c;", (-1905), "c;");
      assertNotNull(string0);
      assertEquals("c;", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "c;", (CharSequence) "c;");
      assertTrue(boolean0);
      
      String string1 = StringUtils.capitalize("c;");
      assertNotNull(string1);
      assertEquals("C;", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "C;";
      stringArray0[1] = "C;";
      stringArray0[2] = "c;";
      String string2 = StringUtils.replaceEach("c;", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertEquals("c;", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("C;");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace("ynumpRZ");
      assertNotNull(string4);
      assertEquals("ynumpRZ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ynumpRZ", (-1905));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substring("C;", (-1));
      assertNotNull(string5);
      assertEquals(";", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.leftPad((String) null, (-1), "org.apache.commons.lang3.StringUtils");
      assertNull(string6);
      
      String string7 = StringUtils.repeat("", (String) null, (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.replaceChars("y/ci1*\"vNe81ps)dl", (String) null, "C;");
      assertNotNull(string8);
      assertEquals("y/ci1*\"vNe81ps)dl", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("ynumpRZ");
      assertEquals(2, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "c;", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string9 = StringUtils.abbreviate((String) null, 2);
      assertNull(string9);
      
      String string10 = StringUtils.reverseDelimited("org.apache.commons.lang3.CharUtils", '$');
      assertNotNull(string10);
      assertEquals("org.apache.commons.lang3.CharUtils", string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      
      String string11 = StringUtils.rightPad("C;", 57, "GK");
      assertNotNull(string11);
      assertEquals("C;GKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKGKG", string11);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ";", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)12;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short)31;
      shortArray0[4] = (short)1050;
      shortArray0[5] = (short) (-1220);
      shortArray0[6] = (short)1338;
      String string0 = StringUtils.join(shortArray0, 'P', 1977, (int) (short)12);
      assertEquals(7, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)13, (short)12, (short)64, (short)31, (short)1050, (short) (-1220), (short)1338}, shortArray0);
      
      String string1 = StringUtils.stripToNull("CJ=~De'F5TtY9h,");
      assertNotNull(string1);
      assertEquals("CJ=~De'F5TtY9h,", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd("CJ=~De'F5TtY9h,", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string2);
      assertEquals("CJ=~De'F5TtY9h,", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "", (int) (short)13);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trim("VeY|c?\"+X&4WCLa");
      assertNotNull(string3);
      assertEquals("VeY|c?\"+X&4WCLa", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "CJ=~De'F5TtY9h,", "%d[*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Vz.mt", "Vz.mt", 1435);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("Vz.mt", "Vz.mt");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Vz.mt", "", 1435);
      assertEquals(6, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 1435;
      floatArray0[2] = (float) 1435;
      floatArray0[3] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '>');
      assertEquals(4, floatArray0.length);
      assertNotNull(string1);
      assertEquals("6.0>1435.0>1435.0>0.0", string1);
      assertArrayEquals(new float[] {6.0F, 1435.0F, 1435.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertEquals(2, byteArray0.length);
      assertNotNull(string2);
      assertEquals("\u0000\u0000", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      HashSet<CharBuffer> hashSet0 = null;
      try {
        hashSet0 = new HashSet<CharBuffer>((-2220), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2220
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", ";g$");
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 603);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";g$", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ";g$", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 603);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = ",b2";
      String string3 = "";
      String string4 = StringUtils.removeStart(",b2", "");
      assertNotNull(string4);
      assertEquals(",b2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 603;
      doubleArray0[1] = (double) 603;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 965.259;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 603;
      doubleArray0[6] = (double) 603;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'i', 2, 603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "";
      stringArray0[2] = "dY-l8I1%Gc_%,";
      stringArray0[3] = "\r";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "dY-l8I1%Gc_%,");
      assertFalse(boolean0);
      
      String string1 = StringUtils.lowerCase("dY-l8I1%Gc_%,");
      assertNotNull(string1);
      assertEquals("dy-l8i1%gc_%,", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "dY-l8I1%Gc_%,", (CharSequence) "dY-l8I1%Gc_%,");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "l8{'WWk[", 4, 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.countMatches("dY-l8I1%Gc_%,", "dY-l8I1%Gc_%,");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("", "org.apache.commons.lang3.ArrayUtils");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("l8{'WWk[");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals((-1), int2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(stringArray1, stringArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "");
      assertEquals(35, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      boolean boolean3 = StringUtils.endsWith("", "\r");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", '?');
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      String string3 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.overlay((String) null, "dY-l8I1%Gc_%,", 1, 1);
      assertNull(string4);
      
      boolean boolean4 = StringUtils.isEmpty("\r");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      String string5 = StringUtils.replaceOnce("", "*l", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      int int4 = StringUtils.countMatches("\r", "");
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "Strings must not be null";
      int int0 = 341;
      String string1 = "\\u000";
      String string2 = StringUtils.leftPad("Strings must not be null", 341, string1);
      assertNotNull(string2);
      assertEquals("\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\u000\\uStrings must not be null", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = ')';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\"', 341, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "dY-l8I1%Gc_%,";
      stringArray0[3] = "\r";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "dY-l8I1%Gc_%,");
      assertFalse(boolean0);
      
      String string1 = StringUtils.lowerCase("dY-l8I1%Gc_%,");
      assertNotNull(string1);
      assertEquals("dy-l8i1%gc_%,", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "dY-l8I1%Gc_%,", (CharSequence) "dY-l8I1%Gc_%,");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "l8{'WWk[", 4, 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.countMatches("dY-l8I1%Gc_%,", "dY-l8I1%Gc_%,");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("", "org.apache.commons.lang3.ArrayUtils");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("l8{'WWk[");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals((-1), int2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(stringArray1, stringArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "");
      assertEquals(35, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      boolean boolean3 = StringUtils.endsWith("", "\r");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", '?');
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string3 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.overlay((String) null, "dY-l8I1%Gc_%,", 1, 1);
      assertNull(string4);
      
      boolean boolean4 = StringUtils.isEmpty("\r");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      String string5 = StringUtils.replaceOnce("", "*l", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      int int4 = StringUtils.countMatches("\r", "");
      assertEquals(0, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.chomp("(?: s|[s&&[^ ]])s*");
      assertNotNull(string0);
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "(?: s|[s&&[^ ]])s*", (CharSequence) "(?: s|[s&&[^ ]])s*");
      assertEquals(0, int0);
      
      String string1 = StringUtils.upperCase("(?: s|[s&&[^ ]])s*");
      assertNotNull(string1);
      assertEquals("(?: S|[S&&[^ ]])S*", string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "(?: s|[s&&[^ ]])s*";
      objectArray0[2] = (Object) "(?: s|[s&&[^ ]])s*";
      char char0 = 'i';
      int int1 = 0;
      String string2 = StringUtils.join(objectArray0, 'i', 0, 0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'C', 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.overlay("e", "", (-2569), 2233);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'o');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replacePattern("", "e", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd(":}9?YL!", "8& w8zpNj1cJ");
      assertNotNull(string1);
      assertEquals(":}9?YL!", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '/';
      charArray0[2] = 'n';
      charArray0[3] = 'C';
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[5], charArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', '/', 'n', 'C'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "=FPxq");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=FPxq", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviateMiddle("d[pshR/-+t\"", "", 2);
      assertNotNull(string1);
      assertEquals("d[pshR/-+t\"", string1);
      
      String string2 = StringUtils.abbreviate((String) null, 2, 2);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.split("", '{');
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=FPxq", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.reverse("8()9-C)a");
      assertNotNull(string3);
      assertEquals("a)C-9)(8", string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("%wwIo=6", "", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertEquals("%wwIo=6", string4);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "d[pshR/-+t\"");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.leftPad("0B,q@?Qh8DJ[YT3hoj", 0, 'f');
      assertNotNull(string5);
      assertEquals("0B,q@?Qh8DJ[YT3hoj", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.strip("gr:U.#`", "0B,q@?Qh8DJ[YT3hoj");
      assertNotNull(string6);
      assertEquals("gr:U.#`", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "gr:U.#`");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.left("", 4096);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("`-,]'xw{-e");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.chomp("", "Array and element cannot both be null");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 4096, 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.remove("", "AG[|~C:0T[");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-2126));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Array and element cannot both be null", (CharSequence) "Array and element cannot both be null");
      assertTrue(boolean0);
      
      String string4 = StringUtils.removeStart("", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 4096;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 4096;
      String string5 = StringUtils.join(floatArray0, '(');
      assertEquals(7, floatArray0.length);
      assertNotNull(string5);
      assertEquals("0.0(4096.0(-1.0(-1.0(-1.0(-1.0(4096.0", string5);
      assertArrayEquals(new float[] {0.0F, 4096.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), 4096.0F}, floatArray0, 0.01F);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("Taiwan", string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = StringUtils.upperCase("0jFCTSOQ6tquy", locale0);
      assertNotNull(string1);
      assertEquals("0JFCTSOQ6TQUY", string1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0JFCTSOQ6TQUY", "0JFCTSOQ6TQUY");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("0jFCTSOQ6tquy", "0JFCTSOQ6TQUY");
      assertNotNull(string2);
      assertEquals("jFCTSOQ6tquy", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "0JFCTSOQ6TQUY", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0jFCTSOQ6tquy", (CharSequence) "jFCTSOQ6tquy", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.right((String) null, 70);
      assertNull(string3);
      
      String string4 = StringUtils.substring("", 70);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.left("", (-619));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substring("O}=>WKp6sAx8e(9X]QX", (-1866), (-1));
      assertNotNull(string6);
      assertEquals("O}=>WKp6sAx8e(9X]Q", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      
      int int1 = StringUtils.indexOf((CharSequence) "0JFCTSOQ6TQUY", (CharSequence) "", 48);
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-619);
      floatArray0[4] = (float) (-619);
      String string8 = StringUtils.join(floatArray0, ' ');
      assertEquals(5, floatArray0.length);
      assertNotNull(string8);
      assertEquals("-1.0 0.0 0.0 -619.0 -619.0", string8);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-619.0F), (-619.0F)}, floatArray0, 0.01F);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverse(")*3Kp");
      assertNotNull(string0);
      assertEquals("pK3*)", string0);
      
      boolean boolean0 = StringUtils.isBlank("pK3*)");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("pK3*)", ")*3Kp");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replacePattern(")*3Kp", "", "");
      assertNotNull(string2);
      assertEquals(")*3Kp", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-4969);
      shortArray0[0] = (short) (-4969);
      short short1 = (short) (-4175);
      shortArray0[1] = (short) (-4175);
      short short2 = (short)64;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short)0;
      char char0 = 't';
      String string0 = StringUtils.join(shortArray0, 't');
      assertEquals(4, shortArray0.length);
      assertNotNull(string0);
      assertEquals("-4969t-4175t64t0", string0);
      assertArrayEquals(new short[] {(short) (-4969), (short) (-4175), (short)64, (short)0}, shortArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("%P+`(", (short) (-4969));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replace(" ", "", ", '");
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chomp("~)On;s", ", '");
      assertNotNull(string4);
      assertEquals("~)On;s", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "^]<!jCyXTW");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.stripEnd(" ", "");
      assertNotNull(string5);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("-4969t-4175t64t0", (int) (short) (-4175), "uS_Pyk3");
      assertNotNull(string6);
      assertEquals("-4969t-4175t64t0", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      int int0 = (-380);
      HashSet<String> hashSet0 = null;
      try {
        hashSet0 = new HashSet<String>((-380), (short) (-4969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -380
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = StringUtils.join(iterator0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      char char0 = '&';
      String string1 = StringUtils.remove("", '&');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '&';
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) '&';
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      char char1 = ';';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ';', (-2357), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2357
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'N');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("FfNOCU-Wq-q>~t");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertEquals("FfNOCU-Wq-q>~t", string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center((String) null, (-1), "FfNOCU-Wq-q>~t");
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean4 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'c';
      charArray0[2] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("scg", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertArrayEquals(new char[] {'s', 'c', 'g'}, charArray0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("scg", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.limit());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.remaining());
      assertEquals("scg", charBuffer1.toString());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {'s', 'c', 'g'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      boolean boolean5 = treeSet0.add(charBuffer1);
      assertEquals(3, charArray0.length);
      assertTrue(boolean5);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("scg", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.limit());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.remaining());
      assertEquals("scg", charBuffer1.toString());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {'s', 'c', 'g'}, charArray0);
      assertTrue(treeSet0.contains(charBuffer1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      
      String string5 = StringUtils.join(iterator0, 'r');
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(treeSet0.contains(charBuffer1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-28);
      String string0 = StringUtils.join(byteArray0, 'e');
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertEquals("13e9e0e0e-7e25e-28", string0);
      assertArrayEquals(new byte[] {(byte)13, (byte)9, (byte)0, (byte)0, (byte) (-7), (byte)25, (byte) (-28)}, byteArray0);
      
      String string1 = StringUtils.center("13e9e0e0e-7e25e-28", 0, "muv4x");
      assertNotNull(string1);
      assertEquals("13e9e0e0e-7e25e-28", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("13e9e0e0e-7e25e-28", '.');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.join(byteArray0, '$', (int) (byte)0, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte)13, (byte)9, (byte)0, (byte)0, (byte) (-7), (byte)25, (byte) (-28)}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = 'e';
      charArray0[6] = '.';
      String string4 = StringUtils.join(charArray0, '.', (int) (byte)13, (int) (byte)9);
      assertEquals(7, charArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'.', '$', '$', '$', '$', 'e', '.'}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", 'q');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "#p Ak)7.d", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#p Ak)7.d", (CharSequence) "#p Ak)7.d");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3980);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'q', (-1309), 814);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1309
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is 7");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthwithoffsetis7", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", 0);
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", (-1355));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip((String) null, "Index: ");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Cannot store ", (String) null, "");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '1';
      charArray0[2] = 'z';
      charArray0[3] = 'B';
      charArray0[4] = '+';
      charArray0[5] = 'P';
      charArray0[6] = '1';
      charArray0[7] = '(';
      int int1 = StringUtils.indexOfAny((CharSequence) "Cannot store ", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(6, int1);
      assertArrayEquals(new char[] {' ', '1', 'z', 'B', '+', 'P', '1', '('}, charArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "p!)ebs|P/mchS");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp((String) null, "");
      assertNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '\"';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'(', '\"'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad("", 2, 'S');
      assertNotNull(string2);
      assertEquals("SS", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "p!)ebs|P/mchS", 2);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replace((String) null, (String) null, "", (-208));
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray0);
      
      String string4 = StringUtils.strip("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, 4096);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.difference(" ", "VsV^AZfRI+3^");
      assertNotNull(string5);
      assertEquals("VsV^AZfRI+3^", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(",>0UMu_2`_", (String) null, 0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "SS", 4096);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string7 = StringUtils.substringAfterLast("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, (-208));
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "VsV^AZfRI+3^";
      stringArray2[1] = ",>0UMu_2`_";
      stringArray2[2] = "";
      stringArray2[3] = "";
      String[] stringArray3 = StringUtils.stripAll(stringArray2);
      assertEquals(4, stringArray2.length);
      assertEquals(4, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "Z~b";
      String string1 = StringUtils.substringAfter("", "Z~b");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "', has a length less than 2";
      // Undeclared exception!
      try { 
        StringUtils.upperCase("', has a length less than 2", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = StringUtils.replaceOnce("", "", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      int int0 = (-1556);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-1556));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = "\\u000";
      String string4 = "DKb";
      String[] stringArray0 = StringUtils.split(string3, "DKb", (-1556));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      
      String string5 = StringUtils.replaceOnce((String) null, "", "");
      assertNull(string5);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      
      boolean boolean0 = arrayList0.add((String) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      boolean boolean1 = arrayList0.add((String) null);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = arrayList0.add("");
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains(string3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char char0 = '/';
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, '/');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "&=kzKAF'M";
      String string1 = StringUtils.remove("&=kzKAF'M", "&=kzKAF'M");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("&=kzKAF'M");
      assertNotNull(string2);
      assertEquals("&=kzKAF'M", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3149.61F;
      String string3 = StringUtils.join(floatArray0, 'J', (-3992), (-3992));
      assertEquals(5, floatArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 0.0F, 0.0F, 3149.61F}, floatArray0, 0.01F);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "lSCa";
      String string5 = StringUtils.strip("lSCa");
      assertNotNull(string5);
      assertEquals("lSCa", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = "";
      String string7 = StringUtils.abbreviate("", 117);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      
      char[] charArray0 = new char[0];
      String string8 = StringUtils.join(charArray0, ';');
      assertEquals(0, charArray0.length);
      assertNotNull(string8);
      assertEquals("", string8);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "&=kzKAF'M");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      String string9 = StringUtils.join(byteArray0, 't');
      assertEquals(0, byteArray0.length);
      assertNotNull(string9);
      assertEquals("", string9);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(3149.61F));
      
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2685;
      String string0 = StringUtils.join(intArray0, 'c', 1239, 0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new int[] {0, 2685}, intArray0);
      
      String string1 = StringUtils.repeat("", "m", 1239);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.chomp("k~8>L';`cP7*8hWFxA", "");
      assertNotNull(string0);
      assertEquals("k~8>L';`cP7*8hWFxA", string0);
      
      String string1 = StringUtils.defaultString("k~8>L';`cP7*8hWFxA");
      assertNotNull(string1);
      assertEquals("k~8>L';`cP7*8hWFxA", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStartIgnoreCase("k~8>L';`cP7*8hWFxA", "k~8>L';`cP7*8hWFxA");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "k~8>L';`cP7*8hWFxA", (CharSequence) "k~8>L';`cP7*8hWFxA");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      String string4 = StringUtils.join(floatArray0, 'w');
      assertEquals(4, floatArray0.length);
      assertNotNull(string4);
      assertEquals("0.0w0.0w0.0w0.0", string4);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.right("", 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.leftPad("", 0, "The Character must not be null");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "k~8>L';`cP7*8hWFxA";
      charSequenceArray0[1] = (CharSequence) "0.0w0.0w0.0w0.0";
      charSequenceArray0[2] = (CharSequence) "The Character must not be null";
      charSequenceArray0[3] = (CharSequence) "k~8>L';`cP7*8hWFxA";
      charSequenceArray0[4] = (CharSequence) "0.0w0.0w0.0w0.0";
      charSequenceArray0[5] = (CharSequence) "k~8>L';`cP7*8hWFxA";
      charSequenceArray0[6] = (CharSequence) "k~8>L';`cP7*8hWFxA";
      String string7 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)0;
      String string8 = StringUtils.join(shortArray0, '_');
      assertEquals(2, shortArray0.length);
      assertNotNull(string8);
      assertEquals("16_0", string8);
      assertArrayEquals(new short[] {(short)16, (short)0}, shortArray0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split("k~8>L';`cP7*8hWFxA");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string9 = "\\u0";
      String string10 = StringUtils.defaultIfEmpty("k~8>L';`cP7*8hWFxA", string9);
      assertNotNull(string10);
      assertEquals("k~8>L';`cP7*8hWFxA", string10);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      
      String string11 = StringUtils.substringBeforeLast("=", "k~8>L';`cP7*8hWFxA");
      assertNotNull(string11);
      assertEquals("=", string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "RGL~?";
      String string1 = StringUtils.substringBetween(", Length: 0", ", Length: 0", "RGL~?");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("RGL~?", (String) null, 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 0;
      int int1 = 0;
      int int2 = StringUtils.lastIndexOf((CharSequence) "RGL~?", 0, 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("RGL~?", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.substring("", 2165);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("3H7Z#eW-K-MYf'n_o", 2165);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = 'k';
      charArray0[2] = 'j';
      charArray0[3] = '#';
      charArray0[4] = 'w';
      charArray0[5] = '0';
      charArray0[6] = '-';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\\', 'k', 'j', '#', 'w', '0', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      String string1 = StringUtils.join(objectArray0, '[');
      assertEquals(6, objectArray0.length);
      assertNotNull(string1);
      assertEquals("[[[[[", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "5p";
      String string2 = StringUtils.prependIfMissing("5p", (CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("5p", string2);
      assertFalse(string2.equals((Object)string1));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("5p"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator(0);
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(arrayList0.contains("5p"));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, ';');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(arrayList0.contains("5p"));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      char char0 = 'Y';
      String string0 = StringUtils.join(objectArray0, 'Y');
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "java.lang.Object@74c4c160Yjava.lang.Object@2019e83bYjava.lang.Object@20402919Yjava.lang.Object@6965b91cYjava.lang.Object@3b78aa91", ",KLaxbhFSGh?G'k");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@74c4c160Yjava.lang.Object@2019e83bYjava.lang.Object@20402919Yjava.lang.Object@6965b91cYjava.lang.Object@3b78aa91", " ");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("zr|(;JXE-:ZiM}LJ", "zr|(;JXE-:ZiM}LJ", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) ",KLaxbhFSGh?G'k");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsNone((CharSequence) ",KLaxbhFSGh?G'k", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("TLYm2!!T", "(?: s|[s&&[^ ]])s*");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.chomp(" ", " ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-67L);
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'Y', (-1), 298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(".Q57Q\"i");
      assertNotNull(string0);
      assertEquals(".Q57Q\"i", string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'Q');
      assertEquals(0, longArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart(".XQiEfb5da*hIX", "");
      assertNotNull(string2);
      assertEquals(".XQiEfb5da*hIX", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty(".XQiEfb5da*hIX");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".Q57Q\"i", "", (-3487));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", ".XQiEfb5da*hIX", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertEquals(".XQiEfb5da*hIX", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.removePattern("EsqtpB=FS]]jRojY+", "");
      assertNotNull(string4);
      assertEquals("EsqtpB=FS]]jRojY+", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.right("", 1600);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isEmpty(".Q57Q\"i");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean2 = StringUtils.isEmpty(".Q57Q\"i");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.uncapitalize("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.overlay("CXYg!aA`", "", 0, (-4384));
      assertNotNull(string7);
      assertEquals("CXYg!aA`", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$@%=`znl-a]^ma", "$@%=`znl-a]^ma");
      assertNull(string0);
      
      String string1 = StringUtils.join((char[]) null, 'p');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "$@%=`znl-a]^ma", (CharSequence) "$@%=`znl-a]^ma");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      String string2 = StringUtils.join(byteArray0, 'p');
      assertEquals(5, byteArray0.length);
      assertNotNull(string2);
      assertEquals("-104p64p2p32p0", string2);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)64, (byte)2, (byte)32, (byte)0}, byteArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      String string3 = StringUtils.repeat("-104p64p2p32p0", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[1] = (CharSequence) "";
      String string4 = StringUtils.substringBeforeLast("{}", "S(W\u0006- 6-~O+Pu");
      assertNotNull(string4);
      assertEquals("{}", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[2] = (CharSequence) "{}";
      String string5 = StringUtils.appendIfMissing("1o_2pkq+o(", "$@%=`znl-a]^ma", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("1o_2pkq+o(", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isNotBlank("1o_2pkq+o(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '!';
      charArray0[2] = 'V';
      charArray0[3] = ':';
      charArray0[4] = 'A';
      charArray0[5] = 'u';
      charArray0[6] = '#';
      charArray0[7] = 'm';
      charArray0[8] = '[';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertArrayEquals(new char[] {'K', '!', 'V', ':', 'A', 'u', '#', 'm', '['}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer1, charBuffer0);
      
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.endsWithAny(charBuffer0, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertNotSame(charBuffer0, charBuffer1);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStart("}]A", (String) null);
      assertNotNull(string0);
      assertEquals("}]A", string0);
      
      boolean boolean2 = StringUtils.isNotBlank("}]A");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      String string1 = StringUtils.lowerCase("(?: s|[s&&[^ ]])s*", locale0);
      assertNotNull(string1);
      assertEquals("(?: s|[s&&[^ ]])s*", string1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.trim("f3f");
      assertNotNull(string0);
      assertEquals("f3f", string0);
      
      int int0 = StringUtils.length("f3f");
      assertEquals(3, int0);
      
      String string1 = StringUtils.left("", 1619);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("f3f");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'M', 1619, 1619);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny("f3f", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = StringUtils.join(iterator0, "'D'\"\"4AK%\"TqNyo6hM");
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.leftPad("Strings must not be null", 10, "Q;Q]Emz$b@qh");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      longArray0[5] = (-1L);
      longArray0[6] = (-4202L);
      longArray0[7] = (long) 10;
      String string1 = StringUtils.join(longArray0, 'o');
      assertEquals(8, longArray0.length);
      assertNotNull(string1);
      assertEquals("10o10o10o10o10o-1o-4202o10", string1);
      assertArrayEquals(new long[] {10L, 10L, 10L, 10L, 10L, (-1L), (-4202L), 10L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("10o10o10o10o10o-1o-4202o10");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '\\', (-2380), (-2380));
      assertEquals(0, floatArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWith("", "Strings must not be null");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "xea8a(7xi>@gI", (-3914));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringAfterLast("Strings must not be null", "Q;Q]Emz$b@qh");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) stringArray0, "10o10o10o10o10o-1o-4202o10", 10, (-3914));
      assertEquals(0, stringArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-2380)));
      
      String string5 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-2380)));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = " G`?-GU%2@}r";
      String[] stringArray0 = new String[2];
      stringArray0[0] = " G`?-GU%2@}r";
      stringArray0[1] = " G`?-GU%2@}r";
      String string1 = StringUtils.replaceEach(" G`?-GU%2@}r", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertEquals(" G`?-GU%2@}r", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToEmpty(" G`?-GU%2@}r");
      assertNotNull(string2);
      assertEquals("G`?-GU%2@}r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.prependIfMissing("The Character must not be null", "G`?-GU%2@}r", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      assertEquals("G`?-GU%2@}rThe Character must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "G`?-GU%2@}rThe Character must not be null", " G`?-GU%2@}r");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.defaultIfBlank(" G`?-GU%2@}r", "z*d)");
      assertNotNull(string4);
      assertEquals(" G`?-GU%2@}r", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("The Character must not be null");
      assertFalse(boolean0);
      
      String string5 = StringUtils.uncapitalize("_q5u[g~R&wCH");
      assertNotNull(string5);
      assertEquals("_q5u[g~R&wCH", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "_q5u[g~R&wCH", (CharSequence) " G`?-GU%2@}r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string6);
      assertEquals(" G`?-GU%2@}r", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      
      String string7 = "n4{wm]?DxQg]aLI^rGP";
      int int3 = 489;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "n4{wm]?DxQg]aLI^rGP", 0, 489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '!';
      charArray0[4] = 'A';
      charArray0[5] = 'u';
      charArray0[6] = '#';
      charArray0[7] = 'm';
      charArray0[8] = '[';
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.endsWithAny(charBuffer0, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStart("}]A", (String) null);
      assertNotNull(string0);
      assertEquals("}]A", string0);
      
      boolean boolean2 = StringUtils.isNotBlank("}]A");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String string1 = StringUtils.lowerCase("(?: s|[s&&[^ ]])s*", locale0);
      assertNotNull(string1);
      assertEquals("(?: s|[s&&[^ ]])s*", string1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "_DN(EGT3qH\"\"Z";
      String string1 = "org.apache.commons.lang3.CharUtils";
      String string2 = StringUtils.substringBetween("_DN(EGT3qH\"\"Z", "org.apache.commons.lang3.CharUtils", "_DN(EGT3qH\"\"Z");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("_DN(EGT3qH\"\"Z");
      assertTrue(boolean0);
      
      String string3 = StringUtils.left("C;IIPJKB9+OuG", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replace((String) null, (String) null, (String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.chomp("r1&5H^$d6Ne+MV^", (String) null);
      assertNotNull(string2);
      assertEquals("r1&5H^$d6Ne+MV^", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "r1&5H^$d6Ne+MV^", (CharSequence) "r1&5H^$d6Ne+MV^");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replacePattern("", "r1&5H^$d6Ne+MV^", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "r1&5H^$d6Ne+MV^";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "r1&5H^$d6Ne+MV^";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "r1&5H^$d6Ne+MV^";
      String string4 = StringUtils.join(objectArray0, "\n");
      assertEquals(9, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1970), 'c');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", "", (-15));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("", "", (-15), (-1970));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, " vs ");
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-1970));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) 'c';
      longArray0[3] = (-1830L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-1970);
      longArray0[6] = 0L;
      longArray0[7] = (long) (-15);
      longArray0[8] = (long) (-1970);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'g', 128, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = ";N{x";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase(";N{x", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "#mX,LyzY|nsPC9";
      stringArray0[6] = " is not in the range '0' - '9'";
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.overlay((String) null, "", 13, 13);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, (CharSequence) null);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("#mX,LyzY|nsPC9", (String) null, 13);
      assertNotNull(string3);
      assertEquals("#mX,LyzY|nsPC9", string3);
      
      String string4 = StringUtils.prependIfMissing("n2gn;v8NWjU/\"qDC", " is not in the range '0' - '9'", stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'n2gn;v8NWjU/\"qDC", string4);
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.trimToEmpty("Strings must not be null");
      assertNotNull(string5);
      assertEquals("Strings must not be null", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringBetween((String) null, "#mX,LyzY|nsPC9", "");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isNotEmpty(string0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.rightPad(".;F&,e#*", 127, '7');
      assertNotNull(string7);
      assertEquals(".;F&,e#*77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 127);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 13;
      longArray0[1] = (long) '7';
      longArray0[2] = (long) 13;
      String string8 = StringUtils.join(longArray0, ' ', 127, 127);
      assertEquals(3, longArray0.length);
      assertNotNull(string8);
      assertEquals("", string8);
      assertArrayEquals(new long[] {13L, 55L, 13L}, longArray0);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1125), "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart((String) null, "u(<YMxKpT5");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertEquals("Org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.right("u(<YMxKpT5", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Org.apache.commons.lang3.StringUtils", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      String string5 = StringUtils.defaultString("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.substringBefore((String) null, "u(<YMxKpT5");
      assertNull(string6);
      
      String string7 = StringUtils.mid("Y2", 0, (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = "\\u0";
      String string9 = StringUtils.substringBetween(string8, (String) null, "");
      assertNull(string9);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 3;
      intArray0[6] = (-1);
      intArray0[7] = (-1125);
      intArray0[8] = (-1);
      String string10 = StringUtils.join(intArray0, 'v');
      assertEquals(9, intArray0.length);
      assertNotNull(string10);
      assertEquals("-1v-1v0v-1v-1v3v-1v-1125v-1", string10);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1), 3, (-1), (-1125), (-1)}, intArray0);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-790));
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains((-790)));
      
      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, 'J');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains((-790)));
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((-790)));
      
      Integer integer0 = new Integer(2672);
      assertNotNull(integer0);
      assertEquals(2672, (int)integer0);
      
      boolean boolean2 = vector0.add(integer0);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[2672]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains((-790)));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(vector0);
      assertNotNull(treeSet0);
      assertFalse(vector0.isEmpty());
      assertEquals("[2672]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains((-790)));
      assertFalse(treeSet0.contains((-790)));
      assertTrue(treeSet0.contains(integer0));
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, "");
      assertNotNull(string2);
      assertFalse(vector0.isEmpty());
      assertEquals("[2672]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains((-790)));
      assertFalse(treeSet0.contains((-790)));
      assertTrue(treeSet0.contains(integer0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripToNull("9oos*'XCx'3I^");
      assertNotNull(string3);
      assertEquals("9oos*'XCx'3I^", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "", (-790));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeEnd((String) null, "9oos*'XCx'3I^");
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "java.lang.Integer@0000000001", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replaceChars((String) null, 'J', '{');
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "V@}6fP)jV]g)}(", (-1));
      assertNull(stringArray0);
      
      String string6 = StringUtils.remove("QqFG7\"~$CvdB=", "QqFG7\"~$CvdB=");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.defaultString("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      
      int int2 = StringUtils.lastOrdinalIndexOf("V@}6fP)jV]g)}(", (CharSequence) null, (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "QqFG7\"~$CvdB=", (char[]) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("9oos*'XCx'3I^");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, "Minimum abbreviation width with offset is 7");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 0, 32);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width wi...", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Minimum abbreviation width wi...", (CharSequence) null);
      assertEquals(0, int0);
      
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("", false);
      classLoader0.setClassAssertionStatus("", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertSame(classLoader3, classLoader0);
      
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader3));
      assertSame(classLoader0, classLoader3);
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader3));
      assertFalse(string2.equals((Object)string1));
      assertSame(classLoader0, classLoader3);
      
      String string3 = StringUtils.stripStart("`TD{LUI", ")>F ");
      assertNotNull(string3);
      assertEquals("`TD{LUI", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 32;
      String string4 = StringUtils.join(floatArray0, '*', 0, 0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 32.0F, 32.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)114;
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", 0, (int) (byte)0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[4] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      String string2 = StringUtils.defaultString("srln{7x(s*Wv*3mwo:^", (String) null);
      assertNotNull(string2);
      assertEquals("srln{7x(s*Wv*3mwo:^", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3576);
      assertNotNull(integer0);
      assertEquals(3576, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertNotNull(integer1);
      assertEquals(3576, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2938));
      assertNotNull(integer2);
      assertEquals((-2938), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      String string0 = StringUtils.join(integerArray0);
      assertEquals(3, integerArray0.length);
      assertNotNull(string0);
      assertEquals("35763576-2938", string0);
      
      String string1 = StringUtils.abbreviateMiddle("35763576-2938", "^P@~mk#_7%Ulwj~!*F!", (int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertNotNull(string1);
      assertEquals("35763576-2938", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("35763576-2938");
      assertNotNull(string2);
      assertEquals("35763576-2938", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = (-2938);
      intArray0[2] = 3576;
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = 3576;
      intArray0[5] = 0;
      intArray0[6] = (-2938);
      intArray0[7] = (int) integerArray0[0];
      String string3 = StringUtils.join(intArray0, '+', 3576, 1157);
      assertEquals(8, intArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new int[] {3576, (-2938), 3576, 3576, 3576, 0, (-2938), 3576}, intArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = 0L;
      char char0 = 'B';
      int int0 = 901;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'B', (-1707), 901);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1707
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "\ntZx~O=sAS.WhcQ[";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      String string0 = StringUtils.replaceEach("", stringArray1, stringArray1);
      assertEquals(5, stringArray1.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\ntZx~O=sAS.WhcQ[", "uMP{.Q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "\\u00";
      String string2 = StringUtils.abbreviateMiddle(string1, "', is neither of type Map.Entry nor an Array", 87);
      assertNotNull(string2);
      assertEquals("\\u00", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("\ntZx~O=sAS.WhcQ[", "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = StringUtils.substring("f3f", 599);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", 1619);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'M', 1619, 1619);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", "\r");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\r", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.left("pF'", 2257);
      assertNotNull(string1);
      assertEquals("pF'", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) "pF'", (CharSequence) "\r");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "pF'";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "pF'";
      charSequenceArray0[6] = (CharSequence) "pF'";
      charSequenceArray0[7] = (CharSequence) null;
      int int3 = StringUtils.lastIndexOfAny("\r", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      String string2 = StringUtils.join(longArray0, 'g', 0, 0);
      assertEquals(3, longArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int4 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "");
      assertEquals(8, charSequenceArray0.length);
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      String string3 = StringUtils.defaultString("Jmw,qI2G8'e.@_");
      assertNotNull(string3);
      assertEquals("Jmw,qI2G8'e.@_", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripEnd((String) null, "\r");
      assertNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
      
      String string5 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.join(longArray0, 'g', 0, 0);
      assertEquals(3, longArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      int int5 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "pF'", (CharSequence) "", 1);
      assertEquals(1, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.upperCase("", locale0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      String string1 = StringUtils.capitalize("8Q}7P");
      assertNotNull(string1);
      assertEquals("8Q}7P", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("", "", (-1652));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'E';
      charArray0[2] = '\'';
      charArray0[3] = 'c';
      charArray0[4] = 'g';
      String string3 = StringUtils.join(charArray0, '\'');
      assertEquals(5, charArray0.length);
      assertNotNull(string3);
      assertEquals("e'E'''c'g", string3);
      assertArrayEquals(new char[] {'e', 'E', '\'', 'c', 'g'}, charArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("", 877, "");
      assertNotNull(string4);
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = ' ';
      charArray0[2] = '@';
      charArray0[3] = 'q';
      charArray0[4] = 'n';
      charArray0[5] = 'W';
      charArray0[6] = 'V';
      charArray0[7] = 'j';
      charArray0[8] = ',';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'W', ' ', '@', 'q', 'n', 'W', 'V', 'j', ','}, charArray0);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.trim("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("*xqH4m", "*xqH4m", "", (-4415));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring("M5-JA@,s", (-997));
      assertNotNull(string3);
      assertEquals("M5-JA@,s", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("\n", "*xqH4m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.leftPad("', has a length less than 2", 13, "', has a length less than 2");
      assertNotNull(string4);
      assertEquals("', has a length less than 2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "', has a length less than 2", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(",z.)7ND0M=1\"PrL]", "", 10);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultString(" ", ":{CScXAr_G)r#'|");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.removeEnd("Array element ", "Array element ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat(" ", (-9));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("", " ");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" ", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 2);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.reverse("AV<DLxyxh~|1j6");
      assertNotNull(string4);
      assertEquals("6j1|~hxyxLD<VA", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4309.529F);
      floatArray0[1] = (float) 10;
      String string5 = StringUtils.join(floatArray0, 'X', 13, 10);
      assertEquals(2, floatArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new float[] {(-4309.529F), 10.0F}, floatArray0, 0.01F);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ":{CScXAr_G)r#'|", (CharSequence) "");
      assertEquals(15, int0);
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.join(doubleArray0, '`');
      assertEquals(0, doubleArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("fU<,\"M5wr#}TEVuva ", "fU<,\"M5wr#}TEVuva ");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "fU<,\"M5wr#}TEVuva ";
      stringArray1[4] = "\ntZx~O=sAS.WhcQ[";
      stringArray1[2] = "fU<,\"M5wr#}TEVuva ";
      stringArray1[3] = "fU<,\"M5wr#}TEVuva ";
      stringArray1[4] = "fU<,\"M5wr#}TEVuva ";
      String string0 = StringUtils.replaceEach("fU<,\"M5wr#}TEVuva ", stringArray1, stringArray1);
      assertEquals(5, stringArray1.length);
      assertNotNull(string0);
      assertEquals("fU<,\"M5wr#}TEVuva ", string0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("fU<,\"M5wr#}TEVuva ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-3976), 'M');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("", " vs ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " vs ", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals(" vs ", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace(" vs ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trim(" vs ");
      assertNotNull(string2);
      assertEquals("vs", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.swapCase("t%&g)x>-|}R3mJUg");
      assertNotNull(string3);
      assertEquals("T%&G)X>-|}r3MjuG", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace("T%&G)X>-|}r3MjuG");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2874);
      shortArray0[1] = (short) (-3013);
      shortArray0[2] = (short) (-2316);
      shortArray0[3] = (short)127;
      String string4 = StringUtils.join(shortArray0, '_', 0, (int) (short) (-2316));
      assertEquals(4, shortArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new short[] {(short) (-2874), (short) (-3013), (short) (-2316), (short)127}, shortArray0);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.removeEnd(";#dk}5", (String) null);
      assertNotNull(string5);
      assertEquals(";#dk}5", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("_%p4.842,rp{");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replacePattern("...", "...", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((double[]) null, 'a', 1311, (-2286));
      assertNull(string2);
      
      String string3 = StringUtils.center((String) null, 1311, 'C');
      assertNull(string3);
      
      int int0 = StringUtils.countMatches("", (CharSequence) null);
      assertEquals(0, int0);
      
      String string4 = StringUtils.join((int[]) null, '<');
      assertNull(string4);
      
      String string5 = StringUtils.removePattern("", "...");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.replacePattern("...", "", "");
      assertNotNull(string6);
      assertEquals("...", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1926;
      shortArray0[2] = (short)464;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)561;
      shortArray0[6] = (short)0;
      String string7 = StringUtils.join(shortArray0, '@');
      assertEquals(7, shortArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new short[] {(short)0, (short)1926, (short)464, (short)0, (short)0, (short)561, (short)0}, shortArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "0@1926@464@0@0@561@0", (CharSequence) null, (-2369));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.reverse("Z4");
      assertNotNull(string0);
      assertEquals("4Z", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 379L;
      longArray0[1] = (-1448L);
      longArray0[2] = (-595L);
      longArray0[3] = 1L;
      longArray0[4] = (-614L);
      longArray0[5] = 312L;
      longArray0[6] = (-1L);
      longArray0[7] = (-531L);
      String string1 = StringUtils.join(longArray0, 'f');
      assertEquals(8, longArray0.length);
      assertNotNull(string1);
      assertEquals("379f-1448f-595f1f-614f312f-1f-531", string1);
      assertArrayEquals(new long[] {379L, (-1448L), (-595L), 1L, (-614L), 312L, (-1L), (-531L)}, longArray0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Z4", "Z4");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Z4", 0, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((int[]) null, 'f');
      assertNull(string2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(0));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "4Z");
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f', 'f'}, charArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Bt*gmiy+dfeN>4", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Bt*gmiy+dfeN>4");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'i';
      charArray0[2] = '[';
      charArray0[3] = 'a';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Bt*gmiy+dfeN>4", charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'{', 'i', '[', 'a'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase("*cu!EuoFw[<kz>z", "S");
      assertNotNull(string1);
      assertEquals("*cu!EuoFw[<kz>z", string1);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String[] stringArray2 = Locale.getISOLanguages();
      assertEquals(188, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string3 = StringUtils.stripStart("*cu!EuoFw[<kz>z", "lnwj7DL5Xu`l>");
      assertNotNull(string3);
      assertEquals("*cu!EuoFw[<kz>z", string3);
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.endsWith("", "Bt*gmiy+dfeN>4");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String[] stringArray3 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray3);
      
      String string5 = StringUtils.removeStart("4&YgA@xD9=fA? !2[7", (String) null);
      assertNotNull(string5);
      assertEquals("4&YgA@xD9=fA? !2[7", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = StringUtils.removePattern("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("VA!qI(3w;W|WM", "");
      assertNotNull(string2);
      assertEquals("VA!qI(3w;W|WM", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.swapCase("VA!qI(3w;W|WM");
      assertNotNull(string3);
      assertEquals("va!Qi(3W;w|wm", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("va!Qi(3W;w|wm", (-2865));
      assertNotNull(string4);
      assertEquals("va!Qi(3W;w|wm", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBetween("", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1459;
      String string6 = StringUtils.join(shortArray0, 'b', 3075, 0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short)1459}, shortArray0);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("?M&O+n8[K+[", "?M&O+n8[K+[", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("?M&O+n8[K+[", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "?M&O+n8[K+[", (CharSequence) "?M&O+n8[K+[");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("?M&O+n8[K+[", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("", "a0/{QZ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.center(", Length: 0", 0);
      assertNotNull(string1);
      assertEquals(", Length: 0", string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)114;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'i', (-4654), (-694));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4654
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.replaceChars((String) null, "", "");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1));
      assertNull(string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'j', (-1), (-2392));
      assertEquals(0, intArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string3 = StringUtils.left((String) null, (-2392));
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.ArrayUtils", (String) null);
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.stripEnd("Minimum abbreviation width is 4", "G\"m#qp/$t+$|'FL");
      assertNotNull(string5);
      assertEquals("Minimum abbreviation width is 4", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int3 = StringUtils.indexOf(charSequenceArray0[3], (-1161), (-1));
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      String string6 = "\\u000";
      String string7 = StringUtils.chomp((String) null, string6);
      assertNull(string7);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.split("G\"m#qp/$t+$|'FL", "org.apache.commons.lang3.ArrayUtils");
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.substringBetween("q6", "Tn~f(j?lM4swA]e", "R9:_[vYNRcs15=KZYH");
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null, "Threshold must not be negative");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Threshold must not be negative");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)5;
      String string2 = StringUtils.join(byteArray0, '_', 127, (int) (byte)117);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new byte[] {(byte)15, (byte)57, (byte)97, (byte)117, (byte)64, (byte)5}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string1 = StringUtils.removePattern("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      
      boolean boolean0 = treeSet0.add(charBuffer0);
      assertTrue(boolean0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(treeSet0.contains(charBuffer0));
      
      NavigableSet<CharBuffer> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertEquals(1, navigableSet0.size());
      assertFalse(navigableSet0.isEmpty());
      assertTrue(treeSet0.contains(charBuffer0));
      assertTrue(navigableSet0.contains(charBuffer0));
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertNotNull(charBuffer1);
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer1, charBuffer0);
      
      boolean boolean1 = treeSet0.add(charBuffer1);
      assertFalse(boolean1);
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(treeSet0.contains(charBuffer0));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charBuffer1, charBuffer0);
      
      String string2 = StringUtils.join(iterator0, "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(treeSet0.contains(charBuffer0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.right((String) null, 0);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) navigableSet0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) navigableSet0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '5', (-3333), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3333
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.rightPad("/X},8", (-1474), '{');
      assertNotNull(string0);
      assertEquals("/X},8", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("/X},8", "/X},8");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("", (-1474), '/');
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", (-1474), '{');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("", '/', '5');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "GYaH  {e@15~{r2");
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[3] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[4] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string3 = StringUtils.join(objectArray0, ":r_1BpR", (-1), (-1));
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string4 = StringUtils.uncapitalize(";");
      assertNotNull(string4);
      assertEquals(";", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.lowerCase("T2zP");
      assertNotNull(string5);
      assertEquals("t2zp", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.trimToNull("T2zP");
      assertNotNull(string6);
      assertEquals("T2zP", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=\"Of~h,jrqU@$", ",#dJ$yB8o", 90);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ",#dJ$yB8o", (CharSequence) "=\"Of~h,jrqU@$", 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.replaceOnce((String) null, "", "<Wl,Hba' J+.r1%L|bp");
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("<Wl,Hba' J+.r1%L|bp", ">=; K0#hq", "");
      assertNotNull(string2);
      assertEquals("<Wl,Hba'J+.r1%L|bp", string2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.repeat('+', 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 778);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+', '+'}, charArray0);
      assertFalse(int1 == int0);
      
      String[] stringArray2 = StringUtils.split("", "S_]v:{I", 0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-3684));
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((long[]) null, '6', 0, (-3684));
      assertNull(string3);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) '6';
      doubleArray0[2] = (double) (-3684);
      doubleArray0[3] = (double) (-3684);
      doubleArray0[4] = (double) '6';
      doubleArray0[5] = (double) (-3684);
      doubleArray0[6] = 641.7168;
      doubleArray0[7] = (double) (-3684);
      doubleArray0[8] = (double) '6';
      String string4 = StringUtils.join(doubleArray0, '.', 1005, 0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new double[] {54.0, 54.0, (-3684.0), (-3684.0), 54.0, (-3684.0), 641.7168, (-3684.0), 54.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)3;
      String string5 = StringUtils.join(byteArray0, '.', (int) (byte)0, 0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte)0, (byte) (-92), (byte)10, (byte) (-89), (byte)6, (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Arguments cannot both be null";
      objectArray0[2] = (Object) "Arguments cannot both be null";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "Arguments cannot both be null";
      objectArray0[5] = (Object) "Arguments cannot both be null";
      objectArray0[6] = (Object) "Arguments cannot both be null";
      objectArray0[7] = (Object) "Arguments cannot both be null";
      String string1 = StringUtils.join(objectArray0, "Arguments cannot both be null", 1186, 1186);
      assertEquals(8, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Arguments cannot both be null", (CharSequence) "");
      assertEquals(29, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = "";
      String string2 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "", (String) null, 122);
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("", "]VDJ@EHV<kGavvs=");
      assertNotNull(string3);
      assertEquals("]VDJ@EHV<kGavvs=", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "]VDJ@EHV<kGavvs=", (-1485));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("XWHr&wb^iL'$J~/\"r3;", (-1485));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0", ", Length: 0", (-1140));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "\\u00";
      String[] stringArray1 = StringUtils.substringsBetween(string0, ", Length: 0", "\r");
      assertNull(stringArray1);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStartIgnoreCase("(?: s|[s&&[^ ]])s*", "");
      assertNotNull(string2);
      assertEquals("(?: s|[s&&[^ ]])s*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.endsWith(string0, string0);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      String string3 = "\\u00";
      String string4 = StringUtils.substringBeforeLast("\r", string3);
      assertNotNull(string4);
      assertEquals("\r", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("\r", "(?: s|[s&&[^ ]])s*");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.replaceOnce(string3, "", "\"AHCf+r,");
      assertNotNull(string5);
      assertEquals("\\u00", string5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "(?: s|[s&&[^ ]])s*");
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      int int0 = 0;
      String string1 = StringUtils.center("Minimum abbreviation width with offset is 7", 0);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "Minimum abbreviation width with offset is 7");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("]_,Mc?mwu!30rt", (-128), 'm');
      assertNotNull(string1);
      assertEquals("]_,Mc?mwu!30rt", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.chomp("E7yJ0aF-.n", "uMP{.Q");
      assertNotNull(string0);
      assertEquals("E7yJ0aF-.n", string0);
      
      charSequenceArray0[0] = (CharSequence) "E7yJ0aF-.n";
      String string1 = StringUtils.substringBeforeLast("E7yJ0aF-.n", "");
      assertNotNull(string1);
      assertEquals("E7yJ0aF-.n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "E7yJ0aF-.n";
      String string2 = StringUtils.repeat("E7yJ0aF-.n", (-1103));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.defaultString("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.upperCase("E7yJ0aF-.n");
      assertNotNull(string4);
      assertEquals("E7YJ0AF-.N", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "E7YJ0AF-.N";
      String string5 = StringUtils.strip("E7yJ0aF-.n", "E7YJ0AF-.N");
      assertNotNull(string5);
      assertEquals("yJ0aF-.n", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) "yJ0aF-.n";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string6 = StringUtils.difference("", "E7yJ0aF-.n");
      assertNotNull(string6);
      assertEquals("E7yJ0aF-.n", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.stripToNull("E7yJ0aF-.n");
      assertNotNull(string7);
      assertEquals("E7yJ0aF-.n", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.leftPad("E7yJ0aF-.n", 1774, 'B');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.center("", (-1103));
      assertNotNull(string9);
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = StringUtils.replaceEachRepeatedly("The String must not be empty", (String[]) null, (String[]) null);
      assertNotNull(string10);
      assertEquals("The String must not be empty", string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, (-1341));
      assertNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1647);
      shortArray0[2] = (short) (-1595);
      shortArray0[3] = (short) (-961);
      shortArray0[4] = (short)813;
      shortArray0[5] = (short)320;
      shortArray0[6] = (short) (-1337);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '|', (-2535), (int) (short) (-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2535
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1498.44F);
      floatArray0[1] = (-1478.2F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 900.636F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-107.47144F);
      String string0 = StringUtils.join(floatArray0, 'g', (-1), (-1));
      assertEquals(7, floatArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {(-1498.44F), (-1478.2F), (-1.0F), 900.636F, (-1.0F), 0.0F, (-107.47144F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.repeat("Q/", "...", (-2025));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("Q/", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertEquals("Q/", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isEmpty("Q/");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceChars("{9VJRo", 't', 't');
      assertNotNull(string2);
      assertEquals("{9VJRo", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring("...", (-2025), (-2025));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ArrayUtils"));
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ArrayUtils"));
      
      String string4 = StringUtils.join(iterator0, "...");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ArrayUtils"));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.join(iterator0, '|');
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ArrayUtils"));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "{9VJRo");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "...", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "', is neither of type Map.Entry nor an Array");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.reverseDelimited("{9VJRo", '|');
      assertNotNull(string6);
      assertEquals("{9VJRo", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      
      String string7 = StringUtils.join(iterator0, 'b');
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string7));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.left("", 0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = StringUtils.replacePattern("...", "The character must not be null", "...");
      assertNotNull(string9);
      assertEquals("...", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      
      boolean boolean3 = StringUtils.isNumeric("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-781.5742F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1336.123F);
      floatArray0[3] = 3007.0F;
      floatArray0[4] = 0.0F;
      String string0 = StringUtils.join(floatArray0, ':');
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("-781.5742:0.0:-1336.123:3007.0:0.0", string0);
      assertArrayEquals(new float[] {(-781.5742F), 0.0F, (-1336.123F), 3007.0F, 0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.replaceChars("", ':', ':');
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviateMiddle("PA:5", "", 3616);
      assertNotNull(string2);
      assertEquals("PA:5", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 511);
      assertNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("3ycQK<>}[", 511);
      assertNotNull(string0);
      assertEquals("3ycQK<>}[", string0);
      
      String string1 = StringUtils.leftPad("3ycQK<>}[", (-1), "3ycQK<>}[");
      assertNotNull(string1);
      assertEquals("3ycQK<>}[", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3ycQK<>}[", "3ycQK<>}[");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'w');
      assertNull(stringArray1);
      
      String string2 = StringUtils.substring("3ycQK<>}[", (-1));
      assertNotNull(string2);
      assertEquals("[", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'w';
      intArray0[1] = 65;
      intArray0[2] = 511;
      intArray0[3] = 511;
      intArray0[4] = 511;
      intArray0[5] = 511;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'P', 122, 511);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '6');
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 0);
      assertNull(stringArray0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains('6'));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean1 = treeSet0.add(integer0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains(0));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        treeSet0.tailSet((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.trimToNull("\"p");
      assertNotNull(string0);
      assertEquals("\"p", string0);
      
      String string1 = StringUtils.stripEnd("`/AZ`]::f}", "");
      assertNotNull(string1);
      assertEquals("`/AZ`]::f}", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("`/AZ`]::f}", '\\', '-');
      assertNotNull(string2);
      assertEquals("`/AZ`]::f}", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "`/AZ`]::f}", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`/AZ`]::f}");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replacePattern("", "\"p", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringBefore("e3*S", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.defaultString("e3*S", "\n");
      assertNotNull(string5);
      assertEquals("e3*S", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringBetween("Minimum abbreviation width is 4", "", "=75lbtaF=mCW5:");
      assertNull(string6);
      
      String string7 = StringUtils.replace("", "", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean1 = StringUtils.isAlpha("=75lbtaF=mCW5:");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWith("Minimum abbreviation width is 4", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("`/AZ`]::f}", "p{InCombiningDiacriticalMarks}+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string8 = StringUtils.chop("\n");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      
      String string9 = StringUtils.replace("", "#~XM|L", "Minimum abbreviation width is 4", (-1));
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      
      String string10 = StringUtils.leftPad("=75lbtaF=mCW5:", (-1), "\n");
      assertNotNull(string10);
      assertEquals("=75lbtaF=mCW5:", string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      
      String string11 = StringUtils.appendIfMissing("\"p", (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string11);
      assertEquals("\"p", string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-739);
      shortArray0[2] = (short)402;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)8192;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\\', (int) (short)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripEnd("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeEndIgnoreCase("ks_0U>dM@a!Wms", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[2], charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[2], 0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.leftPad("ks_0U>dM@a!Wms", 13);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("ks_0U>dM@a!Wms", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.remaining());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) charBuffer0);
      assertEquals((-1), int0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.remaining());
      
      String string6 = StringUtils.leftPad("ma%JM>V[9AcMw(P", 13);
      assertNotNull(string6);
      assertEquals("ma%JM>V[9AcMw(P", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.uncapitalize("");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "ma%JM>V[9AcMw(P", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 13;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      String string8 = StringUtils.join(intArray0, 'R', (-1), (-1));
      assertEquals(6, intArray0.length);
      assertNotNull(string8);
      assertEquals("", string8);
      assertArrayEquals(new int[] {0, 13, (-1), 0, (-1), (-1)}, intArray0);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 0, 2527);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Zo{?|l7%Fo*", "", "org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("Zo{?|l7%Fo*", string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, '?');
      assertEquals(0, intArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(0));
      
      boolean boolean0 = hashSet0.add("...");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(0));
      assertTrue(hashSet0.contains("..."));
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(0));
      assertTrue(hashSet0.contains("..."));
      
      String string3 = StringUtils.join(iterator0, "pu'=elex)er!WK^VQ#H");
      assertNotNull(string3);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("pu'=elex)er!WK^VQ#H"));
      assertTrue(hashSet0.contains("..."));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "...", 0, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[0];
      String string4 = StringUtils.join(shortArray0, ';', 0, (-1));
      assertEquals(0, shortArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.leftPad("Zo{?|l7%Fo*", (-1), ",eE}PW!zd!D5sz8dyd");
      assertNotNull(string5);
      assertEquals("Zo{?|l7%Fo*", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.remove("(", '?');
      assertNotNull(string6);
      assertEquals("(", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("q@q6H*Y 7!azk-R?,", "*{Tz_nPT``/DuX:a*J");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "+{O+.;mv Z";
      String string1 = StringUtils.leftPad("+{O+.;mv Z", 506);
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                +{O+.;mv Z", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence{O+.;mv Z", (-193));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 506;
      char char0 = '|';
      String string2 = StringUtils.join(floatArray0, '|');
      assertEquals(1, floatArray0.length);
      assertNotNull(string2);
      assertEquals("506.0", string2);
      assertArrayEquals(new float[] {506.0F}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("506.0", "', has a length less than 2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNotEmpty("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                +{O+.;mv Z");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char char1 = 'n';
      String string3 = StringUtils.rightPad("<[5,_Tl`~12h41Y8K_A", 0, 'n');
      assertNotNull(string3);
      assertEquals("<[5,_Tl`~12h41Y8K_A", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphaSpace("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                +{O+.;mv Z");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.defaultString("{kNM5-");
      assertNotNull(string4);
      assertEquals("{kNM5-", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.leftPad("The character must not be null", 2567, "<[5,_Tl`~12h41Y8K_A");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.stripStart(string5, "', has a length less than 2");
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isAlpha("{kNM5-");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern(string5, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.stripStart("", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substringBetween("w5j", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween((String) null, ",PTV)mX5I4tOfpa", "h9=8-");
      assertNull(string1);
      
      String string2 = StringUtils.center("", 477, 'X');
      assertNotNull(string2);
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string2);
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = null;
      String string3 = StringUtils.join((char[]) null, 'X', (-1872), 0);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
      assertFalse(boolean0);
      
      String string4 = StringUtils.lowerCase("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.capitalize("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.rightPad("", 0, '*');
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.substringAfter((String) null, "b!{>45Gye=hzjC");
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat('A', (-1872));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 572);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", 'q');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.rightPad("0Vc'r{=/'+", 853, "0Vc'r{=/'+");
      assertNotNull(string2);
      assertEquals("0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("\"_4O)V{A~Nf");
      assertNotNull(string3);
      assertEquals("\"_4O)V{A~Nf", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.mid("", 0, 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.countMatches((CharSequence) null, "0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc'r{=/'+0Vc");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.join((short[]) null, 'q');
      assertNull(string5);
      
      String[] stringArray2 = StringUtils.split("");
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.overlay((String) null, (String) null, (-31), 572);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "pwZ1\"x(*q#$(4", "pwZ1\"x(*q#$(4");
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("pwZ1\"x(*q#$(4", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '@');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "pwZ1\"x(*q#$(4");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.difference("", "L@ukKf{yYSu&2m4[$");
      assertNotNull(string2);
      assertEquals("L@ukKf{yYSu&2m4[$", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chomp("pwZ1\"x(*q#$(4", "Y8XF)6p7+5C{(");
      assertNotNull(string3);
      assertEquals("pwZ1\"x(*q#$(4", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.reverse("K[koXiMT+#dC-");
      assertNotNull(string4);
      assertEquals("-Cd#+TMiXok[K", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.leftPad("?x)8HJOY", (-2429));
      assertNotNull(string5);
      assertEquals("?x)8HJOY", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.split("DeJC.c{?,[U", "");
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.chomp("Arguments cannot both be null", "");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Arguments cannot both be null", 217);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeEnd(":@", "");
      assertNotNull(string1);
      assertEquals(":@", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("Arguments cannot both be null", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)847;
      shortArray0[1] = (short)1563;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1669;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short)1833;
      shortArray0[7] = (short)97;
      shortArray0[8] = (short)2127;
      String string0 = StringUtils.join(shortArray0, '');
      assertEquals(9, shortArray0.length);
      assertNotNull(string0);
      assertEquals("8471563001669101833972127", string0);
      assertArrayEquals(new short[] {(short)847, (short)1563, (short)0, (short)0, (short)1669, (short)10, (short)1833, (short)97, (short)2127}, shortArray0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      String string1 = StringUtils.join(iterator0, "8471563001669101833972127");
      assertNotNull(string1);
      assertEquals("IGNORE_EXTENDED_RANGES8471563001669101833972127REJECT_EXTENDED_RANGES", string1);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "IGNORE_EXTENDED_RANGES8471563001669101833972127REJECT_EXTENDED_RANGES", (-2188), (int) (short)1669);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.defaultString("<L?,,2z>z;`e^hb;~=0");
      assertNotNull(string0);
      assertEquals("<L?,,2z>z;`e^hb;~=0", string0);
      
      String string1 = "";
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '.');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '\"';
      String string0 = StringUtils.join(charArray0, '.');
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("........\"", string0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.repeat('\'', 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("0Yr)~wY<??y=", 0);
      assertNotNull(string1);
      assertEquals("0Yr)~wY<??y=", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.substring((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("d7py/(;k!}m~\"3E@iQ9", 0);
      assertNotNull(string2);
      assertEquals("d7py/(;k!}m~\"3E@iQ9", string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string2));
      
      boolean boolean0 = arrayList0.add("d7py/(;k!}m~\"3E@iQ9");
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(string2));
      assertFalse(arrayList0.contains(""));
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(string2));
      assertFalse(arrayList0.contains(""));
      
      String string3 = StringUtils.join(iterator0, "xI<?auQExlW(");
      assertNotNull(string3);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("d7py/(;k!}m~\"3E@iQ9"));
      assertFalse(arrayList0.contains("xI<?auQExlW("));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "d7py/(;k!}m~\"3E@iQ9", (CharSequence) "d7py/(;k!}m~\"3E@iQ9");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring("'AcR1P5KU`rL(", 0);
      assertNotNull(string4);
      assertEquals("'AcR1P5KU`rL(", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "d7py/(;k!}m~\"3E@iQ9", (CharSequence) "d7py/(;k!}m~\"3E@iQ9");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.substringBeforeLast("R<qX%PyE", "R<qX%PyE");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.stripAccents("&0X}n");
      assertNotNull(string0);
      assertEquals("&0X}n", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "&0X}n", (CharSequence) "&0X}n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("&N|zeu83M");
      assertNotNull(string1);
      assertEquals("&N|zeu83M", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("", "&N|zeu83M");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "&0X}n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.remove("A@>,v", "A@>,v");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "A@>,v", 32);
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("Threshold must not be negative", "", 32);
      assertNotNull(string1);
      assertEquals("Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "A@>,v", 1633);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.replaceChars("c~", ',', ',');
      assertNotNull(string0);
      assertEquals("c~", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "c~";
      charSequenceArray0[1] = (CharSequence) "c~";
      charSequenceArray0[2] = (CharSequence) "c~";
      charSequenceArray0[3] = (CharSequence) "c~";
      charSequenceArray0[4] = (CharSequence) "c~";
      String string1 = StringUtils.removeEnd("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("c~", "c~", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("c~", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i/";
      String string0 = StringUtils.stripEnd("i/", (String) null);
      assertNotNull(string0);
      assertEquals("i/", string0);
      
      charSequenceArray0[1] = (CharSequence) "i/";
      charSequenceArray0[2] = (CharSequence) "i/";
      String string1 = StringUtils.appendIfMissing("i/", "i/", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("i/", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[2], charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      String string2 = StringUtils.join(doubleArray0, 'd', (-900), (-900));
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-900)));
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains((-900)));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "i/");
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains((-900)));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, " is not in the range '0' - '9'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("", 'R');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "The Character must not be null", 0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = StringUtils.upperCase("Index: ", locale1);
      assertNotNull(string1);
      assertEquals("INDEX: ", string1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      boolean boolean0 = StringUtils.startsWith("INDEX: ", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("', is neither of type Map.Entry nor an Array", 0, "AfO");
      assertNotNull(string2);
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("[LL@:ROL/iw@xf'\u0004n", '\"');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "Minimum abbreviation width is 4";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is 4", "Minimum abbreviation width is 4", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is 4", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      assertEquals("[LL@:ROL/iw@xf'\u0004n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumericSpace("Minimum abbreviation width is 4");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Minimum abbreviation width is 4", "Minimum abbreviation width is 4");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 10;
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is 4", 10);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("[LL@:ROL/iw@xf'\u0004n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.removeEndIgnoreCase("[LL@:ROL/iw@xf'\u0004n", "(?: s|[s&&[^ ]])s*");
      assertNotNull(string3);
      assertEquals("[LL@:ROL/iw@xf'\u0004n", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      char char0 = '8';
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("[LL@:ROL/iw@xf'\u0004n", '8');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "(?: s|[s&&[^ ]])s*", (CharSequence) "Minimum abbreviation width is 4", 10);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "[LL@:ROL/iw@xf'\u0004n", (CharSequence) "Minimum abbreviation width is 4", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("xd}d,,4,mz_");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToEmpty("%BslH5}%");
      assertNotNull(string0);
      assertEquals("%BslH5}%", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '0';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "xd}d,,4,mz_", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'g', '0'}, charArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("%BslH5}%");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.ordinalIndexOf("xd}d,,4,mz_", "%BslH5}%", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithAny("xd}d,,4,mz_", stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.reverse("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNumericSpace("%BslH5}%");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringAfterLast("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int2 = StringUtils.countMatches("", "");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int3 = StringUtils.length("");
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = StringUtils.ordinalIndexOf("", "%BslH5}%", 122);
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("&}A#58Bxc}", " ");
      assertNotNull(string0);
      assertEquals("&}A#58Bxc}", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substring("The character must not be null", 0);
      assertNotNull(string0);
      assertEquals("The character must not be null", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("The character must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid(" ", 0, (-380));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.stripToNull("Cannot store ");
      assertNotNull(string3);
      assertEquals("Cannot store", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Cannot store";
      charSequenceArray0[1] = (CharSequence) "The character must not be null";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The character must not be null";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Cannot store";
      charSequenceArray0[7] = (CharSequence) "Cannot store ";
      charSequenceArray0[8] = (CharSequence) " ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.stripToNull("Cannot store ");
      assertNotNull(string4);
      assertEquals("Cannot store", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.repeat('R', 1914);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty(string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removePattern(string2, "...");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "";
      CharSequence[] charSequenceArray0 = null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = (-616);
      int int2 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-616), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(arrayDeque0);
      assertNotNull(linkedList0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '9';
      charArray0[2] = ';';
      charArray0[3] = 'Z';
      charArray0[4] = 'h';
      charArray0[5] = '1';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-407), (-407));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0", ", Length: 0", (-1140));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "\\u00";
      String[] stringArray1 = StringUtils.substringsBetween(string0, ", Length: 0", ", Length: 0");
      assertNull(stringArray1);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStartIgnoreCase("(?: s|[s&&[^ ]])s*", "");
      assertNotNull(string2);
      assertEquals("(?: s|[s&&[^ ]])s*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "\\u00";
      String string4 = StringUtils.substringBeforeLast("", string3);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "(?: s|[s&&[^ ]])s*");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceOnce(string3, "y2v8vh9Ec%VqZ'.5BJ2", "\"AHCf+r,");
      assertNotNull(string5);
      assertEquals("\\u00", string5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "(?: s|[s&&[^ ]])s*");
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.remove("Xb%", '\'');
      assertNotNull(string7);
      assertEquals("Xb%", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2235;
      shortArray0[1] = (short)1100;
      String string0 = StringUtils.join(shortArray0, 'H', (int) (short)2235, (int) (short)1100);
      assertEquals(2, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)2235, (short)1100}, shortArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("TEnwO^'Xc", "TEnwO^'Xc");
      assertNotNull(string1);
      assertEquals("TEnwO^'Xc", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("nWQB1YEl3M@}O", "TEnwO^'Xc", (CharSequence[]) null);
      assertNotNull(string3);
      assertEquals("nWQB1YEl3M@}OTEnwO^'Xc", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray0);
      
      String string4 = StringUtils.uncapitalize("Y8ido@t-(W;Ufj");
      assertNotNull(string4);
      assertEquals("y8ido@t-(W;Ufj", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2235;
      floatArray0[1] = (float) (short)1100;
      String string5 = StringUtils.join(floatArray0, 'H', (int) (short)2235, (int) (short)1100);
      assertEquals(2, floatArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new float[] {2235.0F, 1100.0F}, floatArray0, 0.01F);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.rightPad("TEnwO^'Xc", (-1), 'H');
      assertNotNull(string6);
      assertEquals("TEnwO^'Xc", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "q.!4WDa?K5");
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      assertEquals("q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "q.!4WDa?K5";
      charSequenceArray0[1] = (CharSequence) "q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5";
      charSequenceArray0[4] = (CharSequence) "q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5";
      charSequenceArray0[7] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5q.!4WDa?K5", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd("w", "w");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string3 = StringUtils.join(longArray0, 'B', 0, 0);
      assertEquals(1, longArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-64);
      String string0 = StringUtils.join(byteArray0, '5');
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals("69545665-1125057505-905-64", string0);
      assertArrayEquals(new byte[] {(byte)69, (byte)4, (byte)66, (byte) (-112), (byte)0, (byte)7, (byte)0, (byte) (-90), (byte) (-64)}, byteArray0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.remove("", '=');
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.rightPad("The Array must not be null", 554);
      assertNotNull(string3);
      assertEquals("The Array must not be nullstring3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.normalizeSpace("The Array must not be null
      assertNotNull(string4);
      assertEquals("The Array must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(">L=jDB", "}+d");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween(">L=jDB", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("!A<*OAsT E%", (String) null);
      assertNotNull(string2);
      assertEquals("!A<*OAsT E%", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace(">L=jDB");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 65;
      intArray0[1] = (-3313);
      intArray0[2] = 0;
      String string3 = StringUtils.join(intArray0, 'd');
      assertEquals(3, intArray0.length);
      assertNotNull(string3);
      assertEquals("65d-3313d0", string3);
      assertArrayEquals(new int[] {65, (-3313), 0}, intArray0);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 128;
      intArray0[1] = (-1781);
      intArray0[2] = 32;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-60);
      intArray0[6] = 0;
      String string0 = StringUtils.join(intArray0, 'g');
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
      assertEquals("128g-1781g32g0g0g-60g0", string0);
      assertArrayEquals(new int[] {128, (-1781), 32, 0, 0, (-60), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.left("The Character must not be null", 122);
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
      
      String string1 = StringUtils.left("", 122);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("", "The Character must not be null", "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((long[]) null, '4');
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) '4';
      doubleArray0[4] = (double) '4';
      doubleArray0[5] = (double) '4';
      doubleArray0[6] = (double) 122;
      String string4 = StringUtils.join(doubleArray0, '=', 4308, (-2693));
      assertEquals(7, doubleArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new double[] {52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 122.0}, doubleArray0, 0.01);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      boolean boolean0 = StringUtils.startsWith("Threshold must not be negative", "Threshold must not be negative");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Minimum abbreviation width is 4", (-1617), (-1617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-582.2F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 944.0361F;
      String string0 = StringUtils.join(floatArray0, '\\', (-1507), (-1616));
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-582.2F), 1.0F, 944.0361F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("$Fmg#M,r2R}co`O", " is not in the range '0' - '9'");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.stripEnd("jz*8T@ZJ<gKLD.", "org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("jz*8T@ZJ<gKLD", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "jz*8T@ZJ<gKLD", 64, 5);
      assertEquals(5, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'f';
      charArray0[2] = 'w';
      charArray0[3] = 'V';
      charArray0[4] = 'b';
      int int1 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {' ', 'f', 'w', 'V', 'b'}, charArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.mid("qz", (-133), (-133));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("qz", "", (-133));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)256;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'p', 870, (int) (short)256);
      assertEquals(3, shortArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)256, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("j@MdZZiCN;4UiBZ<r1k", " q");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(" q");
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.join(shortArray0, '>');
      assertEquals(3, shortArray0.length);
      assertNotNull(string2);
      assertEquals("256>0>0", string2);
      assertArrayEquals(new short[] {(short)256, (short)0, (short)0}, shortArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("qz", "4?9kY*wi&8]n#");
      assertNotNull(string3);
      assertEquals("qz", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.startsWith("256>0>0", "qz");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.split("`@u<3C4>*!o)", "4?9kY*wi&8]n#", 870);
      assertEquals(3, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2087);
      shortArray0[3] = (short)8192;
      shortArray0[4] = (short) (-3737);
      shortArray0[5] = (short)8192;
      shortArray0[6] = (short)3;
      String string1 = StringUtils.join(shortArray0, '9', (int) (short)8192, (int) (short)8192);
      assertEquals(7, shortArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-2087), (short)8192, (short) (-3737), (short)8192, (short)3}, shortArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.startsWith("\n", "\n");
      assertTrue(boolean0);
      
      char[] charArray0 = null;
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\n", (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = " ";
      int int0 = 0;
      String string2 = StringUtils.repeat(" ", "\n", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "\r";
      int int1 = 0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string1);
      assertEquals("\u97D3\u56FD\u8A9E", string1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterable<?>) set0, "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(locale0, locale1);
      
      String string3 = StringUtils.substringBefore("h?f-{!i2fynCc", (String) null);
      assertNotNull(string3);
      assertEquals("h?f-{!i2fynCc", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 0);
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceChars("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "h?f-{!i2fynCc");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.right("h?f-{!i2fynCc", 0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.ArrayUtils", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'b');
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.upperCase((String) null, locale0);
      assertNull(string4);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 1, (-4338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "0@?Kk,^%9iL T~OV";
      charSequenceArray0[1] = (CharSequence) "0@?Kk,^%9iL T~OV";
      String string0 = StringUtils.prependIfMissing("0@?Kk,^%9iL T~OV", "0@?Kk,^%9iL T~OV", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("0@?Kk,^%9iL T~OV", string0);
      
      String string1 = StringUtils.mid("0@?Kk,^%9iL T~OV", 343, 343);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", 343, '@');
      assertNotNull(string2);
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.mid("~n'?E{.UBX\"stV.S9.Q", 343, 343);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", (CharSequence) "0@?Kk,^%9iL T~OV");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0@?Kk,^%9iL T~OV");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("", '@');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '@', (-1), (-1));
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.overlay("", "hmAHSPg\"", 2, (-2711));
      assertNotNull(string5);
      assertEquals("hmAHSPg\"", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.swapCase("^'6T=");
      assertNotNull(string0);
      assertEquals("^'6t=", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "^'6T=";
      charSequenceArray0[1] = (CharSequence) "^'6t=";
      charSequenceArray0[2] = (CharSequence) "^'6t=";
      String string1 = StringUtils.trim("O&Ph!gMGe&IJ}");
      assertNotNull(string1);
      assertEquals("O&Ph!gMGe&IJ}", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "O&Ph!gMGe&IJ}";
      charSequenceArray0[4] = (CharSequence) "^'6t=";
      charSequenceArray0[5] = (CharSequence) "^'6T=";
      int int0 = StringUtils.indexOfAny((CharSequence) "^'6t=", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '1';
      charArray0[2] = 'S';
      charArray0[3] = ' ';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'F', '1', 'S', ' '}, charArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'F', '1', 'S', ' '}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.substringAfter("MOK~QL>+2qD'*SX;3", "y@W5c");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.swapCase("{Wz|m~ :2");
      assertNotNull(string0);
      assertEquals("{wZ|M~ :2", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "{Wz|m~ :2";
      boolean boolean0 = StringUtils.endsWithAny("{wZ|M~ :2", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", "', has a length less than 2", (-1020));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = "`6K>mYhoJ(l>";
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "', has a length less than 2";
      stringArray1[1] = "Search and Replace array lengths don't match: ";
      stringArray1[2] = "', has a length less than 2";
      stringArray1[3] = "Search and Replace array lengths don't match: ";
      stringArray1[4] = "Search and Replace array lengths don't match: ";
      stringArray1[5] = "', has a length less than 2";
      stringArray1[6] = "`6K>mYhoJ(l>";
      stringArray1[7] = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("`6K>mYhoJ(l>", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "Rr+_ =}%^BZ#58FX7";
      String string1 = StringUtils.stripToNull("Rr+_ =}%^BZ#58FX7");
      assertNotNull(string1);
      assertEquals("Rr+_ =}%^BZ#58FX7", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "Search and Replace array lengths don't match: ";
      String string3 = StringUtils.strip("Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Rr+_ =}%^BZ#58FX7";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Rr+_ =}%^BZ#58FX7";
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      boolean boolean0 = StringUtils.endsWithAny("Search and Replace array lengths don't match:", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = "Strings must not be null";
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray1[1] = (CharSequence) "Rr+_ =}%^BZ#58FX7";
      charSequenceArray1[2] = (CharSequence) "Strings must not be null";
      charSequenceArray1[3] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray1[4] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray1[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray1[6] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray1[7] = (CharSequence) "Rr+_ =}%^BZ#58FX7";
      charSequenceArray1[8] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string5 = StringUtils.prependIfMissing("Strings must not be null", charSequenceArray0[5], charSequenceArray1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(9, charSequenceArray1.length);
      assertNotNull(string5);
      assertEquals("Strings must not be null", string5);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "Strings must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.trimToNull(":MqFnEST&5)zZH.A");
      assertNotNull(string0);
      assertEquals(":MqFnEST&5)zZH.A", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ":MqFnEST&5)zZH.A";
      stringArray0[1] = ":MqFnEST&5)zZH.A";
      stringArray0[2] = ":MqFnEST&5)zZH.A";
      stringArray0[3] = ":MqFnEST&5)zZH.A";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertEquals(":MqFnEST&5)zZH.A", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("ySPy7U~Yn''t5O", ":MqFnEST&5)zZH.A");
      assertNotNull(string2);
      assertEquals(":MqFnEST&5)zZH.A", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("`mve(", 258, '/');
      assertNotNull(string3);
      assertEquals("//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////`mve(///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("XeI =]y*L", ":MqFnEST&5)zZH.A", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertEquals(":MqFnEST&5)zZH.AXeI =]y*L", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.abbreviate(":MqFnEST&5)zZH.A", 258);
      assertNotNull(string5);
      assertEquals(":MqFnEST&5)zZH.A", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////`mve(///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", (CharSequence) ":MqFnEST&5)zZH.A");
      assertEquals(0, int0);
      
      String string6 = StringUtils.remove("//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////`mve(///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", '/');
      assertNotNull(string6);
      assertEquals("`mve(", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.appendIfMissingIgnoreCase((String) null, "`mve(", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string7);
      
      int int1 = StringUtils.lastIndexOfAny(":MqFnEST&5)zZH.A", stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.remove("ySPy7U~Yn''t5O", "kI2K(oVJddf");
      assertNotNull(string8);
      assertEquals("ySPy7U~Yn''t5O", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace(":MqFnEST&5)zZH.A");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split(":MqFnEST&5)zZH.A");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("aJ$6YEMM#rR5vy", "aJ$6YEMM#rR5vy");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("aJ$6YEMM#rR5vy", "aJ$6YEMM#rR5vy");
      assertTrue(boolean0);
      
      String string0 = StringUtils.prependIfMissing("Jum1%w!Zp", "aJ$6YEMM#rR5vy", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("aJ$6YEMM#rR5vyJum1%w!Zp", string0);
      
      String string1 = StringUtils.lowerCase("aJ$6YEMM#rR5vyJum1%w!Zp");
      assertNotNull(string1);
      assertEquals("aj$6yemm#rr5vyjum1%w!zp", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWithAny("aj$6yemm#rr5vyjum1%w!zp", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "aJ$6YEMM#rR5vyJum1%w!Zp", " is not in the range '0' - '9'");
      assertEquals(0, int0);
      
      String string2 = StringUtils.reverse("aJ$6YEMM#rR5vy");
      assertNotNull(string2);
      assertEquals("yv5Rr#MMEY6$Ja", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("Jum1%w!Zp", 16, "aJ$6YEMM#rR5vy");
      assertNotNull(string3);
      assertEquals("Jum1%w!ZpaJ$6YEM", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "yv5Rr#MMEY6$Ja", "yv5Rr#MMEY6$Ja");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.strip("aJ$6YEMM#rR5vyJum1%w!Zp");
      assertNotNull(string4);
      assertEquals("aJ$6YEMM#rR5vyJum1%w!Zp", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.trimToNull("aJ$6YEMM#rR5vy");
      assertNotNull(string5);
      assertEquals("aJ$6YEMM#rR5vy", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-6005L);
      longArray0[2] = 0L;
      String string1 = StringUtils.join(longArray0, 'v');
      assertEquals(3, longArray0.length);
      assertNotNull(string1);
      assertEquals("-1v-6005v0", string1);
      assertArrayEquals(new long[] {(-1L), (-6005L), 0L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((short[]) null, '=');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", (-1757));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "-1v-6005v0";
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, 'k');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L1R}r&%_[\"BvK\"OV?H", "L1R}r&%_[\"BvK\"OV?H");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.normalizeSpace("&xJRC6nBbonkM]ylDv");
      assertNotNull(string0);
      assertEquals("&xJRC6nBbonkM]ylDv", string0);
      
      String string1 = StringUtils.rightPad("&xJRC6nBbonkM]ylDv", (-361), (String) null);
      assertNotNull(string1);
      assertEquals("&xJRC6nBbonkM]ylDv", string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)16;
      String string2 = StringUtils.join(byteArray0, '>');
      assertEquals(8, byteArray0.length);
      assertNotNull(string2);
      assertEquals("0>111>7>7>12>0>0>16", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)111, (byte)7, (byte)7, (byte)12, (byte)0, (byte)0, (byte)16}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.rightPad("Array and element cannot both be null", 0);
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Array and element cannot both be null", (CharSequence) "Array and element cannot both be null");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd("Array and element cannot both be null", "Array and element cannot both be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("@*;fj s:qv%SDzYF@");
      assertNotNull(string2);
      assertEquals("@*;fj s:qv%sdzyf@", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1505.695483);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3247.56157729);
      String string0 = StringUtils.join(doubleArray0, 'R', 0, 0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new double[] {1.5, (-1505.695483), (-1.0), (-3247.56157729)}, doubleArray0, 0.01);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf("", "", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substring("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 32);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.endsWith("", "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.join(doubleArray0, 'n');
      assertEquals(4, doubleArray0.length);
      assertNotNull(string3);
      assertEquals("1.5n-1505.695483n-1.0n-3247.56157729", string3);
      assertArrayEquals(new double[] {1.5, (-1505.695483), (-1.0), (-3247.56157729)}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "1.5n-1505.695483n-1.0n-3247.56157729");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = StringUtils.leftPad("", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", 'R');
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1.5n-1505.695483n-1.0n-3247.56157729", (CharSequence) "", (-926));
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '`', 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char char0 = '_';
      String string1 = StringUtils.join((Iterable<?>) null, '_');
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      char char1 = ' ';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ' ', (-1), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.countMatches("\n", "\n");
      assertEquals(1, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "\n");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-91.30995176936);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 1;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) 1;
      String string1 = StringUtils.join(longArray0, '6', 1, (-1));
      assertEquals(9, longArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {1L, (-1L), 1L, 1L, 1L, (-1L), (-1L), (-1L), 1L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      
      doubleArray0[7] = 482.0442919;
      String string2 = StringUtils.join(doubleArray0, 'j');
      assertEquals(8, doubleArray0.length);
      assertNotNull(string2);
      assertEquals("-1.0j-91.30995176936j-1.0j1.0j1.0j-1.0j1.0j482.0442919", string2);
      assertArrayEquals(new double[] {(-1.0), (-91.30995176936), (-1.0), 1.0, 1.0, (-1.0), 1.0, 482.0442919}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      String string0 = StringUtils.join(charArray0, 'K', (-881), (-881));
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Index: ", "Index: ", "Index: ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Index: ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Index: ", (String) null, (-32768));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, '2');
      assertEquals(0, shortArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      String string2 = StringUtils.replaceChars("", ", Length: ", "MFMtp,V-bn0R[#9");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("Strings must not be null", (-1), "n't match: ");
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("", (-1), '2');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      String string5 = StringUtils.join(byteArray0, 'X');
      assertEquals(1, byteArray0.length);
      assertNotNull(string5);
      assertEquals("127", string5);
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("p{InCombiningDiacriticalMarks}+", "", Integer.MAX_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      String string3 = StringUtils.join(iterator0, '.');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("<;C,6A2ZtoTV:OV");
      assertNotNull(string0);
      assertEquals("<;C,6A2ZtoTV:OV", string0);
      
      boolean boolean0 = StringUtils.isBlank("<;C,6A2ZtoTV:OV");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("<;C,6A2ZtoTV:OV", 48, 'y');
      assertNotNull(string1);
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy<;C,6A2ZtoTV:OV", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isEmpty("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy<;C,6A2ZtoTV:OV");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.uncapitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.strip("<;C,6A2ZtoTV:OV");
      assertNotNull(string3);
      assertEquals("<;C,6A2ZtoTV:OV", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substring("%YD4+L#Xq2 )BBv\"EN<", 48, 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringBetween("org.apache.commons.lang3.ArrayUtils", "", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.stripStart("5l", "5l");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWith("", "5l");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1910;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 480;
      intArray0[5] = (-2025);
      intArray0[6] = 249;
      intArray0[7] = 1431;
      String string2 = StringUtils.join(intArray0, '7', (-2025), (-2187));
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {1910, 0, 0, 0, 480, (-2025), 249, 1431}, intArray0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.leftPad("-_J,$'O1,;C#G,DG9,", 32);
      assertNotNull(string0);
      assertEquals("              -_J,$'O1,;C#G,DG9,", string0);
      
      int int0 = StringUtils.countMatches("             -_J,$'O1,;C#G,DG9,", "-_J,$'O1,;C#G,DG9,");
      assertEquals(1, int0);
      
      String string1 = StringUtils.removeStart("Minimum abbreviation width is 4", "-_J,$'O1,;C#G,DG9,");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is 4", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("Minimum abbreviation width is 4", "Minimum abbreviation width is 4", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is 4", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("Minimum abbreviation width is 4");
      assertNotNull(string3);
      assertEquals("minimum abbreviation width is 4", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("F`]K*jv 7;fL|-6Vo2", "minimum abbreviation width is 4", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      String string4 = StringUtils.join(intArray0, 'K');
      assertEquals(1, intArray0.length);
      assertNotNull(string4);
      assertEquals("32", string4);
      assertArrayEquals(new int[] {32}, intArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.repeat("9Zx%Hwte*i", "Minimum abbreviation width is 4", (-1707));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAllLowerCase("32");
      assertFalse(boolean0);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
      assertEquals("F`]K*jv 7;fL|-6Vo2", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.substringBefore("z~9|f|n_a_HG{", "z~9|f|n_a_HG{");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '7');
      assertEquals(0, longArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0, "", 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.leftPad((String) null, 0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.overlay((String) null, "", (-1), 326);
      assertNull(string2);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 1379, 0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.chop("");
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 16);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      //  // Unstable assertion: assertNotNull(stringUtils0);
      //  // Unstable assertion: assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = "\\u0";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      //  // Unstable assertion: assertNotNull(arrayList0);
      //  // Unstable assertion: assertTrue(arrayList0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayList0.size());
      //  // Unstable assertion: assertFalse(arrayList0.contains(""));
      
      boolean boolean0 = arrayList0.add((Object) string1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(1, arrayList0.size());
      //  // Unstable assertion: assertFalse(arrayList0.isEmpty());
      //  // Unstable assertion: assertFalse(arrayList0.contains(""));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Iterable<?>) arrayList0, '');
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals(1, arrayList0.size());
      //  // Unstable assertion: assertFalse(arrayList0.isEmpty());
      //  // Unstable assertion: assertFalse(arrayList0.contains(""));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripEnd("java.lang.String@0000000002", "]");
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) " ", 574);
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      String string4 = StringUtils.LF;
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("\n", string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.appendIfMissing("]", "\n", stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("]\n", string5);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.trimToNull("\n");
      //  // Unstable assertion: assertNull(string6);
      
      String string7 = StringUtils.difference("", string1);
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertEquals("\\u0", string7);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("java.lang.String@0000000002", "\n");
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\n", (CharSequence) " ");
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) string7);
      //  // Unstable assertion: assertFalse(boolean3);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertTrue(boolean3 == boolean2);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.removeStart("ka+(gKvt~`", "ka+(gKvt~`");
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertEquals("", string8);
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      String string1 = StringUtils.repeat("", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("The Array must not be null", '*');
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)0;
      String string1 = StringUtils.join(byteArray0, '*', 64, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)79, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "The Array must not be null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween("", " vs ", "");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "The Array must not be null", charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (int) (byte)0, 1);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.forLanguageTag("_");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string3 = StringUtils.lowerCase("", locale0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = StringUtils.split(string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 127, 127);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("HOzY@`h", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("", "HOzY@`h");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase((CharSequence) null, string0);
      assertFalse(boolean3);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("HOzY@`h");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      String string2 = StringUtils.swapCase("Threshold must not be negative");
      assertNotNull(string2);
      assertEquals("tHRESHOLD MUST NOT BE NEGATIVE", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.removeEnd("MJ6_", "MJ6_");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("ZT9z");
      assertNotNull(string1);
      assertEquals("ZT9z", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "ZT9z";
      stringArray0[3] = "ZT9z";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.repeat("", "ZT9z", (-163));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.prependIfMissing("ZT9z", "", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertEquals("ZT9z", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "ZT9z");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.stripToEmpty("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.right("0X7w;[2;|j", (-163));
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string7 = StringUtils.replace("", "", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      
      String string8 = StringUtils.chomp("", "ZT9z");
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      
      String string9 = StringUtils.leftPad("ZT9z", (-163), "");
      assertNotNull(string9);
      assertEquals("ZT9z", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      
      String string10 = StringUtils.abbreviate("ZT9z", 1632, 1632);
      assertNotNull(string10);
      assertEquals("ZT9z", string10);
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      
      String string11 = StringUtils.join(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string11);
      assertEquals("ZT9zZT9z", string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      String string12 = StringUtils.join(longArray0, '');
      assertEquals(2, longArray0.length);
      assertNotNull(string12);
      assertEquals("-1-1", string12);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string8));
      
      byte[] byteArray0 = new byte[0];
      String string13 = StringUtils.join(byteArray0, 'Z');
      assertEquals(0, byteArray0.length);
      assertNotNull(string13);
      assertEquals("", string13);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string9));
      assertTrue(string13.equals((Object)string5));
      assertTrue(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string4));
      assertTrue(string13.equals((Object)string0));
      assertTrue(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      
      String string14 = StringUtils.rightPad("", 0, "ZT9zZT9z");
      assertNotNull(string14);
      assertEquals("", string14);
      assertTrue(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string10));
      assertTrue(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string4));
      assertTrue(string14.equals((Object)string3));
      assertTrue(string14.equals((Object)string6));
      assertTrue(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string1));
      assertTrue(string14.equals((Object)string8));
      assertTrue(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string12));
      assertTrue(string14.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("io1]U%tk-NNv2A", '@');
      assertNotNull(string0);
      assertEquals("io1]U%tk-NNv2A", string0);
      
      boolean boolean0 = StringUtils.isAlpha("io1]U%tk-NNv2A");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "G~", 2569);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      String string1 = StringUtils.join(charArray0, '@');
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      assertEquals("@", string1);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('@', 2569);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "io1]U%tk-NNv2A", 2569);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("', has a length less than 2", "G~");
      assertNotNull(string3);
      assertEquals("', has a length less than 2", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-265), 1579);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", 1579);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.rightPad("", 0, "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<CharBuffer> priorityQueue1 = new PriorityQueue<CharBuffer>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1665), '\\');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("rD#6", '}');
      assertNotNull(string0);
      assertEquals("rD#6", string0);
      
      String string1 = StringUtils.substring(">We^=(w", (-1218));
      assertNotNull(string1);
      assertEquals(">We^=(w", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase(">We^=(w");
      assertNotNull(string2);
      assertEquals(">wE^=(W", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ">We^=(w";
      charSequenceArray0[1] = (CharSequence) ">wE^=(W";
      charSequenceArray0[2] = (CharSequence) ">We^=(w";
      int int0 = StringUtils.lastIndexOfAny(">wE^=(W", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}'}, charArray0);
      
      String string3 = StringUtils.stripEnd((String) null, "L4pxf");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("rD#6", "", 0);
      assertNotNull(string4);
      assertEquals("rD#6", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.difference((String) null, "rD#6");
      assertNotNull(string5);
      assertEquals("rD#6", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) ">wE^=(W", (CharSequence) "L4pxf");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[0], 0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.replace((String) null, ">We^=(w", ">wE^=(W");
      assertNull(string6);
      
      String string7 = StringUtils.remove("', has a length less than 2", '[');
      assertNotNull(string7);
      assertEquals("', has a length less than 2", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.join((Object[]) charSequenceArray0, '}');
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string8);
      assertEquals(">We^=(w}>wE^=(W}>We^=(w", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.strip("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match:", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match:");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "K6;5!9Ya#%U");
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match:", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("Search and Replace array lengths don't match:", "...");
      assertNotNull(string3);
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "...", (-1));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '`';
      String string4 = StringUtils.join(charArray0, '`', 7, (-2161));
      assertEquals(2, charArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'P', '`'}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.center("', has a length less than 2", (-257));
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "', has a length less than 2", "nes");
      assertEquals(5, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-257);
      String string1 = StringUtils.join(floatArray0, '7');
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      assertEquals("-257.0", string1);
      assertArrayEquals(new float[] {(-257.0F)}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "nes", (CharSequence) "', has a length less than 2");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "', has a length less than 2", 5);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("nes", "-257.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      assertEquals("nes", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString((String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "', has a length less than 2", (CharSequence) "", (-734));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean3 = StringUtils.isWhitespace(" ");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string5);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, 'R');
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("SueWrwqqq48T,", "^Qk0amc", (-1));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "2)Lii$MyE\")vnQM*!c";
      String string1 = "+sh@q<|";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("2)Lii$MyE\")vnQM*!c", "+sh@q<|", "+sh@q<|");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +sh@q<|
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertEquals("\\u00", string1);
      
      String string2 = StringUtils.rightPad("", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviateMiddle("", "", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, (-919));
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 577);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-38));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "or)";
      int int0 = 0;
      String string1 = StringUtils.left("or)", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "or)");
      assertFalse(boolean0);
      
      int int1 = (-1156);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-1156), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '5');
      assertNull(stringArray0);
      
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnce("", "", "-g]kb~'4<]0sY<L.`");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substring((String) null, 638, 0);
      assertNull(string2);
      
      String string3 = StringUtils.overlay("-g]kb~'4<]0sY<L.`", "", 0, (-1439));
      assertNotNull(string3);
      assertEquals("-g]kb~'4<]0sY<L.`", string3);
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("-g]kb~'4<]0sY<L.`");
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((Object[]) null, (String) null, 0, (-1439));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.right("", 364);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", 364);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Arguments cannot both be null", "Arguments cannot both be null", 0);
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "5T-+z#RW-x2'O^Z");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "5T-+z#RW-x2'O^Z";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "5T-+z#RW-x2'O^Z";
      objectArray0[7] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "");
      assertEquals(8, objectArray0.length);
      assertNotNull(string2);
      assertEquals("5T-+z#RW-x2'O^Z5T-+z#RW-x2'O^Z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEach("\r", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("rd", "rd", 21);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("3\"GZ2Vu>Hh]=z Fl", 21);
      assertNotNull(string0);
      assertEquals("3\"GZ2Vu>Hh]=z Fl    ", string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("3\"GZ2Vu>Hh]=z Fl    ", "miBWnBmOHY");
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.reverseDelimited("3\"GZ2Vu>Hh]=z Fl", 'f');
      assertNotNull(string1);
      assertEquals("3\"GZ2Vu>Hh]=z Fl", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("3\"GZ2Vu>Hh]=z Fl", '~');
      assertNotNull(string2);
      assertEquals("3\"GZ2Vu>Hh]=z Fl", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.upperCase("3\"GZ2Vu>Hh]=z Fl    ");
      assertNotNull(string3);
      assertEquals("3\"GZ2VU>HH]=Z FL    ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultIfEmpty("3\"GZ2Vu>Hh]=z Fl    ", "rd");
      assertNotNull(string4);
      assertEquals("3\"GZ2Vu>Hh]=z Fl    ", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.normalizeSpace("3\"GZ2VU>HH]=Z FL    ");
      assertNotNull(string5);
      assertEquals("3\"GZ2VU>HH]=Z FL", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String[] stringArray2 = Locale.getISOLanguages();
      assertEquals(188, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.upperCase("\r", locale0);
      assertNotNull(string6);
      assertEquals("\r", string6);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "miBWnBmOHY", (CharSequence) "3\"GZ2Vu>Hh]=z Fl    ");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith("3\"GZ2Vu>Hh]=z Fl", "3\"GZ2VU>HH]=Z FL    ");
      assertFalse(boolean0);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("@q^28f4");
      assertEquals(6, stringArray3.length);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      
      String string7 = StringUtils.remove("JClIok-H", "\r");
      assertNotNull(string7);
      assertEquals("JClIok-H", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-626), 'T');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop(" is not in the range '0' - '9'");
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf(" is not in the range '0' - '9", "", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) " is not in the range '0' - '9'", (-626));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " is not in the range '0' - '9";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string2 = StringUtils.join(objectArray0, 'T');
      assertEquals(2, objectArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.SPACE;
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int3 = StringUtils.indexOf((CharSequence) " ", 10, 16);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 3652);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "W.B@v6=W#O", (-1));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'g';
      charArray0[4] = '7';
      charArray0[5] = 'K';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "W.B@v6=W#O", charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'H', 'E', 'E', 'g', '7', 'K'}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBetween("K O", "Minimum abbreviation width is 4", "Minimum abbreviation width is 4");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "h:|G[|bY";
      String string1 = StringUtils.center("h:|G[|bY", (-2191), '|');
      assertNotNull(string1);
      assertEquals("h:|G[|bY", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "h:|G[|bY", (CharSequence) "h:|G[|bY");
      assertTrue(boolean0);
      
      String string2 = StringUtils.left("h:|G[|bY", (-1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.countMatches("", "h:|G[|bY");
      assertEquals(0, int0);
      
      String string3 = StringUtils.rightPad("", (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '|', (-335), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -335
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '{';
      charArray0[2] = '[';
      charArray0[3] = 'U';
      charArray0[4] = ')';
      String string1 = StringUtils.join(charArray0, '{');
      assertEquals(".{{{[{U{)", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" 90fW*!!qk<1A", "Index: ");
      assertEquals("", string0);
      
      String string1 = StringUtils.mid("", 64, 0);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("Index: ", "");
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Index: ", 64);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("Index: ", "Search and Replace array lengths don't match: ");
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Index: ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("q[xf.uLk`&");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      char char0 = 'V';
      StringUtils.join(byteArray0, 'V');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-26);
      doubleArray0[1] = (double) 'V';
      doubleArray0[2] = (double) 'V';
      doubleArray0[3] = (double) (byte) (-26);
      doubleArray0[4] = (double) (byte) (-26);
      doubleArray0[5] = (double) (byte) (-26);
      doubleArray0[6] = (double) (byte) (-26);
      doubleArray0[7] = (double) 'V';
      StringUtils.join(doubleArray0, 'V', 0, (int) (byte) (-26));
      StringUtils.isAllUpperCase("-26");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      StringUtils.getLevenshteinDistance((CharSequence) "q[xf.uLk`&", (CharSequence) "q[xf.uLk`&", 0);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, 'V', (-153), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -153
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = 0;
      StringUtils.repeat('%', 0);
      String string0 = "(?: \\s|[\\s&&[^ ]])\\s*";
      StringUtils.swapCase("(?: s|[s&&[^ ]])s*");
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, 'e', 0, 0);
      StringUtils.leftPad((String) null, 0, 'g');
      // Undeclared exception!
      try { 
        StringUtils.removePattern((String) null, "(?: S|[S&&[^ ]])S*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      String string0 = StringUtils.join(byteArray0, 'f');
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("58", (int) (byte)58, (int) (byte)58);
      assertEquals("58", string1);
      
      String[] stringArray0 = StringUtils.split("1J)H-P~k\"1a#/:t", "p{InCombiningDiacriticalMarks}+");
      String string2 = StringUtils.stripAccents("58");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'f', (int) (byte)58, 0);
      int int0 = StringUtils.lastIndexOfAny("58", stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      
      StringUtils.startsWithIgnoreCase("p{InCombiningDiacriticalMarks}+", "58");
      StringUtils.indexOf((CharSequence) "58", 0);
      boolean boolean0 = StringUtils.containsWhitespace("58");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.rightPad("4sB", 32, ',');
      assertEquals("4sB,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "4sB,,,,,,,,,,,,,,,,,,,,,,,,,,,,", (CharSequence) "4sB,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank("4sB");
      assertFalse(boolean0);
      
      String string1 = StringUtils.LF;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "4sB", (CharSequence) "\n", 7);
      assertEquals(4, int1);
      
      String string2 = StringUtils.reverseDelimited(", Length: 0", ',');
      assertNotNull(string2);
      assertEquals(" Length: 0", string2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'N');
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "", "", (-1201));
      assertEquals("", string1);
      
      Locale locale0 = Locale.KOREA;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      String string2 = StringUtils.lowerCase("!{0wa r/J5IeO%60<gk", locale0);
      assertNotNull(string2);
      assertEquals("!{0wa r/j5ieo%60<gk", string2);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'c';
      charArray0[2] = '1';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      charArray0[5] = '=';
      charArray0[6] = 'l';
      String string0 = StringUtils.join(charArray0, 'h');
      assertEquals("hhch1hFhfh=hl", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("hhch1hFhfh=hl");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replacePattern("", "", "");
      String string2 = StringUtils.chomp("", "");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("", 'A', 'T');
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("~$whgC8vI");
      assertEquals(7, stringArray0.length);
      
      String string0 = StringUtils.swapCase("D(QU5gy>!U#ce");
      assertEquals("d(qu5GY>!u#CE", string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1223);
      intArray0[1] = 0;
      StringUtils.join(intArray0, 'r', 589, (-1144));
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "d(qu5GY>!u#CE", (CharSequence) "");
      assertEquals(14, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("D(QU5gy>!U#ce", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("~$whgC8vI", "d(qu5GY>!u#CE");
      assertEquals("~$whgC8vI", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.trim("zz{@I c");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("zz{@I c", charSequenceArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("zz{@I c");
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zz{@I c";
      stringArray0[1] = "zz{@I c";
      stringArray0[2] = "zz{@I c";
      stringArray0[3] = "zz{@I c";
      StringUtils.stripAll(stringArray0);
      String string2 = StringUtils.rightPad("^q[RD", 0);
      assertEquals("^q[RD", string2);
      
      String string3 = StringUtils.substringAfterLast("/.!W:ADN", ",LN");
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^q[RD", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("^q[RD");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("?M&O+n8[K+[", "?M&O+n8[K+[", (CharSequence[]) null);
      assertEquals("?M&O+n8[K+[", string0);
      
      StringUtils.repeat("?M&O+n8[K+[", 0);
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chop("?M&O+n8[K+[");
      String string2 = StringUtils.uncapitalize("");
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToEmpty("?M&O+n8[K+");
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "?M&O+n8[K+", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.strip("', has a length less than 2", "@od-{Ja.s");
      assertEquals("', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.overlay("`LfCbwA", "`LfCbwA", (-614), 0);
      assertEquals("`LfCbwA`LfCbwA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.leftPad("u", (-1569), 'G');
      assertEquals("u", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StringUtils.join((Object[]) null);
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.removeStartIgnoreCase("", "8W2C");
      String string1 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace(" vs ");
      assertNotNull(string2);
      assertEquals("vs", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.center("d,),`gnR", (-1), " ");
      assertEquals("d,),`gnR", string3);
      
      String string4 = StringUtils.chomp("");
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringUtils.replaceOnce("", (String) null, "");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      StringUtils.isAllUpperCase("");
      StringUtils.center("", 0, (String) null);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 16);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.substring("Ba*bKQ", (-1011));
      assertEquals("Ba*bKQ", string0);
      
      StringUtils.indexOfAny((CharSequence) "Ba*bKQ", "Index: ");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Ba*bKQ", (CharSequence) "Ba*bKQ", 256);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringUtils.rightPad((String) null, 0);
      StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      StringUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
      String string0 = StringUtils.stripEnd((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringUtils.trim("#?XY&k");
      StringUtils.trimToNull("#?XY&k");
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("#?XY&k", (String) null, "#?XY&k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.reverse("\r");
      assertEquals("\r", string0);
      
      charSequenceArray0[2] = (CharSequence) " ";
      String string1 = StringUtils.overlay("", "", 5, 5);
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.lastOrdinalIndexOf("", charSequenceArray0[0], 5);
      assertEquals((-1), int0);
      
      charSequenceArray0[7] = (CharSequence) " ";
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "\n", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Y8XF)6p7+5C{()~VYBSv", "Y8XF)6p7+5C{()~VYBSv", 12);
      assertEquals("Y8XF)6p7+5C{()~VYBSv", string0);
      
      String string1 = StringUtils.capitalize("EkB`02j/SZ[%sS{RQ");
      assertEquals("EkB`02j/SZ[%sS{RQ", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("EkB`02j/SZ[%sS{RQ");
      String string2 = StringUtils.chop("Y8XF)6p7+5C{()~VYBSv");
      assertEquals("Y8XF)6p7+5C{()~VYBS", string2);
      
      StringUtils.indexOf((CharSequence) "Y8XF)6p7+5C{()~VYBSv", (CharSequence) "Y8XF)6p7+5C{()~VYBS");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y8XF)6p7+5C{()~VYBSv", charArray0);
      StringUtils.containsOnly((CharSequence) "EkB`02j/SZ[%sS{RQ", charArray0);
      String string3 = StringUtils.substringAfter("=^nRQ oe^i!p22C", "EkB`02j/SZ[%sS{RQ");
      assertEquals("", string3);
      
      StringUtils.getLevenshteinDistance((CharSequence) "EkB`02j/SZ[%sS{RQ", (CharSequence) "Y8XF)6p7+5C{()~VYBSv", 12);
      StringUtils.isBlank("EkB`02j/SZ[%sS{RQ");
      StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      StringUtils.defaultString("0aF-.n");
      charSequenceArray0[0] = (CharSequence) "0aF-.n";
      charSequenceArray0[1] = (CharSequence) "=^nRQ oe^i!p22C";
      charSequenceArray0[2] = (CharSequence) "Y8XF)6p7+5C{()~VYBS";
      StringUtils.substringAfterLast("", "Y8XF)6p7+5C{()~VYBS");
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Y8XF)6p7+5C{()~VYBSv";
      charSequenceArray0[6] = (CharSequence) "=^nRQ oe^i!p22C";
      charSequenceArray0[7] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "Y8XF)6p7+5C{()~VYBSv", charSequenceArray0);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[6], charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fC[Z$:]hU5l4e";
      stringArray0[1] = "0aF-.n";
      String string4 = StringUtils.replaceEach("&b9", stringArray0, stringArray0);
      assertEquals("&b9", string4);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 31);
      assertNull(string0);
      
      String string1 = StringUtils.difference((String) null, "Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) null, 31);
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'p', 31, 3);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Threshold must not be negative", (-1));
      assertEquals((-1), int1);
      
      String string2 = StringUtils.chop("<m4YE|T&5jDn_D0o");
      assertNotNull(string2);
      assertEquals("<m4YE|T&5jDn_D0", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)115;
      StringUtils.join(byteArray0, '^', 2576, (int) (byte)115);
      String string3 = StringUtils.swapCase("Minimum abbreviation width with offset is 7");
      assertEquals("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS 7", string3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)92;
      String string4 = StringUtils.join(doubleArray0, '~', 2576, (int) (byte)92);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBeforeLast("p{InCombiningDiacriticalMarks}+", "mINIMUM ABBREVIATION WIDTH WITH OFFSET IS 7");
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      
      StringUtils.defaultString("8:,F b=q");
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Y8XF)6p7+5C{()~VYBSv");
      assertEquals("Y8XF)6p7+5C{()~VYBSv", string0);
      
      StringUtils.substringAfter("Y8XF)6p7+5C{()~VYBSv", "Y8XF)6p7+5C{()~VYBSv");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Y8XF)6p7+5C{()~VYBSv");
      assertEquals(20, int0);
      
      String string1 = StringUtils.uncapitalize("2UA");
      assertEquals("2UA", string1);
      
      StringUtils.contains((CharSequence) "2UA", (CharSequence) "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y8XF)6p7+5C{()~VYBSv";
      objectArray0[1] = (Object) "Y8XF)6p7+5C{()~VYBSv";
      objectArray0[2] = (Object) "Y8XF)6p7+5C{()~VYBSv";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "2UA";
      String string2 = StringUtils.join(objectArray0, '%');
      assertEquals("Y8XF)6p7+5C{()~VYBSv%Y8XF)6p7+5C{()~VYBSv%Y8XF)6p7+5C{()~VYBSv%%%%2UA", string2);
      
      StringUtils.indexOf((CharSequence) "", (CharSequence) "Y8XF)6p7+5C{()~VYBSv%Y8XF)6p7+5C{()~VYBSv%Y8XF)6p7+5C{()~VYBSv%%%%2UA");
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "2UA", (CharSequence) "", 20);
      assertEquals(3, int1);
      
      StringUtils.mid("Vz.mtVz.mt", 20, (-1));
      StringUtils.substring("2UA", 24, 20);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-@R", "...", (-2239));
      assertEquals(1, stringArray0.length);
      
      StringUtils.replace("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.trimToNull("Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("Search and Replace array lengths don't match:", '%');
      assertEquals("Search and Replace array lengths don't match:", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.overlay("P&_N#:4)\"", "79[.yFn", 127, (-629));
      assertEquals("79[.yFn", string0);
      assertNotNull(string0);
      
      StringUtils.countMatches("P&_N#:4)\"", "79[.yFn");
      StringUtils.lastIndexOf((CharSequence) "P&_N#:4)\"", (CharSequence) "79[.yFn", 3);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      
      StringUtils.chomp("");
      String string1 = StringUtils.replaceChars("qOrqil(", 'G', 'G');
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      StringUtils.containsAny((CharSequence) "79[.yFn", charArray0);
      String string2 = StringUtils.chomp("", "");
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      Locale locale0 = Locale.ROOT;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0);
      String string3 = StringUtils.upperCase("", locale0);
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      StringUtils.chomp((String) null, (String) null);
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 42);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0", ", Length: 0", (-1140));
      String string0 = "\\u00";
      String[] stringArray1 = StringUtils.substringsBetween(string0, ", Length: 0", "\r");
      assertNull(stringArray1);
      
      String string1 = StringUtils.stripAccents("");
      assertEquals("", string1);
      
      StringUtils.removeStartIgnoreCase("(?: s|[s&&[^ ]])s*", "");
      boolean boolean0 = StringUtils.endsWith(string0, string0);
      String string2 = "\\u00";
      StringUtils.substringBeforeLast("", string2);
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "(?: s|[s&&[^ ]])s*");
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceOnce(string2, "y2v8vh9Ec%VqZ'.5BJ2", "\"AHCf+r,");
      assertEquals("\\u00", string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "(?: s|[s&&[^ ]])s*");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringUtils.center("", (-2256), 'Q');
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      StringUtils.difference("", "");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2256);
      doubleArray0[1] = (double) 'Q';
      doubleArray0[3] = (double) (-2256);
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertEquals("0.0k81.0k0.0k-2256.0", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "0.0k81.0k0.0k-2256.0";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[0] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[4], charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.swapCase("b[8(#/pW7Aa9)x%");
      assertEquals("B[8(#/Pw7aA9)X%", string0);
      
      StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      String string1 = StringUtils.center("", 1672, "");
      StringUtils.isNotEmpty("B[8(#/Pw7aA9)X%");
      StringUtils.lastIndexOf((CharSequence) "B[8(#/Pw7aA9)X%", (-1064));
      boolean boolean0 = StringUtils.isAllUpperCase(string1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b[8(#/pW7Aa9)x%";
      stringArray0[1] = "b[8(#/pW7Aa9)x%";
      stringArray0[2] = "";
      stringArray0[3] = string1;
      stringArray0[4] = "";
      stringArray0[5] = "~bqMGndg>9+";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'D';
      charArray0[2] = 'j';
      charArray0[3] = 'S';
      charArray0[4] = ']';
      charArray0[5] = 'g';
      charArray0[6] = '\"';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2666.9603489;
      doubleArray0[2] = (-1209.4);
      doubleArray0[3] = 1649.1431622211473;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 3160.05317121184;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      StringUtils.join(doubleArray0, '8');
      StringUtils.defaultString("0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0", "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0";
      charSequenceArray0[1] = (CharSequence) "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0";
      charSequenceArray0[2] = (CharSequence) "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0";
      charSequenceArray0[3] = (CharSequence) "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0";
      charSequenceArray0[4] = (CharSequence) "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0";
      StringUtils.endsWithAny("0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0", charSequenceArray0);
      StringUtils.lastIndexOf((CharSequence) "0.082666.96034898-1209.481649.143162221147381.083160.0531712118480.080.0", charSequenceArray0[1]);
      StringUtils.overlay("y@o6<PH@", "", 0, 0);
      StringUtils.removePattern("{}", "y@o6<PH@");
      StringUtils.join((int[]) null, '8', 0, 0);
      StringUtils.getLevenshteinDistance((CharSequence) "y@o6<PH@", (CharSequence) "y@o6<PH@");
      StringUtils.removePattern("y@o6<PH@", "");
      String[] stringArray0 = StringUtils.substringsBetween("y@o6<PH@", "{}", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Arguments cannot both be null";
      objectArray0[2] = (Object) "Arguments cannot both be null";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "Arguments cannot both be null";
      objectArray0[5] = (Object) "Arguments cannot both be null";
      objectArray0[6] = (Object) "Arguments cannot both be null";
      objectArray0[7] = (Object) "Arguments cannot both be null";
      int int1 = StringUtils.lastIndexOf((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null");
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null");
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StringUtils.right("Arguments cannot both be null", 0);
      StringUtils.startsWith("", "");
      StringUtils.rightPad("Arguments cannot both be null", 1, "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[5] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[6] = (CharSequence) "";
      StringUtils.endsWithAny("", charSequenceArray0);
      StringUtils.splitPreserveAllTokens("Arguments cannot both be null", '2');
      StringUtils.left("", 1);
      StringUtils.isAlphaSpace("");
      StringUtils.equals(charSequenceArray0[1], charSequenceArray0[6]);
      String string0 = "\\u";
      String string1 = StringUtils.center("\"vpnx", 1125, string0);
      StringUtils.splitPreserveAllTokens("Arguments cannot both be null");
      StringUtils.indexOf(charSequenceArray0[3], 1125, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StringUtils.join((Object[]) null, '6');
      StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        treeSet0.tailSet((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "p}op5<l=O", "nn<te0nR&VYiFX)E#[");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nn<te0nR&VYiFX)E#[";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "nn<te0nR&VYiFX)E#[";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("p}op5<l=O", '5');
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("p}op5<l=O", "nn<te0nR&VYiFX)E#[", 231);
      assertNotNull(stringArray2);
      assertEquals(2, stringArray2.length);
      
      StringUtils.split("", '5');
      String string2 = StringUtils.leftPad("p}op5<l=O", 256);
      assertEquals("                                                                                                                                                                                                                                                       p}op5<l=O", string2);
      
      StringUtils.startsWith("nn<te0nR&VYiFX)E#[", string0);
      StringUtils.replaceChars((String) null, "P8 b&xKISM~V\"NZP#s", "");
      int int0 = StringUtils.indexOfDifference((CharSequence) "                                                                                                                                                                                                                                                       p}op5<l=O", (CharSequence) "nn<te0nR&VYiFX)E#[");
      assertEquals(0, int0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray3);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '5';
      String string3 = StringUtils.join(floatArray0, '5');
      assertEquals("0.0553.0", string3);
      
      String[] stringArray4 = StringUtils.splitByCharacterTypeCamelCase("nn<te0nR&VYiFX)E#[");
      assertEquals(14, stringArray4.length);
      
      String string4 = StringUtils.abbreviate("Arguments cannot both be null", 256, 13);
      assertEquals("...th be null", string4);
  }
}
