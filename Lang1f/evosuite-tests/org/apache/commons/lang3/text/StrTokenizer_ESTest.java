/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:53:50 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("<i{-i");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'I';
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('G');
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(5, charArray0.length);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("\"\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\"', '\"', '\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(5, charArray0.length);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("\u0000\"\u0000", string0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\"', '\"', '\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      char[] charArray0 = new char[6];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 0, (-360));
      assertNotNull(list0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[18];
      List<String> list0 = strTokenizer0.tokenize(charArray0, (-357), (-357));
      assertNotNull(list0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, (StrMatcher) null, strMatcher_CharSetMatcher0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charMatcher(']');
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Gt5S.hB& [Pi!V+f8", (StrMatcher) null, strMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '?', 'e');
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("}e9IRN");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[1];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 1481, 1481);
      assertNotNull(list0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(list0.contains("}e9IRN"));
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[18];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(18, charArray0.length);
      
      List<String> list0 = strTokenizer0.tokenize(charArray0, 2, 18);
      assertNotNull(list0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_CharSetMatcher0, strMatcher_CharSetMatcher0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, charArray0.length);
      
      int int0 = strTokenizer0.size();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("length must be valid", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(6, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals(6, charArray0.length);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setTrimmerMatcher(strMatcher0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("length must be valid", string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher_StringMatcher0, strMatcher_StringMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      
      StrTokenizer strTokenizer2 = strTokenizer1.setQuoteMatcher(strMatcher0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '-');
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(7, charArray0.length);
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(7, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('F');
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('!');
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher_StringMatcher0, strMatcher_StringMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteChar(';');
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '8');
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(3, charArray0.length);
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(3, charArray0.length);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher_StringMatcher0, strMatcher_StringMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredMatcher(strMatcher_StringMatcher0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("}e9IRN");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('r');
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoredChar('%');
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("length must be valid", string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher_StringMatcher0, strMatcher_StringMatcher0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("");
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(6, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(6, charArray0.length);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterString("1zsOa");
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", string0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("2:5~G=/Y3z%mL");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('Z');
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Z%+JV45H", strMatcher_NoMatcher0);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      
      StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterMatcher(strMatcher_NoMatcher0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '8');
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(3, charArray0.length);
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(3, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('M');
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterChar('0');
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(6, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(6, charArray0.length);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterChar(')');
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("2:5~G=/Y3z%mL");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("hqi5@*]CxI#@->Ya&");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_StringMatcher0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, charArray0.length);
      
      StrTokenizer strTokenizer2 = strTokenizer0.reset(charArray0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Z%+JV45H", strMatcher_NoMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer2 = strTokenizer1.reset("");
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((String) null);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer2 = strTokenizer0.reset();
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      int int0 = strTokenizer0.previousIndex();
      assertEquals(0, int0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("l'U");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("l'U", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      
      String string1 = strTokenizer0.previous();
      assertNotNull(string1);
      assertEquals("l'U", string1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("'\"", string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      int int0 = strTokenizer0.nextIndex();
      assertEquals(1, int0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertTrue(boolean0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Z%+JV45H", strMatcher_NoMatcher0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      
      boolean boolean0 = strTokenizer1.isEmptyTokenAsNull();
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(boolean0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("2:5~G=/Y3z%mL");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      boolean boolean0 = strTokenizer0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertNotNull(stringArray0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("add() is unsupported", string0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      assertNotNull(strTokenizer1);
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '~', '~');
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(1, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher((StrMatcher) null);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("'\"");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertFalse(boolean0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertTrue(boolean0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(">iG.]h{[u]X=c-Z+", strMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset("");
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrMatcher strMatcher1 = strTokenizer0.getTrimmerMatcher();
      assertNotNull(strMatcher1);
      assertSame(strMatcher0, strMatcher1);
      assertSame(strMatcher1, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("'\"");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrMatcher strMatcher0 = strTokenizer0.getQuoteMatcher();
      assertNotNull(strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(":* $8V!VLty04{d$T", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertFalse(boolean0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'L');
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, charArray0.length);
      
      StrMatcher strMatcher0 = strTokenizer0.getDelimiterMatcher();
      assertNotNull(strMatcher0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'L');
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(1, charArray0.length);
      
      StrMatcher strMatcher0 = strTokenizer0.getIgnoredMatcher();
      assertNotNull(strMatcher0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertFalse(boolean0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.toString();
      assertNotNull(string0);
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(6, charArray0.length);
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(6, charArray0.length);
      
      String string1 = strTokenizer0.toString();
      assertNotNull(string1);
      assertEquals("StrTokenizer[\u0000\u0000\u0000\u0000\u0000\u0000]", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertNotNull(strTokenizer1);
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, "set() is unsupported");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher((StrMatcher) null);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000', '\"', '\"'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(5, charArray0.length);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000', '\"', '\"'}, charArray0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "B/aWjg9+^F{>dff-ZVT");
      assertNotNull(strTokenizer0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(4, charArray0.length);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_TrimMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(4, charArray0.length);
      
      String string0 = strTokenizer1.next();
      assertNotNull(string0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals("T", string0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer[not tokenized yet]", "StrTokenizer[not tokenized yet]");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher_TrimMatcher0);
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      
      int int0 = strTokenizer0.size();
      assertSame(strTokenizer0, strTokenizer1);
      assertEquals(3, int0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(18, charArray0.length);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(18, charArray0.length);
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer[not tokenized yet]", 'w');
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('w');
      assertNotNull(strTokenizer1);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      StrTokenizer strTokenizer2 = strTokenizer0.reset(charArray0);
      assertNotNull(strTokenizer2);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'w', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals(2, charArray0.length);
      
      String[] stringArray0 = strTokenizer2.getTokenArray();
      assertNotNull(stringArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'w', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals(2, charArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[18];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.nextToken();
      String string0 = strTokenizer0.previous();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      strTokenizer0.getTokenList();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(0, strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.previousToken();
      assertEquals("'\"", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      strTokenizer0.previousToken();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      strTokenizer0.next();
      String string0 = strTokenizer0.nextToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      String string0 = strTokenizer0.getContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      int int0 = strTokenizer0.previousIndex();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), int0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '\"');
      // Undeclared exception!
      try { 
        strTokenizer0.set("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '_', 'k');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      List<String> list0 = strTokenizer0.getTokenList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("'\"", 'Q');
      int int0 = strTokenizer0.nextIndex();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer0.add("j");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer[not tokenized yet]", "StrTokenizer[not tokenized yet]");
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      
      strTokenizer0.next();
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "B/aWjg9+^F{>dff-ZVT");
      strTokenizer0.next();
      strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(1, strTokenizer0.nextIndex());
  }
}
