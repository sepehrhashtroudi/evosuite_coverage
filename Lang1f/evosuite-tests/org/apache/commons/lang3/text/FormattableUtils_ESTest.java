/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:36:25 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Formattable;
import java.util.Formatter;
import java.util.FormatterClosedException;
import java.util.Locale;
import org.apache.commons.lang3.text.FormattableUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FormattableUtils_ESTest extends FormattableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      String string0 = FormattableUtils.toString(formattable0);
      assertEquals("", string0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      Formatter formatter0 = new Formatter(bufferedWriter0);
      Locale locale0 = Locale.UK;
      Locale.getISOCountries();
      formatter0.format(locale0, "", (Object[]) null);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 32, 32, 0);
      FormattableUtils.append((CharSequence) "", formatter0, 0, 32, 32);
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      FormattableUtils.append((CharSequence) "", formatter0, 32, 0, 0, (CharSequence) "");
      FormattableUtils formattableUtils0 = new FormattableUtils();
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", formatter1, 1171, 32767, 1171, 'y', (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      Locale locale0 = Locale.ROOT;
      Formatter formatter0 = new Formatter(locale0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "&jte0Gt I\b7V";
      objectArray0[2] = (Object) locale0;
      Formatter formatter1 = formatter0.format("&jte0Gt I\b7V", objectArray0);
      locale0.getScript();
      Formatter formatter2 = FormattableUtils.append((CharSequence) "", formatter1, (-1175), (-5520), 4438, 'g', (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter0, (-1175), (-1175), (-5520), (CharSequence) "");
      Formattable formattable2 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable2);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormattableUtils.append((CharSequence) "", formatter1, 4438, 4438, 4438, (CharSequence) stringBuffer0);
      formatter2.flush();
      FormattableUtils.append((CharSequence) "", formatter0, (-1175), 755, (-870), 'z');
      Formatter formatter3 = FormattableUtils.append((CharSequence) "", formatter1, 1164, 4438, 4438);
      FormattableUtils.append((CharSequence) "&jte0Gt I\b7V", formatter2, 755, 0, (-3559), 'g');
      Formattable formattable3 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable3);
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", formatter3, (-3559), 739, 2209);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      Locale locale0 = Locale.ROOT;
      Formatter formatter0 = new Formatter(locale0);
      String string0 = "&jte0Gt I\\b7V";
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "&jte0Gt I\b7V";
      objectArray0[2] = (Object) locale0;
      Formatter formatter1 = formatter0.format("&jte0Gt I\b7V", objectArray0);
      locale0.getScript();
      char char0 = 'g';
      Formatter formatter2 = FormattableUtils.append((CharSequence) "", formatter1, (-1175), (-5520), 4438, 'g', (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter0, (-1175), (-1175), (-5520), (CharSequence) "");
      Formattable formattable2 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable2);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormattableUtils.append((CharSequence) "", formatter1, 4438, 4438, 4438, (CharSequence) stringBuffer0);
      int int0 = 755;
      formatter2.flush();
      FormattableUtils.append((CharSequence) "", formatter0, (-1175), 755, (-870), 'z');
      formatter2.close();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter1, 1164, (-3396), 4438);
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      int int0 = 1261;
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1261);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      Formatter formatter0 = new Formatter(locale1);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) charset0;
      formatter0.format(locale1, "", objectArray0);
      formatter0.close();
      Locale.setDefault(locale1);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1261, 725, 1261, 'C');
        fail("Expecting exception: FormatterClosedException");
      
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '-';
      charArray0[2] = 'W';
      charArray0[3] = '@';
      charArray0[4] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Formatter formatter0 = new Formatter(charBuffer1);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer1, formatter0, (-3606), (-2274), (-3606), (CharSequence) charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", (Formatter) null, (-1994), 1313, (-1), 's', (CharSequence) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('@');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"PWI0?Q(Rn_3J");
      Formatter formatter0 = new Formatter((PrintStream) mockPrintStream0);
      stringWriter1.write("\"PWI0?Q(Rn_3J", 1, 1);
      Formatter formatter1 = FormattableUtils.append((CharSequence) stringBuffer0, formatter0, 1, 0, 914, (CharSequence) "\"PWI0?Q(Rn_3J");
      assertSame(formatter0, formatter1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      MockFile mockFile0 = new MockFile("null", "#Wxy2P");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Formatter formatter0 = new Formatter((OutputStream) mockPrintStream1);
      FormattableUtils.append((CharSequence) "null", formatter0, (-1915), (-2591), (-1915), 'l', (CharSequence) "#Wxy2P");
      FormattableUtils.toString((Formattable) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '\'';
      charArray0[2] = '1';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, (-1), (-1915), '\'');
      FormattableUtils.toString((Formattable) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Formatter formatter2 = FormattableUtils.append((CharSequence) stringBuffer0, formatter1, (-1), 1, 32, 'l', (CharSequence) "null");
      assertSame(formatter0, formatter2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      PipedWriter pipedWriter0 = new PipedWriter();
      Formatter formatter0 = new Formatter(pipedWriter0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) formatter0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "null";
      Formatter formatter1 = formatter0.format(locale0, "null", objectArray0);
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter1, 0, 0, 0, '|', (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis '||||' exceeds precision of 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Formatter formatter0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, (Formatter) null, 0, 0, 0, 'N', (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = 'k';
      charArray0[2] = '';
      charArray0[3] = 'q';
      charArray0[4] = 'K';
      charArray0[5] = 'u';
      charArray0[6] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer1, (Formatter) null, 32, 64, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      FormattableUtils.toString((Formattable) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Formatter formatter0 = null;
      try {
        formatter0 = new Formatter(byteArrayOutputStream0, "es6G+yqA%Dxl0*(NY/");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = null;
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", (Formatter) null, 0, 0, 0, (CharSequence) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formatter formatter0 = null;
      int int0 = 0;
      int int1 = (-6868);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", (Formatter) null, 0, 0, (-6868), '~');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      Locale locale0 = Locale.GERMAN;
      Formatter formatter0 = new Formatter(locale0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 409, (-1788), 0, '7');
      assertEquals("", formatter1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("%s");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      int int0 = (-1149);
      int int1 = 0;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, (-1149), 0, 0, (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis '%s' exceeds precision of 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      String string0 = FormattableUtils.toString(formattable0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter();
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 543, (-904), 543, (CharSequence) charBuffer0);
      assertEquals("=M", formatter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(349);
      Formatter formatter0 = new Formatter(charBuffer0);
      int int0 = (-1);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 349, (-1), (-1));
      int int1 = 3385;
      char char0 = '>';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter1, (-1), 3385, (-1), '>');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      charBuffer0.order();
      Formatter formatter0 = null;
      int int0 = (-739);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, (-739), 0, (-739));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Formatter formatter0 = new Formatter(locale0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 2545, 0, (CharSequence) charBuffer0);
      Formatter formatter2 = FormattableUtils.append((CharSequence) charBuffer0, formatter1, (-1), 0, (-1), 'S', (CharSequence) charBuffer0);
      assertSame(formatter1, formatter2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Formatter formatter0 = null;
      charBuffer0.order();
      charBuffer0.codePoints();
      CharBuffer.allocate(0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      Formatter formatter0 = new Formatter(bufferedWriter0);
      Locale locale0 = Locale.KOREAN;
      Locale.getISOCountries();
      Formatter formatter1 = formatter0.format(locale0, "", (Object[]) null);
      FormattableUtils.append((CharSequence) "", formatter0, 32, 32, 0);
      FormattableUtils.append((CharSequence) "", formatter0, 0, 32, 1);
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayCountry(locale1);
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      Formatter formatter2 = FormattableUtils.append((CharSequence) "", formatter0, 32, 0, 0, (CharSequence) "");
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formatter formatter3 = FormattableUtils.append((CharSequence) "", formatter0, 0, (-1), (-1380), '#');
      FormattableUtils.toString((Formattable) null);
      FormattableUtils.append((CharSequence) "null", formatter1, 0, 0, 835);
      FormattableUtils.toString((Formattable) null);
      FormattableUtils.append((CharSequence) "null", formatter3, 0, 0, 0, '0');
      FormattableUtils.toString((Formattable) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '0';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '0';
      charArray0[7] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter2, (-2507), 0, 0, (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis '0##0##00' exceeds precision of 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.CANADA;
      Formatter formatter0 = null;
      try {
        formatter0 = new Formatter("", (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      Locale locale0 = Locale.ROOT;
      Formatter formatter0 = new Formatter(locale0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "&jte0Gt I\b7V";
      objectArray0[2] = (Object) locale0;
      Formatter formatter1 = formatter0.format("&jte0Gt I\b7V", objectArray0);
      locale0.getScript();
      Formatter formatter2 = FormattableUtils.append((CharSequence) "", formatter1, (-1175), (-5520), 4438, 'g', (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter0, (-1175), (-1175), (-5520), (CharSequence) "");
      Formattable formattable2 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      String string0 = FormattableUtils.toString(formattable2);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormattableUtils.append((CharSequence) "", formatter1, 4438, 4438, 4438, (CharSequence) stringBuffer0);
      formatter2.flush();
      FormattableUtils.append((CharSequence) "", formatter0, (-1175), 755, (-870), 'z');
      FormattableUtils.append((CharSequence) "&jte0Gt I\b7V", formatter2, 755, 0, (-3559), 'g');
      Formattable formattable3 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      String string1 = FormattableUtils.toString(formattable3);
      assertTrue(string1.equals((Object)string0));
  }
}
