/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 19:53:28 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BufferCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoEra;
import java.util.BitSet;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.TimeZone;
import java.util.function.ToLongFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.apache.commons.lang3.text.StrBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = Integer.getInteger("S)p7.s", 0);
      Integer integer1 = ObjectUtils.cloneIfPossible(integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1L, 0L, 0L, 1L, 1L).when(toLongFunction0).applyAsLong(anyString());
      Comparator<String> comparator0 = Comparator.comparingLong((ToLongFunction<? super String>) toLongFunction0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[2aRgM'R7K<9w<#xy.R";
      stringArray0[1] = "";
      stringArray0[2] = "KJO";
      stringArray0[3] = "DM#K,Kj";
      stringArray0[4] = "]";
      stringArray0[5] = "Exception cloning Cloneable type ";
      String string0 = ObjectUtils.median(comparator0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      BitSet bitSet0 = new BitSet(2);
      objectArray0[0] = (Object) bitSet0;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BitSet bitSet0 = new BitSet(2);
      PageAttributes pageAttributes0 = new PageAttributes();
      Object object0 = ObjectUtils.defaultIfNull((Object) bitSet0, (Object) pageAttributes0);
      assertSame(object0, bitSet0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = ObjectUtils.mode(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.getInteger("Dh", 0);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = ObjectUtils.median(integerArray0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone[] timeZoneArray0 = new TimeZone[18];
      int int0 = ObjectUtils.hashCodeMulti(timeZoneArray0);
      assertEquals((-844471871), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = ObjectUtils.compare((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-2143));
      assertEquals((short) (-2143), short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-1479));
      assertEquals((short) (-1479), short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = ObjectUtils.CONST((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = ObjectUtils.CONST(545L);
      assertEquals(545L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = ObjectUtils.CONST(2576);
      assertEquals(2576, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-608.0F));
      assertEquals((-608.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = ObjectUtils.CONST('%');
      assertEquals('%', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char char0 = ObjectUtils.CONST('9');
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Comparator<HashMap<Integer, Object>> comparator0 = Comparator.nullsFirst((Comparator<? super HashMap<Integer, Object>>) collator0);
      HashMap<Integer, Object>[] hashMapArray0 = (HashMap<Integer, Object>[]) Array.newInstance(HashMap.class, 6);
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      hashMapArray0[0] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[1] = hashMapArray0[0];
      hashMapArray0[2] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[3] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[4] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[5] = (HashMap<Integer, Object>) linkedHashMap0;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, hashMapArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashMap cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Time time0 = new Time(0L);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) time0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) charBuffer0, (Object) dateFormatSymbols0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-128));
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) null, (Object) mutableInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.clone(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Date date0 = Date.valueOf(localDate0);
      Date date1 = ObjectUtils.clone(date0);
      assertTrue(date1.equals((Object)date0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-263));
      Integer integer1 = ObjectUtils.clone(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ObjectUtils.identityToString(stringBuilder0, (Object) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Insets insets0 = new Insets(0, (byte)73, 0, 0);
      MessageFormat messageFormat0 = new MessageFormat("StrTokenizer");
      boolean boolean0 = ObjectUtils.equals((Object) insets0, (Object) messageFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      boolean boolean0 = ObjectUtils.equals((Object) decimalFormat0, (Object) decimalFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      try { 
        ObjectUtils.CONST_SHORT(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [2147483647]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        ObjectUtils.CONST_BYTE(2576);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2576]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        ObjectUtils.CONST_BYTE((-424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-424]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      objectArray0[1] = (Object) decimalFormatSymbols0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9h5B";
      stringArray0[1] = "9h5B";
      stringArray0[2] = "";
      String string0 = ObjectUtils.mode(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BufferCapabilities bufferCapabilities0 = ObjectUtils.mode((BufferCapabilities[]) null);
      assertNull(bufferCapabilities0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = ObjectUtils.compare("o", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-1809L));
      int int0 = ObjectUtils.compare((Timestamp) null, timestamp0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = ObjectUtils.compare((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "cApE,7!^Rk(SP]");
      assertEquals("cApE,7!^Rk(SP]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Insets insets0 = new Insets((-3322), (-3322), (-3322), (-3322));
      String string0 = ObjectUtils.toString((Object) insets0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) null);
      String string0 = ObjectUtils.toString(object0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) "java.awt.Insets@0000000001");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "o");
      Date date0 = new Date(1280L);
      ObjectUtils.identityToString(stringBuffer0, (Object) date0);
      assertEquals(16, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString(strBuilder0, (Object) comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      ObjectUtils.identityToString(strBuilder0, (Object) "java.awt.Insets@0000000001");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      MockDate mockDate0 = new MockDate();
      ObjectUtils.identityToString((Appendable) stringBuffer0, (Object) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("QpnI3\"ED");
      String string0 = ObjectUtils.identityToString((Object) choiceFormat0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ObjectUtils.hashCode((Object) bitSet0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Insets insets0 = new Insets((-3322), (-3322), (-3322), (-3322));
      Insets insets1 = ObjectUtils.cloneIfPossible(insets0);
      insets1.set(0, (-3322), (-3322), (-1734));
      boolean boolean0 = ObjectUtils.notEqual(insets0, insets1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Insets insets0 = new Insets((-3322), (-3322), (-3322), (-3322));
      Insets insets1 = ObjectUtils.cloneIfPossible(insets0);
      boolean boolean0 = ObjectUtils.notEqual(insets0, insets1);
      assertFalse(boolean0);
      assertNotSame(insets1, insets0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) decimalFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      boolean boolean0 = ObjectUtils.equals((Object) breakIterator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NumberFormat[] numberFormatArray0 = new NumberFormat[7];
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      numberFormatArray0[0] = (NumberFormat) choiceFormat0;
      ChoiceFormat choiceFormat1 = (ChoiceFormat)ObjectUtils.firstNonNull(numberFormatArray0);
      assertEquals(1, choiceFormat1.getMinimumIntegerDigits());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Object object0 = ObjectUtils.firstNonNull((Object[]) comparableArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BitSet bitSet0 = ObjectUtils.firstNonNull((BitSet[]) null);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BufferCapabilities bufferCapabilities0 = ObjectUtils.defaultIfNull((BufferCapabilities) null, (BufferCapabilities) null);
      assertNull(bufferCapabilities0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Collator collator0 = Collator.getInstance(locale0);
      Comparator<StringCharacterIterator> comparator0 = Comparator.nullsFirst((Comparator<? super StringCharacterIterator>) collator0);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, (StringCharacterIterator[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) (byte)90);
      assertEquals(90.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      IsoEra isoEra1 = ObjectUtils.CONST(isoEra0);
      assertSame(isoEra1, isoEra0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-2322.42234772));
      assertEquals((-2322.42234772), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)2161);
      assertEquals((short)2161, short0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      char char0 = ObjectUtils.CONST('H');
      assertEquals('H', char0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)90);
      assertEquals((byte)90, byte0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) (-6));
      assertEquals((-6L), long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = ObjectUtils.compare("startIndex must be valid", "clone");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }
}
