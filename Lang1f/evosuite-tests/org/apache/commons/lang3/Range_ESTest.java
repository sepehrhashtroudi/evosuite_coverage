/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:54:48 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-788));
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-1082));
      Range<Integer> range1 = Range.between(integer1, integer0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range<String> range0 = Range.is("N|VCr");
      boolean boolean0 = range0.isEndedBy("SP9g=obwR]s&2os");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1910);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-341), 1910).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "n?b=$H&Gs1gk", comparator0);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      String string0 = range0.toString(";!=y`JlRhkc@SPmy");
      assertEquals(";!=y`JlRhkc@SPmy", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(731).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3674), 731).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between(object0, (Object) "", comparator1);
      boolean boolean0 = range1.isBeforeRange(range0);
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      // Undeclared exception!
      try { 
        range0.toString("gl^+H4P%0N<");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'N'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range<String> range0 = Range.between("3*K", "org.apache.commons.lang3.Range", (Comparator<String>) null);
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.is(integer0);
      Range<Object> range1 = Range.is((Object) "", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isStartedBy(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range<String> range0 = Range.is("org.apache.commons.lang3.Range$ComparableComparator");
      Comparator<String> comparator0 = range0.getComparator();
      Range<Object> range1 = Range.between((Object) "org.apache.commons.lang3.Range$ComparableComparator", (Object) "org.apache.commons.lang3.Range$ComparableComparator", (Comparator<Object>) null);
      Range<Object> range2 = Range.is((Object) comparator0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isAfterRange(range2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      // Undeclared exception!
      try { 
        Range.is(range0, (Comparator<Range<Object>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "Element is null", comparator0);
      Range<Object> range1 = Range.is((Object) "j>5A", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      Range<Object> range1 = Range.between((Object) "", (Object) "", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.contains(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Object object1 = range0.getMinimum();
      // Undeclared exception!
      try { 
        Range.between((Object) "", (Object) object1, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.between((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      String string0 = range0.toString();
      assertEquals("[0..0]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer1, comparator0);
      Range<Integer> range1 = Range.is(integer1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      Range<Integer> range1 = Range.is(integer0);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2974)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "", (Object) "", comparator0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range<String> range0 = Range.between("", "org.apache.commons.lang3.Range");
      Range<String> range1 = Range.is(", element2=");
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range<String> range0 = Range.between("n?b=$H&Gs1gk", "7qLhX:WY1Gn{d%IS");
      Range<String> range1 = Range.is("n?b=$H&Gs1gk");
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-3), (-2924), 931, 12).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between(", element2=", "M7lJ;pH&Xm06P`", comparator0);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 1).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isBefore(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      Object object0 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(453, (-2723)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is(object0, comparator1);
      boolean boolean0 = range1.isAfter(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      boolean boolean0 = range0.isAfter(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(55, 0, (-247), (-247)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator1);
      Range<Object> range2 = range1.intersectionWith(range1);
      Object object0 = new Object();
      boolean boolean0 = range1.contains(object0);
      assertSame(range1, range2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = Integer.valueOf(260);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(264);
      boolean boolean0 = range0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(731).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range<String> range0 = Range.between("org.apache.commons.lang3.Range$ComparableComparator", "");
      Range<String> range1 = Range.is("", (Comparator<String>) null);
      Range<String> range2 = range1.intersectionWith(range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "", (Object) "", comparator0);
      boolean boolean0 = range0.isBeforeRange((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      boolean boolean0 = range0.isBeforeRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-702), (-65), 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) ";nz7}", (Object) ";nz7}", comparator0);
      range0.intersectionWith(range0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range<String> range0 = Range.between("", "@_>tMe]#4\"j_");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1, 1, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.between("", " ", comparator0);
      Range<String> range2 = range0.intersectionWith(range1);
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1097).when(comparator0).compare(anyInt() , anyInt());
      Integer integer0 = new Integer(3033);
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      boolean boolean0 = range0.isAfterRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      Object object0 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(453, (-2723)).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is(object0, comparator1);
      boolean boolean0 = range1.containsRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(1763);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.containsRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, (-2723)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      boolean boolean0 = range0.containsRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range<String> range0 = Range.is("");
      int int0 = range0.elementCompareTo("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(3232);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      // Undeclared exception!
      try { 
        range0.elementCompareTo((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isBefore((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-702), (-65), 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) ";nz7}", (Object) ";nz7}", comparator0);
      boolean boolean0 = range0.isBefore(";nz7}");
      boolean boolean1 = range0.isEndedBy(";nz7}");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isEndedBy((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-702), (-65)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) ";nz7}", (Object) ";nz7}", comparator0);
      boolean boolean0 = range0.isEndedBy(";nz7}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      boolean boolean0 = range0.isStartedBy(";!=y`JlRhkc@SPmy");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) "", comparator0);
      boolean boolean0 = range1.isStartedBy((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range<String> range0 = Range.is("org.apache.commons.lang3.Range$ComparableComparator");
      boolean boolean0 = range0.isStartedBy("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range<String> range0 = Range.between("QFL.<lEu`@P7:)s/", "org.apache.commons.lang3.Range$ComparableComparator");
      int int0 = range0.elementCompareTo("$VALUES");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range<String> range0 = Range.is("?_D&/Zte?SIbE{lP</b");
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      Object object0 = range1.getMinimum();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.is((Object) object0, comparator1);
      boolean boolean0 = range2.isAfter((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 1, 1720).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      int int0 = range0.elementCompareTo(integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between(", element2=", "M7lJ;pH&Xm06P`", comparator0);
      boolean boolean0 = range0.contains((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        Range.between((Object) integer0, (Object) null, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=-1, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(55).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator1);
      String string0 = range1.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      Object object0 = range0.getMaximum();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("pS4#Cf@S,tt", "pS4#Cf@S,tt", "pS4#Cf@S,tt").when(comparator0).toString();
      doReturn(0, 0, 0, (-2723), 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) ";!=y`JlRhkc@SPmy", comparator0);
      assertFalse(range0.isNaturalOrdering());
      
      Object object0 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(453, (-2723), 453, 453).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is(object0, comparator1);
      Range<Object> range2 = range0.intersectionWith(range1);
      boolean boolean0 = range2.containsRange(range1);
      assertTrue(range2.equals((Object)range1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        range0.intersectionWith((Range<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }
}
