/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 21:11:01 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3691.4F);
      int[] intArray0 = new int[3];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      int int0 = hashCodeBuilder2.toHashCode();
      assertEquals((-168944625), (int)hashCodeBuilder1.build());
      assertEquals((-168944625), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "Cannot store ", stringArray0);
      assertEquals((-2009355595), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[2];
      int int0 = HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, (-1), integer0, false, (Class<? super Integer>) class0, stringArray0);
      assertEquals((-2147483643), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((-1921), (-399), (Object) hashCodeBuilder0, false);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals((-305826712), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode(1237, 1237, object0);
      assertEquals(1237, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[5] = object0;
      int int0 = HashCodeBuilder.reflectionHashCode((-3725), (-3671), objectArray0[5]);
      assertEquals((-3725), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(0.0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((short) (-3671));
      int[] intArray0 = new int[4];
      intArray0[0] = (-4819);
      intArray0[1] = (int) (short) (-3671);
      intArray0[2] = (int) (short) (-3671);
      intArray0[3] = (int) (short) (-3671);
      hashCodeBuilder1.append(false);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(intArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-4819);
      objectArray0[1] = (Object) (-3671);
      objectArray0[3] = (Object) hashCodeBuilder1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (-3671);
      objectArray0[7] = (Object) (-3671);
      objectArray0[8] = (Object) (-3671);
      hashCodeBuilder4.append(objectArray0);
      hashCodeBuilder2.build();
      assertEquals((-1835282176), hashCodeBuilder2.toHashCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      hashCodeBuilder1.append((double) 0L);
      hashCodeBuilder0.build();
      assertEquals(23273, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper((-2679));
      assertEquals((-2050), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 1;
      hashCodeBuilder0.append(longArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      char[] charArray0 = new char[1];
      hashCodeBuilder0.append(charArray0);
      assertEquals(1, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte) (-1));
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((long) (-1));
      hashCodeBuilder3.append((Object) hashCodeBuilder0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      hashCodeBuilder3.append(byteArray0);
      assertEquals(0, (int)hashCodeBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 3463);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(3463);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1999.615F);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(floatArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(false);
      hashCodeBuilder3.append((byte) (-88));
      hashCodeBuilder3.append((short) (byte) (-88));
      assertEquals((-1950288545), (int)hashCodeBuilder1.build());
      assertEquals((-1950288545), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(0.0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((short) (-3671));
      int[] intArray0 = new int[4];
      hashCodeBuilder3.append(intArray0);
      hashCodeBuilder3.append((long) (-3671));
      assertEquals((-1495595023), (int)hashCodeBuilder1.build());
      assertEquals((-1495595023), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(340.67F);
      hashCodeBuilder1.append(0);
      assertEquals((-945897448), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append(true);
      assertEquals(1, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 1211);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(1242.9614F);
      HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, false);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append('3');
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1211;
      doubleArray0[3] = (double) (-1);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append(doubleArray0);
      HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder3, false);
      long[] longArray0 = new long[3];
      longArray0[0] = 1175L;
      longArray0[1] = (long) 23464;
      longArray0[2] = (long) '3';
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder2.append(longArray0);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((Object) hashCodeBuilder1);
      hashCodeBuilder2.append(longArray0);
      hashCodeBuilder5.append((boolean[]) null);
      assertEquals(1609737107, hashCodeBuilder2.toHashCode());
      assertEquals(1609737107, (int)hashCodeBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-227), 0, (Integer) null, true, (Class<? super Integer>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append('G');
      assertEquals(700, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      String[] stringArray0 = new String[4];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0);
      assertEquals(23426, int0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((long[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(43, (short)19);
      hashCodeBuilder0.append((int[]) null);
      assertEquals(817, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2585, 2585);
      hashCodeBuilder0.append((double[]) null);
      assertEquals(6682225, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[10];
      hashCodeBuilder0.append(byteArray0);
      assertEquals((-2120005431), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[4] = true;
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(43, (short)19);
      hashCodeBuilder0.append(booleanArray0);
      assertEquals(2025586524, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((short) (-2651), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(2501, 0, object0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-1830), (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(1775.9);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1775.9;
      doubleArray0[1] = 1775.9;
      doubleArray0[2] = 1775.9;
      doubleArray0[3] = 1775.9;
      hashCodeBuilder1.append(doubleArray0);
      HashCodeBuilder.getRegistry();
      HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, (Collection<String>) null);
      HashCodeBuilder.unregister(hashCodeBuilder0);
      boolean[] booleanArray0 = new boolean[0];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((Object) hashCodeBuilder0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1330;
      intArray0[1] = 23464;
      intArray0[2] = 23464;
      intArray0[3] = 23464;
      intArray0[4] = 110;
      intArray0[5] = 23464;
      hashCodeBuilder3.append(intArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)1703;
      hashCodeBuilder2.append(shortArray0);
      hashCodeBuilder2.append(false);
      hashCodeBuilder2.append((int) (short)32);
      assertEquals(657770185, (int)hashCodeBuilder0.build());
      assertEquals(657770185, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Class<HashCodeBuilder> class0 = HashCodeBuilder.class;
      String[] stringArray0 = new String[9];
      int int0 = HashCodeBuilder.reflectionHashCode(243, 243, hashCodeBuilder0, true, (Class<? super HashCodeBuilder>) class0, stringArray0);
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(14349884, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      int int0 = HashCodeBuilder.reflectionHashCode(1515, 1605, linkedHashSet0, false, (Class<? super LinkedHashSet<Integer>>) class0, stringArray0);
      assertEquals(1515, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder.register(hashCodeBuilder0);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, false);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = HashCodeBuilder.isRegistered((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-243), (-2465));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((float) (-2465));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1102);
      shortArray0[1] = (short)0;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(shortArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.appendSuper(17);
      Object[] objectArray0 = new Object[0];
      hashCodeBuilder3.append(objectArray0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((float) (short)0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short) (-1102);
      intArray0[6] = (int) (short) (-1102);
      intArray0[7] = (int) (short) (-1102);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder3.appendSuper((-1102));
      hashCodeBuilder5.append((char[]) null);
      hashCodeBuilder1.append(intArray0);
      hashCodeBuilder0.append(920.5331F);
      hashCodeBuilder4.append((byte) (-72));
      boolean boolean0 = HashCodeBuilder.isRegistered((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2585, 2585);
      int int0 = HashCodeBuilder.reflectionHashCode(2585, 2585, (Object) hashCodeBuilder0, false);
      assertEquals(93692786, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-1091), 1460, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.hashCode();
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }
}
