/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 21:13:32 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CompareToBuilder_ESTest extends CompareToBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1L), 0L);
      boolean[] booleanArray0 = new boolean[8];
      compareToBuilder1.append(booleanArray0, booleanArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append(0.0F, (-1179.02F));
      double[] doubleArray0 = new double[4];
      compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)51, (byte) (-14));
      byte[] byteArray0 = new byte[7];
      compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[9];
      charArray1[0] = 'G';
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(0L, 1L);
      char[] charArray0 = new char[7];
      compareToBuilder0.append(charArray0, charArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      short[] shortArray0 = new short[1];
      compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      int[] intArray0 = new int[9];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[9];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      long[] longArray0 = new long[7];
      compareToBuilder0.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1135L), 1L);
      compareToBuilder1.append(true, false);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(0.0, (-1874.28272519521));
      compareToBuilder0.append((byte)0, (byte)0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-1135L), 1L);
      compareToBuilder0.append('k', '7');
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-1135L), 1L);
      compareToBuilder0.append((short)44, (short)44);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, object0);
      compareToBuilder1.append((-2248), 0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)23, (byte)84);
      compareToBuilder1.append(2028L, (long) (byte)23);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      compareToBuilder1.appendSuper(1);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(1254);
      int int0 = compareToBuilder0.toComparison();
      assertEquals(1254, (int)compareToBuilder0.build());
      assertEquals(1254, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      int int0 = CompareToBuilder.reflectionCompare(object0, object0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = new CompareToBuilder();
      compareToBuilder1.append((long) (byte)1, (-1L));
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder1, (Object) compareToBuilder0);
      assertEquals(0, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder1.build());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-765L), 1886L);
      compareToBuilder0.build();
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((byte)0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-765L), 1886L);
      Object[] objectArray0 = new Object[7];
      compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "ew&'H~B;jutHD6@@J'U", (Object) "ew&'H~B;jutHD6@@J'U");
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(4066.4539F, 4066.4539F);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)37, (byte)53);
      compareToBuilder1.append((float) (short)1681, (float) (short)1681);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) ">AWqk1;Gm", (Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "O9DJbkG579I", object0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(1935);
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) integer0, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[1];
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) intArray0[0], object0, (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) 0.0F;
      objectArray1[1] = (Object) comparator0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$1676556646 cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = new Integer((byte)0);
      // Undeclared exception!
      try { 
        compareToBuilder0.append((Object) integer0, (Object) compareToBuilder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[5];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(770);
      Object[] objectArray0 = new Object[3];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder1.append(objectArray0, objectArray0, comparator0);
      assertEquals(770, compareToBuilder0.toComparison());
      assertEquals(770, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 1L);
      compareToBuilder1.append((double) 0L, 0.0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) compareToBuilder0, (Object) null, (Comparator<?>) comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = new Integer(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) integer0, (Object) integer0, (Comparator<?>) comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)51, (byte) (-14));
      compareToBuilder0.append((Object) compareToBuilder1, (Object) compareToBuilder0, (Comparator<?>) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = new Integer((byte)1);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, (Object) compareToBuilder0, true, (Class<?>) class0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, object0, false, class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[7];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer0, true, (Class<?>) class0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      int int0 = CompareToBuilder.reflectionCompare(object0, (Object) compareToBuilder0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int int0 = compareToBuilder0.toComparison();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      compareToBuilder1.append((Object) compareToBuilder1, (Object) "");
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[5];
      compareToBuilder0.append((boolean[]) null, booleanArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = new boolean[0];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(770);
      boolean[] booleanArray0 = new boolean[8];
      compareToBuilder1.append(booleanArray0, booleanArray0);
      assertEquals(770, (int)compareToBuilder0.build());
      assertEquals(770, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[0];
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[5];
      compareToBuilder0.append((float[]) null, floatArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[8];
      compareToBuilder0.append((-4893), (-2876));
      compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      double[] doubleArray0 = new double[3];
      compareToBuilder0.append(doubleArray0, (double[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[3];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[1];
      compareToBuilder0.append((double[]) null, doubleArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[9];
      compareToBuilder0.append(floatArray0, floatArray1);
      double[] doubleArray0 = new double[6];
      compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((double[]) null, (double[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byte[] byteArray1 = new byte[9];
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      char[] charArray1 = new char[9];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[2];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append((byte)1, (byte)0);
      char[] charArray0 = new char[8];
      compareToBuilder0.append(charArray0, charArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      short[] shortArray1 = new short[5];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      short[] shortArray0 = new short[3];
      short[] shortArray1 = new short[14];
      compareToBuilder0.append(shortArray1, shortArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[5];
      short[] shortArray1 = new short[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[3];
      compareToBuilder0.append((short[]) null, shortArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[3];
      short[] shortArray1 = new short[2];
      compareToBuilder0.append(shortArray1, shortArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append((byte)1, (byte)0);
      short[] shortArray0 = new short[1];
      compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[9];
      compareToBuilder0.append(intArray0, (int[]) null);
      compareToBuilder0.build();
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[5];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[4];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[5];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[3];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      long[] longArray0 = new long[2];
      compareToBuilder1.append(longArray0, longArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[9];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray1, objectArray0, comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = new Object[7];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[5];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, (Object[]) null, comparator0);
      int[] intArray0 = new int[4];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(true, false);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, false);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)1, (byte)0);
      compareToBuilder1.append(false, false);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append((float) (short)0, (-117.50212F));
      compareToBuilder0.append(4479.542F, (-1.0F));
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append((byte)1, (byte)0);
      compareToBuilder0.append((double) (byte)1, 1.5);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0, 0.0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)0, (byte)0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)23, (byte)84);
      int int0 = compareToBuilder1.toComparison();
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append('}', 'O');
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append('2', '4');
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)1, (byte)0);
      compareToBuilder1.append('B', 'B');
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('O', 'O');
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)0, (short)0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((short)0, (short) (byte)36);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append((byte)1, (byte)0);
      compareToBuilder0.append((short) (byte)1, (short) (byte)1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append((short) (byte) (-86), (short) (-286));
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append((-1), (-1381));
      float[] floatArray0 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-4893), (-2876));
      compareToBuilder0.append((byte) (-5), (byte) (-5));
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append((byte)1, (byte)0);
      compareToBuilder0.append((-2656), (int) (byte)0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-2876), (-2876));
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(216L, 216L);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[8];
      longArray1[0] = 903L;
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append((byte)1, (byte)0);
      compareToBuilder0.append((long) (byte)1, (-1L));
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) compareToBuilder0, object0, (Comparator<?>) comparator0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 79.0F;
      Object[] objectArray1 = new Object[1];
      compareToBuilder0.append(objectArray0, objectArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, object0, comparator0);
      byte[] byteArray0 = new byte[4];
      compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((float) 216L, 0.0F);
      compareToBuilder0.append((Object) compareToBuilder0, (Object) compareToBuilder1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      compareToBuilder1.appendSuper((-1));
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer((byte)1);
      Integer integer1 = new Integer((short)1);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      int int0 = CompareToBuilder.reflectionCompare((Object) "A+V/plDu", (Object) "", true, (Class<?>) class0, stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, false, class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = compareToBuilder0.build();
      Integer integer1 = new Integer(581);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, (Collection<String>) linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[8];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = compareToBuilder0.build();
      assertEquals(0, (int)integer0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer0, (Collection<String>) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer(471);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, object0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
}
