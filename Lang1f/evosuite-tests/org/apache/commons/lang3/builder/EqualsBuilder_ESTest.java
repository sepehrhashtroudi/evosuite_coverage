/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 21:14:41 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EqualsBuilder_ESTest extends EqualsBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = new boolean[4];
      equalsBuilder0.append(booleanArray0, booleanArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[8];
      equalsBuilder0.append(floatArray0, floatArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      equalsBuilder0.append(doubleArray0, doubleArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[4];
      equalsBuilder0.append(byteArray0, byteArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[8];
      equalsBuilder0.append(charArray0, charArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[8];
      equalsBuilder0.append(shortArray0, shortArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[4];
      equalsBuilder0.append(intArray0, intArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[1];
      equalsBuilder0.append(longArray0, longArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[8];
      equalsBuilder0.append(objectArray0, objectArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      equalsBuilder0.append((-2146.016599525), (-1.0));
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append((byte)83, (byte)0);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append('B', ']');
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append((short)283, (short)0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      equalsBuilder0.append((-1L), 713L);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      EqualsBuilder.unregister("", boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, false);
      assertTrue(boolean0);
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (Collection<String>) linkedList0);
      assertTrue(boolean0);
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = EqualsBuilder.isRegistered((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[2];
      Integer integer0 = new Integer((byte) (-128));
      boolean boolean0 = EqualsBuilder.isRegistered(integer0, charArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.appendSuper(false);
      boolean boolean0 = equalsBuilder0.isEquals();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0.0F, 0.0F);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      equalsBuilder0.append('z', 'o');
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append((-575), 1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1030L, 1030L);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Boolean boolean0 = Boolean.FALSE;
      equalsBuilder0.append((Object) boolean0, (Object) equalsBuilder0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) equalsBuilder0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = Boolean.valueOf((String) null);
      Class<String> class0 = String.class;
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) boolean0, false, (Class<?>) class0, (String[]) null);
      assertFalse(boolean1);
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = equalsBuilder0.build();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[2];
      boolean boolean1 = EqualsBuilder.reflectionEquals(object0, (Object) boolean0, true, (Class<?>) class0, stringArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, false, (Class<?>) class0, stringArray0);
      assertFalse(boolean0);
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = equalsBuilder0.isEquals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = new boolean[1];
      equalsBuilder0.append(booleanArray0, booleanArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[5];
      equalsBuilder0.append(booleanArray0, (boolean[]) null);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[7];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1582.7F);
      float[] floatArray1 = new float[4];
      equalsBuilder0.append(floatArray0, floatArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[4];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[5];
      equalsBuilder0.append(floatArray0, (float[]) null);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[2];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      equalsBuilder0.append((float) 0, 2989.0393F);
      equalsBuilder0.append((float[]) null, (float[]) null);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[6];
      equalsBuilder0.append(doubleArray1, doubleArray0);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      double[] doubleArray0 = new double[9];
      equalsBuilder0.append((double[]) null, doubleArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      byte[] byteArray0 = new byte[6];
      equalsBuilder0.append(byteArray0, (byte[]) null);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[4];
      equalsBuilder0.append(byteArray0, byteArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[8];
      equalsBuilder0.append((byte[]) null, byteArray0);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      Object[] objectArray1 = new Object[5];
      equalsBuilder0.append(objectArray0, objectArray1);
      equalsBuilder0.append((byte[]) null, (byte[]) null);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte[]) null, (byte[]) null);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = '!';
      char[] charArray1 = new char[3];
      charArray1[1] = '!';
      charArray1[0] = 'c';
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[9];
      equalsBuilder0.append(charArray1, charArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      char[] charArray0 = new char[1];
      equalsBuilder0.append(charArray0, (char[]) null);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((float) 0, 2989.0393F);
      char[] charArray0 = new char[1];
      equalsBuilder1.append(charArray0, charArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[6];
      equalsBuilder0.append(shortArray0, (short[]) null);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[2];
      equalsBuilder0.append(shortArray0, shortArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      char[] charArray0 = new char[7];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((char[]) null, charArray0);
      equalsBuilder1.append((short[]) null, (short[]) null);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2342;
      int[] intArray1 = new int[7];
      equalsBuilder0.append(intArray0, intArray1);
      equalsBuilder0.build();
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[7];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[6];
      equalsBuilder0.append(intArray0, (int[]) null);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[2];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      Object[] objectArray1 = new Object[5];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      int[] intArray0 = new int[8];
      equalsBuilder1.append(intArray0, intArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[9];
      equalsBuilder0.append(longArray0, longArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      long[] longArray0 = new long[5];
      equalsBuilder0.append((long[]) null, longArray0);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[3];
      equalsBuilder0.append(longArray0, (long[]) null);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = new Object[4];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      boolean[] booleanArray0 = new boolean[1];
      equalsBuilder1.append(booleanArray0, booleanArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[4];
      equalsBuilder0.append(objectArray0, (Object[]) null);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[2];
      equalsBuilder0.append((Object[]) null, objectArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[8];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-2369), (short)0);
      Object[] objectArray0 = new Object[5];
      equalsBuilder1.append(objectArray0, objectArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      equalsBuilder0.append(false, true);
      double[] doubleArray0 = new double[1];
      equalsBuilder0.append(doubleArray0, doubleArray0);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      Object[] objectArray1 = new Object[5];
      equalsBuilder0.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, true);
      assertSame(equalsBuilder0, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-426.53), (double) 1179.2F);
      assertSame(equalsBuilder1, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append((byte) (-126), (byte)97);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append((short) (-2369), (short)0);
      equalsBuilder0.append((byte)0, (byte)0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)0, (byte)0);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      char[] charArray1 = new char[3];
      equalsBuilder0.append(charArray0, charArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append('2', 'p');
      assertSame(equalsBuilder2, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append('*', '*');
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1036), (short) (-1036));
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((short)821, (short)29);
      assertSame(equalsBuilder2, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      equalsBuilder0.append((float) 0, 2989.0393F);
      long[] longArray0 = new long[1];
      equalsBuilder0.append(longArray0, longArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-2369), (short)0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int) (short) (-2369), (-2803));
      assertFalse(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0, 0);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-1.0), (-1.0));
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[0];
      equalsBuilder0.append(floatArray0, floatArray1);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(2587L, (long) (byte) (-7));
      assertFalse(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) null, (Object) equalsBuilder0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte)0, (float) 1L);
      assertFalse(equalsBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      equalsBuilder0.append((Object) equalsBuilder0, (Object) null);
      equalsBuilder0.append((Object) equalsBuilder0, (Object) "");
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(false);
      assertFalse(equalsBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = 'Y';
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) 'G';
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) 'N';
      objectArray1[1] = (Object) 'N';
      objectArray1[2] = (Object) 'N';
      objectArray1[3] = (Object) 'Y';
      Object object0 = new Object();
      objectArray1[4] = object0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&'j(RJD9msKx/:dV1";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "7ok)p0if'c,X*V";
      stringArray0[4] = "}E";
      stringArray0[5] = "uo}:$:F-S\"c0";
      stringArray0[6] = "C}n^P7y<";
      stringArray0[7] = "org.apache.commons.lang3.tuple.MutablePair";
      EqualsBuilder.reflectionEquals(objectArray1[0], objectArray1[2], stringArray0);
      Object object1 = new Object();
      objectArray1[6] = object1;
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      IDKey iDKey1 = new IDKey(iDKey0);
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) iDKey0, (Object) iDKey1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder0, (String[]) null);
      assertTrue(equalsBuilder0.isEquals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IDKey iDKey0 = new IDKey((Object) null);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) null, (Object) iDKey0, true, (Class<?>) class0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = equalsBuilder0.build();
      assertTrue(boolean0);
      
      IDKey iDKey0 = new IDKey(boolean0);
      EqualsBuilder.register(iDKey0, (Object) null);
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.FALSE;
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[1];
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean1, false, (Class<?>) class0, stringArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, object0, false);
      assertFalse(boolean0);
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reset();
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = equalsBuilder0.build();
      assertTrue(boolean0);
      
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      EqualsBuilder.getRegisterPair(boolean0, iDKey0);
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Set<Pair<IDKey, IDKey>> set0 = EqualsBuilder.getRegistry();
      //  // Unstable assertion: assertNotNull(set0);
      
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) set0, object0, true, (Class<?>) class0, stringArray0);
      //  // Unstable assertion: assertEquals(9, set0.size());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.setEquals(true);
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) iDKey0, (Object) "$(s", (Collection<String>) linkedList0);
      assertTrue(equalsBuilder0.isEquals());
      assertFalse(boolean0);
  }
}
