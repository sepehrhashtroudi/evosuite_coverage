/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:09:04 GMT 2022
 */

package org.apache.commons.lang3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Set;
import org.apache.commons.lang3.exception.ContextedException;
import org.apache.commons.lang3.exception.ContextedRuntimeException;
import org.apache.commons.lang3.exception.ExceptionContext;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ContextedException_ESTest extends ContextedException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("H#r;,Y5~~>)4T");
      ContextedException contextedException0 = new ContextedException("H#r;,Y5~~>)4T", mockThrowable0, (ExceptionContext) null);
      String string0 = contextedException0.getRawMessage();
      assertEquals("H#r;,Y5~~>)4T", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException("");
      String string0 = contextedException0.getRawMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      contextedException0.addContextValue("", "");
      String string0 = contextedException0.getMessage();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      String string0 = contextedException0.getFormattedExceptionMessage("c(uoe8y Zy");
      assertEquals("c(uoe8y Zy", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException();
      Object object0 = new Object();
      ContextedRuntimeException contextedRuntimeException1 = contextedRuntimeException0.addContextValue("?e-x6rR-:j", object0);
      ContextedException contextedException0 = new ContextedException("#c9Q'rstmV4q", contextedRuntimeException1, contextedRuntimeException1);
      List<Object> list0 = contextedException0.getContextValues("?e-x6rR-:j");
      assertTrue(list0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      ContextedException contextedException1 = contextedException0.addContextValue("org.apache.commons.lang3.tuple.Pair", "org.apache.commons.lang3.tuple.Pair");
      Set<String> set0 = contextedException1.getContextLabels();
      assertTrue(set0.contains("org.apache.commons.lang3.tuple.Pair"));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      String string0 = contextedException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException();
      ContextedException contextedException0 = new ContextedException("#c9Q'rstmV4q", contextedRuntimeException0, contextedRuntimeException0);
      List<Object> list0 = contextedException0.getContextValues("?e-x6rR-:j");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException("m81=-;'KM) ");
      ContextedException contextedException1 = new ContextedException(contextedException0);
      assertFalse(contextedException1.equals((Object)contextedException0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException("SNbTnHUhFP&NsF617");
      ContextedException contextedException1 = contextedException0.setContextValue("SNbTnHUhFP&NsF617", "SNbTnHUhFP&NsF617");
      List<Pair<String, Object>> list0 = contextedException1.getContextEntries();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      List<Pair<String, Object>> list0 = contextedException0.getContextEntries();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      ContextedException contextedException1 = contextedException0.addContextValue("", "");
      Object object0 = contextedException1.getFirstContextValue("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      Set<String> set0 = contextedException0.getContextLabels();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      String string0 = contextedException0.getRawMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      Object object0 = contextedException0.getFirstContextValue("---------------------------------");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ContextedException contextedException0 = new ContextedException("vEv:?.6mSW:A]kO~", mockThrowable0);
      ContextedException contextedException1 = contextedException0.setContextValue("", "");
      assertSame(contextedException1, contextedException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContextedException contextedException0 = new ContextedException();
      String string0 = contextedException0.getFormattedExceptionMessage("");
      assertEquals("", string0);
  }
}
