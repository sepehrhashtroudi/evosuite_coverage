/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:08:23 GMT 2022
 */

package org.apache.commons.lang3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ExceptionUtils_ESTest extends ExceptionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst(">Z6vtC6tw");
      linkedList0.offerFirst((String) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("Ow;4,", mockThrowable0);
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockThrowable2);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("yqm");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Class<String> class0 = String.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable1, (Class<?>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      Class<Integer> class0 = Integer.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable1, (Class<?>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Object> class0 = Object.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("qCc#b)<s|YRFP_");
      MockThrowable mockThrowable1 = new MockThrowable("1l", mockThrowable0);
      MockThrowable mockThrowable2 = new MockThrowable("qCc#b)<s|YRFP_", mockThrowable0);
      mockThrowable0.initCause(mockThrowable2);
      Throwable throwable0 = ExceptionUtils.getRootCause(mockThrowable1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: qCc#b)<s|YRFP_", throwable0.toString());
      assertNotNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("java.runtime.version");
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Throwable> class0 = Throwable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("1.8");
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables((Throwable) null);
      assertEquals(0, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Throwable> list0 = ExceptionUtils.getThrowableList((Throwable) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ExceptionUtils.getThrowableCount((Throwable) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable1);
      assertNotNull(throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("w", (Throwable) null);
      String string0 = ExceptionUtils.getMessage(mockThrowable0);
      assertEquals("MockThrowable: w", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = ExceptionUtils.getMessage((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("C1qA_#.");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) mockPrintStream0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("os.name");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      mockThrowable0.initCause(mockThrowable1);
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockThrowable0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = ExceptionUtils.getRootCause(mockThrowable0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable1, (String[]) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNotNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      String string0 = ExceptionUtils.getStackTrace(mockThrowable0);
      //  // Unstable assertion: assertEquals("sun.reflect.GeneratedConstructorAccessor41.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockThrowable0);
      assertEquals(1, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      String string0 = ExceptionUtils.getRootCauseMessage(mockThrowable1);
      assertEquals("MockThrowable: ", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = ExceptionUtils.getRootCauseMessage(mockThrowable0);
      assertEquals("MockThrowable: ", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String[] stringArray0 = ExceptionUtils.getStackFrames(mockThrowable0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@J?'e_");
      List<String> list0 = ExceptionUtils.getStackFrameList((Throwable) null);
      ExceptionUtils.removeCommonFrames(linkedList0, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@J?'e_");
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
      assertFalse(linkedList0.contains("@J?'e_"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("java.runtime.version");
      List<String> list0 = ExceptionUtils.getStackFrameList(mockThrowable0);
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames((List<String>) null, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("p^ODPR35");
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintWriter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintWriter must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintWriter) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockFile mockFile0 = new MockFile(": ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintWriter) mockPrintWriter0);
      assertEquals(50L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("rc0R7B%S4C*|'MaNc8");
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The PrintStream must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Class<Throwable> class0 = Throwable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("1.8");
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, (-394));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      String[] stringArray0 = new String[9];
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0, stringArray0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0, (String[]) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      ExceptionUtils.getCause((Throwable) null, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getDefaultCauseMethodNames();
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) null, class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("java.runtime.version");
      int int0 = ExceptionUtils.getThrowableCount(mockThrowable0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("java.runtime.version");
      Class<Object> class0 = Object.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, 0);
      assertEquals(0, int0);
  }
}
