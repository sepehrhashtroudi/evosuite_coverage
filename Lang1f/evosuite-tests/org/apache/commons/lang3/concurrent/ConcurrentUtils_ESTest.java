/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:30:01 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
import org.apache.commons.lang3.concurrent.ConcurrentUtils;
import org.apache.commons.lang3.concurrent.ConstantInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentUtils_ESTest extends ConcurrentUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentSkipListMap<String, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Integer>();
      String string0 = null;
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<String, Integer>) concurrentSkipListMap0, (String) null, (ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentSkipListMap<Error, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Integer>();
      ConcurrentSkipListMap<Error, Integer> concurrentSkipListMap1 = new ConcurrentSkipListMap<Error, Integer>();
      concurrentSkipListMap0.putAll(concurrentSkipListMap1);
      MockError mockError0 = new MockError("B");
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentSkipListMap0.computeIfPresent(mockError0, biFunction0);
      concurrentSkipListMap0.tailMap((Error) mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Integer>) concurrentSkipListMap0, (Error) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentHashMap<Delayed, String> concurrentHashMap0 = new ConcurrentHashMap<Delayed, String>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask.getPool();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, (ExecutorService) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Delayed, String>) concurrentHashMap0, (Delayed) null, (ConcurrentInitializer<String>) callableBackgroundInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      MockError mockError0 = new MockError("org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask", mockRuntimeException0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(mockError0);
      concurrentUtils_ConstantFuture0.isDone();
      ConcurrentSkipListMap<Integer, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, Object>();
      Integer integer0 = new Integer(4010);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4010);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<Object> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (-309L), timeUnit0);
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Integer, Object>) concurrentSkipListMap0, integer0, (Object) scheduledFuture0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException((String) null, mockError0);
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException1);
      concurrentUtils_ConstantFuture1.cancel(false);
      ConcurrentSkipListMap<ForkJoinTask<Error>, RuntimeException> concurrentSkipListMap1 = new ConcurrentSkipListMap<ForkJoinTask<Error>, RuntimeException>();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      MockThread mockThread0 = new MockThread();
      ForkJoinTask<Error> forkJoinTask0 = forkJoinPool0.submit((Runnable) mockThread0, (Error) mockError0);
      ForkJoinTask<Error> forkJoinTask1 = forkJoinPool0.submit(forkJoinTask0);
      RuntimeException runtimeException0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<ForkJoinTask<Error>, RuntimeException>) concurrentSkipListMap1, forkJoinTask1, (ConcurrentInitializer<RuntimeException>) null);
      assertNull(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(integer0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      concurrentUtils_ConstantFuture0.get(0L, timeUnit0);
      String string0 = "30ECO_5ALAv*8$";
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError("30ECO_5ALAv*8$", mockError0);
      mockError1.printStackTrace();
      mockError1.fillInStackTrace();
      ExecutionException executionException0 = new ExecutionException("Callable must not be null!", mockError1);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<RuntimeException, Delayed>) null, (RuntimeException) mockRuntimeException0, (Delayed) null);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(mockRuntimeException0);
      long long0 = 3486L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      concurrentUtils_ConstantFuture0.get(3486L, timeUnit0);
      ExecutionException executionException0 = new ExecutionException("Callable must not be null!", mockRuntimeException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      executionException0.addSuppressed(mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "{u2-SFVoY&r3i6=\"Ok";
      ConcurrentUtils.constantFuture((Object) "{u2-SFVoY&r3i6=\"Ok");
      Callable<RuntimeException> callable0 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callable0).toString();
      ConstantInitializer<Callable<RuntimeException>> constantInitializer0 = new ConstantInitializer<Callable<RuntimeException>>(callable0);
      Callable<RuntimeException> callable1 = ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Callable<RuntimeException>>) constantInitializer0);
      ConcurrentUtils.constantFuture((Object) callable1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(mockRuntimeException0);
      concurrentUtils_ConstantFuture0.isDone();
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentUtils.constantFuture("");
      String string0 = null;
      ConcurrentUtils.extractCauseUnchecked((ExecutionException) null);
      ExecutionException executionException0 = new ExecutionException((String) null, (Throwable) null);
      executionException0.printStackTrace();
      MockFile mockFile0 = new MockFile("viL3McaA*}^9SG*MKI~", "");
      File file0 = MockFile.createTempFile("viL3McaA*}^9SG*MKI~", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      executionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ConcurrentUtils.handleCause(executionException0);
      ConstantInitializer<RuntimeException> constantInitializer0 = new ConstantInitializer<RuntimeException>((RuntimeException) null);
      ConcurrentUtils.initialize((ConcurrentInitializer<RuntimeException>) constantInitializer0);
      MockError mockError0 = new MockError("_6WyQY?.7klr5", (Throwable) null);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isDone();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>("_6WyQY?.7klr5");
      concurrentUtils_ConstantFuture1.isDone();
      ConcurrentMap<ForkJoinTask<Integer>, Delayed> concurrentMap0 = null;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      ForkJoinTask<Integer> forkJoinTask1 = forkJoinPool0.submit(forkJoinTask0);
      forkJoinTask1.fork();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2175, (ThreadFactory) null, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentSkipListMap<Integer, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, String>();
      Integer integer0 = new Integer((-2897));
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, (ExecutorService) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Integer, String>) concurrentSkipListMap0, integer0, (ConcurrentInitializer<String>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2232);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(integer0);
      concurrentUtils_ConstantFuture0.cancel(true);
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Delayed>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentSkipListMap<Integer, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, Integer>();
      int int0 = 517;
      Integer integer0 = new Integer(517);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      concurrentSkipListMap0.put(integer0, integer0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, forkJoinPool0);
      concurrentSkipListMap0.descendingMap();
      Integer integer1 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Integer, Integer>) concurrentSkipListMap0, integer0, (ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(integer1);
      concurrentUtils_ConstantFuture0.isCancelled();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Delayed>((Delayed) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      concurrentUtils_ConstantFuture1.get(0L, timeUnit0);
      concurrentUtils_ConstantFuture1.get();
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Object, Integer>) null, (Object) concurrentUtils_ConstantFuture1, (ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
      Callable<Callable<Object>> callable1 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Callable<Object>>(callable1);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      Callable<ForkJoinTask<Error>> callable0 = (Callable<ForkJoinTask<Error>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2405);
      CallableBackgroundInitializer<ForkJoinTask<Error>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Error>>(callable0, scheduledThreadPoolExecutor0);
      callableBackgroundInitializer0.start();
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, ForkJoinTask<Error>>) null, (Error) mockError0, (ConcurrentInitializer<ForkJoinTask<Error>>) callableBackgroundInitializer0);
      ConcurrentUtils.constantFuture((Object) null);
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "f_>9NMxn/&D[Wu";
      MockError mockError0 = new MockError("OYalVSqrgj8xr8");
      ExecutionException executionException0 = new ExecutionException("f_>9NMxn/&D[Wu", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(850);
      ConcurrentUtils.putIfAbsent((ConcurrentMap<String, Integer>) null, "", integer0);
      MockThrowable mockThrowable0 = new MockThrowable("cWnvit6_W*yFon");
      ExecutionException executionException0 = new ExecutionException("cWnvit6_W*yFon", mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cWnvit6_W*yFon
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      ExecutionException executionException1 = new ExecutionException("org.apache.commons.lang3.concurrent.ConcurrentUtils", executionException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.apache.commons.lang3.concurrent.ConcurrentUtils
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      MockError mockError1 = new MockError(mockThrowable0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(mockError1);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      concurrentUtils_ConstantFuture0.get(0L, timeUnit0);
      Integer integer0 = new Integer((-2039));
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      concurrentUtils_ConstantFuture1.get(0L, timeUnit1);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-5371));
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      concurrentUtils_ConstantFuture0.isCancelled();
      String string0 = "g0B3!;z$";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError("g0B3!;z$", mockRuntimeException0);
      ExecutionException executionException0 = new ExecutionException("g0B3!;z$", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(object0);
      concurrentUtils_ConstantFuture0.isCancelled();
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockError0.setStackTrace(stackTraceElementArray0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture1.get();
      ConcurrentUtils.extractCause((ExecutionException) null);
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null);
      Object object1 = ConcurrentUtils.initialize((ConcurrentInitializer<Object>) constantInitializer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable("");
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Future<Integer> future0 = ConcurrentUtils.constantFuture((Integer) null);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.concurrent.AtomicInitializer";
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.lang3.concurrent.AtomicInitializer");
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.commons.lang3.concurrent.AtomicInitializer
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(1678);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      concurrentUtils_ConstantFuture0.isDone();
      Integer integer1 = new Integer(729);
      ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>(integer1);
      ConcurrentUtils.initialize((ConcurrentInitializer<Integer>) constantInitializer0);
      ExecutionException executionException0 = new ExecutionException("", (Throwable) null);
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException0);
      assertNull(concurrentRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, forkJoinPool0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<String, String>) concurrentSkipListMap0, "", (ConcurrentInitializer<String>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      concurrentUtils_ConstantFuture0.isCancelled();
      String string0 = "wO:<X-.3QG~PD;) &`]";
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<String>("wO:<X-.3QG~PD;) &`]");
      concurrentUtils_ConstantFuture1.isCancelled();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockFile mockFile0 = new MockFile("wO:<X-.3QG~PD;) &`]", "wO:<X-.3QG~PD;) &`]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      mockRuntimeException0.printStackTrace(printWriter0);
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.getLocalizedMessage();
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0);
      concurrentUtils_ConstantFuture0.isCancelled();
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      ForkJoinTask<String> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends String>) callable0);
      forkJoinTask0.compareAndSetForkJoinTaskTag((short) (-360), (short) (-360));
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("\"Nal?wZ1%u");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "\"Nal?wZ1%u");
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2);
      MockThread mockThread4 = new MockThread(threadGroup0, mockThread3, "\"Nal?wZ1%u");
      ForkJoinTask.adapt((Runnable) mockThread4);
      ConcurrentUtils.ConstantFuture<ForkJoinTask<String>> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<ForkJoinTask<String>>(forkJoinTask0);
      ForkJoinTask.invokeAll(forkJoinTask0, forkJoinTask0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      concurrentUtils_ConstantFuture1.get((-2145L), timeUnit0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture2 = new ConcurrentUtils.ConstantFuture<Object>(concurrentUtils_ConstantFuture0);
      boolean boolean0 = concurrentUtils_ConstantFuture2.cancel(false);
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<RuntimeException>) null);
      boolean boolean1 = concurrentUtils_ConstantFuture2.isCancelled();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Callable<Object>> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Callable<Object>>((Callable<Object>) null);
      boolean boolean0 = concurrentUtils_ConstantFuture0.cancel(true);
      ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Delayed>((Delayed) null);
      boolean boolean1 = concurrentUtils_ConstantFuture1.isCancelled();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcurrentUtils.extractCauseUnchecked((ExecutionException) null);
      ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>("M0$)2Y[p!y,$)");
      String string0 = ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<String>) constantInitializer0);
      assertEquals("M0$)2Y[p!y,$)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer((-317));
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      boolean boolean0 = concurrentUtils_ConstantFuture0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>("\"\"yR\"v");
      concurrentUtils_ConstantFuture0.get();
      ConcurrentSkipListMap<Object, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Error>();
      Integer integer0 = new Integer((-2471));
      MockError mockError0 = new MockError();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Object, Error>) concurrentSkipListMap0, (Object) integer0, (Error) mockError0);
      ExecutionException executionException0 = new ExecutionException("\"\"yR\"v", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException("?}S]/ZATGj9:67n#", (Throwable) null);
      ConcurrentUtils.extractCause(executionException0);
      ExecutionException executionException1 = new ExecutionException((Throwable) null);
      ConcurrentUtils.handleCauseUnchecked(executionException1);
      assertNotSame(executionException1, executionException0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Callable<Error>> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Callable<Error>>((Callable<Error>) null);
      String string0 = "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer";
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer");
      mockThrowable0.getStackTrace();
      mockThrowable0.getStackTrace();
      MockThrowable.getDefaultStackTrace();
      ExecutionException executionException0 = new ExecutionException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", mockThrowable0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(mockRuntimeException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      int int0 = 0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("Not a checked exception: ", "Not a checked exception: ", "Not a checked exception: ", 0);
      mockRuntimeException0.getMessage();
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = "";
      StackTraceElement stackTraceElement1 = new StackTraceElement("Not a checked exception: ", "Not a checked exception: ", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "r#Oh\\v5D<I5x";
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.concurrent.BasicThreadFactory$1";
      String string1 = null;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.apache.commons.lang3.concurrent.BasicThreadFactory$1");
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.commons.lang3.concurrent.BasicThreadFactory$1
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      mockThrowable0.initCause(executionException0);
      ConcurrentUtils.checkedException(executionException0);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      ConcurrentUtils.extractCause(executionException0);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<String>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockError mockError0 = new MockError("9Q|FF;BS_#");
      MockError mockError1 = new MockError("", mockError0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("9Q|FF;BS_#", mockError1);
      mockRuntimeException0.getSuppressed();
      mockError0.getMessage();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      mockRuntimeException1.printStackTrace();
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException1);
      mockError0.getMessage();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      concurrentUtils_ConstantFuture0.get(0L, timeUnit0);
      File file0 = MockFile.createTempFile("Name of child initializer must not be null!", "nex", (File) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "7-3Pkp;|@7t");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 7-3Pkp;|@7t
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
