/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 21:00:11 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ImmutableTriple_ESTest extends ImmutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1203);
      ImmutableTriple<Object, String, Object> immutableTriple0 = ImmutableTriple.of((Object) integer0, "", (Object) null);
      Object object0 = immutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.of((Object) integer0, (Object) null, (Object) integer0);
      Object object0 = immutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(2111);
      Object object0 = new Object();
      ImmutableTriple<Object, Integer, Object> immutableTriple0 = ImmutableTriple.of((Object) null, integer0, object0);
      Object object1 = immutableTriple0.getLeft();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutableTriple<Object, Object, String> immutableTriple0 = new ImmutableTriple<Object, Object, String>("I=", "I=", "I=");
      Object object0 = immutableTriple0.getLeft();
      assertEquals("I=", object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmutableTriple<Object, String, Object> immutableTriple0 = new ImmutableTriple<Object, String, Object>("", "", "");
      Object object0 = immutableTriple0.getRight();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ImmutableTriple<String, Object, Object> immutableTriple0 = ImmutableTriple.of("A?-X%IME|N/}gtJ7g;", (Object) "A?-X%IME|N/}gtJ7g;", (Object) "A?-X%IME|N/}gtJ7g;");
      Object object0 = immutableTriple0.getMiddle();
      assertEquals("A?-X%IME|N/}gtJ7g;", object0);
  }
}
