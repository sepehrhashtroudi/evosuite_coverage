/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 21:03:01 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Map;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      mutablePair0.getRight();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((String) null, (String) null);
      Pair<Object, AbstractMap.SimpleEntry<String, String>> pair0 = Pair.of((Object) null, abstractMap_SimpleEntry0);
      boolean boolean0 = pair0.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutablePair<String, String> mutablePair0 = new MutablePair<String, String>("_bQ", "_bQ");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(mutablePair0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      MutablePair<Integer, AbstractMap.SimpleEntry<Object, String>> mutablePair1 = new MutablePair<Integer, AbstractMap.SimpleEntry<Object, String>>(integer0, abstractMap_SimpleEntry0);
      Integer integer1 = new Integer(0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("_bQ", integer1);
      Integer integer2 = new Integer(0);
      MutablePair<AbstractMap.SimpleEntry<Object, Object>, Object> mutablePair2 = MutablePair.of(abstractMap_SimpleEntry1, (Object) integer2);
      mutablePair2.getKey();
      MutablePair<String, Object> mutablePair3 = new MutablePair<String, Object>();
      mutablePair3.getLeft();
      Integer integer3 = new Integer((-1115));
      ImmutablePair<Object, Integer> immutablePair0 = ImmutablePair.of((Object) null, integer3);
      MutablePair<Object, Integer> mutablePair4 = MutablePair.of((Object) mutablePair2, integer3);
      int int0 = immutablePair0.compareTo((Pair<Object, Integer>) mutablePair4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutablePair<String, Object> immutablePair0 = new ImmutablePair<String, Object>((String) null, "<mf/Nx7R3iT");
      Pair<String, Object> pair0 = Pair.of("<mf/Nx7R3iT", (Object) null);
      immutablePair0.compareTo(pair0);
      Pair.of("hB?+o$|~.z", immutablePair0);
      ImmutablePair<Object, ImmutablePair<String, Object>> immutablePair1 = ImmutablePair.of((Object) null, immutablePair0);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      immutablePair1.toString();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(immutablePair0, immutablePair1);
      Map.Entry.comparingByValue();
      MutablePair<Object, AbstractMap.SimpleEntry<Object, Object>> mutablePair0 = new MutablePair<Object, AbstractMap.SimpleEntry<Object, Object>>("(null,(null,<mf/Nx7R3iT))", abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = mutablePair0.right;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Pair<Pair<Pair, Object>, ImmutablePair<Object, Object>>>) comparator0);
      Pair<Object, AbstractMap.SimpleEntry<Object, Object>> pair1 = Pair.of((Object) abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        mutablePair0.compareTo(pair1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePair<Object, Object> mutablePair0 = new MutablePair<Object, Object>();
      MutablePair<Object, Object> mutablePair1 = new MutablePair<Object, Object>();
      mutablePair0.compareTo((Pair<Object, Object>) mutablePair1);
      String string0 = null;
      // Undeclared exception!
      try { 
        mutablePair0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Object, Integer> immutablePair0 = ImmutablePair.of((Object) "", integer0);
      Pair<Pair<Object, Integer>, String> pair0 = Pair.of((Pair<Object, Integer>) immutablePair0, "");
      pair0.toString("");
      ImmutablePair<String, String> immutablePair1 = ImmutablePair.of("", "Rt(.~;}>xV@0]");
      assertNotNull(immutablePair1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePair<MutablePair<Integer, Object>, ImmutablePair<Object, Integer>> mutablePair0 = new MutablePair<MutablePair<Integer, Object>, ImmutablePair<Object, Integer>>();
      mutablePair0.toString();
      mutablePair0.hashCode();
      Pair<Object, String> pair0 = Pair.of((Object) "(null,null)", "org.apache.commons.lang3.tuple.Pair");
      MutablePair<String, Pair<Object, String>> mutablePair1 = MutablePair.of("(null,null)", pair0);
      String string0 = mutablePair1.toString();
      assertEquals("((null,null),((null,null),org.apache.commons.lang3.tuple.Pair))", string0);
      
      ImmutablePair<Object, Object> immutablePair0 = new ImmutablePair<Object, Object>("(null,null)", pair0);
      MutablePair<Object, Object> mutablePair2 = new MutablePair<Object, Object>();
      immutablePair0.compareTo((Pair<Object, Object>) mutablePair2);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      MutablePair<Integer, Object> mutablePair3 = new MutablePair<Integer, Object>();
      ImmutablePair<AbstractMap.SimpleImmutableEntry<Integer, Integer>, MutablePair<Integer, Object>> immutablePair1 = ImmutablePair.of(abstractMap_SimpleImmutableEntry0, mutablePair3);
      immutablePair1.getRight();
      MutablePair<Comparable<String>, Comparable<Object>> mutablePair4 = new MutablePair<Comparable<String>, Comparable<Object>>("org.apache.commons.lang3.tuple.Pair", (Comparable<Object>) null);
      String string1 = mutablePair4.toString();
      assertEquals("(org.apache.commons.lang3.tuple.Pair,null)", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "K}r;AZ#cDKW}K3";
      ImmutablePair<String, Object> immutablePair0 = new ImmutablePair<String, Object>("", "K}r;AZ#cDKW}K3");
      ImmutablePair<ImmutablePair<String, Object>, Object> immutablePair1 = ImmutablePair.of(immutablePair0, (Object) "K}r;AZ#cDKW}K3");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super MutablePair<Integer, Pair<ImmutablePair<String, Object>, Object>>>) comparator0);
      Pair<ImmutablePair<String, Object>, Object> pair0 = null;
      // Undeclared exception!
      try { 
        immutablePair1.compareTo((Pair<ImmutablePair<String, Object>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>(integer0, "");
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(immutablePair0);
      ImmutablePair<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> immutablePair1 = ImmutablePair.of("", abstractMap_SimpleImmutableEntry0);
      String string0 = immutablePair1.toString();
      assertEquals("(,0=)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MutablePair<Object, Integer> mutablePair0 = MutablePair.of((Object) integer0, integer0);
      MutablePair<MutablePair<Object, Integer>, String> mutablePair1 = new MutablePair<MutablePair<Object, Integer>, String>(mutablePair0, "org.apache.commons.lang3.tuple.ImmutablePair");
      mutablePair1.setValue("org.apache.commons.lang3.tuple.ImmutablePair");
      ImmutablePair<String, Integer> immutablePair0 = new ImmutablePair<String, Integer>("org.apache.commons.lang3.tuple.ImmutablePair", integer0);
      String string0 = immutablePair0.toString("org.apache.commons.lang3.tuple.ImmutablePair");
      assertEquals("org.apache.commons.lang3.tuple.ImmutablePair", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePair<Integer, ImmutablePair<Object, String>> mutablePair0 = new MutablePair<Integer, ImmutablePair<Object, String>>();
      MutablePair<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> mutablePair1 = new MutablePair<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>(mutablePair0, "");
      mutablePair0.setValue(immutablePair0);
      mutablePair0.getKey();
      mutablePair1.getKey();
      mutablePair1.getRight();
      mutablePair0.equals((Object) null);
      // Undeclared exception!
      try { 
        immutablePair0.setValue("org.apache.commons.lang3.tuple.ImmutablePair");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.ImmutablePair", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      Object object0 = pair0.getValue();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePair<String, String> mutablePair0 = new MutablePair<String, String>("LKp*:yaD\"Kn", "CX~=2[('b}");
      mutablePair0.getRight();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(mutablePair0);
      MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, String> mutablePair1 = new MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "LKp*:yaD\"Kn");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = mutablePair1.getKey();
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-366));
      MutablePair<String, String> mutablePair0 = new MutablePair<String, String>((String) null, (String) null);
      ImmutablePair<Integer, Pair<String, String>> immutablePair0 = new ImmutablePair<Integer, Pair<String, String>>(integer0, mutablePair0);
      Pair<String, String> pair0 = immutablePair0.getRight();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", (Object) null);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(pair0);
      MutablePair<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> mutablePair1 = MutablePair.of(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = mutablePair1.getLeft();
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePair<Integer, Object> mutablePair0 = new MutablePair<Integer, Object>();
      mutablePair0.hashCode();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "Y&oF8");
      Integer integer0 = new Integer(0);
      MutablePair<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> mutablePair1 = MutablePair.of(abstractMap_SimpleImmutableEntry0, integer0);
      String string0 = mutablePair1.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>();
      ImmutablePair<String, Pair<String, Object>> immutablePair0 = new ImmutablePair<String, Pair<String, Object>>("org.apache.commons.lang3.tuple.ImmutablePair", mutablePair0);
      boolean boolean0 = immutablePair0.equals(mutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePair<Integer, String> mutablePair0 = new MutablePair<Integer, String>();
      Map.Entry.comparingByKey();
      Integer integer0 = new Integer((-2495));
      assertEquals((-2495), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePair<ImmutablePair<String, Object>, String> mutablePair0 = MutablePair.of((ImmutablePair<String, Object>) null, "0g1Q#qiDdTx");
      MutablePair<ImmutablePair<String, Object>, String> mutablePair1 = MutablePair.of((ImmutablePair<String, Object>) null, "0g1Q#qiDdTx");
      mutablePair0.equals((Object) null);
      mutablePair1.getRight();
      assertTrue(mutablePair1.equals((Object)mutablePair0));
      
      mutablePair1.setValue("Ay");
      Pair<MutablePair<ImmutablePair<String, Object>, String>, Pair<ImmutablePair<String, Object>, String>> pair0 = Pair.of(mutablePair0, (Pair<ImmutablePair<String, Object>, String>) mutablePair1);
      Map.Entry.comparingByKey();
      pair0.hashCode();
      MutablePair<MutablePair<ImmutablePair<String, Object>, String>, Pair<ImmutablePair<String, Object>, String>> mutablePair2 = new MutablePair<MutablePair<ImmutablePair<String, Object>, String>, Pair<ImmutablePair<String, Object>, String>>(mutablePair0, mutablePair1);
      Integer integer0 = new Integer(2652);
      Pair.of(integer0, "");
      mutablePair2.equals(mutablePair1);
      pair0.compareTo((Pair<MutablePair<ImmutablePair<String, Object>, String>, Pair<ImmutablePair<String, Object>, String>>) mutablePair2);
      mutablePair0.hashCode();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(mutablePair0);
      MutablePair<Pair<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> mutablePair3 = MutablePair.of((Pair<String, Object>) null, abstractMap_SimpleImmutableEntry0);
      mutablePair3.setLeft((Pair<String, Object>) null);
      assertFalse(mutablePair0.equals((Object)mutablePair1));
      
      MutablePair<AbstractMap.SimpleEntry<Object, Integer>, Object> mutablePair4 = new MutablePair<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      String string0 = mutablePair4.toString();
      assertEquals("(null,null)", string0);
  }
}
