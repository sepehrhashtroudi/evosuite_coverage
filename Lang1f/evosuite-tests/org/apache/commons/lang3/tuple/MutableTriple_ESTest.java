/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 15 20:59:36 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableTriple_ESTest extends MutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1329));
      MutableTriple<String, Integer, Integer> mutableTriple0 = MutableTriple.of((String) null, integer0, integer0);
      Integer integer1 = mutableTriple0.getMiddle();
      assertEquals((-1329), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableTriple<String, Object, Object> mutableTriple0 = new MutableTriple<String, Object, Object>();
      MutableTriple<Object, Object, String> mutableTriple1 = MutableTriple.of((Object) null, (Object) mutableTriple0, "org.apache.commons.lang3.tuple.Triple");
      String string0 = mutableTriple1.getRight();
      assertEquals("org.apache.commons.lang3.tuple.Triple", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableTriple<Object, Object, Integer> mutableTriple0 = new MutableTriple<Object, Object, Integer>();
      Object object0 = mutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      MutableTriple<String, Object, String> mutableTriple0 = MutableTriple.of("-o\"", object0, "");
      String string0 = mutableTriple0.getLeft();
      assertNotNull(string0);
      assertEquals("-o\"", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableTriple<Object, String, Object> mutableTriple0 = new MutableTriple<Object, String, Object>((Object) null, "org.apache.commons.lang3.tuple.MutableTriple", (Object) null);
      Object object0 = mutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableTriple<Integer, String, Object> mutableTriple0 = new MutableTriple<Integer, String, Object>();
      Object object0 = mutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableTriple<String, Object, Object> mutableTriple0 = new MutableTriple<String, Object, Object>();
      mutableTriple0.setRight("tkPy`_;`9n^3");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableTriple<String, Integer, Object> mutableTriple0 = new MutableTriple<String, Integer, Object>();
      mutableTriple0.setLeft("tkPy`_;`9n^3");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(1907);
      MutableTriple<String, Integer, Object> mutableTriple0 = new MutableTriple<String, Integer, Object>();
      mutableTriple0.setMiddle(integer0);
      String string0 = mutableTriple0.toString();
      assertEquals("(null,1907,null)", string0);
  }
}
