/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:25:40 GMT 2022
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.IllegalComponentStateException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.io.File;
import java.sql.Connection;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeEventType;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.OverlayChangeEvent;
import org.jfree.chart.panel.AbstractMouseHandler;
import org.jfree.chart.panel.CrosshairOverlay;
import org.jfree.chart.panel.Overlay;
import org.jfree.chart.panel.ZoomHandler;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetSelectionState;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartPanel_ESTest extends ChartPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 63, (-4260), (-4260), (-4260), (-1), 2000, false, false, false, false, true, true, true);
      chartPanel0.setMouseZoomable(false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CompassPlot compassPlot0 = new CompassPlot();
          JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
          ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
          // Undeclared exception!
          try { 
            chartPanel0.createChartPrintJob();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"queuePrintJob\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkPrintJobAccess(SecurityManager.java:1378)
             // java.awt.print.PrinterJob.getPrinterJob(PrinterJob.java:75)
             // org.jfree.chart.ChartPanel.createChartPrintJob(ChartPanel.java:2619)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      ZoomHandler zoomHandler0 = chartPanel0.getZoomHandler();
      chartPanel0.removeMouseHandler(zoomHandler0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 33, 1843, 10, 10, 33, 15, true, true, true, true, true, true, true);
      chartPanel0.isDomainZoomable();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("rrQb&0*MttY{f", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      Class<CombinedRangeCategoryPlot> class0 = CombinedRangeCategoryPlot.class;
      chartPanel0.getListeners(class0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 0);
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, (-677), 15, (-574), 10, 10, true, false, true, false, true, false);
      Point point0 = new Point(0, 255);
      chartPanel0.setAnchor(point0);
      chartPanel0.getAnchor();
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.createPopupMenu(true, true, true, false, true);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      // Undeclared exception!
      try { 
        chartPanel0.zoomOutBoth(34.08988173, (-244.4040897796657));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      // Undeclared exception!
      try { 
        chartPanel0.zoomInDomain(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      // Undeclared exception!
      try { 
        chartPanel0.restoreAutoRangeBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        chartPanel0.doSaveAs();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1838, 15, 0, 0, 15, (-3230), false, false, false, false, false, false, true);
      // Undeclared exception!
      try { 
        chartPanel0.doEditChartProperties();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 300, 1555, 200, 2, 1, false, false, false, false, false, false);
      // Undeclared exception!
      try { 
        chartPanel0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea((-2921), 1609);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-1155), 15, (-1155), 0, (-1349), false, false, true, true, false, true);
      chartPanel0.restoreAutoRangeBounds();
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.restoreAutoRangeBounds();
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jpeg", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 0, (-3220), 0, 255, 200, true, true, true, true, true, true);
      chartPanel0.zoomOutDomain(1.0, 90.0);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Z~}*|>Qf=oQw", font0, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1669), 1, (-2963), (-2963), (-1669), 680, true, true, true, true, true, false);
      chartPanel0.zoomInRange(1696.03, 1199.30514641474);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.zoomInDomain(10, 0.08);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.chartChanged((ChartChangeEvent) null);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      Double double0 = new Double(0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3345), 0, double0);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, waferMapPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartChangeEventType chartChangeEventType0 = ChartChangeEventType.NEW_DATASET;
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent(waferMapDataset0, jFreeChart0, chartChangeEventType0);
      chartPanel0.chartChanged(chartChangeEvent0);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.setDisplayToolTips(false);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      chartPanel0.setDisplayToolTips(true);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.setRangeZoomable(true);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.setRangeZoomable(false);
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.ChartMouseEvent", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      chartPanel0.setDomainZoomable(false);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("y", spiderWebPlot0.DEFAULT_LABEL_FONT, spiderWebPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.setChart(jFreeChart0);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(" 3!8LP=dNs9fK@+A;V~", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 420, (-575), (-575), (-575), 1413, 80, false, false, true, true, true, true, false);
      boolean boolean0 = chartPanel0.getUseBuffer();
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(boolean0);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.getScaleX();
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      double double0 = chartPanel0.getScaleY();
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.0, double0, 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, true);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      chartPanel0.getSelectionState(timePeriodValuesCollection0);
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 0);
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, (-677), 15, (-574), 10, 10, true, false, true, false, true, false);
      chartPanel0.updateUI();
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 1360, 15, (-4087), 15, 0, false, true, false, false, false, false, false);
      // Undeclared exception!
      try { 
        chartPanel0.displayPopupMenu(10, 10);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartMouseListener chartMouseListener0 = mock(ChartMouseListener.class, new ViolatedAssumptionAnswer());
      chartPanel0.removeChartMouseListener(chartMouseListener0);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      ChartMouseListener chartMouseListener0 = mock(ChartMouseListener.class, new ViolatedAssumptionAnswer());
      chartPanel0.addChartMouseListener(chartMouseListener0);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(",%ah?2k7y;]", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      PageFormat pageFormat0 = new PageFormat();
      chartPanel0.print((Graphics) null, pageFormat0, (-7));
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, (-2146), 10, 15, 70, 1972, false, false, false, false, false, false, false);
      PageFormat pageFormat0 = new PageFormat();
      // Undeclared exception!
      try { 
        chartPanel0.print((Graphics) null, pageFormat0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.restoreAutoBounds();
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      chartPanel0.zoom(rectangle0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, (-5391), 0, 15, (-1392), false, false, false, false, false, true);
      chartPanel0.zoomOutRange((-2884.6), 1.5);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, meterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, true);
      chartPanel0.zoomOutBoth(0.5F, 10);
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.zoomInDomain(0.0, 0.5F);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 4315, 1461, 15, 7, 10, false, true, false, true, false, true);
      chartPanel0.zoomInBoth(15, 7);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-10), (-10), 15, 10, 2, (-10), false, false, false, false, false, false, false);
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(styledEditorKit_ItalicAction0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jCheckBoxMenuItem0, 768, 2, 60, (-1624308629), 680, 10, 2147483645, (-220), false, 15, 2, 768);
      chartPanel0.mouseMoved(mouseWheelEvent0);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(chartPanel0, 1024, 1210L, (-1952257859), 2543, 35, 304, true, menuElementArray0, menuSelectionManager0);
      chartPanel0.mouseClicked(menuDragMouseEvent0);
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 768, 3600000L, 63, 1480, 670, 1149, true, 2879, 680, 1480);
      // Undeclared exception!
      try { 
        chartPanel0.mouseReleased(mouseWheelEvent0);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, (-484), 1L, 1, (-2921), 1609, 2, true, 10, 1, 1609);
      chartPanel0.mouseDragged(mouseWheelEvent0);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 1825, 420, 10, 0, 1825, false, false, false, false, false, false, false);
      chartPanel0.mouseDragged((MouseEvent) null);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-2778), (-182), (-2778), 0, 0, (-182), false, true, false, true, false, false, false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 10, 878L, (-882), 0, 10, 768, 1127, 300, false, 0, 300, 1453);
      chartPanel0.mousePressed(mouseWheelEvent0);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      MouseEvent mouseEvent0 = new MouseEvent(chartPanel0, 0, 0L, 0, (-2800), 768, 200, true);
      // Undeclared exception!
      try { 
        chartPanel0.mousePressed(mouseEvent0);
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 2132, 420, 10, 47, 10, (-375), 0, 803, true, 0, 803, 0, 0.5F);
      chartPanel0.mouseExited(mouseWheelEvent0);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      MouseEvent mouseEvent0 = new MouseEvent(chartPanel0, 768, 0L, 10, 680, 15, 80, true);
      chartPanel0.mouseEntered(mouseEvent0);
      //  // Unstable assertion: assertEquals(750, chartPanel0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Properties...");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("I%_0", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 1024);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 0, "", 3774L, 420);
      chartPanel0.actionPerformed(actionEvent0);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 2, 15, 2, true, true, false, true, true, true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ActionEvent actionEvent0 = new ActionEvent(thermometerPlot0, 1024, "ZOOM_RESET_RANGE", (-1364L), 2);
      chartPanel0.actionPerformed(actionEvent0);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("r40N!;V{lIqw\"E(82$");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DateAxis dateAxis0 = new DateAxis("r40N!;V{lIqw\"E(82$");
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, dateAxis0, (PolarItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
      ActionEvent actionEvent0 = new ActionEvent(polarChartPanel0, 1024, "PROPERTIES", 200, (-346));
      // Undeclared exception!
      try { 
        polarChartPanel0.actionPerformed(actionEvent0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ActionEvent actionEvent0 = new ActionEvent("org.jfree.data.xy.XIntervalDataItem", (-2659), "ZOOM_IN_RANGE", (-2812L), 200);
      chartPanel0.actionPerformed(actionEvent0);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.restoreAutoBounds();
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getEntityForPoint(0, 10);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, (-1027), 680, (-729), 680, true, false, true, true, false, false);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jCheckBoxMenuItem0, 10, 680, 200, 213, (-729), 10, true, 15, 67, 57);
      String string0 = chartPanel0.getToolTipText((MouseEvent) mouseWheelEvent0);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertNull(string0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      AbstractMouseHandler abstractMouseHandler0 = new AbstractMouseHandler();
      chartPanel0.removeMouseHandler(abstractMouseHandler0);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, (-1897), 2513, 0, (-1897), false, false, false, false, false, false);
      // Undeclared exception!
      try { 
        chartPanel0.addMouseHandler((AbstractMouseHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'handler' argument.
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ZoomHandler zoomHandler0 = chartPanel0.getZoomHandler();
      chartPanel0.addMouseHandler(zoomHandler0);
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("TCY;(d>AgcH_", font0, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      chartPanel0.addOverlay(crosshairOverlay0);
      chartPanel0.removeOverlay(crosshairOverlay0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jpeg", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 0, (-3220), 0, 255, 200, true, true, true, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.removeOverlay((Overlay) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'overlay' argument.
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 0);
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, (-677), 15, (-574), 10, 10, true, false, true, false, true, false);
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      chartPanel0.removeOverlay(crosshairOverlay0);
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.setMouseWheelEnabled(true);
      assertTrue(chartPanel0.isMouseWheelEnabled());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.setMouseWheelEnabled(false);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, (-1047), 680, (-729), 680, true, false, true, true, false, false);
      boolean boolean0 = chartPanel0.isMouseWheelEnabled();
      assertFalse(boolean0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Z?n", font0, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.setZoomFillPaint(categoryPlot0.DEFAULT_GRIDLINE_PAINT);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 365, 0, 0, 0, 365, true, true, false, false, true, true, true);
      MockFile mockFile0 = new MockFile("B/fq/P-");
      // Undeclared exception!
      try { 
        chartPanel0.setDefaultDirectoryForSaveAs(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'directory' argument is not a directory.
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Properties...");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("I%_0", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      chartPanel0.setDefaultDirectoryForSaveAs((File) null);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.setRangeZoomable(true);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, false);
      chartPanel0.setMouseZoomable(true, true);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Properties...");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("I%_0", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      chartPanel0.setDomainZoomable(true);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 0);
      PiePlot piePlot0 = new PiePlot(categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, (-677), 15, (-574), 10, 10, true, false, true, false, true, false);
      chartPanel0.setDomainZoomable(true);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.setChart(jFreeChart0);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 63, (-4260), (-4260), (-4260), (-1), 2000, false, false, false, false, true, true, true);
      chartPanel0.getHierarchyBoundsListeners();
      ChartMouseListener chartMouseListener0 = mock(ChartMouseListener.class, new ViolatedAssumptionAnswer());
      chartPanel0.addChartMouseListener(chartMouseListener0);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, (-69), 2382, (-1682), (-1756), 0, true, false, false, true, false, true, false);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 5, 0, 5, 0, 5, 0, true, true, true, true, true, true, true);
      chartPanel0.setDismissDelay(53);
      assertEquals(53, chartPanel0.getDismissDelay());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("y", spiderWebPlot0.DEFAULT_LABEL_FONT, spiderWebPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      // Undeclared exception!
      try { 
        chartPanel0.doCopy();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(";XBn", multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1820, 2644, 10, 0, 15, 0, false, false, false, false, false, false, false);
      double double0 = chartPanel0.getZoomInFactor();
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, 1024, 0, 63, 63, true, false, false, false, false, false);
      chartPanel0.setInitialDelay(15);
      assertEquals(15, chartPanel0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.setMaximumDrawWidth(1588);
      assertEquals(1588, chartPanel0.getMaximumDrawWidth());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.getChart();
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.setSelectionShape(combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.setRefreshBuffer(true);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      int int0 = chartPanel0.getInitialDelay();
      //  // Unstable assertion: assertTrue(chartPanel0.getUseBuffer());
      //  // Unstable assertion: assertEquals(750, int0);
      //  // Unstable assertion: assertFalse(chartPanel0.isRangeZoomable());
      //  // Unstable assertion: assertTrue(chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("TCY;(d>AgcH_", font0, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      int int0 = chartPanel0.getMaximumDrawWidth();
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(1024, int0);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 5, 0, 5, 0, 5, 0, true, true, true, true, true, true, true);
      chartPanel0.setMinimumDrawWidth(1477);
      assertEquals(1477, chartPanel0.getMinimumDrawWidth());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 4315, 1461, 15, 7, 10, false, true, false, true, false, true);
      chartPanel0.setSelectionOutlinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.ChartMouseEvent", piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      chartPanel0.setSelectionFillPaint(piePlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Z~}*|>Qf=oQw", font0, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1669), 1, (-2963), (-2963), (-1669), 680, true, true, true, true, true, false);
      chartPanel0.setZoomTriggerDistance(0);
      assertEquals(0, chartPanel0.getZoomTriggerDistance());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 14, 0, 0, 1201, true, true, true, true, true, true);
      int int0 = chartPanel0.getZoomTriggerDistance();
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, int0);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.isDomainZoomable();
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, true);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(10, ".png", "ZOOM_RESET_BOTH");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      chartPanel0.putSelectionState(timePeriodValuesCollection0, (DatasetSelectionState) null);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, false);
      int int0 = chartPanel0.getDismissDelay();
      //  // Unstable assertion: assertEquals(4000, int0);
      //  // Unstable assertion: assertTrue(chartPanel0.getUseBuffer());
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      //  // Unstable assertion: assertTrue(chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      chartPanel0.setEnforceFileExtensions(true);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.setReshowDelay(750);
      assertEquals(750, chartPanel0.getReshowDelay());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.setZoomOutlinePaint(compassPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getAnchor();
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.setMaximumDrawHeight(300);
      assertEquals(300, chartPanel0.getMaximumDrawHeight());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.createPopupMenu(false, false, false, false);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      
      chartPanel0.setZoomOutFactor(10);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.getDefaultDirectoryForSaveAs();
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 139, 139, 0, 139, 1, 0, true, true, true, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.setMouseZoomable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("3iDw)5", combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      // Undeclared exception!
      try { 
        chartPanel0.translateJava2DToScreen((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, false, false);
      int int0 = chartPanel0.getMaximumDrawHeight();
      assertEquals(768, int0);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.setMinimumDrawHeight((-1770));
      assertEquals((-1770), chartPanel0.getMinimumDrawHeight());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getZoomRectangle();
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.chartProgress((ChartProgressEvent) null);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-10), (-10), 15, 5317, 2, (-10), false, false, false, false, false, false, false);
      chartPanel0.clearLiveMouseHandler();
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      boolean boolean0 = chartPanel0.isRangeZoomable();
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("TCY;(d>AgcH_", font0, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      // Undeclared exception!
      try { 
        chartPanel0.translateScreenToJava2D((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      int int0 = chartPanel0.getMinimumDrawWidth();
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(300, int0);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Properties...");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("I%_0", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      OverlayChangeEvent overlayChangeEvent0 = new OverlayChangeEvent("I%_0");
      chartPanel0.overlayChanged(overlayChangeEvent0);
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      boolean boolean0 = chartPanel0.getUseBuffer();
      assertTrue(boolean0);
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      chartPanel0.setZoomAroundAnchor(false);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "org.jfree.data.xy.XIntervalDataItem");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("$9!0fQ.pgD-+K;", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XIntervalDataItem", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getChartRenderingInfo();
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      chartPanel0.getOrientation();
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      double double0 = chartPanel0.getZoomOutFactor();
      assertEquals(2.0, double0, 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("rrQb&0*MttY{f", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      Size2D size2D0 = new Size2D(1.0F, (-508.74084115));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, (-1236.724F), 0.0, rectangleAnchor0);
      chartPanel0.setZoomRectangle(rectangle2D0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.isEnforceFileExtensions();
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)chartPanel0.scale(rectangle2D_Double0);
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      boolean boolean0 = chartPanel0.getFillZoomRectangle();
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(boolean0);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jpeg", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 0, (-3220), 0, 255, 200, true, true, true, true, true, true);
      boolean boolean0 = chartPanel0.getRefreshBuffer();
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(boolean0);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.getZoomOutlinePaint();
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 139, 139, 0, 139, 1, 0, true, true, true, true, true, true);
      chartPanel0.getZoomAroundAnchor();
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 2188, 2188, 52, 2188, 52, (-297), true, true, true, true, false, false);
      int int0 = chartPanel0.getMinimumDrawHeight();
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2188, int0);
      assertFalse(chartPanel0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      BasicStroke basicStroke0 = (BasicStroke)chartPanel0.getSelectionOutlineStroke();
      chartPanel0.setSelectionOutlineStroke(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(4.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("5`y\u0002am", fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, true);
      JPopupMenu jPopupMenu0 = chartPanel0.getPopupMenu();
      chartPanel0.setPopupMenu(jPopupMenu0);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, compassPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      int int0 = chartPanel0.getReshowDelay();
      //  // Unstable assertion: assertEquals(500, int0);
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      //  // Unstable assertion: assertTrue(chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertTrue(chartPanel0.getUseBuffer());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("W CN=0X:KyxQ5d", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.getSelectionShape();
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 0, 1147, 1588, 631, 200, true, true, true, true, true, true, false);
      chartPanel0.setFillZoomRectangle(true);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("y", spiderWebPlot0.DEFAULT_LABEL_FONT, spiderWebPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getSelectionOutlinePaint();
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 139, 139, 0, 139, 1, 0, true, true, true, true, true, true);
      chartPanel0.setZoomInFactor(7.2E7);
      assertEquals(7.2E7, chartPanel0.getZoomInFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, (-1027), 680, (-729), 680, true, false, true, true, false, false);
      chartPanel0.getZoomFillPaint();
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getUseBuffer());
  }
}
