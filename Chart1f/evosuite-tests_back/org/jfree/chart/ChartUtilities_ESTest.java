/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:50:52 GMT 2022
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Locale;
import java.util.TimeZone;
import javax.imageio.IIOException;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.StandardURLTagFragmentGenerator;
import org.jfree.chart.imagemap.ToolTipTagFragmentGenerator;
import org.jfree.chart.imagemap.URLTagFragmentGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartUtilities_ESTest extends ChartUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartUtilities.writeChartAsPNG((OutputStream) printStream0, jFreeChart0, 10, 2099, chartRenderingInfo0);
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      ChartUtilities.applyCurrentTheme(jFreeChart0);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DynamicDriveToolTipTagFragmentGenerator dynamicDriveToolTipTagFragmentGenerator0 = new DynamicDriveToolTipTagFragmentGenerator();
      StandardURLTagFragmentGenerator standardURLTagFragmentGenerator0 = new StandardURLTagFragmentGenerator();
      String string0 = ChartUtilities.getImageMap("`FHaQa>'HA{L^r,5[", chartRenderingInfo0, (ToolTipTagFragmentGenerator) dynamicDriveToolTipTagFragmentGenerator0, (URLTagFragmentGenerator) standardURLTagFragmentGenerator0);
      assertEquals("<map id=\"`FHaQa&gt;&#39;HA{L^r,5[\" name=\"`FHaQa&gt;&#39;HA{L^r,5[\">\n</map>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1455, 2718);
      byte[] byteArray0 = ChartUtilities.encodeAsPNG(bufferedImage0);
      assertEquals(23778, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("tp'|E]#R4(+7>-=", fastScatterPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeScaledChartAsPNG(printStream0, jFreeChart0, 1580, (-3925), 15, (-400));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W$DQah=ZUY>*uo$", false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeScaledChartAsPNG(mockFileOutputStream0, jFreeChart0, 10, 1262, (-2540), 1330);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-25400) and height (1678460) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`z");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      StandardToolTipTagFragmentGenerator standardToolTipTagFragmentGenerator0 = new StandardToolTipTagFragmentGenerator();
      StandardURLTagFragmentGenerator standardURLTagFragmentGenerator0 = new StandardURLTagFragmentGenerator();
      // Undeclared exception!
      try { 
        ChartUtilities.writeImageMap((PrintWriter) mockPrintWriter0, (String) null, chartRenderingInfo0, (ToolTipTagFragmentGenerator) standardToolTipTagFragmentGenerator0, (URLTagFragmentGenerator) standardURLTagFragmentGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("Null 'hour' argument.", "Null 'hour' argument.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Null 'hour' argument.0Null 'hour' argument.");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) mockFileOutputStream0, jFreeChart0, 15, 181, true, 10);
        fail("Expecting exception: IIOException");
      
      } catch(IIOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@", false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(746.822);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) mockFileOutputStream0, jFreeChart0, 0, 15, true, 209);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (15) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) printStream0, jFreeChart0, (-5822), (int) (byte) (-76), chartRenderingInfo0, false, 1589);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-5822) and height (-76) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) null, jFreeChart0, 15, 66, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outputStream' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) printStream0, jFreeChart0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) null, jFreeChart0, 10, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outputStream' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("TP]<4n3x(f");
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, polarPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) mockPrintStream0, jFreeChart0, 15, 15, chartRenderingInfo0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xW7AxrO]S!a$", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 885);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 0, 1, (-2826), (-2826), true, true, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) bufferedOutputStream0, jFreeChart0, (-2826), 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-2826) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) pipedOutputStream0, jFreeChart0, 500, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("xDYG>");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) null, jFreeChart0, 914, 1590);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outputStream' argument.
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) printStream0, 0.0F, jFreeChart0, 0, 4008, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (4008) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) byteArrayOutputStream0, 2848.78F, jFreeChart0, 10, (-1370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-1370) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-2285.049F));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) printStream0, (-2285.049F), jFreeChart0, 420, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      // Undeclared exception!
      try { 
        ChartUtilities.writeBufferedImageAsPNG((OutputStream) printStream0, (BufferedImage) null, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid bounds; ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2);
      // Undeclared exception!
      try { 
        ChartUtilities.writeBufferedImageAsPNG((OutputStream) bufferedOutputStream0, (BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        ChartUtilities.writeBufferedImageAsJPEG((OutputStream) byteArrayOutputStream0, (BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("Q$/wiCX<S2}!'~Qtk", "Q$/wiCX<S2}!'~Qtk", (File) null);
      Minute minute0 = new Minute();
      TimeZone timeZone0 = TimeZone.getTimeZone("Q$/wiCX<S2}!'~Qtk");
      Locale locale0 = Locale.CHINESE;
      PeriodAxis periodAxis0 = new PeriodAxis("Q$/wiCX<S2}!'~Qtk", minute0, minute0, timeZone0, locale0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, periodAxis0, periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsPNG(file0, jFreeChart0, (-981), 1, chartRenderingInfo0, false, (-5822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-981) and height (1) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("Q$/wiCX<S2}!'~Qtk", "Q$/wiCX<S2}!'~Qtk", (File) null);
      Minute minute0 = new Minute();
      TimeZone timeZone0 = TimeZone.getTimeZone("Q$/wiCX<S2}!'~Qtk");
      Locale locale0 = Locale.CHINESE;
      PeriodAxis periodAxis0 = new PeriodAxis("Q$/wiCX<S2}!'~Qtk", minute0, minute0, timeZone0, locale0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, periodAxis0, periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsPNG(file0, jFreeChart0, 10, 1, chartRenderingInfo0, false, (-5822));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = MockFile.createTempFile("Q$/wiCX<S2}!'~Qtk", "Q$/wiCX<S2}!'~Qtk", (File) null);
      Minute minute0 = new Minute();
      TimeZone timeZone0 = TimeZone.getTimeZone("Q$/wiCX<S2}!'~Qtk");
      Locale locale0 = Locale.CHINESE;
      PeriodAxis periodAxis0 = new PeriodAxis("Q$/wiCX<S2}!'~Qtk", minute0, minute0, timeZone0, locale0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, periodAxis0, periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      try { 
        ChartUtilities.saveChartAsPNG(file0, jFreeChart0, 2743, 1, chartRenderingInfo0, true, (-5822));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("png");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsPNG((File) mockFile0, jFreeChart0, 20, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CVYc ,u+s", "CVYc ,u+s");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        ChartUtilities.saveChartAsPNG((File) mockFile0, (JFreeChart) null, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      try { 
        ChartUtilities.saveChartAsPNG((File) mockFile0, jFreeChart0, 0, (-964));
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OA%]0F,_IY!");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, jFreeChart0, 15, 10, chartRenderingInfo0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, jFreeChart0, 15, 10, chartRenderingInfo0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile("Null 'out' argument.", "Null 'out' argument.");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG(file0, jFreeChart0, 15, 10);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) null, jFreeChart0, 0, 680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ti%M\"Y=(", "");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, 2103.787F, jFreeChart0, 500, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ti%M\"Y=(", "");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      PeriodAxis periodAxis0 = new PeriodAxis("|j'yIWOEn");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, periodAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, 2103.787F, jFreeChart0, 500, 500);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ti%M\"Y=(", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      PeriodAxis periodAxis0 = new PeriodAxis("|j'yIWOEn");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, periodAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, 2103.787F, jFreeChart0, 500, 500);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      StandardToolTipTagFragmentGenerator standardToolTipTagFragmentGenerator0 = new StandardToolTipTagFragmentGenerator();
      StandardURLTagFragmentGenerator standardURLTagFragmentGenerator0 = new StandardURLTagFragmentGenerator();
      // Undeclared exception!
      try { 
        ChartUtilities.getImageMap((String) null, chartRenderingInfo0, (ToolTipTagFragmentGenerator) standardToolTipTagFragmentGenerator0, (URLTagFragmentGenerator) standardURLTagFragmentGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.getImageMap("0.000", (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.getImageMap((String) null, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'input' argument.
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.encodeAsPNG((BufferedImage) null, true, (-1156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("<map id=\"org.jfree.chart.title.Title\" name=\"org.jfree.chart.title.Title\">\n</map>", combinedRangeXYPlot0);
      MockFile mockFile0 = new MockFile("org.jfree.chart.title.Title");
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, (-776.8042F), jFreeChart0, 0, 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ti%M\"Y=(", "ti%M\"Y=(");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 2.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("|j'yIWOEn", thermometerPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, jFreeChart0, 0, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("Mike Duffy", "_k 0S7tY", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) mockPrintStream0, Float.NEGATIVE_INFINITY, jFreeChart0, 15, 15, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'quality' must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      PeriodAxis periodAxis0 = new PeriodAxis("ti%M\"Y=(");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, periodAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      MockFile mockFile0 = new MockFile("ti%M\"Y=(", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) mockPrintStream0, jFreeChart0, 2325, 2325, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart("(6pK10i&r?vMk+L!", font0, thermometerPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      ChartUtilities.saveChartAsPNG((File) mockFile0, jFreeChart0, 10, 1459, chartRenderingInfo0);
      assertEquals(680L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      File file0 = MockFile.createTempFile("Q$/wiCX<S2}!'~Qtk", "Q$/wiCX<S2}!'~Qtk", (File) null);
      Minute minute0 = new Minute();
      TimeZone timeZone0 = TimeZone.getTimeZone("Q$/wiCX<S2}!'~Qtk");
      Locale locale0 = Locale.CHINESE;
      PeriodAxis periodAxis0 = new PeriodAxis("Q$/wiCX<S2}!'~Qtk", minute0, minute0, timeZone0, locale0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, periodAxis0, periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 51);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) bufferedOutputStream0, jFreeChart0, 500, 892, chartRenderingInfo0, true, 59);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">wG4n98]FR$pG}~", ">wG4n98]FR$pG}~");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) mockPrintStream0, jFreeChart0, 10, (-1304), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-1304) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      ChartUtilities.writeBufferedImageAsPNG((OutputStream) mockPrintStream0, bufferedImage0, false, 1);
      assertEquals(0, bufferedImage0.getMinTileY());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeBufferedImageAsJPEG((OutputStream) bufferedOutputStream0, 1.0F, (BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunJPEGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.encodeAsPNG((BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeImageMap((PrintWriter) mockPrintWriter0, "Null 'out' argument.", (ChartRenderingInfo) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = MockFile.createTempFile("iJK", "vf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      ChartUtilities.writeImageMap((PrintWriter) mockPrintWriter0, "iJK", chartRenderingInfo0, false);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Null 'out' argument.", "Null 'out' argument.");
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, 2209.096F, (JFreeChart) null, (-1026), (-2419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) null, (-1162.2134F), jFreeChart0, (-494), 697, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile("{b-YSrLp.=", "{yn");
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG(file0, (JFreeChart) null, 222, 222, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsJPEG((File) null, jFreeChart0, 200, (-494), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 1, 1, (-2507), 32, 1, false, true, false, false, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) null, (float) 1, (JFreeChart) null, 0, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) pipedOutputStream0, (JFreeChart) null, 1, 1, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("8\"&V", font0, piePlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsPNG((File) null, jFreeChart0, (-2208), (-1), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'file' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1791.287288330472);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("`FHaQa>'HA{L^r,5[", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, compassPlot0, false);
      ChartUtilities.writeScaledChartAsPNG(byteArrayOutputStream0, jFreeChart0, 10, 10, 1, 1);
      assertEquals("\uFFFDPNG\r\n\u001A\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0000\n\u0000\u0000\u0000\n\b\u0006\u0000\u0000\u0000\uFFFD2\u03FD\u0000\u0000\u0000&IDATx\uFFFDc\uFFFDO$` [all\uFFFD\uFFFD\u06F7o\u0013V\uFFFD\uFFFD\u035B\uFFFD\uFFFD\uFFFD\uFFFDT\uFFFDz(+\u0004\u00005\uFFFD\uFFFD!2y?\uFFFD\u0000\u0000\u0000\u0000IEND\uFFFDB`\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(95, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<2UM%;");
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) mockFileOutputStream0, (JFreeChart) null, 0, (-2300), (ChartRenderingInfo) null, false, 492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("n%I|4b!$,Y'Q!5? Q", font0, spiderWebPlot0, false);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsPNG((OutputStream) null, jFreeChart0, 899, 899, true, 899);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'out' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StandardURLTagFragmentGenerator standardURLTagFragmentGenerator0 = new StandardURLTagFragmentGenerator();
      // Undeclared exception!
      try { 
        ChartUtilities.getImageMap("", (ChartRenderingInfo) null, (ToolTipTagFragmentGenerator) null, (URLTagFragmentGenerator) standardURLTagFragmentGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.imagemap.ImageMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 10, 1687, 2124, 2124, 10, (-319), true, true, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, chartRenderingInfo0);
      byte[] byteArray0 = ChartUtilities.encodeAsPNG(bufferedImage0, true, (-5187));
      assertEquals(87, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W$DQahgZUY>*<o$", false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1455, 2718);
      ChartUtilities.writeBufferedImageAsPNG((OutputStream) mockFileOutputStream0, bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      String string0 = ChartUtilities.getImageMap("org.jfree.chart.title.Title", chartRenderingInfo0);
      assertEquals("<map id=\"org.jfree.chart.title.Title\" name=\"org.jfree.chart.title.Title\">\n</map>", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartUtilities.writeChartAsPNG((OutputStream) printStream0, jFreeChart0, 10, 10);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("clone");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DynamicDriveToolTipTagFragmentGenerator dynamicDriveToolTipTagFragmentGenerator0 = new DynamicDriveToolTipTagFragmentGenerator("JYx", 0);
      StandardURLTagFragmentGenerator standardURLTagFragmentGenerator0 = new StandardURLTagFragmentGenerator();
      ChartUtilities.writeImageMap((PrintWriter) mockPrintWriter0, "JYx", chartRenderingInfo0, (ToolTipTagFragmentGenerator) dynamicDriveToolTipTagFragmentGenerator0, (URLTagFragmentGenerator) standardURLTagFragmentGenerator0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W$DQahgZUY>*<o$", false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) mockFileOutputStream0, jFreeChart0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1) and height (-1) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.applyCurrentTheme((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("{^G-m:Ut=8", categoryPlot0);
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, 0.0F, jFreeChart0, 2, 10);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      File file0 = MockFile.createTempFile("Null 'hour' argument.", "Null 'hour' argument.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartUtilities.writeChartAsPNG((OutputStream) mockFileOutputStream0, jFreeChart0, 15, 181, true, 10);
      assertEquals(368L, file0.length());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      File file0 = MockFile.createTempFile("png", (String) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartUtilities.saveChartAsPNG(file0, jFreeChart0, 10, 10, chartRenderingInfo0, true, 2649);
      assertEquals(167L, file0.length());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2, 0.0, (double) 1.0F, chartRenderingInfo0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeBufferedImageAsJPEG((OutputStream) printStream0, bufferedImage0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?!_{7PV]_o(vATgs{");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      DateAxis dateAxis0 = new DateAxis("F", timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        ChartUtilities.writeChartAsJPEG((OutputStream) mockPrintStream0, 0.0F, jFreeChart0, 10, 10);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CVYc ,u+s", "CVYc ,u+s");
      // Undeclared exception!
      try { 
        ChartUtilities.saveChartAsPNG((File) mockFile0, (JFreeChart) null, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W$DQah=ZUY>*uo$", false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      ChartUtilities.writeScaledChartAsPNG(mockFileOutputStream0, jFreeChart0, 10, 1455, 15, 10);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      try { 
        ChartUtilities.saveChartAsJPEG((File) mockFile0, jFreeChart0, 338, (-2116));
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
