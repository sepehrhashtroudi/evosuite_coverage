/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:13:37 GMT 2022
 */

package org.jfree.chart.panel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JSeparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.panel.CrosshairOverlay;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CrosshairOverlay_ESTest extends CrosshairOverlay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair(0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 0, 0, 0, (-585), 2008, false, false, false, true, false, false, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawVerticalCrosshair((Graphics2D) null, rectangle2D0, 0, crosshair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      List list0 = crosshairOverlay0.getRangeCrosshairs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair(0.0);
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      List list0 = crosshairOverlay0.getDomainCrosshairs();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      BufferedImage bufferedImage0 = new BufferedImage(1227, 1227, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, (ChartPanel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      // Undeclared exception!
      try { 
        crosshairOverlay0.paintOverlay(graphics2D0, chartPanel0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot3D cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      CrosshairOverlay crosshairOverlay1 = new CrosshairOverlay();
      boolean boolean0 = crosshairOverlay0.equals(crosshairOverlay1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Object object0 = crosshairOverlay0.clone();
      Crosshair crosshair0 = new Crosshair((-1413.34));
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      boolean boolean0 = crosshairOverlay0.equals(object0);
      assertFalse(object0.equals((Object)crosshairOverlay0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      JSeparator jSeparator0 = new JSeparator();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(crosshairOverlay0, "ocbOTog]", crosshairOverlay0, jSeparator0);
      crosshairOverlay0.propertyChange(propertyChangeEvent0);
      assertEquals("ocbOTog]", propertyChangeEvent0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      CrosshairOverlay crosshairOverlay1 = (CrosshairOverlay)crosshairOverlay0.clone();
      assertTrue(crosshairOverlay1.equals((Object)crosshairOverlay0));
      
      crosshairOverlay1.removeRangeCrosshair(crosshair0);
      assertFalse(crosshairOverlay1.equals((Object)crosshairOverlay0));
      assertNotSame(crosshairOverlay1, crosshairOverlay0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      boolean boolean0 = crosshairOverlay0.equals(crosshair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(248.49162674824, 3009.498);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Stroke stroke0 = minMaxCategoryRenderer0.getGroupStroke();
      Crosshair crosshair0 = new Crosshair((-1252.3442054), cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, stroke0);
      crosshairOverlay0.drawVerticalCrosshair((Graphics2D) null, rectangle2D_Float0, 5.0, crosshair0);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, false, true);
      Rectangle2D rectangle2D0 = legendTitle0.DEFAULT_ITEM_FONT.getMaxCharBounds(fontRenderContext0);
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawVerticalCrosshair((Graphics2D) null, rectangle2D0, 10, crosshair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.75);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, numberAxis0, candlestickRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, (double) 500, 0.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)plotRenderingInfo0.getDataArea();
      crosshairOverlay0.drawVerticalCrosshair(sunGraphics2D0, rectangle2D_Double0, (-433.1777378790385), crosshair0);
      assertEquals(0, sunGraphics2D0.strokeHint);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 90.0, 22.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(90.0, 5.0E7, 22.0, 0.0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("2;F*B&8F}y|'BM~", true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle0);
      Crosshair crosshair0 = new Crosshair(22.0, piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT, piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      crosshairOverlay0.drawHorizontalCrosshair(graphics2D0, rectangle2D0, 10, crosshair0);
      assertNotSame(rectangle2D0, rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair(0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 0, 0, 0, (-585), 2008, false, false, false, true, false, false, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      // Undeclared exception!
      try { 
        crosshairOverlay0.drawHorizontalCrosshair((Graphics2D) null, rectangle2D0, 0, crosshair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, false, true);
      Rectangle2D rectangle2D0 = legendTitle0.DEFAULT_ITEM_FONT.getMaxCharBounds(fontRenderContext0);
      crosshairOverlay0.drawHorizontalCrosshair((Graphics2D) null, rectangle2D0, 10, crosshair0);
      assertEquals(22.0, rectangle2D0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 90.0, 22.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(90.0, 5.0E7, 22.0, 0.0);
      Crosshair crosshair0 = new Crosshair(22.0, piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT, piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE);
      crosshairOverlay0.drawHorizontalCrosshair(sunGraphics2D0, rectangle2D_Double0, 5.0, crosshair0);
      assertEquals(0, sunGraphics2D0.renderHint);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.75);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, numberAxis0, candlestickRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, (double) 500, 0.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 0, 10, 500, 52, true, false, false, false, false, false);
      crosshairOverlay0.paintOverlay(sunGraphics2D0, chartPanel0);
      assertEquals(0, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.clearRangeCrosshairs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.addRangeCrosshair(crosshair0);
      crosshairOverlay0.clearRangeCrosshairs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      // Undeclared exception!
      try { 
        crosshairOverlay0.removeRangeCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.removeRangeCrosshair(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      // Undeclared exception!
      try { 
        crosshairOverlay0.addRangeCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      crosshairOverlay0.clearDomainCrosshairs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      crosshairOverlay0.clearDomainCrosshairs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.addDomainCrosshair(crosshair0);
      crosshairOverlay0.removeDomainCrosshair(crosshair0);
      assertTrue(crosshair0.isLabelOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      // Undeclared exception!
      try { 
        crosshairOverlay0.removeDomainCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Crosshair crosshair0 = new Crosshair();
      crosshairOverlay0.removeDomainCrosshair(crosshair0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      // Undeclared exception!
      try { 
        crosshairOverlay0.addDomainCrosshair((Crosshair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'crosshair' argument.
         //
         verifyException("org.jfree.chart.panel.CrosshairOverlay", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      List list0 = crosshairOverlay0.getRangeCrosshairs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      Object object0 = crosshairOverlay0.clone();
      boolean boolean0 = crosshairOverlay0.equals(object0);
      assertNotSame(object0, crosshairOverlay0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CrosshairOverlay crosshairOverlay0 = new CrosshairOverlay();
      List list0 = crosshairOverlay0.getDomainCrosshairs();
      assertEquals(0, list0.size());
  }
}
