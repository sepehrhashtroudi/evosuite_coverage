/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:39:19 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.Stack;
import javax.swing.JList;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.Size2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorBlock_ESTest extends ColorBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.desktop;
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, 1314.138, 0.0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      DefaultCaret defaultCaret0 = new DefaultCaret();
      colorBlock0.draw(graphics2D0, (Rectangle2D) defaultCaret0, (Object) defaultCaret0);
      assertEquals(1314.138, colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.orange;
      ColorBlock colorBlock0 = new ColorBlock(color0, (-1617.2798573585), 0.0F);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-169.1434F), 3795.0F);
      Size2D size2D0 = colorBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01);
      assertEquals((-1617.2798573585), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.YELLOW;
      ColorBlock colorBlock0 = new ColorBlock(color0, 0.0, Double.POSITIVE_INFINITY);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 0.0);
      Size2D size2D0 = colorBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.height, 0.01);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.orange;
      ColorBlock colorBlock0 = new ColorBlock(color0, (-1617.2798573585), 1.0);
      colorBlock0.setMargin((-1644.75), (double) 3795.0F, (double) 0.78431374F, (double) (-169.1434F));
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = colorBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals((-1642.965686261654), size2D0.height, 0.01);
      assertEquals(2008.5767405418906, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      ColorBlock colorBlock0 = new ColorBlock(color0, 1575.8936678, 1575.8936678);
      Line2D.Double line2D_Double0 = new Line2D.Double((-350.4594838526893), 2.0, 2113.4903258877825, 0.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        colorBlock0.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      JList<String> jList0 = new JList<String>(stack0);
      Color color0 = jList0.getSelectionForeground();
      ColorBlock colorBlock0 = new ColorBlock(color0, 0.0, 0.0);
      ColorBlock colorBlock1 = new ColorBlock(color0, 0.0, 0.0);
      boolean boolean0 = colorBlock0.equals(colorBlock1);
      assertEquals(0.0, colorBlock1.getWidth(), 0.01);
      assertEquals(0.0, colorBlock1.getHeight(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      JList<String> jList0 = new JList<String>(stack0);
      Color color0 = jList0.getSelectionForeground();
      ColorBlock colorBlock0 = new ColorBlock(color0, 0.0, 0.0);
      boolean boolean0 = colorBlock0.equals(colorBlock0);
      assertTrue(boolean0);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = Color.yellow;
      ColorBlock colorBlock0 = new ColorBlock(color0, 0.0F, 0.0F);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      boolean boolean0 = colorBlock0.equals(rectangleConstraint0);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorBlock colorBlock0 = null;
      try {
        colorBlock0 = new ColorBlock((Paint) null, (-3449.26955), (-3449.26955));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.block.ColorBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      JList<String> jList0 = new JList<String>(stack0);
      Color color0 = jList0.getSelectionForeground();
      ColorBlock colorBlock0 = new ColorBlock(color0, 0.0, 0.0);
      colorBlock0.getPaint();
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.yellow;
      ColorBlock colorBlock0 = new ColorBlock(color0, 0.0F, 0.0F);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, 0.0F, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        colorBlock0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Double0, (Object) rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }
}
