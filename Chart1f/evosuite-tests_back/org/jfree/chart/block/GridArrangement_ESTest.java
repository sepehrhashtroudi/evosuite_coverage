/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:36:48 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.sql.Connection;
import javax.swing.JToolTip;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridArrangement_ESTest extends GridArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 581);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(581.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(581.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(581.0, size2D0.getHeight(), 0.01);
      assertEquals(581.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-77.628380375));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-77.628380375), rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-77.628380375), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-77.628380375), size2D0.getHeight(), 0.01);
      assertEquals((-77.628380375), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1), 2292);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Range range0 = new Range((-1056.443589852109), 2292);
      assertEquals(617.7782050739455, range0.getCentralValue(), 0.01);
      assertEquals(3348.4435898521087, range0.getLength(), 0.01);
      assertEquals(2292.0, range0.getUpperBound(), 0.01);
      assertEquals((-1056.443589852109), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1.0));
      assertEquals(617.7782050739455, range0.getCentralValue(), 0.01);
      assertEquals(3348.4435898521087, range0.getLength(), 0.01);
      assertEquals(2292.0, range0.getUpperBound(), 0.01);
      assertEquals((-1056.443589852109), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(617.7782050739455, range0.getCentralValue(), 0.01);
      assertEquals(3348.4435898521087, range0.getLength(), 0.01);
      assertEquals(2292.0, range0.getUpperBound(), 0.01);
      assertEquals((-1056.443589852109), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-1.0), size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-2236), 2250);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(-0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(-0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(46, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-77.628380375));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-77.628380375), rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-77.628380375), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals((-77.628380375), size2D0.getHeight(), 0.01);
      assertEquals((-77.628380375), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2324, 2324);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1580), 244);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(244, 0.0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(244.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(244.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(244.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(244.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 581);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(581.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(581.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(581.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(581.0, size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 10);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0, (-22.08773251789706));
      assertEquals((-22.08773251789706), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals((-22.08773251789706), rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals((-22.08773251789706), size2D0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals((-22.08773251789706), size2D0.height, 0.01);
      assertNotNull(size2D0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-681), (-681));
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Color color0 = new Color((float) 0, (float) 0, (float) 0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null, color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNotNull(labelBlock0);
      
      blockContainer0.add((Block) labelBlock0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1361, (-91));
      assertNotNull(gridArrangement0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-91), (-1672.301995));
      assertEquals((-1672.301995), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-91.0), rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2324, 2324);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(665, 665);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-2236), 2250);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1703, 0);
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1703, (-1375.053956942714));
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 10);
      GridArrangement gridArrangement1 = new GridArrangement(10, 0);
      boolean boolean0 = gridArrangement0.equals(gridArrangement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      GridArrangement gridArrangement1 = new GridArrangement(581, 581);
      boolean boolean0 = gridArrangement0.equals(gridArrangement1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      boolean boolean0 = gridArrangement0.equals(gridArrangement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2324, 2324);
      JToolTip jToolTip0 = new JToolTip();
      boolean boolean0 = gridArrangement0.equals(jToolTip0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      BlockContainer blockContainer0 = new BlockContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), range0);
      Size2D size2D0 = gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-1.0), size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      BlockContainer blockContainer0 = new BlockContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 581);
      Size2D size2D0 = gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(581.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1703, 5);
      BlockContainer blockContainer0 = new BlockContainer();
      BlockContainer blockContainer1 = new BlockContainer();
      blockContainer0.add((Block) blockContainer1);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1703, (-1375.053956942714));
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1), 2292);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      Range range0 = new Range((-1056.443589852109), 2292);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1.0));
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-1.0), size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, (-8));
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.add((Block) null);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      BlockContainer blockContainer0 = new BlockContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 581);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1, 0);
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, (Range) null);
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(581, 581);
      BlockContainer blockContainer0 = new BlockContainer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), range0);
      Size2D size2D0 = gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals((-1.0), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      Range range0 = new Range((-1.0), 589.6013);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrange((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1), (-3917));
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1666.43182447437, (Range) null, lengthConstraintType0, (-282.7619), (Range) null, lengthConstraintType0);
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(897, 897);
      Font font0 = new Font("org.jfree.chart.block.GridArrangement", 897, 897);
      LabelBlock labelBlock0 = new LabelBlock("org.jfree.data.pie.AbstractPieDataset", font0);
      gridArrangement0.add(labelBlock0, labelBlock0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-11), 0);
      gridArrangement0.clear();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1847), 0);
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals(-0.0, size2D0.height, 0.01);
  }
}
