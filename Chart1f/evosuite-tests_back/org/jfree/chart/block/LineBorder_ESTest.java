/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:48:07 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineBorder_ESTest extends LineBorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.pink;
      BasicStroke basicStroke0 = new BasicStroke(469.47998F);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1585.407816887), 848.133109507, 469.47998F, (-810.5287));
      LineBorder lineBorder0 = new LineBorder(color0, basicStroke0, rectangleInsets0);
      RectangleInsets rectangleInsets1 = lineBorder0.getInsets();
      assertEquals((-810.5287), rectangleInsets1.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Color color0 = Color.getHSBColor(723.0F, 723.0F, 723.0F);
      BasicStroke basicStroke0 = new BasicStroke();
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      LineBorder lineBorder1 = new LineBorder(color0, basicStroke0, rectangleInsets0);
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      LineBorder lineBorder1 = new LineBorder();
      boolean boolean0 = lineBorder0.equals(lineBorder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      boolean boolean0 = lineBorder0.equals(lineBorder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      boolean boolean0 = lineBorder0.equals(sunHints_Key0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1L, 1L, 1L, 1.868577160237172);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      rectangle0.height = 0;
      lineBorder0.draw((Graphics2D) null, rectangle0);
      assertEquals(1, rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Point point0 = new Point(0, 0);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      // Undeclared exception!
      try { 
        lineBorder0.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Point point0 = new Point(0, 0);
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0, false, false);
      lineBorder0.draw((Graphics2D) null, rectangle2D0);
      assertEquals(0.0, rectangle2D0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.gray;
      BasicStroke basicStroke0 = new BasicStroke();
      LineBorder lineBorder0 = null;
      try {
        lineBorder0 = new LineBorder(color0, basicStroke0, (RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      LineBorder lineBorder0 = null;
      try {
        lineBorder0 = new LineBorder(systemColor0, (Stroke) null, rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 1783.20546084, (-885.03306267736), (-885.03306267736), Double.NEGATIVE_INFINITY);
      LineBorder lineBorder0 = null;
      try {
        lineBorder0 = new LineBorder((Paint) null, basicStroke0, rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.block.LineBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      Color color0 = (Color)lineBorder0.getPaint();
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      BasicStroke basicStroke0 = (BasicStroke)lineBorder0.getStroke();
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineBorder lineBorder0 = new LineBorder();
      RectangleInsets rectangleInsets0 = lineBorder0.getInsets();
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
  }
}
