/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:44:35 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnArrangement_ESTest extends ColumnArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 1.7976931348623157E308);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-1329.0), (-1329.0));
      blockContainer0.add((Block) emptyBlock0);
      Object[] objectArray0 = new Object[9];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1805);
      blockContainer0.add((Block) blockContainer0, (Object) defaultTableModel0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      blockContainer0.add((Block) emptyBlock0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 109.893284, 109.893284);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Range range0 = new Range(0.0, 1.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-1474.0), (-1474.0));
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Range range0 = new Range((-1.7976931348623157E308), (-1.7976931348623157E308));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals((-1.7976931348623157E308), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      Size2D size2D0 = columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 1945.9);
      Size2D size2D0 = columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (-1086.2444801210534));
      Size2D size2D0 = columnArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, (-2593.2495432388));
      blockContainer0.add((Block) emptyBlock0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.width, 0.01);
      assertEquals((-2593.2495432388), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, 1945.9);
      blockContainer0.add((Block) emptyBlock0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-330.84194887032), (-330.84194887032));
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, 1385.8296229004686);
      Size2D size2D0 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (-7.590674954772022));
      Size2D size2D0 = columnArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, 1945.9);
      blockContainer0.add((Block) emptyBlock0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 1945.9);
      Size2D size2D0 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (-2593.2495432388));
      Size2D size2D0 = columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, (-2593.2495432388));
      blockContainer0.add((Block) emptyBlock0);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.width, 0.01);
      assertEquals((-2593.2495432388), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-525.78294211298), (Range) null);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 3224.8, 0.0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 3224.8, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeNF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        columnArrangement0.arrange(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      columnArrangement0.add(blockContainer0, sunHints_Key0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-2.147483648E9), (-2.147483648E9));
      ColumnArrangement columnArrangement1 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-2.147483648E9), (-1191.0148218246434));
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(boolean0);
      assertFalse(columnArrangement1.equals((Object)columnArrangement0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-2161.455792495), 1.7976931348623157E308);
      ColumnArrangement columnArrangement1 = new ColumnArrangement();
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      ColumnArrangement columnArrangement1 = new ColumnArrangement();
      boolean boolean0 = columnArrangement0.equals(columnArrangement1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      boolean boolean0 = columnArrangement0.equals(columnArrangement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      boolean boolean0 = columnArrangement0.equals(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      blockContainer0.add((Block) emptyBlock0);
      Size2D size2D0 = columnArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.width, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 3224.8, 3224.8);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(3224.8, (Range) null);
      // Undeclared exception!
      try { 
        columnArrangement0.arrange((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-729.43243), 1315.47598);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(1315.47598, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      // Undeclared exception!
      try { 
        columnArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.ColumnArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 1.7976931348623157E308);
      columnArrangement0.clear();
  }
}
