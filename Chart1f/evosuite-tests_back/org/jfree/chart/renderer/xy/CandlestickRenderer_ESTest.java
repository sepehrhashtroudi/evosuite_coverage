/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:59:48 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.text.DateFormat;
import java.text.DecimalFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CandlestickRenderer_ESTest extends CandlestickRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PeriodAxis periodAxis0 = new PeriodAxis("O)3JF*1VD~R52-pdy!v");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 0);
      JFreeChart jFreeChart0 = new JFreeChart("E", combinedDomainXYPlot0);
      periodAxis0.zoomRange(1.0F, 1.0F);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 1428, 2142208947, 213, 500, 1915, false, true, true, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        candlestickRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedDomainXYPlot0, dynamicTimeSeriesCollection0, plotRenderingInfo0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.DynamicTimeSeriesCollection cannot be cast to org.jfree.data.xy.OHLCDataset
         //
         verifyException("org.jfree.chart.renderer.xy.CandlestickRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthFactor(1010.7789177);
      assertEquals(1010.7789177, candlestickRenderer0.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1.0));
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      candlestickRenderer0.setUpPaint((Paint) null);
      Paint paint0 = candlestickRenderer0.getUpPaint();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertNull(paint0);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.5E-6);
      assertTrue(candlestickRenderer0.getDrawVolume());
      
      candlestickRenderer0.setDrawVolume(false);
      boolean boolean0 = candlestickRenderer0.getDrawVolume();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      candlestickRenderer0.setCandleWidth(0.0);
      double double0 = candlestickRenderer0.getCandleWidth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      double double0 = candlestickRenderer0.getCandleWidth();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthMethod(1521);
      int int0 = candlestickRenderer0.getAutoWidthMethod();
      assertEquals(1521, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthMethod((byte) (-67));
      int int0 = candlestickRenderer0.getAutoWidthMethod();
      assertEquals((-67), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthGap(3025.0763864797077);
      double double0 = candlestickRenderer0.getAutoWidthGap();
      assertEquals(3025.0763864797077, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthGap((-406.1289902927878));
      double double0 = candlestickRenderer0.getAutoWidthGap();
      assertEquals((-406.1289902927878), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      
      candlestickRenderer0.setAutoWidthFactor(0.0);
      double double0 = candlestickRenderer0.getAutoWidthFactor();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0, "Martin Cordova", "Martin Cordova");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Martin Cordova");
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, numberAxis3D0, numberAxis3D0, candlestickRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("W!JyaT>", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        candlestickRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, xYPlot0, timePeriodValuesCollection0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GeneralPath generalPath0 = new GeneralPath(candlestickRenderer0.DEFAULT_SHAPE);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      XYSeries xYSeries0 = new XYSeries(1.0E-8);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(2503);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, xYSeriesCollection0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        candlestickRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, (ValueAxis) null, (ValueAxis) null, xYSeriesCollection0, 500, (-33), false, xYItemRendererState0, rectangle2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CandlestickRenderer candlestickRenderer1 = (CandlestickRenderer)candlestickRenderer0.clone();
      candlestickRenderer1.setAutoWidthGap((-1654.2144225281786));
      boolean boolean0 = candlestickRenderer0.equals(candlestickRenderer1);
      assertEquals((-1654.2144225281786), candlestickRenderer1.getAutoWidthGap(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", dateFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(0, true, standardXYToolTipGenerator0);
      candlestickRenderer0.equals(candlestickRenderer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      boolean boolean0 = candlestickRenderer0.equals(candlestickRenderer0);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      Color color0 = Color.black;
      boolean boolean0 = candlestickRenderer0.equals(color0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(1.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(boolean0);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(890.7);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      candlestickRenderer0.setUseOutlinePaint(true);
      boolean boolean0 = candlestickRenderer0.getUseOutlinePaint();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      candlestickRenderer0.setUseOutlinePaint(false);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2657.138);
      // Undeclared exception!
      try { 
        candlestickRenderer0.setVolumePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.CandlestickRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(890.7);
      Paint paint0 = candlestickRenderer0.getDownPaint();
      candlestickRenderer0.setVolumePaint(paint0);
      Color color0 = (Color)candlestickRenderer0.getVolumePaint();
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(890.7, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals((-65536), color0.getRGB());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertTrue(candlestickRenderer0.getDrawVolume());
      
      candlestickRenderer0.setDrawVolume(true);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      
      candlestickRenderer0.setAutoWidthGap(0.0);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthFactor((-620.0));
      double double0 = candlestickRenderer0.getAutoWidthFactor();
      assertEquals((-620.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      
      candlestickRenderer0.setAutoWidthFactor(0.6428571428571429);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setAutoWidthMethod(1521);
      candlestickRenderer0.setAutoWidthMethod(1521);
      assertEquals(1521, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setCandleWidth(3.0);
      candlestickRenderer0.setCandleWidth(3.0);
      assertEquals(3.0, candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      boolean boolean0 = candlestickRenderer0.getDrawVolume();
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(890.7);
      Color color0 = (Color)candlestickRenderer0.getDownPaint();
      candlestickRenderer0.setDownPaint(color0);
      assertEquals(890.7, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals((-65536), color0.getRGB());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      double double0 = candlestickRenderer0.getAutoWidthGap();
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.0, double0, 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PeriodAxis periodAxis0 = new PeriodAxis("O)3JF*1VD~R52-pdy!v");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedDomainXYPlot0, dynamicTimeSeriesCollection0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        candlestickRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, combinedDomainXYPlot0, periodAxis0, periodAxis0, dynamicTimeSeriesCollection0, 500, 0, true, xYItemRendererState0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Color color0 = (Color)candlestickRenderer0.getUpPaint();
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      double double0 = candlestickRenderer0.getAutoWidthFactor();
      assertEquals(0.6428571428571429, double0, 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(890.7);
      boolean boolean0 = candlestickRenderer0.getUseOutlinePaint();
      assertEquals(890.7, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(boolean0);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      candlestickRenderer0.setMaxCandleWidthInMilliseconds(3298.19229470753);
      assertEquals(3298.19229470753, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      double double0 = candlestickRenderer0.getCandleWidth();
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(890.7);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      candlestickRenderer0.findRangeBounds(timePeriodValuesCollection0);
      assertEquals(890.7, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      double double0 = candlestickRenderer0.getMaxCandleWidthInMilliseconds();
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(7.2E7, double0, 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      int int0 = candlestickRenderer0.getAutoWidthMethod();
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, int0);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CandlestickRenderer candlestickRenderer1 = (CandlestickRenderer)candlestickRenderer0.clone();
      boolean boolean0 = candlestickRenderer0.equals(candlestickRenderer1);
      assertTrue(boolean0);
      assertEquals((-1.0), candlestickRenderer1.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer1.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer1.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0, candlestickRenderer1.getAutoWidthMethod());
      assertEquals(0.6428571428571429, candlestickRenderer1.getAutoWidthFactor(), 0.01);
      assertEquals(0.0, candlestickRenderer1.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer1.getUseOutlinePaint());
  }
}
