/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:03:24 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.sql.Connection;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HighLowRenderer_ESTest extends HighLowRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setTickLength(1009.305925696206);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertEquals(1009.305925696206, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      
      highLowRenderer0.setTickLength(0.0);
      double double0 = highLowRenderer0.getTickLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("L6YoanMhe:v)", xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      Paint paint0 = legendTitle0.getItemPaint();
      highLowRenderer0.setOpenTickPaint(paint0);
      Color color0 = (Color)highLowRenderer0.getOpenTickPaint();
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(0, color0.getBlue());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      
      highLowRenderer0.setDrawOpenTicks(false);
      boolean boolean0 = highLowRenderer0.getDrawOpenTicks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Paint paint0 = stackedAreaRenderer0.getBaseFillPaint();
      highLowRenderer0.setCloseTickPaint(paint0);
      Color color0 = (Color)highLowRenderer0.getCloseTickPaint();
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      highLowRenderer0.findRangeBounds(jDBCXYDataset0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Month month0 = new Month();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, month0, simpleTimeZone0);
      highLowRenderer0.findRangeBounds(dynamicTimeSeriesCollection0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) highLowRenderer0.ZERO, (-1984.992594), "PlotOrientation.HORIZONTAL");
      highLowRenderer0.findRangeBounds(categoryTableXYDataset0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 1703.386F, 0.0F);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 999);
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeXYPlot0, dynamicTimeSeriesCollection0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D_Float0, combinedRangeXYPlot0, numberAxis3D0, numberAxis3D0, dynamicTimeSeriesCollection0, 999, 1, true, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (XYPlot) null, defaultIntervalXYDataset0, plotRenderingInfo0);
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.renderer.xy.HighLowRenderer", stringArray0);
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, (XYPlot) null, symbolAxis0, symbolAxis0, defaultIntervalXYDataset0, 1, 60, false, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = stackedXYBarRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, xYPlot0, histogramDataset0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        highLowRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D_Float0, xYPlot0, (ValueAxis) null, (ValueAxis) null, histogramDataset0, (-1680), (-1680), false, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      assertTrue(highLowRenderer1.equals((Object)highLowRenderer0));
      
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      highLowRenderer1.setBaseURLGenerator((XYURLGenerator) standardXYZURLGenerator0);
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
      assertTrue(boolean0);
      assertTrue(highLowRenderer1.getDrawCloseTicks());
      assertTrue(highLowRenderer1.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Paint paint0 = stackedAreaRenderer0.getBaseFillPaint();
      highLowRenderer0.setCloseTickPaint(paint0);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
      assertTrue(highLowRenderer1.getDrawOpenTicks());
      assertFalse(boolean0);
      assertTrue(highLowRenderer1.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setOpenTickPaint(highLowRenderer0.DEFAULT_PAINT);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertFalse(boolean0);
      assertTrue(highLowRenderer1.getDrawOpenTicks());
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
      assertFalse(highLowRenderer1.equals((Object)highLowRenderer0));
      assertTrue(highLowRenderer1.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Month month0 = new Month();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, month0, simpleTimeZone0);
      boolean boolean0 = highLowRenderer0.equals(dynamicTimeSeriesCollection0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertFalse(boolean0);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer0);
      assertTrue(boolean0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      highLowRenderer0.setTickLength(1984.8429721224045);
      boolean boolean0 = highLowRenderer1.equals(highLowRenderer0);
      assertEquals(1984.8429721224045, highLowRenderer0.getTickLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(highLowRenderer0.ZERO, "", "ysI}");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      highLowRenderer0.findRangeBounds(timePeriodValuesCollection0);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.findRangeBounds((XYDataset) null);
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.getDrawCloseTicks();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(boolean0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Paint paint0 = highLowRenderer0.getCloseTickPaint();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertNull(paint0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      HighLowRenderer highLowRenderer1 = (HighLowRenderer)highLowRenderer0.clone();
      assertTrue(highLowRenderer1.getDrawOpenTicks());
      assertTrue(highLowRenderer1.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer1.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.getDrawOpenTicks();
      assertTrue(boolean0);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      double double0 = highLowRenderer0.getTickLength();
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertTrue(highLowRenderer0.getDrawOpenTicks());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setTickLength((-5.0));
      double double0 = highLowRenderer0.getTickLength();
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.setDrawOpenTicks(false);
      HighLowRenderer highLowRenderer1 = new HighLowRenderer();
      boolean boolean0 = highLowRenderer0.equals(highLowRenderer1);
      assertFalse(boolean0);
      assertFalse(highLowRenderer0.getDrawOpenTicks());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      
      highLowRenderer0.setDrawCloseTicks(false);
      boolean boolean0 = highLowRenderer0.getDrawCloseTicks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      Paint paint0 = highLowRenderer0.getOpenTickPaint();
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01);
      assertTrue(highLowRenderer0.getDrawCloseTicks());
      assertNull(paint0);
      assertTrue(highLowRenderer0.getDrawOpenTicks());
  }
}
