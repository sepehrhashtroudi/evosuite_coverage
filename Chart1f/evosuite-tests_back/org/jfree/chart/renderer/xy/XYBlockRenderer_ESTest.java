/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:56:20 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.sql.Connection;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYBlockRenderer_ESTest extends XYBlockRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight((-3364.26866739896));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth((-1478.96567));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      MockDate mockDate0 = new MockDate(40, 40, 40);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "");
      Locale locale0 = Locale.CHINA;
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(40, 1, week0, timeZone0);
      Range range0 = xYBlockRenderer0.findRangeBounds(dynamicTimeSeriesCollection0);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3392, 3392);
      // Undeclared exception!
      try { 
        xYBlockRenderer0.findDomainBounds(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5F, "");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        xYBlockRenderer0.drawItem((Graphics2D) null, (XYItemRendererState) null, (Rectangle2D) null, combinedRangeXYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, xYTaskDataset0, 4232, 89, true, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYBlockRenderer xYBlockRenderer1 = (XYBlockRenderer)xYBlockRenderer0.clone();
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertNotSame(xYBlockRenderer1, xYBlockRenderer0);
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(0.0F, 2.0F, xYBlockRenderer0.DEFAULT_PAINT);
      xYBlockRenderer0.setPaintScale(lookupPaintScale0);
      XYBlockRenderer xYBlockRenderer1 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer1);
      assertFalse(boolean0);
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYBlockRenderer xYBlockRenderer1 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer1.equals(xYBlockRenderer0);
      assertEquals(1.0, xYBlockRenderer1.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer1.getBlockHeight(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      boolean boolean0 = xYBlockRenderer0.equals(xYBlockRenderer0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      boolean boolean0 = xYBlockRenderer0.equals(paintScale0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = xYBlockRenderer0.findRangeBounds(jDBCXYDataset0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object[][][] objectArray0 = new Object[0][4][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      xYBlockRenderer0.findRangeBounds(defaultWindDataset0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.findRangeBounds((XYDataset) null);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object[][][] objectArray0 = new Object[0][4][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      xYBlockRenderer0.findDomainBounds(defaultWindDataset0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.findDomainBounds((XYDataset) null);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker(xYBlockRenderer0.ZERO, xYBlockRenderer0.DEFAULT_OUTLINE_PAINT, xYBlockRenderer0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setPaintScale((PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'scale' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockAnchor((RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      xYBlockRenderer0.setBlockAnchor(rectangleAnchor0);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockHeight((double) xYBlockRenderer0.ZERO);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'height' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      
      xYBlockRenderer0.setBlockHeight(2.0);
      assertEquals(2.0, xYBlockRenderer0.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      // Undeclared exception!
      try { 
        xYBlockRenderer0.setBlockWidth(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'width' argument must be > 0.0
         //
         verifyException("org.jfree.chart.renderer.xy.XYBlockRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.setBlockWidth(209);
      assertEquals(209.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYBlockRenderer0.getBlockAnchor();
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      double double0 = xYBlockRenderer0.getBlockWidth();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      double double0 = xYBlockRenderer0.getBlockHeight();
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }
}
