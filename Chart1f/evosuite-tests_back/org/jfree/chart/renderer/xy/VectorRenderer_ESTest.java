/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:50:00 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.Range;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VectorRenderer_ESTest extends VectorRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, Double.POSITIVE_INFINITY, (Comparable) vectorRenderer0.ZERO);
      Range range0 = vectorRenderer0.findRangeBounds(timeTableXYDataset0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (-17.079168227047408), (Comparable) vectorRenderer0.ZERO);
      Range range0 = vectorRenderer0.findRangeBounds(timeTableXYDataset0);
      assertEquals((-17.079168227047408), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 19);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      Range range0 = vectorRenderer0.findDomainBounds(matrixSeriesCollection0);
      assertEquals(18.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      TimeSeries timeSeries0 = new TimeSeries(vectorRenderer0.ZERO);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      MockDate mockDate0 = new MockDate((-1333L));
      Hour hour0 = new Hour(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0);
      Range range0 = vectorRenderer0.findDomainBounds(timeSeriesCollection0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Rectangle rectangle0 = new Rectangle((-60), 7, (-60), 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        vectorRenderer0.drawItem((Graphics2D) null, (XYItemRendererState) null, rectangle0, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, (XYDataset) null, (-772), Integer.MAX_VALUE, false, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.VectorRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(11, 1615);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = vectorRenderer0.createState(plotRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, (double) vectorRenderer0.ZERO, 755.3952605);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(true, "hX/f2fbY]Ip", "84pu7oQ#~Qv1");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
      try { 
        vectorRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D_Double0, combinedRangeXYPlot0, logarithmicAxis0, logarithmicAxis0, timePeriodValuesCollection0, 500, 2949, false, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      boolean boolean0 = vectorRenderer0.equals(vectorRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      boolean boolean0 = vectorRenderer0.equals(vectorSeriesCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 0.0, (Comparable) vectorRenderer0.ZERO);
      Range range0 = vectorRenderer0.findRangeBounds(timeTableXYDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Range range0 = vectorRenderer0.findRangeBounds(matrixSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      // Undeclared exception!
      try { 
        vectorRenderer0.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.VectorRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = vectorRenderer0.findRangeBounds(vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 0.0, (Comparable) vectorRenderer0.ZERO);
      Range range0 = vectorRenderer0.findDomainBounds(timeTableXYDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = vectorRenderer0.findDomainBounds(vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      // Undeclared exception!
      try { 
        vectorRenderer0.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.VectorRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Object object0 = vectorRenderer0.clone();
      boolean boolean0 = vectorRenderer0.equals(object0);
      assertTrue(boolean0);
  }
}
