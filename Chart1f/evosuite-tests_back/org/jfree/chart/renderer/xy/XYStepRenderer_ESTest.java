/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:58:25 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.text.DateFormat;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYStepRenderer_ESTest extends XYStepRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.setStepPoint(1.0);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(523);
      // Undeclared exception!
      try { 
        xYStepRenderer0.equals(xYSplineRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.XYSplineRenderer cannot be cast to org.jfree.chart.renderer.xy.XYStepRenderer
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("~h]23ME@)l=", dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "]]b^=0@ePsN$", "[26[v2sf", "[26[v2sf");
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      
      xYStepRenderer0.setStepPoint(0.0);
      double double0 = xYStepRenderer0.getStepPoint();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      boolean boolean0 = xYStepRenderer0.equals((Object) null);
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      boolean boolean0 = xYStepRenderer0.equals(xYStepRenderer0);
      assertTrue(boolean0);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYStepRenderer xYStepRenderer1 = new XYStepRenderer();
      xYStepRenderer0.setStepPoint(0.0);
      boolean boolean0 = xYStepRenderer0.equals(xYStepRenderer1);
      assertFalse(boolean0);
      assertEquals(0.0, xYStepRenderer0.getStepPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        xYStepRenderer0.drawItem((Graphics2D) null, (XYItemRendererState) null, (Rectangle2D) null, combinedDomainXYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, (XYDataset) null, 1073741824, 0, true, 3929);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      // Undeclared exception!
      try { 
        xYStepRenderer0.setStepPoint(385.9188210898398);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      // Undeclared exception!
      try { 
        xYStepRenderer0.setStepPoint((-1301.50774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires stepPoint in [0.0;1.0]
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.hashCode();
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      double double0 = xYStepRenderer0.getStepPoint();
      assertEquals(1.0, double0, 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYStepRenderer xYStepRenderer1 = (XYStepRenderer)xYStepRenderer0.clone();
      boolean boolean0 = xYStepRenderer0.equals(xYStepRenderer1);
      assertFalse(xYStepRenderer1.getBaseShapesVisible());
      assertEquals(1.0, xYStepRenderer1.getStepPoint(), 0.01);
      assertTrue(boolean0);
  }
}
