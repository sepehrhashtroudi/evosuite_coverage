/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:14:57 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYAreaRenderer_ESTest extends XYAreaRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, customXYToolTipGenerator0, customXYURLGenerator0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      stackedXYAreaRenderer0.setLegendArea(combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      xYAreaRenderer0.setOutline(true);
      boolean boolean0 = xYAreaRenderer0.isOutline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(366);
      stackedXYAreaRenderer0.setUseFillPaint(true);
      boolean boolean0 = stackedXYAreaRenderer0.getUseFillPaint();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(5);
      boolean boolean0 = xYAreaRenderer0.getPlotShapes();
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertTrue(boolean0);
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(4, standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotArea();
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(boolean0);
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.renderer.xy.XYAreaRenderer");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2497, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-2108), (-425), (-1306), 2, 0, 0, true, false, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYAreaRenderer.XYAreaRendererState xYAreaRenderer_XYAreaRendererState0 = new XYAreaRenderer.XYAreaRendererState(plotRenderingInfo0);
      Rectangle rectangle0 = xYAreaRenderer_XYAreaRendererState0.area.getBounds();
      DateAxis dateAxis0 = new DateAxis("PROPERTIES");
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem(graphics2D0, xYAreaRenderer_XYAreaRendererState0, rectangle0, (XYPlot) null, dateAxis0, dateAxis0, (XYDataset) null, 10, 300, true, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.renderer.xy.XYAreaRenderer");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2497, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, (-2108), (-421), (-1306), 2, 0, 0, true, false, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      DateAxis dateAxis0 = new DateAxis("PROPERTIES");
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle0, (XYPlot) null, dateAxis0, dateAxis0, (XYDataset) null, 10, 300, true, 10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.XYItemRendererState cannot be cast to org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(91);
      BufferedImage bufferedImage0 = new BufferedImage(341, 5, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(10, "E{;_[f*E+", "");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, timePeriodValuesCollection0, plotRenderingInfo0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      DateAxis dateAxis0 = new DateAxis("item", timeZone0, locale0);
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, (XYPlot) null, dateAxis0, dateAxis0, timePeriodValuesCollection0, 0, (-616), true, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator(dateFormat0, numberFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4, highLowItemLabelGenerator0, standardXYURLGenerator0);
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotShapes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(2, customXYToolTipGenerator0, standardXYURLGenerator0);
      assertTrue(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4);
      XYAreaRenderer xYAreaRenderer1 = new XYAreaRenderer(5);
      boolean boolean0 = xYAreaRenderer0.equals(xYAreaRenderer1);
      assertFalse(boolean0);
      assertTrue(xYAreaRenderer1.getPlotArea());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(74);
      XYAreaRenderer xYAreaRenderer1 = new XYAreaRenderer(5);
      boolean boolean0 = xYAreaRenderer0.equals(xYAreaRenderer1);
      assertTrue(xYAreaRenderer1.getPlotShapes());
      assertFalse(xYAreaRenderer1.getPlotLines());
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer1.isOutline());
      assertFalse(xYAreaRenderer0.getPlotShapes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      boolean boolean0 = xYAreaRenderer0.equals(stackedXYAreaRenderer0);
      assertTrue(boolean0);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer((-2479));
      boolean boolean0 = xYAreaRenderer0.equals(xYAreaRenderer0);
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertTrue(boolean0);
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(641);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      boolean boolean0 = xYAreaRenderer0.equals(timeSeriesTableModel0);
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(2618);
      xYAreaRenderer0.getLegendItem(3, 2);
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0);
      // Undeclared exception!
      try { 
        xYAreaRenderer0.setGradientTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, customXYToolTipGenerator0, customXYURLGenerator0);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      stackedXYAreaRenderer0.setGradientTransformer(standardGradientPaintTransformer0);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("a*gQr81", dateFormat0, numberFormat0);
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(5, standardXYToolTipGenerator0, customXYURLGenerator0);
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getPlotShapes());
      assertTrue(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", dateFormat0, dateFormat0);
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(3, standardXYToolTipGenerator0, standardXYZURLGenerator0);
      assertTrue(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
      assertTrue(xYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(2);
      // Undeclared exception!
      try { 
        xYAreaRenderer0.setLegendArea((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(2618);
      XYAreaRenderer xYAreaRenderer1 = (XYAreaRenderer)xYAreaRenderer0.clone();
      assertFalse(xYAreaRenderer1.getPlotArea());
      assertNotSame(xYAreaRenderer1, xYAreaRenderer0);
      assertFalse(xYAreaRenderer1.getPlotShapes());
      assertFalse(xYAreaRenderer1.isOutline());
      assertFalse(xYAreaRenderer1.getPlotLines());
      assertTrue(xYAreaRenderer1.equals((Object)xYAreaRenderer0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, customXYToolTipGenerator0, customXYURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotArea();
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, customXYToolTipGenerator0, customXYURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotShapes();
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(91);
      BufferedImage bufferedImage0 = new BufferedImage(341, 5, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(10, "E{;_[f*E+", "");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, timePeriodValuesCollection0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        xYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, (Rectangle2D) null, (XYPlot) null, (ValueAxis) null, (ValueAxis) null, timePeriodValuesCollection0, 10, 0, false, 62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, customXYToolTipGenerator0, customXYURLGenerator0);
      stackedXYAreaRenderer0.hashCode();
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      xYAreaRenderer0.getLegendArea();
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      boolean boolean0 = xYAreaRenderer0.isOutline();
      assertFalse(boolean0);
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertTrue(xYAreaRenderer0.getPlotArea());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      xYAreaRenderer0.getUseFillPaint();
      assertFalse(xYAreaRenderer0.getPlotLines());
      assertFalse(xYAreaRenderer0.isOutline());
      assertTrue(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.getPlotShapes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer((-2479));
      xYAreaRenderer0.getGradientTransformer();
      assertFalse(xYAreaRenderer0.getPlotShapes());
      assertFalse(xYAreaRenderer0.getPlotArea());
      assertFalse(xYAreaRenderer0.isOutline());
      assertFalse(xYAreaRenderer0.getPlotLines());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0, customXYToolTipGenerator0, customXYURLGenerator0);
      boolean boolean0 = stackedXYAreaRenderer0.getPlotLines();
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertFalse(boolean0);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
  }
}
