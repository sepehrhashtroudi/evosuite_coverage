/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:10:09 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.labels.IntervalXYItemLabelGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.data.Range;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YIntervalRenderer_ESTest extends YIntervalRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator();
      yIntervalRenderer0.setAdditionalItemLabelGenerator(intervalXYItemLabelGenerator0);
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator1 = (IntervalXYItemLabelGenerator)yIntervalRenderer0.getAdditionalItemLabelGenerator();
      assertEquals("null", intervalXYItemLabelGenerator1.getNullYString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = yIntervalRenderer0.findRangeBounds(timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYSeries xYSeries0 = new XYSeries(yIntervalRenderer0.ZERO, false, true);
      xYSeries0.addOrUpdate((Number) yIntervalRenderer0.ZERO, (Number) yIntervalRenderer0.ZERO);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = yIntervalRenderer0.findRangeBounds(xYSeriesCollection0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(yIntervalRenderer0.ZERO, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        yIntervalRenderer0.findRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("L`L2y", stringArray0);
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      XYPlot xYPlot0 = new XYPlot(xYTaskDataset0, symbolAxis0, symbolAxis0, xYDotRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(184.71906689478);
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem((Graphics2D) null, (XYItemRendererState) null, rectangle2D0, xYPlot0, symbolAxis0, cyclicNumberAxis0, xYTaskDataset0, 5311, 500, true, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.YIntervalRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals(fileSystemHandling0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals(yIntervalRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      yIntervalRenderer0.setAdditionalItemLabelGenerator(symbolicXYItemLabelGenerator0);
      YIntervalRenderer yIntervalRenderer1 = new YIntervalRenderer();
      boolean boolean0 = yIntervalRenderer0.equals(yIntervalRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = defaultXYItemRenderer0.initialise((Graphics2D) null, rectangle2D0, (XYPlot) null, timeTableXYDataset0, plotRenderingInfo0);
      Rectangle rectangle0 = new Rectangle(244, (-467));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis("Null 'alignment' argument.", timeZone0, locale0);
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, combinedRangeXYPlot0, dateAxis0, dateAxis0, timeTableXYDataset0, 10, 10, true, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      Point point0 = new Point();
      Dimension dimension0 = new Dimension(2256, 159);
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      TimeSeries timeSeries0 = new TimeSeries(0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("labelFont", stringArray0);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, symbolAxis0, symbolAxis0, stackedXYBarRenderer0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      XYItemRendererState xYItemRendererState0 = stackedXYBarRenderer0.initialise((Graphics2D) null, rectangle0, xYPlot0, defaultWindDataset0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        yIntervalRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, xYPlot0, symbolAxis0, symbolAxis0, timeSeriesCollection0, 10, 221, true, (-1047));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      TimeSeries timeSeries0 = new TimeSeries(yIntervalRenderer0.ZERO, "nAkJ1D_Gz", "nAkJ1D_Gz");
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      Range range0 = yIntervalRenderer0.findRangeBounds(timeSeriesCollection0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYItemLabelGenerator xYItemLabelGenerator0 = yIntervalRenderer0.getAdditionalItemLabelGenerator();
      assertNull(xYItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      Object object0 = yIntervalRenderer0.clone();
      boolean boolean0 = yIntervalRenderer0.equals(object0);
      assertTrue(boolean0);
  }
}
