/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:32:08 GMT 2022
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.sql.Connection;
import javax.swing.JInternalFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BarRenderer_ESTest extends BarRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      double[] doubleArray0 = stackedBarRenderer0.calculateBarL0L1(0.0, (-1910.0), 90.0);
      assertNotNull(doubleArray0);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      double[] doubleArray0 = barRenderer3D0.calculateBarL0L1(3382.3039, 0.2, 1189.2913169);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertArrayEquals(new double[] {0.2, 1189.2913169}, doubleArray0, 0.01);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-10.0), 0.0);
      double[] doubleArray0 = stackedBarRenderer3D0.calculateBarL0L1(0.0, (-1705.3426618724648), 0.0);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      double[] doubleArray0 = stackedBarRenderer0.calculateBarL0L1((-953.671277874), (-953.671277874), 0.0);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertArrayEquals(new double[] {(-953.671277874), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setMinimumBarLength(0.0);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(intervalBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BarRenderer.setDefaultShadowsVisible(false);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.getShadowsVisible();
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      ItemLabelAnchor itemLabelAnchor0 = ItemLabelAnchor.OUTSIDE6;
      TextAnchor textAnchor0 = TextAnchor.TOP_RIGHT;
      ItemLabelPosition itemLabelPosition0 = new ItemLabelPosition(itemLabelAnchor0, textAnchor0, textAnchor0, 8.0);
      barRenderer3D0.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      barRenderer3D0.getNegativeItemLabelPositionFallback();
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertFalse(barRenderer3D0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double double0 = barRenderer0.getMinimumBarLength();
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = intervalBarRenderer0.getIncludeBaseInRange();
      assertTrue(boolean0);
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(intervalBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setBase((-3629.0503822));
      double double0 = barRenderer3D0.getBase();
      assertEquals((-3629.0503822), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-3629.0503822), (Comparable) 3.0, (Comparable) 8.0);
      barRenderer3D0.setBase(2976.55645);
      barRenderer3D0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(2976.55645, barRenderer3D0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = stackedBarRenderer3D0.calculateSeriesWidth(0.75, categoryAxis0, 193, 2059);
      assertEquals(9.436644882696212E-7, double0, 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, valueAxis0, stackedBarRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.drawItemLabelForBar((Graphics2D) null, categoryPlot0, taskSeriesCollection0, 10, 10, true, (CategoryItemLabelGenerator) null, rectangle2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D_Double0, categoryPlot0, categoryAxis3D0, valueAxis0, jDBCCategoryDataset0, (-3658), 273, true, (CategoryItemRendererState) null, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.calculateSeriesWidth(1532.35, (CategoryAxis) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1071.0, (-5299.86599));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(3.0, 1422.95210617, 10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2093.059271389463);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, cyclicNumberAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      Number[][] numberArray0 = new Number[4][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateBarWidth((CategoryPlot) null, rectangle2D0, defaultIntervalCategoryDataset0, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(363.428629, 3522.9418340995);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateBarW0((CategoryPlot) null, plotOrientation0, (Rectangle2D) null, categoryAxis0, categoryItemRendererState0, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = barRenderer0.equals(intervalBarRenderer0);
      assertFalse(intervalBarRenderer0.isDrawBarOutline());
      assertTrue(boolean0);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      boolean boolean0 = barRenderer0.equals(color0);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertFalse(boolean0);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setMinimumBarLength(5000000.0);
      assertEquals(5000000.0, barRenderer3D0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("Null 'painter' argument.", false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle0, (CategoryPlot) null, defaultMultiValueCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      double double0 = barRenderer3D0.getItemMargin();
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, double0, 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      barRenderer0.setGradientPaintTransformer(standardGradientPaintTransformer0);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setPositiveItemLabelPositionFallback((ItemLabelPosition) null);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setShadowVisible(false);
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = barRenderer0.equals(intervalBarRenderer0);
      assertFalse(barRenderer0.getShadowsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0, 2.0, false);
      waterfallBarRenderer0.equals(stackedBarRenderer3D0);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Object object0 = statisticalBarRenderer0.clone();
      statisticalBarRenderer0.setItemMargin(2.0);
      boolean boolean0 = statisticalBarRenderer0.equals(object0);
      assertEquals(2.0, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = (StatisticalBarRenderer)statisticalBarRenderer0.clone();
      boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
      assertEquals(4.0, statisticalBarRenderer1.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer1.getBase(), 0.01);
      assertFalse(statisticalBarRenderer1.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer1.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, statisticalBarRenderer1.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer1.getIncludeBaseInRange());
      assertEquals(0.2, statisticalBarRenderer1.getItemMargin(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, statisticalBarRenderer1.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double double0 = statisticalBarRenderer0.calculateSeriesWidth(5.0, categoryAxis0, (-2146532027), (-362));
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals((-1.0160040906298639E-8), double0, 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Paint paint0 = combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, numberAxis0.DEFAULT_TICK_MARK_PAINT, numberAxis0.DEFAULT_AXIS_LINE_PAINT, paint0);
      waterfallBarRenderer0.getLegendItem(10, 10);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-3629.0503822), (Comparable) 3.0, (Comparable) 8.0);
      barRenderer3D0.setIncludeBaseInRange(false);
      barRenderer3D0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertFalse(barRenderer3D0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-3629.0503822), (Comparable) 3.0, (Comparable) 8.0);
      Range range0 = barRenderer3D0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Range range0 = barRenderer3D0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        barRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      double[] doubleArray0 = waterfallBarRenderer0.calculateBarL0L1(83.29444944553, (-1964.43894), (-1964.43894));
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertNull(doubleArray0);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(100000.0, 100000.0, true);
      double[] doubleArray0 = stackedBarRenderer3D0.calculateBarL0L1(0.0, 2255.66035361263, 8.0);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertNull(doubleArray0);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double[] doubleArray0 = barRenderer0.calculateBarL0L1(0.2, 0.2, 0.2);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertArrayEquals(new double[] {0.2, 0.2}, doubleArray0, 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.calculateBarW0(combinedDomainCategoryPlot0, plotOrientation0, rectangle2D_Float0, categoryAxis0, categoryStepRenderer_State0, 10, (-1189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1189
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setShadowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      barRenderer0.setShadowPaint(color0);
      Color color1 = (Color)barRenderer0.getShadowPaint();
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals((-2236963), color1.getRGB());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 175.0, false);
      StandardBarPainter standardBarPainter0 = new StandardBarPainter();
      stackedBarRenderer3D0.setBarPainter(standardBarPainter0);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      
      layeredBarRenderer0.setIncludeBaseInRange(true);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.setMinimumBarLength((-2396.859464357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'min' >= 0.0
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        BarRenderer.setDefaultBarPainter((BarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BarPainter barPainter0 = BarRenderer.getDefaultBarPainter();
      BarRenderer.setDefaultBarPainter(barPainter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      double double0 = stackedBarRenderer0.getMaximumBarWidth();
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, double0, 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setBase(2976.55645);
      double double0 = barRenderer3D0.getBase();
      assertEquals(2976.55645, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.setDrawBarOutline(false);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      
      groupedStackedBarRenderer0.setShadowYOffset((double) groupedStackedBarRenderer0.ZERO);
      double double0 = groupedStackedBarRenderer0.getShadowYOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getShadowsVisible();
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      double double0 = barRenderer0.getBase();
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.getPositiveItemLabelPositionFallback();
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Paint paint0 = combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, numberAxis0.DEFAULT_TICK_MARK_PAINT, numberAxis0.DEFAULT_AXIS_LINE_PAINT, paint0);
      boolean boolean0 = waterfallBarRenderer0.isDrawBarOutline();
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.getNegativeItemLabelPositionFallback();
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = ganttRenderer0.getIncludeBaseInRange();
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BarRenderer.setDefaultShadowsVisible(false);
      boolean boolean0 = BarRenderer.getDefaultShadowsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double double0 = groupedStackedBarRenderer0.getShadowYOffset();
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, double0, 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Paint paint0 = combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, numberAxis0.DEFAULT_TICK_MARK_PAINT, numberAxis0.DEFAULT_AXIS_LINE_PAINT, paint0);
      waterfallBarRenderer0.setMaximumBarWidth((-2457.47183772338));
      assertEquals((-2457.47183772338), waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.getBarPainter();
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      Paint paint0 = combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, numberAxis0.DEFAULT_TICK_MARK_PAINT, numberAxis0.DEFAULT_AXIS_LINE_PAINT, paint0);
      double double0 = waterfallBarRenderer0.getMinimumBarLength();
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      barRenderer0.getGradientPaintTransformer();
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertFalse(barRenderer0.isDrawBarOutline());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setShadowXOffset(1012.0);
      assertEquals(1012.0, barRenderer3D0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      Dimension dimension0 = new Dimension(500, 4130);
      Rectangle rectangle0 = new Rectangle(dimension0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        barRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      double double0 = barRenderer3D0.getShadowXOffset();
      assertEquals(4.0, double0, 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
  }
}
