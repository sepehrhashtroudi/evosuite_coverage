/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:53:06 GMT 2022
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYTextAnnotation_ESTest extends XYTextAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("FN$(9Q8T5?[", 28.0, (-1708.3662073733176), (-1708.3662073733176));
      xYPointerAnnotation0.setRotationAngle((-737.648767));
      xYPointerAnnotation0.hashCode();
      assertEquals((-737.648767), xYPointerAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("DateTickUnitType.SECOND", 0.4, 0.4, (-2577.4149968));
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      xYPointerAnnotation0.hashCode();
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.4, xYPointerAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0, 0.0);
      TextAnchor textAnchor0 = TextAnchor.CENTER_RIGHT;
      xYTextAnnotation0.setTextAnchor(textAnchor0);
      xYTextAnnotation0.hashCode();
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("H;Y\"^", (-29.125486), (-29.125486));
      Color color0 = Color.pink;
      xYTextAnnotation0.setPaint(color0);
      xYTextAnnotation0.hashCode();
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals((-29.125486), xYTextAnnotation0.getY(), 0.01);
      assertEquals((-29.125486), xYTextAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("E\"$y1(", 769.980763, 769.980763);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, true, customXYToolTipGenerator0);
      xYTextAnnotation0.setFont(candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT);
      xYTextAnnotation0.hashCode();
      assertEquals(769.980763, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      xYPointerAnnotation1.setRotationAngle(136.56082370651);
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertEquals(136.56082370651, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      xYPointerAnnotation0.setFont(font0);
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-420.0), (-653.81), (-420.0));
      SystemColor systemColor0 = SystemColor.menuText;
      xYPointerAnnotation0.setOutlinePaint(systemColor0);
      xYPointerAnnotation0.getOutlinePaint();
      assertEquals((-653.81), xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals((-420.0), xYPointerAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("E\"$y1(", 769.980763, 769.980763);
      xYTextAnnotation0.setBackgroundPaint((Paint) null);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(769.980763, xYTextAnnotation0.getX(), 0.01);
      assertEquals(769.980763, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("DateTickUnitType.SECOND", 0.4, 0.4, (-2577.4149968));
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      xYPointerAnnotation0.setRotationAnchor(textAnchor0);
      TextAnchor textAnchor1 = xYPointerAnnotation0.getRotationAnchor();
      assertEquals(0.4, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor1.toString());
      assertEquals(0.4, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("lG|!@1lC;`J}!F", (-1.0), 2260.4539010872763, 2260.4539010872763);
      TextAnchor textAnchor0 = TextAnchor.BASELINE_CENTER;
      xYPointerAnnotation0.setTextAnchor(textAnchor0);
      TextAnchor textAnchor1 = xYPointerAnnotation0.getTextAnchor();
      assertEquals("TextAnchor.BASELINE_CENTER", textAnchor1.toString());
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(2260.4539010872763, xYPointerAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYPointerAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Tahoma", (-1.0), (-1530.09636052938), (-1530.09636052938));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Paint paint0 = thermometerPlot0.getValuePaint();
      xYPointerAnnotation0.setPaint(paint0);
      Color color0 = (Color)xYPointerAnnotation0.getPaint();
      assertEquals((-1530.09636052938), xYPointerAnnotation0.getY(), 0.01);
      assertEquals((-1.0), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, 0.0, 0.0);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      
      xYPointerAnnotation0.setOutlineVisible(true);
      boolean boolean0 = xYPointerAnnotation0.isOutlineVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("lG|!@1lC;`J}!F", (-1.0), 2260.4539010872763, 2260.4539010872763);
      double double0 = xYPointerAnnotation0.getY();
      assertEquals(2260.4539010872763, double0, 0.01);
      assertEquals((-1.0), xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("uh-c(+!", (-82.33120005955878), (-82.33120005955878), 0.0);
      double double0 = xYPointerAnnotation0.getY();
      assertEquals((-82.33120005955878), xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals((-82.33120005955878), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 2491.22102288, 1801.2, 2491.22102288);
      double double0 = xYPointerAnnotation0.getX();
      assertEquals(2491.22102288, double0, 0.01);
      assertEquals(1801.2, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("F5UG", (-911.0), (-1072.35));
      double double0 = xYTextAnnotation0.getX();
      assertEquals((-911.0), double0, 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals((-1072.35), xYTextAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 610.31771, 2.5E11);
      xYTextAnnotation0.getText();
      assertEquals(610.31771, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(2.5E11, xYTextAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("h", 0.0, 4222.309, 4222.309);
      xYPointerAnnotation0.setRotationAngle(61.903);
      double double0 = xYPointerAnnotation0.getRotationAngle();
      assertEquals(61.903, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("[4%pJ^JSvW~o_M40", 899.703228072576, (-1.0));
      xYTextAnnotation0.setRotationAngle((-874.305267801));
      double double0 = xYTextAnnotation0.getRotationAngle();
      assertEquals((-874.305267801), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("E\"$y1(", 769.980763, 769.980763);
      MeterPlot meterPlot0 = new MeterPlot();
      xYTextAnnotation0.setFont(meterPlot0.DEFAULT_LABEL_FONT);
      Font font0 = xYTextAnnotation0.getFont();
      assertEquals(769.980763, xYTextAnnotation0.getX(), 0.01);
      assertEquals(769.980763, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertFalse(font0.isPlain());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("MxpF95I9d", (-23.0), 0.0);
      XYTextAnnotation xYTextAnnotation1 = (XYTextAnnotation)xYTextAnnotation0.clone();
      boolean boolean0 = xYTextAnnotation0.equals(xYTextAnnotation1);
      assertEquals((-23.0), xYTextAnnotation1.getX(), 0.01);
      assertFalse(xYTextAnnotation1.isOutlineVisible());
      assertTrue(boolean0);
      assertEquals(0.0, xYTextAnnotation1.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("MxpF95I9d", (-23.0), 0.0);
      boolean boolean0 = xYTextAnnotation0.equals(xYTextAnnotation0);
      assertTrue(boolean0);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals((-23.0), xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = null;
      try {
        xYTextAnnotation0 = new XYTextAnnotation((String) null, (-530.1612333417), 2500.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertTrue(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      BasicStroke basicStroke0 = (BasicStroke)stackedAreaRenderer0.getItemStroke((-2212), (-2131872490), true);
      xYPointerAnnotation1.setOutlineStroke(basicStroke0);
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      Color color0 = Color.blue;
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertTrue(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      
      xYPointerAnnotation1.setOutlinePaint(color0);
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.data.RangeType", 769.980763, 1.0, 769.980763);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setRotationAngle((-3196.9202253232));
      boolean boolean0 = xYPointerAnnotation0.equals(object0);
      assertEquals((-3196.9202253232), xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      xYPointerAnnotation0.setFont(font0);
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertFalse(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      assertEquals(0.0, xYPointerAnnotation1.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation1.isOutlineVisible());
      assertFalse(boolean0);
      assertEquals(0.0, xYPointerAnnotation1.getY(), 0.01);
      assertEquals(0.0, xYPointerAnnotation1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("AyxT}i<u}jK9{kf", 0.0, (-3481.0));
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, 2500000.0, (-1720.0));
      boolean boolean0 = xYTextAnnotation0.equals(xYPointerAnnotation0);
      assertEquals(2500000.0, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(boolean0);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0, 0.0);
      boolean boolean0 = xYTextAnnotation0.equals("");
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 610.31771, 2.5E11);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.draw((Graphics2D) null, combinedDomainXYPlot0, rectangle2D_Float0, logarithmicAxis0, logarithmicAxis0, (-1663), plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.data.RangeType", 769.980763, 1.0, 769.980763);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 154.5, (-471.91516888), (-1239.7154164));
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("{E87Ji&Lk61I,Jd", 0.0, 0.0);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setRotationAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("8][>7Ef^K", 754.4105365, 0.0);
      // Undeclared exception!
      try { 
        xYTextAnnotation0.setTextAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("2_)qUp@", (-4258.18), (-4258.18), 1.0);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("vVU4Ed<e$b", 1.0E-5, 1.0E-5, 1.0E-5);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("org.jfree.data.time.Year", 659.0, 1350.9625);
      xYTextAnnotation0.setText("org.jfree.data.time.Year");
      assertEquals(1350.9625, xYTextAnnotation0.getY(), 0.01);
      assertEquals(659.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("-Whv_grDDW", 1131.9, 3088.9845969527, 825.0612025478068);
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getOutlineStroke();
      assertEquals(1131.9, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3088.9845969527, xYPointerAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("-Whv_grDDW", 1131.9, 3088.9845969527, 825.0612025478068);
      Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
      xYPointerAnnotation0.setBackgroundPaint(paint0);
      xYPointerAnnotation0.getBackgroundPaint();
      assertEquals(3088.9845969527, xYPointerAnnotation0.getY(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1131.9, xYPointerAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("org.jfree.data.time.Year", 659.0, 1350.9625);
      boolean boolean0 = xYTextAnnotation0.isOutlineVisible();
      assertEquals(1350.9625, xYTextAnnotation0.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(659.0, xYTextAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'stroke' argument.", (-1157.49425198358), 154.687255442, 0.0);
      double double0 = xYPointerAnnotation0.getRotationAngle();
      assertEquals(154.687255442, xYPointerAnnotation0.getY(), 0.01);
      assertEquals((-1157.49425198358), xYPointerAnnotation0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("-Whv_grDDW", 1131.9, 3088.9845969527, 825.0612025478068);
      Paint paint0 = xYPointerAnnotation0.getBackgroundPaint();
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(1131.9, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3088.9845969527, xYPointerAnnotation0.getY(), 0.01);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("[4%pJ^JSvW~o_M40", 899.703228072576, (-1.0));
      xYTextAnnotation0.setX((-884.413088246065));
      assertEquals((-884.413088246065), xYTextAnnotation0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 0.0, 0.0);
      double double0 = xYTextAnnotation0.getX();
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("org.jfree.data.time.Year", 659.0, 1350.9625);
      xYTextAnnotation0.getFont();
      assertFalse(xYTextAnnotation0.isOutlineVisible());
      assertEquals(1350.9625, xYTextAnnotation0.getY(), 0.01);
      assertEquals(659.0, xYTextAnnotation0.getX(), 0.01);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("org.jfree.data.time.Year", 659.0, 1350.9625);
      xYTextAnnotation0.setY(1.0);
      assertEquals(1.0, xYTextAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("y4+P)*y77HVDh.;0WM'", 0.0, 0.0, 0.0);
      double double0 = xYPointerAnnotation0.getY();
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("-Whv_grDDW", 1131.9, 3088.9845969527, 825.0612025478068);
      xYPointerAnnotation0.getText();
      assertEquals(1131.9, xYPointerAnnotation0.getX(), 0.01);
      assertEquals(3088.9845969527, xYPointerAnnotation0.getY(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01);
      assertFalse(xYPointerAnnotation0.isOutlineVisible());
  }
}
