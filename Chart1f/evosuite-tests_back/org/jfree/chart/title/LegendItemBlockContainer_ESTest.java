/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:05:29 GMT 2022
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormatSymbols;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockParams;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.title.LegendItemBlockContainer;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendItemBlockContainer_ESTest extends LegendItemBlockContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, taskSeriesCollection0, (Comparable) null);
      legendItemBlockContainer0.setURLText("You are trying to add data where the time period class ");
      String string0 = legendItemBlockContainer0.getURLText();
      assertEquals("You are trying to add data where the time period class ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlowArrangement flowArrangement0 = new FlowArrangement();
      Month month0 = new Month();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(month0, integer0);
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(flowArrangement0, defaultKeyedValueDataset0, integer0);
      legendItemBlockContainer0.setURLText("");
      String string0 = legendItemBlockContainer0.getURLText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 1562.1794273130333, (-4113.228674932272));
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, dynamicTimeSeriesCollection0, 0);
      legendItemBlockContainer0.setToolTipText("VmX/.=*D%E@cs+etMt");
      String string0 = legendItemBlockContainer0.getToolTipText();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, taskSeriesCollection0, (Comparable) null);
      legendItemBlockContainer0.setToolTipText("");
      String string0 = legendItemBlockContainer0.getToolTipText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 1562.1794273130333, (-4113.228674932272));
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, dynamicTimeSeriesCollection0, 0);
      Comparable comparable0 = legendItemBlockContainer0.getSeriesKey();
      assertEquals(0, comparable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      Quarter quarter0 = new Quarter();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, (Dataset) null, quarter0);
      Dataset dataset0 = legendItemBlockContainer0.getDataset();
      assertNull(dataset0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, taskSeriesCollection0, (Comparable) null);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 2004.764, 2004.764, 2004.764);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        legendItemBlockContainer0.draw((Graphics2D) null, rectangle2D0, (Object) rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MockDate mockDate0 = new MockDate((-678), (-678), (-678));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = JComponent.getDefaultLocale();
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Week week0 = new Week((-678), year0);
      LegendItemBlockContainer legendItemBlockContainer0 = null;
      try {
        legendItemBlockContainer0 = new LegendItemBlockContainer((Arrangement) null, taskSeriesCollection0, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.block.BlockContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(12, 12);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(12, 12);
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(gridArrangement0, dynamicTimeSeriesCollection0, 2);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 12);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      BlockParams blockParams0 = new BlockParams();
      blockParams0.setGenerateEntities(true);
      Object object0 = legendItemBlockContainer0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) blockParams0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(12, 12);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(12, 12);
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(gridArrangement0, dynamicTimeSeriesCollection0, 2);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 12);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      BlockParams blockParams0 = new BlockParams();
      Object object0 = legendItemBlockContainer0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) blockParams0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(12, 12);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(12, 12);
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(gridArrangement0, dynamicTimeSeriesCollection0, 2);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 12);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Object object0 = legendItemBlockContainer0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0, (Object) dynamicTimeSeriesCollection0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(centerArrangement0, defaultPieDataset0, (Comparable) null);
      String string0 = legendItemBlockContainer0.getToolTipText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(centerArrangement0, defaultPieDataset0, (Comparable) null);
      Comparable comparable0 = legendItemBlockContainer0.getSeriesKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(columnArrangement0, taskSeriesCollection0, (Comparable) null);
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)legendItemBlockContainer0.getDataset();
      assertEquals(0, taskSeriesCollection1.getRowCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      LegendItemBlockContainer legendItemBlockContainer0 = new LegendItemBlockContainer(centerArrangement0, defaultPieDataset0, (Comparable) null);
      String string0 = legendItemBlockContainer0.getURLText();
      assertNull(string0);
  }
}
