/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:08:54 GMT 2022
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Image;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.VerticalAlignment;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Title_ESTest extends Title_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      assertTrue(textTitle0.visible);
      
      textTitle0.visible = false;
      Object object0 = textTitle0.clone();
      boolean boolean0 = textTitle0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      DateTitle dateTitle1 = (DateTitle)dateTitle0.clone();
      boolean boolean0 = dateTitle0.equals(dateTitle1);
      assertTrue(boolean0);
      assertTrue(dateTitle1.visible);
      assertNotSame(dateTitle1, dateTitle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setHorizontalAlignment(dateTitle0.DEFAULT_HORIZONTAL_ALIGNMENT);
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setPosition(dateTitle0.DEFAULT_POSITION);
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, symbolAxis0);
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent(compositeTitle0);
      paintScaleLegend0.notifyListeners(titleChangeEvent0);
      assertTrue(paintScaleLegend0.visible);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(".oC9yln^ i\"|Veq$", compassPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setItemFont(jFreeChart0.DEFAULT_TITLE_FONT);
      assertTrue(legendTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      textTitle0.addChangeListener(jFreeChart0);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      TextBlock textBlock0 = new TextBlock();
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 4909.94480754294, 0.0);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, borderArrangement0, flowArrangement0);
      legendTitle0.getPosition();
      assertTrue(legendTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("");
      boolean boolean0 = shortTextTitle0.isVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      HorizontalAlignment horizontalAlignment0 = dateTitle0.getHorizontalAlignment();
      assertEquals("HorizontalAlignment.RIGHT", horizontalAlignment0.toString());
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      CompositeTitle compositeTitle1 = (CompositeTitle)compositeTitle0.clone();
      assertTrue(compositeTitle1.visible);
      assertNotSame(compositeTitle1, compositeTitle0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, symbolAxis0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20.0, 1028.939);
      paintScaleLegend0.setAxis(cyclicNumberAxis0);
      assertTrue(paintScaleLegend0.visible);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      textTitle0.setPosition(rectangleEdge0);
      TextTitle textTitle1 = new TextTitle();
      boolean boolean0 = textTitle0.equals(textTitle1);
      assertTrue(textTitle1.visible);
      assertFalse(boolean0);
      assertFalse(textTitle1.equals((Object)textTitle0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.removeChangeListener((TitleChangeListener) null);
      assertTrue(compositeTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer2_0);
      legendTitle0.addChangeListener((TitleChangeListener) null);
      legendTitle0.removeChangeListener((TitleChangeListener) null);
      assertTrue(legendTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setNotify(true);
      assertTrue(compositeTitle0.visible);
      assertTrue(compositeTitle0.getNotify());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("<bbpc[\\3SB2lTa");
      textTitle0.setNotify(false);
      assertFalse(textTitle0.getNotify());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      dateTitle0.setVerticalAlignment(verticalAlignment0);
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      // Undeclared exception!
      try { 
        compositeTitle0.setVerticalAlignment((VerticalAlignment) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'alignment' argument.
         //
         verifyException("org.jfree.chart.title.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setVerticalAlignment(dateTitle0.DEFAULT_VERTICAL_ALIGNMENT);
      assertTrue(dateTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      compositeTitle0.setHorizontalAlignment(horizontalAlignment0);
      assertTrue(compositeTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setHorizontalAlignment(compositeTitle0.DEFAULT_HORIZONTAL_ALIGNMENT);
      assertTrue(compositeTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.setPosition(textTitle0.DEFAULT_POSITION);
      assertTrue(textTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, thermometerPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      // Undeclared exception!
      try { 
        legendTitle0.setPosition((RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.title.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle((Image) null, (-1599), 0, rectangleEdge0, horizontalAlignment0, (VerticalAlignment) null, piePlot3D0.DEFAULT_INSETS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'verticalAlignment' argument.
         //
         verifyException("org.jfree.chart.title.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(10);
      ImageTitle imageTitle0 = null;
      try {
        imageTitle0 = new ImageTitle((Image) null, 10, 10, rectangleEdge0, (HorizontalAlignment) null, (VerticalAlignment) null, combinedDomainCategoryPlot0.DEFAULT_INSETS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'horizontalAlignment' argument.
         //
         verifyException("org.jfree.chart.title.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      TextTitle textTitle0 = null;
      try {
        textTitle0 = new TextTitle("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", (Font) null, stackedAreaRenderer0.DEFAULT_PAINT, (RectangleEdge) null, horizontalAlignment0, verticalAlignment0, combinedDomainCategoryPlot0.DEFAULT_INSETS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.title.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      compositeTitle0.getNotify();
      assertTrue(compositeTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("D4:");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, numberAxis3D0);
      paintScaleLegend0.getVerticalAlignment();
      assertTrue(paintScaleLegend0.visible);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.hashCode();
      assertTrue(compositeTitle0.visible);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(161, 10, (double) 1, 529.2118088594594, chartRenderingInfo0);
      assertEquals(2, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer0, columnArrangement0, columnArrangement0);
      assertTrue(legendTitle0.visible);
      
      legendTitle0.setVisible(false);
      assertFalse(legendTitle0.visible);
  }
}
