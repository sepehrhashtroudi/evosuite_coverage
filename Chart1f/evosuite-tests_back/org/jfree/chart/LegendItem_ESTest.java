/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:33:51 GMT 2022
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.text.Format;
import java.util.HashMap;
import java.util.Hashtable;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JEditorPane;
import javax.swing.JLayer;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.jfree.chart.LegendItem;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.general.Dataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendItem_ESTest extends LegendItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.5, 0.0, 0.5, 0.5);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      Hashtable<AttributedCharacterIterator.Attribute, StandardGradientPaintTransformer> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, StandardGradientPaintTransformer>();
      AttributedString attributedString0 = new AttributedString("", hashtable0);
      LegendItem legendItem0 = new LegendItem(attributedString0, "", "", "", false, line2D_Double0, true, systemColor0, true, systemColor0, basicStroke0, true, line2D_Double0, basicStroke0, systemColor0);
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Format.Field, Object> hashMap0 = new HashMap<Format.Field, Object>();
      AttributedString attributedString0 = new AttributedString("The 'data' array must contain six arrays with equal length.", hashMap0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      LegendItem legendItem0 = new LegendItem(attributedString0, "The 'data' array must contain six arrays with equal length.", "", "S|`qdh&N}&Y#", line2D_Double0, basicStroke0, systemColor0);
      legendItem0.isShapeVisible();
      assertEquals("The 'data' array must contain six arrays with equal length.", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      Line2D.Float line2D_Float0 = new Line2D.Float(3781.0F, 29, 3496, 0.0F);
      Color color0 = DebugGraphics.flashColor();
      BasicStroke basicStroke0 = new BasicStroke();
      GradientPaint gradientPaint0 = new GradientPaint(0.0F, 29.0F, color0, 3496, 29, color0);
      LegendItem legendItem0 = new LegendItem(attributedString0, "", "", "zC", true, line2D_Float0, true, color0, true, color0, basicStroke0, true, line2D_Float0, basicStroke0, gradientPaint0);
      legendItem0.isLineVisible();
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.BLUE;
      LegendItem legendItem0 = new LegendItem("Null 'series' argument.", color0);
      String string0 = legendItem0.getURLText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("4");
      legendItem0.setToolTipText("4");
      String string0 = legendItem0.getToolTipText();
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      Color color0 = Color.GREEN;
      LegendItem legendItem0 = new LegendItem("P]8U(!GxVw&xgb6L", "P]8U(!GxVw&xgb6L", "P]8U(!GxVw&xgb6L", "P]8U(!GxVw&xgb6L", rectangle2D0, color0);
      legendItem0.setToolTipText("");
      String string0 = legendItem0.getToolTipText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      StyleContext styleContext0 = new StyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      Color color0 = styleContext0.getBackground(attributeSet0);
      LegendItem legendItem0 = new LegendItem(" <OuU+:1nfC*%3", " <OuU+:1nfC*%3", " <OuU+:1nfC*%3", " <OuU+:1nfC*%3", rectangle0, color0);
      Rectangle rectangle1 = (Rectangle)legendItem0.getShape();
      assertEquals(0, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      legendItem0.setSeriesKey("");
      Comparable comparable0 = legendItem0.getSeriesKey();
      assertEquals("", comparable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      legendItem0.setLabelPaint(color0);
      Paint paint0 = legendItem0.getLabelPaint();
      assertSame(color0, paint0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LegendItem legendItem0 = new LegendItem("", color0);
      String string0 = legendItem0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.BLUE;
      LegendItem legendItem0 = new LegendItem("Null 'series' argument.", color0);
      legendItem0.setDescription("Null 'series' argument.");
      String string0 = legendItem0.getDescription();
      assertEquals("Null 'series' argument.", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("Null 'outlineStroke' argument.");
      legendItem0.setDescription("");
      String string0 = legendItem0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("=r");
      legendItem0.setDatasetIndex(2054);
      int int0 = legendItem0.getDatasetIndex();
      assertEquals(2054, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LegendItem legendItem0 = new LegendItem("", color0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      legendItem0.setDataset(defaultIntervalXYDataset0);
      Dataset dataset0 = legendItem0.getDataset();
      assertSame(dataset0, defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      AttributedString attributedString0 = legendItem0.getAttributedLabel();
      assertNull(attributedString0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(3781.0F, 29, 3496, 0.0F);
      Color color0 = DebugGraphics.flashColor();
      BasicStroke basicStroke0 = new BasicStroke();
      GradientPaint gradientPaint0 = new GradientPaint(3496, 29, color0, 29, 29.0F, color0, true);
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, "", "", "", line2D_Float0, color0, basicStroke0, gradientPaint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(814, (-2590), (-2590), 90);
      Color color0 = Color.CYAN;
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("Third", "Third", "Third", "z:V,", rectangle0, (Stroke) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'lineStroke' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("!HoxL$S'R{F8WY", "!HoxL$S'R{F8WY", "!HoxL$S'R{F8WY", "", (Shape) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = Color.PINK;
      BasicStroke basicStroke0 = new BasicStroke();
      LegendItem legendItem0 = new LegendItem("srXOhl~*", "srXOhl~*", "srXOhl~*", "srXOhl~*", false, (Shape) null, false, color0, false, color0, basicStroke0, false, (Shape) null, basicStroke0, color0);
      assertFalse(legendItem0.isShapeVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SystemColor systemColor0 = SystemColor.activeCaption;
      BasicStroke basicStroke0 = new BasicStroke();
      LegendItem legendItem0 = new LegendItem("Null 'outlinePaint' argument.", "Null 'outlinePaint' argument.", "Null 'outlinePaint' argument.", "c&%/$cb", defaultCaret0, systemColor0, basicStroke0, systemColor0);
      legendItem0.isShapeFilled();
      assertEquals("Null 'outlinePaint' argument.", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      Object object0 = legendItem0.clone();
      assertNotSame(object0, legendItem0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      Size2D size2D0 = new Size2D();
      boolean boolean0 = legendItem0.equals(size2D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      // Undeclared exception!
      try { 
        legendItem0.setFillPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'transformer' attribute.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SystemColor systemColor0 = SystemColor.text;
      LegendItem legendItem0 = new LegendItem("Description", "", "", "Description", defaultCaret0, systemColor0);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      legendItem0.setFillPaintTransformer(standardGradientPaintTransformer0);
      assertEquals("Description", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("Null 'label' argument.");
      // Undeclared exception!
      try { 
        legendItem0.setLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("Null 'outlineStroke' argument.");
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0, mockDefaultListSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(4, (-1), true);
      legendItem0.setLine(rectangle0);
      assertTrue(rectangle0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      // Undeclared exception!
      try { 
        legendItem0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("Null 'outlineStroke' argument.");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      legendItem0.setOutlinePaint(color0);
      assertNull(legendItem0.getToolTipText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("_i");
      // Undeclared exception!
      try { 
        legendItem0.setLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.menuText;
      LegendItem legendItem0 = new LegendItem("", systemColor0);
      legendItem0.setLinePaint(systemColor0);
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      // Undeclared exception!
      try { 
        legendItem0.setFillPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.setFillPaint(systemColor0);
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("c,N_3>-eS");
      // Undeclared exception!
      try { 
        legendItem0.setShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(46);
      ImageIcon imageIcon0 = new ImageIcon("$QYO&{/ N");
      JCheckBox jCheckBox0 = new JCheckBox(")", imageIcon0);
      JLayer<JCheckBox> jLayer0 = new JLayer<JCheckBox>(jCheckBox0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jLayer0, 28, 1043, 1043, (-2104));
      legendItem0.setShape(rectangle0);
      assertTrue(rectangle0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hashtable<Format.Field, String> hashtable0 = new Hashtable<Format.Field, String>();
      AttributedString attributedString0 = new AttributedString("s<$(&=a^U?NR", hashtable0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      BasicStroke basicStroke0 = new BasicStroke();
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "2#*}x;>3U=sn", "D(x/R", "~o|JZo>^p", defaultCaret0, basicStroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'linePaint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("c>O");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      BasicStroke basicStroke0 = new BasicStroke();
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "!QEiE", "c>O", "!QEiE", false, (Shape) null, false, color0, false, color0, basicStroke0, false, (Shape) null, basicStroke0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      AttributedString attributedString0 = new AttributedString("[mean=", hashtable0);
      Color color0 = Color.RED;
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "", (String) null, "[mean=", false, (Shape) null, false, color0, false, color0, (Stroke) null, true, (Shape) null, (Stroke) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'lineStroke' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AttributedString attributedString0 = new AttributedString("");
      Color color0 = Color.BLACK;
      BasicStroke basicStroke0 = new BasicStroke();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem(attributedString0, "", "}&Snnb!#T$iYH6sYV{", "}&Snnb!#T$iYH6sYV{", true, line2D_Double0, false, (Paint) null, false, color0, basicStroke0, false, line2D_Double0, basicStroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(678, 678);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, mockDefaultListSelectionModel0);
      Color color0 = jTable0.getSelectionBackground();
      BasicStroke basicStroke0 = new BasicStroke();
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((AttributedString) null, ",.t_", ",.t_", ",.t_", true, (Shape) null, false, color0, true, color0, basicStroke0, false, (Shape) null, basicStroke0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      BevelBorder bevelBorder0 = new BevelBorder(0, (Color) null, systemColor0, systemColor0, systemColor0);
      JEditorPane jEditorPane0 = new JEditorPane();
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jEditorPane0, 2964, 2964, 0, 0);
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("Null 'paint' argument.", "Null 'paint' argument.", "Null 'extract' argument.", "pYj!dN", rectangle0, systemColor0, (Stroke) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outlinePaint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getCaretColor();
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("#[9z2yK", "A_g=$Zk7<N\"usXaj~", "", (String) null, true, (Shape) null, false, color0, true, color0, (Stroke) null, true, (Shape) null, (Stroke) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'lineStroke' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("$QYO&{/ N", (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'fillPaint' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.setOutlineStroke(basicStroke0);
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.getURLText();
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      Font font0 = legendItem0.getLabelFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.getDataset();
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Format.Field, Object> hashMap0 = new HashMap<Format.Field, Object>();
      AttributedString attributedString0 = new AttributedString("The 'data' array must contain six arrays with equal length.", hashMap0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      LegendItem legendItem0 = new LegendItem(attributedString0, "The 'data' array must contain six arrays with equal length.", "", "S|`qdh&N}&Y#", line2D_Double0, basicStroke0, systemColor0);
      legendItem0.getAttributedLabel();
      assertEquals("The 'data' array must contain six arrays with equal length.", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.menuText;
      LegendItem legendItem0 = new LegendItem("", systemColor0);
      int int0 = legendItem0.getDatasetIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Color color0 = Color.cyan;
      LegendItem legendItem0 = new LegendItem("BF", "Null 'label' argument.", "4bXME<%/uxI3+j[w|s", "4bXME<%/uxI3+j[w|s", (Shape) null, color0);
      legendItem0.getShape();
      assertEquals("BF", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.setShapeVisible(false);
      assertFalse(legendItem0.isShapeVisible());
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Format.Field, Object> hashMap0 = new HashMap<Format.Field, Object>();
      AttributedString attributedString0 = new AttributedString("The 'data' array must contain six arrays with equal length.", hashMap0);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.5, 0.0, 0.5, 0.5);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      LegendItem legendItem0 = new LegendItem(attributedString0, "The 'data' array must contain six arrays with equal length.", "", "S|`qdh&N}&Y#", line2D_Double0, basicStroke0, systemColor0);
      legendItem0.isShapeFilled();
      assertEquals("The 'data' array must contain six arrays with equal length.", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.5, 0.0, 0.5, 0.0);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      AttributedString attributedString0 = new AttributedString("");
      LegendItem legendItem0 = new LegendItem(attributedString0, "S|`qdh&N}&Y#", "?vc9'[0~`ff", "", line2D_Double0, systemColor0, basicStroke0, systemColor0);
      legendItem0.isShapeOutlineVisible();
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      legendItem0.setSeriesIndex((-1982));
      int int0 = legendItem0.getSeriesIndex();
      assertEquals((-1982), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.menuText;
      LegendItem legendItem0 = new LegendItem("", systemColor0);
      legendItem0.setLineVisible(true);
      assertTrue(legendItem0.isLineVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("org.jfree.data.gantt.TaskSeriesCollection");
      Comparable comparable0 = legendItem0.getSeriesKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SystemColor systemColor0 = SystemColor.text;
      LegendItem legendItem0 = new LegendItem("Description", "", "", "Description", defaultCaret0, systemColor0);
      legendItem0.getOutlineStroke();
      assertEquals("Description", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SystemColor systemColor0 = SystemColor.text;
      LegendItem legendItem0 = new LegendItem("Description", "", "", "Description", defaultCaret0, systemColor0);
      String string0 = legendItem0.getLabel();
      assertEquals("Description", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      Paint paint0 = legendItem0.getLabelPaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("4");
      legendItem0.setLabelFont((Font) null);
      assertEquals(0, legendItem0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("4");
      Color color0 = (Color)legendItem0.getFillPaint();
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.getLineStroke();
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("4");
      legendItem0.setURLText("4");
      assertNull(legendItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("Null 'outlineStroke' argument.");
      String string0 = legendItem0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Double0);
      Color color0 = Color.orange;
      LegendItem legendItem0 = null;
      try {
        legendItem0 = new LegendItem("Null 'shape' argument.", "Null 'shape' argument.", "$<o84T2>CnC", "$<o84T2>CnC", line2D_Double0, color0, (Stroke) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outlineStroke' argument.
         //
         verifyException("org.jfree.chart.LegendItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2246, 2246, 65535, 2246);
      BasicStroke basicStroke0 = new BasicStroke();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      LegendItem legendItem0 = new LegendItem("", "", "", "TimePeriodAnchor.END", rectangle0, basicStroke0, systemColor0);
      legendItem0.getFillPaintTransformer();
      assertEquals("", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("4");
      Color color0 = (Color)legendItem0.getOutlinePaint();
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      Line2D.Float line2D_Float0 = (Line2D.Float)legendItem0.getLine();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("_i");
      boolean boolean0 = legendItem0.isLineVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("4");
      String string0 = legendItem0.getToolTipText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      AttributedString attributedString0 = new AttributedString("[mean=", hashtable0);
      Color color0 = Color.RED;
      LegendItem legendItem0 = new LegendItem(attributedString0, "ezTj)>", "", "", (Shape) null, color0);
      legendItem0.getURLText();
      assertEquals("[mean=", legendItem0.getLabel());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      Color color0 = (Color)legendItem0.getLinePaint();
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Color color0 = Color.blue;
      LegendItem legendItem0 = new LegendItem(")", color0);
      boolean boolean0 = legendItem0.isShapeOutlineVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("Null 'outlineStroke' argument.");
      int int0 = legendItem0.getSeriesIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LegendItem legendItem0 = new LegendItem("");
      boolean boolean0 = legendItem0.isShapeVisible();
      assertTrue(boolean0);
  }
}
