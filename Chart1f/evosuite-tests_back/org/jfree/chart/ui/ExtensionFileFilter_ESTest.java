/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:02:54 GMT 2022
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.jfree.chart.ui.ExtensionFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtensionFileFilter_ESTest extends ExtensionFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter((String) null, "3bj,'Z61}Ho<2#8!Sc");
      String string0 = extensionFileFilter0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter("", "");
      String string0 = extensionFileFilter0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter("", "!#y)AqHQ+j");
      // Undeclared exception!
      try { 
        extensionFileFilter0.accept((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ui.ExtensionFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter("", "!#y)AqHQ+j");
      MockFile mockFile0 = new MockFile((String) null, "ex&zoa9$");
      boolean boolean0 = extensionFileFilter0.accept(mockFile0);
      assertEquals("", extensionFileFilter0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter("ljr|", "ljr|");
      MockFile mockFile0 = new MockFile("ljr|", "ljr|");
      mockFile0.mkdirs();
      boolean boolean0 = extensionFileFilter0.accept(mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter("ljr|", "ljr|");
      MockFile mockFile0 = new MockFile("ljr|", "ljr|");
      boolean boolean0 = extensionFileFilter0.accept(mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExtensionFileFilter extensionFileFilter0 = new ExtensionFileFilter("ljr|", "ljr|");
      String string0 = extensionFileFilter0.getDescription();
      assertEquals("ljr|", string0);
  }
}
