/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:13:46 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JList;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.pie.PieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LogarithmicAxis_ESTest extends LogarithmicAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setInverted(true);
      logarithmicAxis0.zoomRange((-3.410143643218121), 16.31512958843237);
      assertEquals(16.9567813926646, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.centerRange(0.0);
      logarithmicAxis0.zoomRange((-3.410143643218121), 0.0);
      assertEquals((-0.4999999999999998), logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.entity.JFreeChartEntity");
      logarithmicAxis0.setRangeWithMargins((-1701.1266), 2060.314);
      CombinedDomainCategoryPlot[] combinedDomainCategoryPlotArray0 = new CombinedDomainCategoryPlot[6];
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultComboBoxModel<CombinedDomainCategoryPlot> defaultComboBoxModel0 = new DefaultComboBoxModel<CombinedDomainCategoryPlot>(combinedDomainCategoryPlotArray0);
      JList<CombinedDomainCategoryPlot> jList0 = new JList<CombinedDomainCategoryPlot>(defaultComboBoxModel0);
      Rectangle rectangle0 = jList0.getCellBounds(0, 48);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge();
      double double0 = logarithmicAxis0.java2DToValue(9.0, rectangle0, rectangleEdge0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("0");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      logarithmicAxis0.resizeRange(100000.0, 0.0);
      double double0 = logarithmicAxis0.valueToJava2D(0.0, rectangle2D_Double0, (RectangleEdge) null);
      assertEquals(50000.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("HlTH?!?grdh1cBmC");
      double double0 = logarithmicAxis0.adjustedLog10(10);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, double0, 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("G$?");
      logarithmicAxis0.setupSmallLogFlag();
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("G$?");
      logarithmicAxis0.setupNumberFmtObj();
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("www.markwatson.com");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 0.0F, 0.9F, 2.0F);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getDomainAxisEdge();
      double double0 = logarithmicAxis0.valueToJava2D(5.0, rectangle2D_Float0, rectangleEdge0);
      assertEquals(4.390377740827656, double0, 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("(OqL;YRFP]mZ{vj");
      double double0 = logarithmicAxis0.switchedPow10(0.0);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.switchedPow10((-1.0));
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals((-10.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("4Lmf<?(P[m_@(}");
      double double0 = logarithmicAxis0.switchedLog10(146);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.1643528557844367, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("0");
      double double0 = logarithmicAxis0.switchedLog10((-3087.475081943585));
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals((-3.4896034612254314), double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("'");
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      
      logarithmicAxis0.setStrictValuesFlag(false);
      boolean boolean0 = logarithmicAxis0.getStrictValuesFlag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("a!N\"'`FlyQ%DqU");
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      
      logarithmicAxis0.log10TickLabelsFlag = true;
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Unrecognised Rotation type.");
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      
      logarithmicAxis0.setExpTickLabelsFlag(true);
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      
      logarithmicAxis0.setAutoRangeNextLogFlag(true);
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.computeLogFloor(0.0);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, double0, 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("#,##0");
      double double0 = logarithmicAxis0.computeLogCeil((-200.0));
      assertEquals((-200.0), double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.adjustedLog10(0.05);
      assertEquals(0.019116290447072776, double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      // Undeclared exception!
      try { 
        logarithmicAxis0.zoomRange(663.2159597, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (7.478887074574119E184) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setRange((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("/");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        logarithmicAxis0.java2DToValue(0.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.autoAdjustRange();
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Values less than or equal to zero not allowed with logarithmic axis");
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      logarithmicAxis0.setPlot(piePlot3D0);
      logarithmicAxis0.autoAdjustRange();
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.adjustedPow10(0.0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("0");
      double double0 = logarithmicAxis0.adjustedPow10((-143.4311546));
      assertEquals((-2.698699943749561E143), double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.adjustedPow10(1.2589254117941673);
      assertEquals(18.152038825555795, double0, 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("(OqL;YRFP]mZ{vj");
      double double0 = logarithmicAxis0.adjustedLog10(0.0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.switchedPow10(1.7976931348623157E308);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Te_{eLK}}ta:3");
      String string0 = logarithmicAxis0.makeTickLabel(0.65, true);
      assertEquals("0.65", string0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("0");
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      
      logarithmicAxis0.setExpTickLabelsFlag(true);
      logarithmicAxis0.makeTickLabel(1.5707963267948966);
      assertTrue(logarithmicAxis0.getExpTickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Unrecognised Rotation type.");
      logarithmicAxis0.setVerticalTickLabels(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 10, (double) 10, 0.001, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Unrecognised Rotation type.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge();
      List list0 = logarithmicAxis0.refreshTicksVertical(graphics2D0, rectangle2D_Float0, rectangleEdge0);
      assertEquals(1, list0.size());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Dj(>QYEj_Ld@[Co+VqD");
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      List list0 = logarithmicAxis0.refreshTicksVertical((Graphics2D) null, rectangle2D0, rectangleEdge0);
      assertEquals(1, list0.size());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("S0&");
      BufferedImage bufferedImage0 = new BufferedImage(500, 10, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("10^", logarithmicAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge((-2250));
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = logarithmicAxis0.draw(graphics2D0, (-2371.034459337), rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(0.0, axisState0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("]B=un?4mfySS");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(10);
      logarithmicAxis0.refreshTicksHorizontal((Graphics2D) null, (Rectangle2D) null, rectangleEdge0);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setInverted(true);
      logarithmicAxis0.zoomRange((-3.410143643218121), 0.0);
      assertEquals(0.9999999999999996, logarithmicAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("HlTH?!?grdh1cBmC");
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("HlTH?!?grdh1cBmC", logarithmicAxis0.DEFAULT_TICK_LABEL_FONT, waferMapPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      double double0 = logarithmicAxis0.java2DToValue((-2579.634052531), rectangle2D0, rectangleEdge0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Rectangle rectangle0 = new Rectangle(500, (-957), (-957), (-957));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(500);
      double double0 = logarithmicAxis0.java2DToValue(153.69, rectangle0, rectangleEdge0);
      assertEquals(0.5016526599533864, double0, 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("4Lmf<?(P[m_@(}");
      Object[][] objectArray0 = new Object[3][8];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "4Lmf<?(P[m_@(}";
      objectArray0[0] = objectArray1;
      JTable jTable0 = new JTable(objectArray0, objectArray0[0]);
      Rectangle rectangle0 = jTable0.getCellRect(500, 500, true);
      double double0 = logarithmicAxis0.java2DToValue((-3289.556997490505), rectangle0, (RectangleEdge) null);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("(OqL;YRFP]mZ{vj");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge((-696));
      // Undeclared exception!
      try { 
        logarithmicAxis0.valueToJava2D((-2818.8172070470164), (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2214.62F), (-2214.62F), 10.0F, (-1331.524F));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      double double0 = logarithmicAxis0.valueToJava2D(0.0, rectangle2D_Float0, rectangleEdge0);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals((-3546.1441650390625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setAutoRangeNextLogFlag(true);
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logarithmicAxis0, logarithmicAxis0);
      assertTrue(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("98JeE5GQZN]Ex=");
      float[][] floatArray0 = new float[4][9];
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, logarithmicAxis0, logarithmicAxis0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.computeLogCeil(0.0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("/");
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      
      logarithmicAxis0.allowNegativesFlag = true;
      double double0 = logarithmicAxis0.computeLogCeil(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Dj(>QYEj_Ld@[Co+VqD");
      double double0 = logarithmicAxis0.computeLogCeil(3994.215);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(10000.0, double0, 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.computeLogFloor((-3735.907203286));
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals((-3736.0), double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.computeLogFloor(0.2);
      assertEquals(0.1, double0, 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Dj(>QYEj_Ld@[Co+VqD");
      logarithmicAxis0.zoomRange((-2439.352585243672), (-1455.473));
      assertEquals(Double.NEGATIVE_INFINITY, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      double double0 = logarithmicAxis0.adjustedLog10((-2571.2460836685586));
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals((-3.410143643218121), double0, 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("G$?");
      logarithmicAxis0.zoomRange(0.6870255317202303, 2);
      double double0 = logarithmicAxis0.switchedLog10(1);
      assertEquals(0.6157934297501304, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.zoomRange(0.7853981633974483, 0.7853981633974483);
      double double0 = logarithmicAxis0.switchedPow10(0.1);
      assertEquals(0.7283476541339131, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1.2589254117941673, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.resizeRange2(72.31909724, (-1211.2153759));
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      logarithmicAxis0.refreshTicksVertical((Graphics2D) null, (Rectangle2D) null, rectangleEdge0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean0 = logarithmicAxis0.getExpTickLabelsFlag();
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(boolean0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("TK(UcD ");
      boolean boolean0 = logarithmicAxis0.getLog10TickLabelsFlag();
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(boolean0);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("G$?");
      boolean boolean0 = logarithmicAxis0.getAllowNegativesFlag();
      assertFalse(boolean0);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      boolean boolean0 = logarithmicAxis0.getAutoRangeNextLogFlag();
      assertFalse(boolean0);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Te_{eLK}}ta:3");
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      
      logarithmicAxis0.setAllowNegativesFlag(true);
      logarithmicAxis0.setRange(logarithmicAxis0.DEFAULT_RANGE);
      assertTrue(logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("TK(UcD ");
      logarithmicAxis0.setLog10TickLabelsFlag(false);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("TK(UcD ");
      boolean boolean0 = logarithmicAxis0.getStrictValuesFlag();
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(boolean0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
  }
}
