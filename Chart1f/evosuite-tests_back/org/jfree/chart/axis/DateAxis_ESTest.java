/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:48:00 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.RescaleOp;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JTabbedPane;
import javax.swing.border.SoftBevelBorder;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateAxis_ESTest extends DateAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      String string0 = "org.jfree.chart.needle.PointerNeedle";
      Locale locale0 = new Locale("org.jfree.chart.needle.PointerNeedle");
      DateAxis.createStandardDateTickUnits((TimeZone) simpleTimeZone0, locale0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.needle.PointerNeedle", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      int int0 = 21;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 21);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setVisible(false);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      dateAxis0.refreshTicksHorizontal(graphics2D0, defaultCaret0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      Date date0 = dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      dateTickUnit0.rollDate(date0);
      Object object0 = dateAxis0.clone();
      dateAxis0.equals(object0);
      dateAxis0.previousStandardDate(date0, dateTickUnit0);
      double double0 = (-570.3767073);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1938.6, 0.05, 0.7853981633974483, (-570.3767073));
      JEditorPane jEditorPane0 = new JEditorPane("", "yT4");
      jEditorPane0.modelToView(31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2560, 500);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("yT4", waferMapPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = null;
      try {
        colorConvertOp0 = new ColorConvertOp(renderingHints0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Color color0 = Color.gray;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43, color0, color0);
      Component component0 = Box.createVerticalStrut(43);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle(component0, (-3003), (-3003), (-3003), 0);
      rectangle2D_Double0.add((Rectangle2D) rectangle0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      dateAxis0.zoomRange((-880.9577665), 3000.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      String string0 = "org.jfree.chart.needle.PointerNeedle";
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.needle.PointerNeedle", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setVisible(false);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.autoAdjustRange();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      dateAxis0.setTimeZone(timeZone0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.jfree.chart.needle.PointerNeedle");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(4L, 2535, 930);
      segmentedTimeline0.getBaseTimeline();
      DateTickUnit dateTickUnit0 = null;
      // Undeclared exception!
      try { 
        dateAxis0.previousStandardDate(dateAxis0.DEFAULT_ANCHOR_DATE, (DateTickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("ABCxyz");
      dateAxis0.DEFAULT_DATE_TICK_UNIT.rollDate(dateAxis0.DEFAULT_ANCHOR_DATE);
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = synthTreeUI0.new NodeDimensionsHandler();
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeCategoryPlot[] combinedRangeCategoryPlotArray0 = new CombinedRangeCategoryPlot[4];
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlotArray0[0] = combinedRangeCategoryPlot0;
      combinedRangeCategoryPlotArray0[1] = combinedRangeCategoryPlot0;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlotArray0[2] = combinedRangeCategoryPlot1;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot2 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlotArray0[3] = combinedRangeCategoryPlot2;
      JList<CombinedRangeCategoryPlot> jList0 = new JList<CombinedRangeCategoryPlot>(combinedRangeCategoryPlotArray0);
      dateAxis0.getTickUnit();
      // Undeclared exception!
      try { 
        dateAxis0.calculateLowestVisibleTickValue((DateTickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      // Undeclared exception!
      try { 
        dateAxis0.calculateHighestVisibleTickValue((DateTickUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Millisecond millisecond0 = new Millisecond(dateAxis0.DEFAULT_ANCHOR_DATE);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2741, 2741, millisecond0);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      dateAxis0.setRange(range0, true, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateAxis dateAxis0 = new DateAxis("Null 'maximumDate' argument.", zoneInfo0, locale0);
      int int0 = (-2078);
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(500, 500, (-2078));
      Date date0 = segmentedTimeline0.getDate(500);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateAxis0.DEFAULT_ANCHOR_DATE, 0.0F, (-2078), 2.0, (-2078), 2566.7400461);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 2143.55672279, 86400000L, 60000L, (-2208988800000L), 0.0F);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(true, oHLCDataItemArray0);
      XYPlot xYPlot0 = new XYPlot(defaultOHLCDataset0, dateAxis0, dateAxis0, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 0.0F, renderingHints0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      String string0 = "";
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 500;
      floatArray1[1] = (float) 500;
      floatArray1[2] = (float) 500;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) 500;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray2[0] = 0.0F;
      floatArray0[1] = floatArray1;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        jTabbedPane0.getBoundsAt(94);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Tab count: 0
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("g");
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      vector0.removeAllElements();
      locale_LanguageRange0.equals(combinedDomainXYPlot0);
      vector0.add(locale_LanguageRange0);
      vector0.add(locale_LanguageRange0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        DateAxis.createStandardDateTickUnits((TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Date date0 = dateAxis0.getMinimumDate();
      dateAxis0.setMinimumDate(date0);
      double double0 = 4237.0;
      // Undeclared exception!
      try { 
        dateAxis0.setRange(4237.0, 4237.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.needle.PinNeedle");
      dateAxis0.zoomRange((-0.7853981633974483), 0.0);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(500, "org.jfree.chart.needle.PinNeedle", 0, 0, 500, 58, 58, 0, 500, 58);
      Locale locale0 = Locale.UK;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      locale0.getDisplayScript();
      int int1 = 3489;
      simpleTimeZone0.setStartYear(3489);
      locale0.toLanguageTag();
      DateAxis.createStandardDateTickUnits((TimeZone) simpleTimeZone0, locale0);
      Date date0 = dateAxis0.getMinimumDate();
      dateAxis0.nextStandardDate(date0, dateTickUnit0);
      DateAxis.createStandardDateTickUnits();
      // Undeclared exception!
      try { 
        dateAxis0.setRange(862.0411905416661, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "L<:uoW':}O~t<=IW");
      DateAxis dateAxis0 = new DateAxis("`0=)q0", simpleTimeZone0);
      Point point0 = new Point(520, 0);
      Rectangle rectangle0 = new Rectangle(point0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(14);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      dateAxis0.zoomRange(1.0F, 1.0F);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      dateAxis0.java2DToValue(0, rectangle0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 6);
      dateAxis0.equals(dateTickUnit0);
      dateAxis0.hashCode();
      DateAxis.createStandardDateTickUnits();
      Date date0 = dateAxis0.getMinimumDate();
      dateAxis0.previousStandardDate(date0, dateTickUnit0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(30, "");
      Locale locale0 = new Locale("");
      locale0.getDisplayName();
      locale0.getDisplayVariant((Locale) null);
      DateAxis.createStandardDateTickUnits((TimeZone) simpleTimeZone0, locale0);
      dateAxis0.getTickMarkPosition();
      dateAxis0.clone();
      dateAxis0.setTickUnit(dateTickUnit0, true, false);
      dateAxis0.getTickMarkPosition();
      dateAxis0.setRange((-1620.9281), (-1125.6954500029158));
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      dateAxis0.java2DToValue(30, rectangle2D0, rectangleEdge0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("2FOuJPr\"s");
      dateAxis0.autoAdjustRange();
      dateAxis0.getTickMarkPosition();
      dateAxis0.configure();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(500);
      int int0 = 0;
      parsePosition0.setErrorIndex(0);
      mockSimpleDateFormat0.parse("", parsePosition0);
      // Undeclared exception!
      try { 
        dateAxis0.setMinimumDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("MMM-yyyy", simpleTimeZone0);
      dateAxis0.equals(simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("8z0d*KT", simpleTimeZone0);
      dateAxis0.getTickMarkPosition();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      dateAxis0.setTickUnit(dateTickUnit0, false, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("5 V\"");
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      dateAxis0.setTickUnit(dateTickUnit0, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis.createStandardDateTickUnits();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        dateAxis0.valueToJava2D(2000000.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500, dateFormat0);
      // Undeclared exception!
      try { 
        dateAxis0.nextStandardDate((Date) null, dateTickUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 0, 15, 15, (-2554), 500, 2689, true, true, true, true, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Rectangle rectangle1 = new Rectangle(rectangle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      dateAxis0.dateToJava2D(date0, rectangle1, rectangleEdge1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateAxis.createStandardDateTickUnits();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      Locale.setDefault(locale0);
      timeZone0.getDisplayName(locale0);
      DateAxis dateAxis0 = new DateAxis((String) null, timeZone0);
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.setAutoTickIndex((-1073));
      dateTickUnit0.rollDate(dateAxis0.DEFAULT_ANCHOR_DATE);
      dateAxis0.setFixedAutoRange(1.0);
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(500, 500, 334);
      dateAxis0.setTimeline(segmentedTimeline0);
      dateAxis0.setTimeline(segmentedTimeline0);
      // Undeclared exception!
      try { 
        dateAxis0.setRange(0.0, (double) (-2208988800000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.axis.DateAxis");
      DateTickMarkPosition dateTickMarkPosition0 = DateTickMarkPosition.START;
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        dateAxis0.setTimeZone((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getDateFormatOverride();
      MockDate mockDate0 = new MockDate();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((-2487.4072F), 2.0F, 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.dateToJava2D(mockDate0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.forLanguageTag("OtLKlO t(C");
      DateAxis dateAxis0 = new DateAxis("5pZgz1DEl(", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      locale0.getDisplayName(locale1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.toInstant();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      mockGregorianCalendar0.before(mockDateFormat0);
      // Undeclared exception!
      try { 
        dateAxis0.setRange(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      MockDate mockDate0 = new MockDate((-939), 500, (-939), (-1250), 500);
      mockDate0.after(dateAxis0.DEFAULT_ANCHOR_DATE);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Date) mockDate0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("|<htd):fZAmZ,h", simpleTimeZone0);
      Color color0 = Color.CYAN;
      dateAxis0.setLabelPaint(color0);
      dateAxis0.zoomRange((-733.062408), 1212.479);
      dateAxis0.getDateFormatOverride();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(360, "");
      Locale locale0 = Locale.KOREA;
      DateAxis dateAxis0 = new DateAxis("Too many elements", simpleTimeZone0, locale0);
      dateAxis0.configure();
      dateAxis0.getTimeZone();
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[1] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[2] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[3] = dateAxis0.DEFAULT_ANCHOR_DATE;
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(360, 360, 360);
      Date date0 = segmentedTimeline0.getDate(500);
      dateArray0[4] = date0;
      dateArray0[5] = dateAxis0.DEFAULT_ANCHOR_DATE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 360;
      doubleArray0[1] = 1.0E-8;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 500;
      doubleArray0[4] = (-1325.2953764);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 500;
      doubleArray1[1] = 1.0E-8;
      doubleArray1[2] = (double) 86400000L;
      doubleArray1[3] = (double) (-2208988800000L);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(true, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(0, (-1296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1296
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      dateAxis0.setVisible(true);
      mockSimpleDateFormat0.applyLocalizedPattern("");
      dateAxis0.setDateFormatOverride(mockSimpleDateFormat0);
      // Undeclared exception!
      try { 
        DateAxis.createStandardDateTickUnits((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateAxis.createStandardDateTickUnits();
      DateAxis dateAxis0 = new DateAxis();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      dateAxis0.setDateFormatOverride(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLowerBound((-821.7));
      // Undeclared exception!
      try { 
        dateAxis0.zoomRange((-821.7), (-3174.4478483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-676258.0) <= upper (-2610217.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BasicStroke basicStroke0 = (BasicStroke)PolarPlot.DEFAULT_GRIDLINE_STROKE;
      basicStroke0.getDashArray();
      dateAxis0.setAxisLineStroke(basicStroke0);
      DateTickMarkPosition dateTickMarkPosition0 = dateAxis0.getTickMarkPosition();
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      dateAxis0.setTimeline(segmentedTimeline0);
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = null;
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("/E9^/\"YM4vzDDn", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("#");
      dateAxis0.setLabelURL("#");
      dateAxis0.getMaximumDate();
      dateAxis0.hashCode();
      Graphics2D graphics2D0 = null;
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("#", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = new Locale("|WiE", "|WiE");
      DateAxis dateAxis0 = new DateAxis("|WiE", simpleTimeZone0, locale0);
      dateAxis0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.autoAdjustRange();
      MockDate mockDate0 = new MockDate();
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 500);
      dateAxis0.previousStandardDate(mockDate0, dateTickUnit0);
      DateTickUnit dateTickUnit1 = null;
      try {
        dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      DateAxis dateAxis0 = new DateAxis((String) null);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainBounds(false);
      Range.expandToInclude((Range) null, 0.05);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "~ 3`*@0(Xzd$l^j|hu%";
      DateAxis dateAxis0 = new DateAxis("~ 3`*@0(Xzd$l^j|hu%");
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateAxis0.setRange(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getTickMarkPosition();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-2829.1315), 6.0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, dateAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      dateAxis0.java2DToValue((-1.5707963267948966), rectangle2D0, paintScaleLegend0.DEFAULT_POSITION);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setRawOffset(15);
      DateAxis.createStandardDateTickUnits(timeZone0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      DateTickMarkPosition dateTickMarkPosition0 = DateTickMarkPosition.START;
      dateAxis0.setTickMarkPosition(dateTickMarkPosition0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateAxis dateAxis0 = new DateAxis((String) null, simpleTimeZone0, locale0);
      dateAxis0.setRange((-795.0), 501.65086352097);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.calculateHighestVisibleTickValue(dateTickUnit0);
      dateAxis0.getMinimumDate();
      // Undeclared exception!
      try { 
        dateAxis0.setRange(2.0, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'lower' < 'upper'.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.isHiddenValue(0L);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("4h3", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = null;
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("", timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.ENGLISH;
      DateAxis dateAxis0 = new DateAxis("Viktor Rajewski", zoneInfo0, locale0);
      Date date0 = dateAxis0.DEFAULT_DATE_TICK_UNIT.addToDate(dateAxis0.DEFAULT_ANCHOR_DATE, zoneInfo0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      Date date1 = dateAxis0.previousStandardDate(date0, dateTickUnit0);
      dateAxis0.setMaximumDate(date1);
      dateAxis0.clone();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2056.7430126), (-2056.7430126), "Viktor Rajewski");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("SO'`");
      MockDate mockDate0 = new MockDate(2678400000L);
      int int0 = (-282);
      dateAxis0.setMinimumDate(mockDate0);
      MockDate.UTC(500, 500, (-282), 63, 0, 3192);
      dateAxis0.setMaximumDate(mockDate0);
      dateAxis0.getTimeline();
      dateAxis0.getTimeline();
      dateAxis0.clone();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 30, 3192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 3192
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      dateAxis0.setTickUnit(dateTickUnit0);
      dateAxis0.configure();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(dateAxis0.DEFAULT_ANCHOR_DATE, (-1.0), 2.0, 0.0, 500, (-700.1392541327));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      TimeZone timeZone0 = TimeZone.getTimeZone("2npCSJe2E0AQ;");
      Date date0 = dateAxis0.DEFAULT_DATE_TICK_UNIT.addToDate(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 0.0F, 1.0E-8, 0.05, 1.0E7, 3903.28);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 2.0F, 0.0, 500, 0.05, 0.0);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 0.0, 1.0, 0.0, 0.0, 2.0F);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, (-1.0), 0.0, 500, (-2563.8699902200924), 427.4912);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, (-700.1392541327), 0.0F, 0.0, 0.0, 0.0);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(dateAxis0.DEFAULT_ANCHOR_DATE, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(500, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("lF");
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      vectorRenderer0.findRangeBounds(defaultXYZDataset0);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Range) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Graphics2D graphics2D0 = null;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(500, 5.0E-8, 0.05, 5.0E-8);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle2D_Double1);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'dividerPaint' argument.");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ChartRenderingInfo chartRenderingInfo0 = null;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise((Graphics2D) null, rectangle2D_Double1, combinedDomainCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      statisticalBarRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis0, dateAxis0, (CategoryDataset) null, 10, (-5), false, categoryItemRendererState0, rectangle2D_Double0);
      RectangleEdge rectangleEdge0 = null;
      // Undeclared exception!
      try { 
        dateAxis0.selectHorizontalAutoTickUnit((Graphics2D) null, (Rectangle2D) null, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getTimeline();
      dateAxis0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickMarksVisible(false);
      dateAxis0.getMinimumDate();
      dateAxis0.autoAdjustRange();
      dateAxis0.setFixedAutoRange(2000000.0);
      TimeZone timeZone0 = TimeZone.getDefault();
      dateAxis0.setTimeZone(timeZone0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        dateAxis0.selectHorizontalAutoTickUnit((Graphics2D) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.lookup(linkedList0, hashSet0);
      // Undeclared exception!
      try { 
        DateAxis.createStandardDateTickUnits(timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      boolean boolean0 = false;
      Locale locale0 = JComponent.getDefaultLocale();
      locale0.getDisplayVariant();
      simpleTimeZone0.getDisplayName(false, 0, locale0);
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      dateAxis0.getMaximumDate();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      xYBlockRenderer0.findDomainBounds(timeTableXYDataset0);
      // Undeclared exception!
      try { 
        dateAxis0.setRange((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(999, "org.jfree.chart.axis.ValueTick");
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.axis.ValueTick", simpleTimeZone0);
      dateAxis0.getTickUnit();
      // Undeclared exception!
      try { 
        dateAxis0.setMinimumDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = ":u3`aGebuUMJ h9";
      int int0 = 0;
      int int1 = 2177;
      int int2 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, ":u3`aGebuUMJ h9", 2177, 0, 2177, 0, (-1685), 0, (-1685), 2122, 0, 3289, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week 2122
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", dateAxis0.DEFAULT_TICK_LABEL_FONT, spiderWebPlot0, true);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      String string0 = "org.jfree.chart.needle.PointerNeedle";
      Locale locale0 = new Locale("org.jfree.chart.needle.PointerNeedle");
      DateAxis.createStandardDateTickUnits((TimeZone) simpleTimeZone0, locale0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.needle.PointerNeedle", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      int int0 = 21;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 21);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setVisible(false);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      dateAxis0.refreshTicksHorizontal(graphics2D0, defaultCaret0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.KOREA;
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0, locale0);
      dateAxis0.zoomRange(1918.5, 250000.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JList<String> jList0 = new JList<String>(stringArray0);
      jList0.getCellBounds(500, (-327));
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, dateAxis0);
      RectangleEdge rectangleEdge0 = paintScaleLegend0.getPosition();
      // Undeclared exception!
      try { 
        dateAxis0.valueToJava2D(250000.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.equals(dateAxis0);
      dateAxis0.setRangeWithMargins(dateAxis0.DEFAULT_RANGE, true, false);
      MockDate mockDate0 = new MockDate(500, 500, (-3619), (-257), (-257));
      dateAxis0.setMinimumDate(mockDate0);
      dateAxis0.getTimeline();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("<42_6Dr", fastScatterPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("ABCxyz");
      dateAxis0.DEFAULT_DATE_TICK_UNIT.rollDate(dateAxis0.DEFAULT_ANCHOR_DATE);
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = synthTreeUI0.new NodeDimensionsHandler();
      Object object0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeCategoryPlot[] combinedRangeCategoryPlotArray0 = new CombinedRangeCategoryPlot[4];
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlotArray0[0] = combinedRangeCategoryPlot0;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlotArray0[1] = combinedRangeCategoryPlot1;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot2 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlotArray0[2] = combinedRangeCategoryPlot2;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot3 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlotArray0[3] = combinedRangeCategoryPlot3;
      JList<CombinedRangeCategoryPlot> jList0 = new JList<CombinedRangeCategoryPlot>(combinedRangeCategoryPlotArray0);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateAxis.createStandardDateTickUnits();
      String string0 = "y#t7mMjm#NYh;n;";
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("y#t7mMjm#NYh;n;", (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
