/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:15:22 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.util.RectangleEdge;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedCategoryAxis_ESTest extends ExtendedCategoryAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Ywn");
      extendedCategoryAxis0.setSubLabelPaint(extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      Object object0 = extendedCategoryAxis0.clone();
      boolean boolean0 = extendedCategoryAxis0.equals(object0);
      assertNotSame(object0, extendedCategoryAxis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
      extendedCategoryAxis0.setSubLabelPaint(paint0);
      Color color0 = (Color)extendedCategoryAxis0.getSubLabelPaint();
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      extendedCategoryAxis0.setSubLabelFont(font0);
      Font font1 = extendedCategoryAxis0.getSubLabelFont();
      assertTrue(font1.isBold());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("97");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.createLabel("97", 388.622F, rectangleEdge0, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.G2TextMeasurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("j|Z");
      extendedCategoryAxis0.addSubLabel("j|Z", "j|Z");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("CategoryAnchor.START");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CompassPlot compassPlot0 = new CompassPlot();
      Paint paint0 = compassPlot0.getRoseCenterPaint();
      extendedCategoryAxis0.setSubLabelPaint(paint0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("juQD!,$Z)\"WK<N!");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'paint' argument.");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("/9) ");
      boolean boolean0 = extendedCategoryAxis0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("/9) ");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TextBlock textBlock0 = extendedCategoryAxis0.createLabel(stackedAreaRenderer0.ZERO, 2.0F, (RectangleEdge) null, graphics2D0);
      assertNotNull(textBlock0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Ywn");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setSubLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.ExtendedCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("a*");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setSubLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.ExtendedCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("j|Z");
      Color color0 = (Color)extendedCategoryAxis0.getSubLabelPaint();
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Object object0 = extendedCategoryAxis0.clone();
      assertTrue(object0.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis0.setSubLabelFont(((Axis) object0).DEFAULT_AXIS_LABEL_FONT);
      boolean boolean0 = object0.equals(extendedCategoryAxis0);
      assertFalse(object0.equals((Object)extendedCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("j|Z");
      Font font0 = extendedCategoryAxis0.getSubLabelFont();
      assertEquals("Tahoma", font0.getName());
      assertEquals(10, font0.getSize());
      assertTrue(font0.isPlain());
  }
}
