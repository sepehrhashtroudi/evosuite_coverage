/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:53:38 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.SegmentedTimeline;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedTimeline_ESTest extends SegmentedTimeline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 1024;
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(542L, 1024, 1024);
      segmentedTimeline0.clone();
      segmentedTimeline0.getExceptionSegments();
      // Undeclared exception!
      try { 
        segmentedTimeline0.getTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(71100000L, (-1268), (-2147483646));
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.NO_DST_TIME_ZONE = segmentedTimeline1.NO_DST_TIME_ZONE;
      segmentedTimeline0.getSegment((-1705L));
      System.setCurrentTimeMillis(53L);
      Date date0 = segmentedTimeline1.getDate(54L);
      segmentedTimeline1.getSegment(date0);
      MockDate mockDate0 = new MockDate(60000L);
      segmentedTimeline0.equals(mockDate0);
      // Undeclared exception!
      try { 
        segmentedTimeline1.setBaseTimeline(segmentedTimeline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseTimeline.getStartTime() is after startTime
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.toMillisecond(535L);
      SegmentedTimeline segmentedTimeline1 = (SegmentedTimeline)segmentedTimeline0.clone();
      segmentedTimeline1.toTimelineValue(535L);
      SegmentedTimeline segmentedTimeline2 = (SegmentedTimeline)segmentedTimeline0.clone();
      SegmentedTimeline segmentedTimeline3 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.setBaseTimeline(segmentedTimeline3);
      segmentedTimeline0.addException((-1L), (-2208988800000L));
      segmentedTimeline0.equals(segmentedTimeline2);
      segmentedTimeline0.setBaseTimeline((SegmentedTimeline) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SegmentedTimeline segmentedTimeline4 = new SegmentedTimeline((-1471L), (-41), (-41));
      linkedList1.stream();
      linkedList1.addLast(segmentedTimeline4);
      linkedList0.retainAll(linkedList1);
      segmentedTimeline0.setExceptionSegments(linkedList0);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(15L);
      segmentedTimeline0.setBaseTimeline((SegmentedTimeline) null);
      segmentedTimeline0.getGroupSegmentCount();
      System.setCurrentTimeMillis(0L);
      segmentedTimeline3.setBaseTimeline(segmentedTimeline0);
      segmentedTimeline0.getSegmentsIncludedSize();
      segmentedTimeline0.toTimelineValue((long) 96);
      segmentedTimeline0.getExceptionSegments();
      segmentedTimeline0.toTimelineValue((-383L));
      segmentedTimeline3.equals(segmentedTimeline2);
      // Undeclared exception!
      try { 
        segmentedTimeline_Segment0.compareTo(segmentedTimeline3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.SegmentedTimeline cannot be cast to org.jfree.chart.axis.SegmentedTimeline$Segment
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(2123L, 11, (-438));
      segmentedTimeline0.getSegmentsExcludedSize();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.addBaseTimelineException(2307L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-1103);
      Integer integer0 = new Integer((-1103));
      linkedList0.add(integer0);
      segmentedTimeline0.setExceptionSegments(linkedList0);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange((-838220400001L), (-838220400001L));
      segmentedTimeline_SegmentRange0.inIncludeSegments();
      SegmentedTimeline.DEFAULT_TIME_ZONE = segmentedTimeline0.DEFAULT_TIME_ZONE;
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineException((-325L));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(60000L, 0L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(60000L, 86400000L);
      segmentedTimeline0.equals(segmentedTimeline_SegmentRange0);
      segmentedTimeline0.addException(0L);
      segmentedTimeline_BaseTimelineSegmentRange0.contained(0L, 75600000L);
      segmentedTimeline0.getGroupSegmentCount();
      segmentedTimeline0.containsDomainValue(date0);
      segmentedTimeline0.getDate(723L);
      Object object0 = new Object();
      segmentedTimeline_BaseTimelineSegmentRange0.equals(object0);
      segmentedTimeline0.clone();
      segmentedTimeline0.getStartTime();
      segmentedTimeline0.toTimelineValue(723L);
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((-622L));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline1.getDate(60000L);
      MockDate mockDate0 = new MockDate();
      mockDate0.before(date0);
      mockDate0.toInstant();
      segmentedTimeline0.addException((Date) mockDate0);
      segmentedTimeline0.getSegmentsExcluded();
      segmentedTimeline0.getSegmentsExcludedSize();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline1.getSegment(53L);
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline_Segment0.intersect((-2208988800000L), 86400000L);
      segmentedTimeline_Segment1.inc();
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment1.contained(612L, 38L);
      segmentedTimeline1.getExceptionSegmentCount(53L, (-1L));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1300L, 156, (-3058));
      segmentedTimeline0.getExceptionSegmentCount(1300L, 3251L);
      segmentedTimeline0.getExceptionSegments();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(3251L, 0L);
      segmentedTimeline_SegmentRange0.inIncludeSegments();
      segmentedTimeline_SegmentRange0.segmentNumber = 0L;
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 60000L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.copy();
      segmentedTimeline_SegmentRange0.after(segmentedTimeline_Segment0);
      segmentedTimeline_Segment0.before(segmentedTimeline_SegmentRange0);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline_BaseTimelineSegmentRange0.moveIndexToStart();
      segmentedTimeline_Segment0.moveIndexToEnd();
      segmentedTimeline_BaseTimelineSegmentRange0.contains((-1L), 3251L);
      segmentedTimeline0.toTimelineValue(date0);
      segmentedTimeline_SegmentRange0.contains(86400000L);
      segmentedTimeline0.toTimelineValue(0L);
      segmentedTimeline_Segment0.calculateSegmentNumber((-4318L));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.getTimeFromLong((-900000L));
      segmentedTimeline0.getExceptionSegmentCount((-900000L), 900000L);
      segmentedTimeline0.setAdjustForDaylightSaving(true);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(1387L, (-2208988800000L));
      segmentedTimeline_BaseTimelineSegmentRange0.inExcludeSegments();
      segmentedTimeline_BaseTimelineSegmentRange0.segmentEnd = 86400000L;
      SegmentedTimeline.DEFAULT_TIME_ZONE = segmentedTimeline0.NO_DST_TIME_ZONE;
      segmentedTimeline_BaseTimelineSegmentRange0.inExcludeSegments();
      segmentedTimeline0.setStartTime((-900000L));
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.copy();
      segmentedTimeline_Segment0.moveIndexToEnd();
      segmentedTimeline0.clone();
      segmentedTimeline0.toTimelineValue(0L);
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1708L, 1408, 3081);
      segmentedTimeline0.addException((long) 1408);
      segmentedTimeline0.getExceptionSegmentCount(803L, 803L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.getTimeFromLong(86400000L);
      segmentedTimeline0.toTimelineValue(86400000L);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      SegmentedTimeline.DEFAULT_TIME_ZONE = (TimeZone) zoneInfo0;
      segmentedTimeline0.addException(1L);
      segmentedTimeline0.getTimeFromLong((-2209014360001L));
      segmentedTimeline0.getSegmentsIncludedSize();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline1.new BaseTimelineSegmentRange(715L, 3600000L);
      segmentedTimeline_BaseTimelineSegmentRange0.contains(86400000L, 900000L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1610612736);
      linkedList0.add(integer0);
      segmentedTimeline0.setExceptionSegments(linkedList0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.toMillisecond(0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.getTimeFromLong(86400000L);
      segmentedTimeline0.toTimelineValue(86400000L);
      segmentedTimeline0.addException(1L);
      segmentedTimeline0.getTimeFromLong((-2209014360001L));
      segmentedTimeline0.getSegmentsIncludedSize();
      segmentedTimeline0.toMillisecond((-2209014360001L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(50L, 0, (-1328));
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment((long) 0);
      segmentedTimeline_Segment0.moveIndexToEnd();
      segmentedTimeline0.getGroupSegmentCount();
      segmentedTimeline_Segment0.equals((Object) null);
      SegmentedTimeline.FIRST_MONDAY_AFTER_1900 = (long) 0;
      segmentedTimeline_Segment0.contained((-1194L), 1642L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.addException(0L);
      segmentedTimeline0.getSegmentSize();
      segmentedTimeline0.toTimelineValue(0L);
      MockDate mockDate0 = new MockDate(2386L);
      segmentedTimeline0.toTimelineValue((Date) mockDate0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(1L, 60000L);
      segmentedTimeline0.getSegment((Date) mockDate0);
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.addException(1L);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment((-2208988800000L));
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline0.new Segment();
      segmentedTimeline_Segment0.before(segmentedTimeline_Segment1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, (-2208988800000L));
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.toTimelineValue(date0);
      segmentedTimeline0.containsDomainRange(1589L, 1589L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline0.getDate(2091L);
      segmentedTimeline0.addBaseTimelineException(date0);
      segmentedTimeline0.getTime(date0);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      segmentedTimeline_Segment0.intersect(0L, 900000L);
      segmentedTimeline_Segment0.millisecond = 0L;
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment0.copy();
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline0.getSegment(date0);
      segmentedTimeline0.getExceptionSegmentCount(2091L, (-4474L));
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline0.getSegmentSize();
      segmentedTimeline0.getTime(date0);
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline0.equals((Object) null);
      segmentedTimeline0.getDate(0L);
      segmentedTimeline0.addBaseTimelineException(2091L);
      segmentedTimeline0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline0.getDate(2091L);
      segmentedTimeline0.addBaseTimelineException(date0);
      segmentedTimeline0.getTime(date0);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline_Segment0.intersect(0L, 900000L);
      segmentedTimeline_Segment0.millisecond = 0L;
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment0.copy();
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline0.getSegment(date0);
      segmentedTimeline0.getExceptionSegmentCount(2091L, (-4474L));
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline0.getSegmentSize();
      segmentedTimeline0.getTime(date0);
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment1.after(segmentedTimeline_Segment0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1402;
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1708L, 1402, 3081);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      // Undeclared exception!
      try { 
        segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseTimeline.getSegmentSize() is not multiple of segmentSize
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.containsDomainRange((-378L), 60000L);
      segmentedTimeline0.clone();
      segmentedTimeline0.getTimeFromLong(1L);
      segmentedTimeline0.getTimeFromLong(1L);
      segmentedTimeline0.getSegmentsIncludedSize();
      segmentedTimeline0.setAdjustForDaylightSaving(true);
      segmentedTimeline0.getAdjustForDaylightSaving();
      segmentedTimeline0.getSegmentsGroupSize();
      segmentedTimeline0.getSegmentsIncludedSize();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange((-2715L), (-2615L));
      segmentedTimeline_SegmentRange0.inExcludeSegments();
      segmentedTimeline0.getSegmentsExcludedSize();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 0L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.containsDomainValue(date0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange1 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 0L);
      segmentedTimeline_BaseTimelineSegmentRange1.moveIndexToEnd();
      segmentedTimeline_BaseTimelineSegmentRange1.equals(segmentedTimeline0);
      segmentedTimeline0.getSegmentsIncludedSize();
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      segmentedTimeline_BaseTimelineSegmentRange1.getMillisecond();
      segmentedTimeline1.addException(899999L, 1650L);
      segmentedTimeline_BaseTimelineSegmentRange1.contained(900000L, (-1927L));
      segmentedTimeline_BaseTimelineSegmentRange0.inExceptionSegments();
      segmentedTimeline_BaseTimelineSegmentRange1.intersect(25200000L, 0L);
      segmentedTimeline_BaseTimelineSegmentRange0.calculateSegmentNumber(86400000L);
      System.setCurrentTimeMillis(0L);
      segmentedTimeline1.getTime(date0);
      segmentedTimeline1.setAdjustForDaylightSaving(false);
      segmentedTimeline_BaseTimelineSegmentRange1.calculateSegmentNumber(60000L);
      segmentedTimeline1.hashCode();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline1.setStartTime((-2208988800000L));
      segmentedTimeline0.setAdjustForDaylightSaving(false);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-2208955500001L), 1199L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline1.addException(date0);
      MockDate mockDate0 = new MockDate(393, (-2147473057), 13, 4371, (-1118));
      mockDate0.setTime(393);
      segmentedTimeline1.containsDomainRange((Date) mockDate0, (Date) mockDate0);
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
      SegmentedTimeline segmentedTimeline2 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate1 = new MockDate((-1118), 28, 1);
      // Undeclared exception!
      try { 
        segmentedTimeline2.containsDomainRange(date0, (Date) mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // domainValueEnd (-37415779200000) < domainValueStart (-2208955500001)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-583L), 1, 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'u';
      charArray0[2] = 'J';
      charArray0[3] = 'M';
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      segmentedTimeline0.toMillisecond((-583L));
      segmentedTimeline0.getSegmentsExcluded();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-583L), 0);
      segmentedTimeline_BaseTimelineSegmentRange0.inExceptionSegments();
      segmentedTimeline_BaseTimelineSegmentRange0.getMillisecond();
      segmentedTimeline_BaseTimelineSegmentRange0.contains((-583L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(510L, 0, 0);
      segmentedTimeline0.getTimeFromLong((-2106L));
      segmentedTimeline0.getStartTime();
      segmentedTimeline0.hashCode();
      segmentedTimeline0.setStartTime(1604L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) segmentedTimeline0);
      linkedList0.remove();
      segmentedTimeline0.setExceptionSegments(linkedList0);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(0L, 0L);
      segmentedTimeline_SegmentRange0.copy();
      segmentedTimeline_SegmentRange0.inExcludeSegments();
      segmentedTimeline_SegmentRange0.moveIndexToEnd();
      SegmentedTimeline[] segmentedTimelineArray0 = new SegmentedTimeline[5];
      segmentedTimelineArray0[0] = segmentedTimeline0;
      segmentedTimelineArray0[1] = segmentedTimeline0;
      segmentedTimelineArray0[2] = segmentedTimeline0;
      segmentedTimelineArray0[3] = segmentedTimeline0;
      segmentedTimelineArray0[4] = segmentedTimeline0;
      linkedList0.toArray(segmentedTimelineArray0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineException(1104L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.clone();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(0L);
      segmentedTimeline0.containsDomainRange(0L, 0L);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline1.new BaseTimelineSegmentRange(60000L, 60000L);
      segmentedTimeline_Segment0.segmentEnd = (-2259L);
      segmentedTimeline_BaseTimelineSegmentRange0.dec();
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.getTime(date0);
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      segmentedTimeline_Segment0.segmentStart = 60000L;
      segmentedTimeline0.setStartTime(900000L);
      segmentedTimeline_Segment0.getSegmentNumber();
      segmentedTimeline_BaseTimelineSegmentRange0.moveIndexToStart();
      SegmentedTimeline.firstMondayAfter1900();
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc(900000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      segmentedTimeline0.setExceptionSegments(linkedList0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1014, 0);
      Integer integer1 = new Integer(0);
      MockDate mockDate1 = new MockDate(1899L);
      mockDate0.before(mockDate1);
      linkedList0.add(integer1);
      segmentedTimeline0.getSegment((Date) mockDate0);
      segmentedTimeline0.getBaseTimeline();
      // Undeclared exception!
      try { 
        segmentedTimeline0.toTimelineValue((Date) mockDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(86400000L, 932, 932);
      segmentedTimeline0.setStartTime(86400000L);
      segmentedTimeline0.getAdjustForDaylightSaving();
      segmentedTimeline0.getBaseTimeline();
      segmentedTimeline0.equals((Object) null);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      long long0 = (-1719L);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline1.getExceptionSegments();
      segmentedTimeline1.getTimeFromLong(3600000L);
      MockDate mockDate0 = new MockDate(1L);
      segmentedTimeline1.getSegment((Date) mockDate0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseTimeline.getSegmentSize() is smaller than segmentSize
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 11, 11);
      segmentedTimeline0.setAdjustForDaylightSaving(false);
      segmentedTimeline0.getTimeFromLong(0L);
      segmentedTimeline0.getSegmentSize();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = null;
      try {
        segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(86400000L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-1428L), 0, 0);
      segmentedTimeline0.getBaseTimeline();
      Date date0 = segmentedTimeline0.getDate(0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.containsDomainValue(date0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, (-1), 28);
      segmentedTimeline0.getSegmentsIncludedSize();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-2208988800000L), 0L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.addBaseTimelineException(date0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange1 = segmentedTimeline0.new BaseTimelineSegmentRange(368L, (-1L));
      segmentedTimeline_BaseTimelineSegmentRange0.contains((SegmentedTimeline.Segment) segmentedTimeline_BaseTimelineSegmentRange1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      long long0 = 1L;
      segmentedTimeline0.getExceptionSegmentCount(1L, (-736L));
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(60000L, 3600000L);
      segmentedTimeline_BaseTimelineSegmentRange0.inExcludeSegments();
      segmentedTimeline0.setAdjustForDaylightSaving(false);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.intersect(0L, 0L);
      segmentedTimeline_BaseTimelineSegmentRange0.dec(900000L);
      segmentedTimeline_Segment0.segmentEnd = 3600000L;
      segmentedTimeline_Segment0.millisecond = 86400000L;
      segmentedTimeline_Segment0.moveIndexToEnd();
      segmentedTimeline_BaseTimelineSegmentRange0.segmentEnd = 36L;
      segmentedTimeline_Segment0.contains((-2208988800000L), 1L);
      segmentedTimeline_BaseTimelineSegmentRange0.getSegmentEnd();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      segmentedTimeline_Segment0.inIncludeSegments();
      // Undeclared exception!
      try { 
        segmentedTimeline1.addException((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline1.setBaseTimeline(segmentedTimeline0);
      segmentedTimeline0.getTimeFromLong((-3129L));
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(86400000L);
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline_Segment0.inc();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline0.getDate(0L);
      segmentedTimeline0.toTimelineValue(date0);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(0L);
      segmentedTimeline_Segment0.segmentNumber = 74L;
      segmentedTimeline_Segment0.inc(493L);
      segmentedTimeline_Segment0.inc(644288400000L);
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline0.getSegment(date0);
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline0.getSegment(694L);
      segmentedTimeline_Segment1.moveIndexToStart();
      segmentedTimeline_Segment0.contains(segmentedTimeline_Segment1);
      segmentedTimeline0.containsDomainRange((-2293L), 9L);
      segmentedTimeline0.containsDomainRange(date0, date0);
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline0.setAdjustForDaylightSaving(false);
      segmentedTimeline0.clone();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.toMillisecond(86400000L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      segmentedTimeline0.getBaseTimeline();
      segmentedTimeline0.setBaseTimeline((SegmentedTimeline) null);
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment0.contains(900000L);
      segmentedTimeline_Segment0.segmentStart = (-2208988800000L);
      segmentedTimeline0.getSegmentsIncludedSize();
      segmentedTimeline0.containsDomainRange((-2208988800000L), (-2008L));
      segmentedTimeline_Segment0.getSegmentCount();
      segmentedTimeline0.setAdjustForDaylightSaving(false);
      segmentedTimeline_Segment0.inc((-987L));
      segmentedTimeline0.toTimelineValue((-1417L));
      segmentedTimeline0.getSegmentSize();
      segmentedTimeline_Segment0.contains((-1652L), 900000L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate0 = new MockDate(0L);
      segmentedTimeline0.containsDomainValue((Date) mockDate0);
      MockDate mockDate1 = new MockDate(3421, 3421, 3421, 3421, 1539, (-590));
      segmentedTimeline0.getTime(mockDate1);
      segmentedTimeline0.setStartTime((-590));
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(86400000L);
      segmentedTimeline_Segment0.segmentStart = 115051674550000L;
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline_Segment0.intersect(686L, 3317L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate0 = new MockDate(4895L);
      segmentedTimeline0.addException((Date) mockDate0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(900000L, 60000L);
      segmentedTimeline_BaseTimelineSegmentRange0.getSegmentCount();
      MockDate mockDate1 = new MockDate(86400000L);
      mockDate0.before(mockDate1);
      segmentedTimeline0.addBaseTimelineExclusions(4895L, 4895L);
      segmentedTimeline0.toTimelineValue(0L);
      segmentedTimeline0.addBaseTimelineException((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(4905L, 1035, 1035);
      segmentedTimeline0.setStartTime(4905L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      segmentedTimeline_Segment0.inc(3600000L);
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline_Segment0.dec((-2585L));
      segmentedTimeline_Segment0.dec(900000L);
      segmentedTimeline_Segment0.contains(0L);
      long long0 = 3995L;
      segmentedTimeline_Segment0.segmentEnd = (-638L);
      segmentedTimeline_Segment0.segmentEnd = 3995L;
      Date date0 = null;
      // Undeclared exception!
      try { 
        segmentedTimeline0.containsDomainRange((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-4043L), 12, 12);
      MockDate mockDate0 = new MockDate(12, (-2147446937), 12, (-2401), 0);
      segmentedTimeline0.containsDomainRange((Date) mockDate0, (Date) mockDate0);
      segmentedTimeline0.getSegmentsIncluded();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.addException(0L);
      segmentedTimeline0.getSegmentSize();
      MockDate mockDate0 = new MockDate(2386L);
      segmentedTimeline0.toTimelineValue((Date) mockDate0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(1L, 60000L);
      segmentedTimeline0.getSegment((Date) mockDate0);
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(1036L);
      segmentedTimeline_Segment0.inExcludeSegments();
      segmentedTimeline0.addException(1036L, 1036L);
      segmentedTimeline_Segment0.moveIndexToEnd();
      segmentedTimeline_Segment0.inc((-4934L));
      SegmentedTimeline.DEFAULT_TIME_ZONE = segmentedTimeline0.NO_DST_TIME_ZONE;
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline0.getSegmentsExcludedSize();
      segmentedTimeline_Segment0.getDate();
      segmentedTimeline0.getAdjustForDaylightSaving();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.getSegmentsIncluded();
      MockDate mockDate0 = new MockDate(41, 28, 41);
      segmentedTimeline0.containsDomainRange((Date) mockDate0, (Date) mockDate0);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(310L, 310L);
      segmentedTimeline_SegmentRange0.inExcludeSegments();
      segmentedTimeline_SegmentRange0.moveIndexToStart();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment((long) 41);
      segmentedTimeline_Segment0.millisecond = (-2208988800000L);
      segmentedTimeline_Segment0.dec();
      segmentedTimeline_SegmentRange0.contains(segmentedTimeline_Segment0);
      segmentedTimeline0.toTimelineValue((Date) mockDate0);
      segmentedTimeline_SegmentRange0.contains(0L);
      segmentedTimeline0.containsDomainRange((Date) mockDate0, (Date) mockDate0);
      segmentedTimeline0.getTimeFromLong((-1365L));
      SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.addException((-2330L));
      segmentedTimeline0.getExceptionSegmentCount((-2330L), (-2330L));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "ukN!1$Px");
      segmentedTimeline0.setExceptionSegments(linkedList0);
      SegmentedTimeline.FIRST_MONDAY_AFTER_1900 = (-2208988800000L);
      long long0 = (-473L);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addException(1541L, (-473L));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.DEFAULT_TIME_ZONE = segmentedTimeline0.NO_DST_TIME_ZONE;
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
      segmentedTimeline0.addException((-18L));
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, (-2208988800000L));
      segmentedTimeline_BaseTimelineSegmentRange0.getSegmentCount();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(865L, 1955, 3001);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline1.getBaseTimeline();
      segmentedTimeline0.setBaseTimeline((SegmentedTimeline) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline0.getDate(673L);
      segmentedTimeline0.containsDomainValue(date0);
      segmentedTimeline0.getExceptionSegmentCount(673L, 573L);
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegmentsGroupSize();
      segmentedTimeline0.getExceptionSegments();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(573L);
      segmentedTimeline_Segment0.copy();
      segmentedTimeline0.getExceptionSegments();
      segmentedTimeline_Segment0.getSegmentEnd();
      segmentedTimeline_Segment0.copy();
      segmentedTimeline_Segment0.inc();
      segmentedTimeline0.getDate((-1L));
      segmentedTimeline_Segment0.inExcludeSegments();
      segmentedTimeline_Segment0.inc();
      segmentedTimeline1.getSegmentsIncludedSize();
      segmentedTimeline0.hashCode();
      segmentedTimeline0.containsDomainValue(date0);
      segmentedTimeline1.addBaseTimelineException((-1L));
      segmentedTimeline1.getSegment(0L);
      SegmentedTimeline.newMondayThroughFridayTimeline();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = null;
      // Undeclared exception!
      try { 
        segmentedTimeline0.addException((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1572L, (-801), (-801));
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(0L);
      segmentedTimeline_Segment0.contains(60000L, 900000L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 37, 37);
      segmentedTimeline0.getBaseTimeline();
      segmentedTimeline0.setStartTime(3600000L);
      MockDate mockDate0 = new MockDate(37, 13, 37, 13, 13, 37);
      Date date0 = null;
      // Undeclared exception!
      try { 
        segmentedTimeline0.getSegment(1L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(60000L, 3600000L);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange1 = segmentedTimeline0.new SegmentRange(3600000L, 900000L);
      segmentedTimeline_SegmentRange0.dec((-2612L));
      segmentedTimeline_SegmentRange1.copy();
      segmentedTimeline_SegmentRange1.getDate();
      segmentedTimeline_SegmentRange0.segmentStart = 60000L;
      segmentedTimeline_SegmentRange0.compareTo(segmentedTimeline_SegmentRange1);
      segmentedTimeline_SegmentRange0.moveIndexToStart();
      segmentedTimeline0.addException(0L, 328L);
      segmentedTimeline0.containsDomainValue(0L);
      segmentedTimeline_SegmentRange0.getSegmentStart();
      segmentedTimeline0.getStartTime();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      segmentedTimeline0.addExceptions(list0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 3498, 3498);
      MockDate mockDate0 = new MockDate(2372, 3498, (-387), (-387), 2372);
      // Undeclared exception!
      try { 
        segmentedTimeline0.getSegment((Date) mockDate0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-1L), 422, 422);
      segmentedTimeline0.getExceptionSegmentCount(422, 422);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 3714, 3714);
      segmentedTimeline0.getSegmentsExcluded();
      segmentedTimeline0.getStartTime();
      long long0 = (-243L);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addException(5120L, (-243L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1300L, 156, (-3058));
      segmentedTimeline0.getExceptionSegmentCount(1300L, 3251L);
      segmentedTimeline0.getExceptionSegments();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(3251L, 0L);
      segmentedTimeline_SegmentRange0.inIncludeSegments();
      segmentedTimeline_SegmentRange0.segmentNumber = 0L;
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 60000L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.copy();
      segmentedTimeline_SegmentRange0.after(segmentedTimeline_Segment0);
      segmentedTimeline_Segment0.before(segmentedTimeline_SegmentRange0);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline_BaseTimelineSegmentRange0.moveIndexToStart();
      segmentedTimeline_Segment0.moveIndexToEnd();
      segmentedTimeline_BaseTimelineSegmentRange0.contains((-1L), 3251L);
      segmentedTimeline0.toTimelineValue(date0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineException(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate0 = new MockDate();
      segmentedTimeline0.addBaseTimelineExclusions(1499L, (-1238L));
      mockDate0.getTime();
      mockDate0.toInstant();
      segmentedTimeline0.containsDomainRange((Date) mockDate0, (Date) mockDate0);
      segmentedTimeline0.addBaseTimelineExclusions(1L, 86400000L);
      segmentedTimeline0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.addBaseTimelineExclusions(2681L, 2681L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(900000L, 197, 197);
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      MockDate mockDate0 = new MockDate(1751, 197, 1751, 564, 0, 1751);
      linkedList0.add((Date) mockDate0);
      segmentedTimeline0.addExceptions(linkedList0);
      segmentedTimeline0.addException((long) 197);
      segmentedTimeline0.getDate((-710L));
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(900000L, 900000L);
      segmentedTimeline_SegmentRange0.moveIndexToEnd();
      segmentedTimeline_SegmentRange0.intersect(0L, 86400000L);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = (-1);
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, (-1), (-1));
      // Undeclared exception!
      try { 
        segmentedTimeline0.toMillisecond(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      segmentedTimeline0.setExceptionSegments(linkedList0);
      segmentedTimeline0.setStartTime((-3107L));
      Object object0 = segmentedTimeline0.clone();
      segmentedTimeline0.clone();
      segmentedTimeline0.equals(object0);
      segmentedTimeline0.setStartTime(1065L);
      segmentedTimeline0.setAdjustForDaylightSaving(true);
      segmentedTimeline0.toMillisecond(1065L);
      segmentedTimeline0.toTimelineValue(0L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime((-2208988800000L));
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment((Date) mockDate0);
      segmentedTimeline_Segment0.getDate();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-3719L), 22L);
      segmentedTimeline_BaseTimelineSegmentRange0.intersect(86400000L, 60000L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      segmentedTimeline0.setExceptionSegments(linkedList0);
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      segmentedTimeline0.getStartTime();
      segmentedTimeline0.setStartTime((-3719L));
      segmentedTimeline_BaseTimelineSegmentRange0.intersect((-1747L), 0L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.setStartTime(3890L);
      MockDate mockDate0 = new MockDate();
      MockDate.UTC(1, 0, (-3097), 0, (-3097), (-3097));
      MockDate mockDate1 = new MockDate(2412, (-3097), (-3097), 2412, 1);
      mockDate0.after(mockDate1);
      mockDate0.getTime();
      segmentedTimeline0.getSegment((Date) mockDate0);
      segmentedTimeline0.setStartTime(0L);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.toTimelineValue(1L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(1929L);
      segmentedTimeline_Segment0.copy();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-1363L), 644288400000L);
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      segmentedTimeline_BaseTimelineSegmentRange0.inExcludeSegments();
      segmentedTimeline0.addBaseTimelineException(644288400000L);
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      Date date0 = segmentedTimeline1.getDate(0L);
      segmentedTimeline0.addBaseTimelineException(date0);
      segmentedTimeline_BaseTimelineSegmentRange0.dec(0L);
      segmentedTimeline_Segment0.inc();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedList1.add("8jwOADuw\"(#a");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      segmentedTimeline1.addExceptions(list0);
      segmentedTimeline0.getBaseTimeline();
      segmentedTimeline1.containsDomainRange(0L, 60000L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.addBaseTimelineException(1L);
      segmentedTimeline0.setStartTime(60000L);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("P~?SV56xnIem^<?a1w6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(86400000L);
      segmentedTimeline_Segment0.getSegmentEnd();
      Instant instant0 = MockInstant.now();
      Date date0 = segmentedTimeline0.getDate(1L);
      segmentedTimeline0.getSegment(date0);
      Date date1 = Date.from(instant0);
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline0.getSegment(date1);
      segmentedTimeline_Segment1.dec(0L);
      segmentedTimeline0.toMillisecond(0L);
      segmentedTimeline_Segment0.before(segmentedTimeline_Segment1);
      segmentedTimeline_Segment1.moveIndexToStart();
      segmentedTimeline_Segment1.inExceptionSegments();
      SegmentedTimeline segmentedTimeline1 = new SegmentedTimeline(86400000L, 187, 37);
      segmentedTimeline0.equals(segmentedTimeline1);
      segmentedTimeline_Segment0.getDate();
      segmentedTimeline_Segment1.contains(900000L, (-1016L));
      segmentedTimeline1.addException((-971L));
      segmentedTimeline_Segment0.copy();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 37);
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(86400000L);
      segmentedTimeline_Segment0.getSegmentEnd();
      Date date0 = segmentedTimeline0.getDate(1L);
      segmentedTimeline0.getSegment(date0);
      segmentedTimeline0.toMillisecond(0L);
      SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = new SegmentedTimeline(86400000L, 187, 37);
      segmentedTimeline0.equals(segmentedTimeline1);
      segmentedTimeline_Segment0.getDate();
      segmentedTimeline1.addException((-971L));
      segmentedTimeline_Segment0.copy();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 37);
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1319L, (-641), 1);
      segmentedTimeline0.addException(2129L);
      segmentedTimeline0.getGroupSegmentCount();
      segmentedTimeline0.getSegmentsIncluded();
      Object object0 = segmentedTimeline0.clone();
      segmentedTimeline0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.getSegmentsIncluded();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate0 = new MockDate(1, (-1707), (-1707), 0, 0, 1);
      segmentedTimeline0.addBaseTimelineException((Date) mockDate0);
      segmentedTimeline0.toTimelineValue((-1716L));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(60000L);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline0.setExceptionSegments(linkedList0);
      SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline_Segment0.dec(900000L);
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline_Segment0.inIncludeSegments();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      // Undeclared exception!
      try { 
        segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseTimeline.getSegmentSize() is smaller than segmentSize
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-903);
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(572L, (-903), (-903));
      segmentedTimeline0.getTimeFromLong((-903));
      segmentedTimeline0.setAdjustForDaylightSaving(false);
      SegmentedTimeline segmentedTimeline1 = new SegmentedTimeline((-2208988800000L), 1704, (-903));
      // Undeclared exception!
      try { 
        segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // baseTimeline.getSegmentSize() is smaller than segmentSize
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.containsDomainRange(1L, 1L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      segmentedTimeline_Segment0.dec(320L);
      segmentedTimeline0.getDate((-1087L));
      segmentedTimeline_Segment0.moveIndexToStart();
      segmentedTimeline0.getSegment(3695L);
      segmentedTimeline_Segment0.intersect(1L, 60000L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      LinkedList<SegmentedTimeline.Segment> linkedList0 = new LinkedList<SegmentedTimeline.Segment>();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange((-129L), (-2208988800000L));
      linkedList0.add((SegmentedTimeline.Segment) segmentedTimeline_SegmentRange0);
      linkedList0.removeLastOccurrence(segmentedTimeline0);
      linkedList0.removeFirstOccurrence(segmentedTimeline0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addExceptions(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.SegmentedTimeline$SegmentRange cannot be cast to java.util.Date
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.setStartTime((-1L));
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      MockDate mockDate0 = new MockDate(900000L);
      linkedList0.add((Date) mockDate0);
      segmentedTimeline0.addExceptions(linkedList0);
      MockDate mockDate1 = null;
      try {
        mockDate1 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(14L, (-4310), (-4310));
      segmentedTimeline0.containsDomainValue(0L);
      // Undeclared exception!
      try { 
        segmentedTimeline0.getSegment((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.getExceptionSegmentCount((-1142L), 0L);
      segmentedTimeline0.getSegment((-131L));
      // Undeclared exception!
      try { 
        segmentedTimeline0.containsDomainRange(1432L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // domainValueEnd (0) < domainValueStart (1432)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 0L;
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 5, 5);
      long long1 = 0L;
      long long2 = 0L;
      // Undeclared exception!
      try { 
        segmentedTimeline0.toTimelineValue((-985L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.hashCode();
      segmentedTimeline0.addException(0L);
      Month month0 = Month.JUNE;
      int int0 = (-267);
      // Undeclared exception!
      try { 
        MockLocalDate.of((-1459), month0, (-267));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -267
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1359L, 5, 0);
      Date date0 = segmentedTimeline0.getDate(792L);
      segmentedTimeline0.toTimelineValue(date0);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(900000L, (-2253L));
      segmentedTimeline_SegmentRange0.getMillisecond();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment((-2253L));
      segmentedTimeline_SegmentRange0.after(segmentedTimeline_Segment0);
      segmentedTimeline_Segment0.getDate();
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline0.getSegment(0L);
      segmentedTimeline_Segment0.compareTo(segmentedTimeline_SegmentRange0);
      segmentedTimeline_Segment1.inExcludeSegments();
      segmentedTimeline0.getAdjustForDaylightSaving();
      segmentedTimeline_Segment0.contains(0L);
      segmentedTimeline0.getDate(0L);
      segmentedTimeline0.getSegment(date0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.containsDomainValue((-3097L));
      MockDate mockDate0 = new MockDate(86400000L);
      mockDate0.clone();
      mockDate0.getTime();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment((Date) mockDate0);
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline0.getSegmentsGroupSize();
      segmentedTimeline_Segment0.dec();
      // Undeclared exception!
      try { 
        segmentedTimeline_Segment0.compareTo(segmentedTimeline0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.SegmentedTimeline cannot be cast to org.jfree.chart.axis.SegmentedTimeline$Segment
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(3600000L);
      segmentedTimeline0.containsDomainValue(741L);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(3600000L, 60000L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline0.getSegment(date0);
      segmentedTimeline_Segment0.after(segmentedTimeline_Segment1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.getAdjustForDaylightSaving();
      segmentedTimeline0.getSegmentsGroupSize();
      segmentedTimeline0.getSegmentsGroupSize();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(3224L, (-1768), (-1768));
      // Undeclared exception!
      try { 
        segmentedTimeline0.containsDomainRange((-1L), (-2139L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // domainValueEnd (-2139) < domainValueStart (-1)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      MockDate mockDate0 = new MockDate(0, 0, 1);
      MockDate mockDate1 = new MockDate();
      mockDate0.after(mockDate1);
      segmentedTimeline0.containsDomainRange((Date) mockDate0, (Date) mockDate0);
      segmentedTimeline0.getTimeFromLong(1L);
      segmentedTimeline0.getSegmentsIncludedSize();
      // Undeclared exception!
      try { 
        segmentedTimeline0.containsDomainRange((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-843L), (-1L));
      segmentedTimeline_BaseTimelineSegmentRange0.getSegmentNumber();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-786L), 322, 11);
      segmentedTimeline0.getSegmentsExcluded();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange((-234L), 60000L);
      segmentedTimeline_SegmentRange0.copy();
      SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline_SegmentRange0.copy();
      segmentedTimeline0.getExceptionSegmentCount(60000L, 86400000L);
      segmentedTimeline_SegmentRange0.millisecond = (-1859L);
      segmentedTimeline_SegmentRange0.inExcludeSegments();
      segmentedTimeline_SegmentRange0.inExcludeSegments();
      MockDate mockDate0 = new MockDate(11, (-1525), 64);
      segmentedTimeline0.setStartTime(900000L);
      segmentedTimeline0.toTimelineValue((Date) mockDate0);
      // Undeclared exception!
      try { 
        mockDate0.before((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-375L), (-779), (-779));
      Date date0 = segmentedTimeline0.getDate(0L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(date0);
      segmentedTimeline_Segment0.copy();
      SegmentedTimeline segmentedTimeline1 = new SegmentedTimeline(60000L, (-779), 0);
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
      segmentedTimeline0.containsDomainRange(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(900000L, 598, 0);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      segmentedTimeline_Segment0.getDate();
      segmentedTimeline_Segment0.getDate();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add(",KFNNFL_'W#]5Z");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      segmentedTimeline0.addExceptions(list0);
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline_Segment0.copy();
      segmentedTimeline_Segment0.segmentStart = 876L;
      segmentedTimeline_Segment0.dec((long) 598);
      segmentedTimeline_Segment0.inc(86400000L);
      long long0 = 0L;
      segmentedTimeline_Segment1.getDate();
      segmentedTimeline0.getSegment(0L);
      segmentedTimeline_Segment1.calculateSegmentNumber(900000L);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineExclusions(0L, 86400000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 27, 27);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addException((long) 27);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(60000L, 1783L);
      segmentedTimeline_SegmentRange0.dec();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1L, (-1009), 5058);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-2613L), 0L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.copy();
      segmentedTimeline_Segment0.inExcludeSegments();
      MockDate mockDate0 = new MockDate();
      mockDate0.clone();
      segmentedTimeline0.getTime(mockDate0);
      SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline_BaseTimelineSegmentRange0.intersect(1L, 72L);
      segmentedTimeline0.getGroupSegmentCount();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(86400000L);
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline_Segment0.inc(900000L);
      segmentedTimeline0.getGroupSegmentCount();
      Date date0 = segmentedTimeline0.getDate((-737L));
      segmentedTimeline0.containsDomainRange(date0, date0);
      segmentedTimeline_Segment0.moveIndexToStart();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(2488L, 0L);
      segmentedTimeline_SegmentRange0.inExceptionSegments();
      segmentedTimeline_SegmentRange0.inExceptionSegments();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 0L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.containsDomainValue(date0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange1 = segmentedTimeline0.new BaseTimelineSegmentRange(0L, 0L);
      segmentedTimeline_BaseTimelineSegmentRange1.moveIndexToEnd();
      segmentedTimeline_BaseTimelineSegmentRange1.getMillisecond();
      segmentedTimeline_BaseTimelineSegmentRange1.equals(segmentedTimeline0);
      segmentedTimeline0.getSegmentsIncludedSize();
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      segmentedTimeline_BaseTimelineSegmentRange1.getMillisecond();
      segmentedTimeline1.addException(899999L, 1650L);
      segmentedTimeline_BaseTimelineSegmentRange1.contained(900000L, (-1927L));
      segmentedTimeline_BaseTimelineSegmentRange0.inExceptionSegments();
      // Undeclared exception!
      try { 
        segmentedTimeline1.addExceptions((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 1171L;
      int int0 = 0;
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1171L, 452, 0);
      segmentedTimeline0.containsDomainValue(1171L);
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      segmentedTimeline1.setExceptionSegments(linkedList0);
      segmentedTimeline0.containsDomainValue(1171L);
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      Date.from(instant0);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineException((Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-74L), 0, 0);
      segmentedTimeline0.clone();
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(0, (-2208988800000L));
      segmentedTimeline_SegmentRange0.moveIndexToEnd();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-1431L), (-2648), (-1));
      MockDate mockDate0 = new MockDate(0, (-1), 0);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment((Date) mockDate0);
      Object object0 = segmentedTimeline0.clone();
      segmentedTimeline_Segment0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment(1L);
      SegmentedTimeline.FIRST_MONDAY_AFTER_1900 = (-1320L);
      SegmentedTimeline.NO_DST_TIME_ZONE = segmentedTimeline0.NO_DST_TIME_ZONE;
      segmentedTimeline_Segment0.segmentNumber = 2346L;
      segmentedTimeline_Segment0.getSegmentStart();
      SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline1.new BaseTimelineSegmentRange(4663L, 0L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.getTime(date0);
      segmentedTimeline_Segment0.contained(900000L, 900000L);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(0L, 86400000L);
      segmentedTimeline_SegmentRange0.getDate();
      // Undeclared exception!
      try { 
        segmentedTimeline_SegmentRange0.inc(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.getSegment((-711L));
      LinkedList<SegmentedTimeline> linkedList0 = new LinkedList<SegmentedTimeline>();
      segmentedTimeline0.addExceptions(linkedList0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-2208988800000L), 235L);
      Date date0 = segmentedTimeline_BaseTimelineSegmentRange0.getDate();
      segmentedTimeline0.addBaseTimelineException(date0);
      segmentedTimeline0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      MockDate mockDate0 = new MockDate((-1556), (-1556), (-3708), (-1556), (-1556));
      segmentedTimeline1.containsDomainValue((Date) mockDate0);
      segmentedTimeline1.clone();
      segmentedTimeline1.clone();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.getTimeFromLong((-3689L));
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(86400000L, 0L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.copy();
      segmentedTimeline_BaseTimelineSegmentRange0.contains(segmentedTimeline_Segment0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.DEFAULT_TIME_ZONE = segmentedTimeline0.NO_DST_TIME_ZONE;
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(334L, 1949L);
      segmentedTimeline0.getExceptionSegmentCount(1235L, 334L);
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
      segmentedTimeline_BaseTimelineSegmentRange0.inExcludeSegments();
      segmentedTimeline_BaseTimelineSegmentRange0.inIncludeSegments();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline((-3771L), 669, 270);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange(3600000L, 270);
      segmentedTimeline_SegmentRange0.getDate();
      segmentedTimeline_SegmentRange0.inIncludeSegments();
      segmentedTimeline_SegmentRange0.getSegmentCount();
      segmentedTimeline_SegmentRange0.intersect(3600000L, 86400000L);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(1L, 1L);
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline_BaseTimelineSegmentRange0.intersect(0L, 900000L);
      SegmentedTimeline.Segment segmentedTimeline_Segment1 = segmentedTimeline_Segment0.intersect((-1429L), 859L);
      segmentedTimeline_Segment1.getMillisecond();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 1, 1);
      segmentedTimeline0.getGroupSegmentCount();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(165L, 0, 6478);
      segmentedTimeline0.containsDomainValue((-146L));
      segmentedTimeline0.clone();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.toMillisecond((-191L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      segmentedTimeline0.setExceptionSegments(linkedList0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.getSegmentsExcluded();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment();
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline_Segment0.inc(60000L);
      segmentedTimeline_Segment0.inc(900000L);
      segmentedTimeline0.equals(segmentedTimeline_Segment0);
      segmentedTimeline0.containsDomainValue(95L);
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline0.new SegmentRange((-62100000L), 95L);
      segmentedTimeline_SegmentRange0.moveIndexToStart();
      segmentedTimeline_SegmentRange0.copy();
      segmentedTimeline_SegmentRange0.segmentEnd = (-66600000L);
      segmentedTimeline_SegmentRange0.segmentNumber = 83L;
      segmentedTimeline0.addBaseTimelineException((long) 68);
      segmentedTimeline0.getExceptionSegmentCount((-3289L), (-569L));
      segmentedTimeline_SegmentRange0.dec(86400000L);
      segmentedTimeline0.addBaseTimelineException((long) 68);
      long long0 = 983L;
      // Undeclared exception!
      try { 
        segmentedTimeline_SegmentRange0.inc(95L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      long long0 = 1159L;
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      segmentedTimeline0.getDate(75L);
      segmentedTimeline0.getDate(746L);
      segmentedTimeline0.getDate(1159L);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineException((Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.addException(535L);
      segmentedTimeline0.toMillisecond(535L);
      segmentedTimeline0.clone();
      Object object0 = segmentedTimeline0.clone();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.setBaseTimeline(segmentedTimeline1);
      segmentedTimeline0.addException((-1L), 3560L);
      segmentedTimeline0.equals(object0);
      segmentedTimeline0.setBaseTimeline((SegmentedTimeline) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SegmentedTimeline segmentedTimeline2 = new SegmentedTimeline((-1471L), (-41), (-41));
      linkedList1.stream();
      linkedList1.addLast(segmentedTimeline2);
      linkedList0.retainAll(linkedList1);
      segmentedTimeline0.setExceptionSegments(linkedList0);
      segmentedTimeline0.getSegment((-1L));
      segmentedTimeline1.addExceptions(linkedList0);
      segmentedTimeline0.setBaseTimeline((SegmentedTimeline) null);
      segmentedTimeline0.getGroupSegmentCount();
      System.setCurrentTimeMillis(0L);
      segmentedTimeline1.setBaseTimeline(segmentedTimeline0);
      segmentedTimeline0.getSegmentsIncludedSize();
      segmentedTimeline0.toTimelineValue((long) 96);
      segmentedTimeline0.getExceptionSegments();
      segmentedTimeline0.toTimelineValue((-383L));
      segmentedTimeline1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.clone();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.getSegment(1969L);
      segmentedTimeline_Segment0.equals(segmentedTimeline0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline.newFifteenMinuteTimeline();
      Date date0 = segmentedTimeline1.getDate(223L);
      segmentedTimeline1.clone();
      segmentedTimeline1.getTime(date0);
      segmentedTimeline1.getTimeFromLong(60L);
      segmentedTimeline0.hashCode();
      SegmentedTimeline segmentedTimeline2 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline2.equals(segmentedTimeline0);
      segmentedTimeline2.getSegment(3600000L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      segmentedTimeline0.getExceptionSegmentCount(60000L, (-2775L));
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline1.getSegment((-838L));
      segmentedTimeline_Segment0.inIncludeSegments();
      segmentedTimeline_Segment0.segmentNumber = 60000L;
      segmentedTimeline1.equals((Object) null);
      segmentedTimeline_Segment0.inExceptionSegments();
      segmentedTimeline_Segment0.inExceptionSegments();
      Date date0 = segmentedTimeline0.getDate(60000L);
      segmentedTimeline0.getExceptionSegments();
      SegmentedTimeline.NO_DST_TIME_ZONE = segmentedTimeline1.DEFAULT_TIME_ZONE;
      SegmentedTimeline.SegmentRange segmentedTimeline_SegmentRange0 = segmentedTimeline1.new SegmentRange(0L, 0L);
      Date date1 = segmentedTimeline_SegmentRange0.getDate();
      segmentedTimeline_SegmentRange0.inExceptionSegments();
      segmentedTimeline_Segment0.before(segmentedTimeline_SegmentRange0);
      segmentedTimeline1.setStartTime(60000L);
      segmentedTimeline_Segment0.dec(3600000L);
      segmentedTimeline0.getSegmentsGroupSize();
      segmentedTimeline0.containsDomainRange(date1, date0);
      segmentedTimeline1.getTimeFromLong(0L);
      segmentedTimeline_SegmentRange0.before(segmentedTimeline_Segment0);
      // Undeclared exception!
      try { 
        segmentedTimeline_SegmentRange0.inc(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      long long0 = (-992L);
      int int0 = (-1892);
      int int1 = 0;
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange((-888L), 2491L);
      // Undeclared exception!
      try { 
        segmentedTimeline_BaseTimelineSegmentRange0.inc();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not implemented in SegmentRange
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline$SegmentRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1408;
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(1708L, 1408, 3081);
      // Undeclared exception!
      try { 
        segmentedTimeline0.containsDomainValue((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.toMillisecond(0L);
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineExclusions((-2352L), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate0 = new MockDate((-196), 0, 0, 1156, 0, 0);
      segmentedTimeline0.addBaseTimelineException((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      MockDate mockDate0 = new MockDate(4895L);
      segmentedTimeline0.addException((Date) mockDate0);
      SegmentedTimeline.BaseTimelineSegmentRange segmentedTimeline_BaseTimelineSegmentRange0 = segmentedTimeline0.new BaseTimelineSegmentRange(900000L, 60000L);
      segmentedTimeline_BaseTimelineSegmentRange0.getSegmentCount();
      segmentedTimeline_BaseTimelineSegmentRange0.moveIndexToStart();
      assertEquals(2454397L, segmentedTimeline_BaseTimelineSegmentRange0.getSegmentNumber());
      assertEquals(899999L, segmentedTimeline_BaseTimelineSegmentRange0.getSegmentEnd());
      assertEquals(900000L, segmentedTimeline_BaseTimelineSegmentRange0.getMillisecond());
      
      MockDate mockDate1 = new MockDate(86400000L);
      mockDate0.before(mockDate1);
      segmentedTimeline0.addBaseTimelineExclusions(4895L, 4895L);
      long long0 = segmentedTimeline0.toTimelineValue(0L);
      assertEquals(644288400000L, long0);
      
      segmentedTimeline0.addBaseTimelineException((Date) mockDate0);
      long long1 = segmentedTimeline0.getStartTime();
      assertEquals(96, segmentedTimeline0.getGroupSegmentCount());
      assertEquals((-2208956400000L), long1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      segmentedTimeline0.getStartTime();
      SegmentedTimeline.Segment segmentedTimeline_Segment0 = segmentedTimeline0.new Segment((-1L));
      segmentedTimeline_Segment0.moveIndexToStart();
      // Undeclared exception!
      try { 
        segmentedTimeline0.addBaseTimelineException((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }
}
