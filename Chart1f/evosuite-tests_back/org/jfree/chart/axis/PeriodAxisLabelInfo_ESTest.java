/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:20:44 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.geom.AffineTransform;
import java.io.PushbackInputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.DebugGraphics;
import javax.swing.DropMode;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.jfree.data.time.Day;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodAxisLabelInfo_ESTest extends PeriodAxisLabelInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, (-14.606950037614444), (-14.606950037614444), 32.9763898091177);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      Paint paint0 = periodAxisLabelInfo0.getDividerPaint();
      assertSame(paint0, color0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, 1.0, 1.0, 32.9763898091177);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      BasicStroke basicStroke1 = (BasicStroke)periodAxisLabelInfo0.getDividerStroke();
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(0, 0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Font font0 = Font.decode("");
      Color color0 = DebugGraphics.flashColor();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, true, basicStroke0, color0);
      Color color1 = (Color)periodAxisLabelInfo0.getLabelPaint();
      assertEquals(255, color1.getRed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Class class1 = periodAxisLabelInfo0.getPeriodClass();
      assertEquals(1537, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<DropMode> class0 = DropMode.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Class class1 = periodAxisLabelInfo0.getPeriodClass();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, 0, 0, 32.9763898091177);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      RectangleInsets rectangleInsets1 = periodAxisLabelInfo0.getPadding();
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, (-14.606950037614444), (-14.606950037614444), 32.9763898091177);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      RectangleInsets rectangleInsets1 = periodAxisLabelInfo0.getPadding();
      assertEquals(32.9763898091177, rectangleInsets1.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(0, 0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1287.11);
      Font font1 = font0.deriveFont(0, affineTransform0);
      Color color0 = DebugGraphics.flashColor();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font1, color0, true, basicStroke0, color0);
      Font font2 = periodAxisLabelInfo0.getLabelFont();
      assertTrue(font2.isTransformed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(0, 0);
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Font font0 = Font.decode("");
      Font font1 = font0.deriveFont((float) 0);
      Color color0 = DebugGraphics.flashColor();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font1, color0, true, basicStroke0, color0);
      Font font2 = periodAxisLabelInfo0.getLabelFont();
      assertEquals("", font2.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<PeriodAxisLabelInfo> class0 = PeriodAxisLabelInfo.class;
      Locale locale0 = Locale.US;
      DateFormat dateFormat0 = DateFormat.getTimeInstance(0, locale0);
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      boolean boolean0 = periodAxisLabelInfo0.getDrawDividers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 3064);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      RegularTimePeriod regularTimePeriod0 = periodAxisLabelInfo0.createInstance(mockDate0, timeZone0, locale0);
      assertEquals((-6596076057615861152L), regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Color color0 = Color.MAGENTA;
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, (DateFormat) null, rectangleInsets0, (Font) null, color0, false, basicStroke0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormat' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, 1.0, 1.0, 32.9763898091177);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      PeriodAxisLabelInfo periodAxisLabelInfo1 = new PeriodAxisLabelInfo(class0, dateFormat0, periodAxisLabelInfo0.DEFAULT_INSETS, periodAxisLabelInfo0.DEFAULT_FONT, periodAxisLabelInfo0.DEFAULT_LABEL_PAINT, true, basicStroke0, color0);
      boolean boolean0 = periodAxisLabelInfo0.equals(periodAxisLabelInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, 1.0, 1.0, 32.9763898091177);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      boolean boolean0 = periodAxisLabelInfo0.equals(mockSimpleDateFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Millisecond> class0 = Millisecond.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      MockDate mockDate0 = new MockDate(1425, (-24), (-2930), (-24), 0, (-24));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(198, "Xy&!L");
      Locale locale0 = Locale.JAPANESE;
      periodAxisLabelInfo0.createInstance(mockDate0, simpleTimeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = periodAxisLabelInfo0.createInstance(mockDate0, simpleTimeZone0, locale0);
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Day> class0 = Day.class;
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = DateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1.7976931348623157E308), 0, (-1.7976931348623157E308), 0.0);
      Font font0 = PeriodAxisLabelInfo.DEFAULT_FONT;
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, (Paint) null, true, basicStroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelPaint' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Second> class0 = Second.class;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      RectangleInsets rectangleInsets0 = new RectangleInsets(1126.789801088718, 0.0, 0.0, 1772.775);
      SystemColor systemColor0 = SystemColor.textInactiveText;
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, (Font) null, systemColor0, false, basicStroke0, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelFont' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Locale locale0 = Locale.CHINA;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("Argument 'd' outside valid range.", 0, 0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, (RectangleInsets) null, font0, systemColor0, true, basicStroke0, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dateFormat' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = null;
      try {
        periodAxisLabelInfo0 = new PeriodAxisLabelInfo((Class) null, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'periodClass' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxisLabelInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      RectangleInsets rectangleInsets0 = periodAxisLabelInfo0.getPadding();
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0, 1.0, 1.0, 32.9763898091177);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getParagraphAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      Color color0 = new Color(0);
      BasicStroke basicStroke0 = new BasicStroke();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0, rectangleInsets0, font0, color0, false, basicStroke0, color0);
      boolean boolean0 = periodAxisLabelInfo0.getDrawDividers();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<PeriodAxisLabelInfo> class0 = PeriodAxisLabelInfo.class;
      DateFormat dateFormat0 = DateFormat.getInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      Object object0 = periodAxisLabelInfo0.clone();
      assertNotSame(periodAxisLabelInfo0, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<PeriodAxisLabelInfo> class0 = PeriodAxisLabelInfo.class;
      DateFormat dateFormat0 = DateFormat.getInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      periodAxisLabelInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Millisecond> class0 = Millisecond.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      PeriodAxisLabelInfo periodAxisLabelInfo0 = new PeriodAxisLabelInfo(class0, dateFormat0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)periodAxisLabelInfo0.getDateFormat();
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
  }
}
