/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:29:58 GMT 2022
 */

package org.jfree.chart.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotChangeEvent_ESTest extends PlotChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Byte byte0 = new Byte((byte)102);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) byte0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      RingPlot ringPlot0 = new RingPlot(jDBCPieDataset0);
      thermometerPlot0.setParent(ringPlot0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(thermometerPlot0);
      ThermometerPlot thermometerPlot1 = (ThermometerPlot)plotChangeEvent0.getPlot();
      assertTrue(thermometerPlot1.getUseSubrangePaint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(thermometerPlot0);
      thermometerPlot0.setOutlineVisible(false);
      ThermometerPlot thermometerPlot1 = (ThermometerPlot)plotChangeEvent0.getPlot();
      assertEquals(2, thermometerPlot1.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setNotify(false);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(meterPlot0);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertFalse(plot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setForegroundAlpha(0.0F);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(piePlot0);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertEquals(1.0F, plot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      waferMapPlot0.setForegroundAlpha((-545.1141F));
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(waferMapPlot0);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertTrue(plot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(meterPlot0);
      meterPlot0.setBackgroundImageAlpha(0.0F);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      multiplePiePlot0.setBackgroundImageAlignment(0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(multiplePiePlot0);
      multiplePiePlot0.setBackgroundImageAlignment((-883));
      Plot plot0 = plotChangeEvent0.getPlot();
      assertEquals(1.0F, plot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot((PieDataset) null);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(piePlot0);
      piePlot0.setBackgroundAlpha(0.0F);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      waferMapPlot0.setBackgroundAlpha((-553.4308F));
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(waferMapPlot0);
      Plot plot0 = plotChangeEvent0.getPlot();
      assertSame(waferMapPlot0, plot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlotChangeEvent plotChangeEvent0 = null;
      try {
        plotChangeEvent0 = new PlotChangeEvent((Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
