/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:25:55 GMT 2022
 */

package org.jfree.chart.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisChangeEvent_ESTest extends AxisChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("org.jfree.chart.ui.Licences");
      categoryAxis0.setVisible(false);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertEquals(0.0F, axis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.AxisChangeEvent");
      numberAxis3D0.setTickMarksVisible(false);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)axisChangeEvent0.getAxis();
      assertFalse(numberAxis3D1.isNegativeArrowVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setTickLabelsVisible(false);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logarithmicAxis0);
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)axisChangeEvent0.getAxis();
      assertFalse(logarithmicAxis1.getAllowNegativesFlag());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis(";d2mqH=ts$=p");
      periodAxis0.setMinorTickMarksVisible(true);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(periodAxis0);
      PeriodAxis periodAxis1 = (PeriodAxis)axisChangeEvent0.getAxis();
      assertEquals(0.05, periodAxis1.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(bigInteger0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(valueAxis0);
      NumberAxis numberAxis0 = (NumberAxis)axisChangeEvent0.getAxis();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(573.909111276, ")vCev;~y");
      cyclicNumberAxis0.setTickMarkOutsideLength(0.0F);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)axisChangeEvent0.getAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis(")^W6h?nG~xP");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      logAxis0.setTickMarkOutsideLength((-135.65247F));
      LogAxis logAxis1 = (LogAxis)axisChangeEvent0.getAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis(")^W6h?nG~xP");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      logAxis0.setTickMarkInsideLength(171.0F);
      LogAxis logAxis1 = (LogAxis)axisChangeEvent0.getAxis();
      assertTrue(logAxis1.isAutoTickUnitSelection());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(",jA}|z8S_V7VJh");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      numberAxis3D0.setTickMarkInsideLength((-1630L));
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)axisChangeEvent0.getAxis();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(",jA}|z8S_V7VJh");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      numberAxis3D0.setMinorTickMarkOutsideLength(0.0F);
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)axisChangeEvent0.getAxis();
      assertEquals(1.0E-8, numberAxis3D1.getAutoRangeMinimumSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1899.3739664, (-213.922018711), "AxisLocation.BOTTOM_OR_RIGHT");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      cyclicNumberAxis0.setMinorTickMarkOutsideLength((-609.58F));
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)axisChangeEvent0.getAxis();
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(",jA}|z8S_V7VJh");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      numberAxis3D0.setMinorTickMarkInsideLength(683.3101F);
      Axis axis0 = axisChangeEvent0.getAxis();
      assertSame(axis0, numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("p@L.{Oc<xcGL{ynLY", timeZone0);
      dateAxis0.setMinorTickMarkInsideLength((-1.0F));
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      DateAxis dateAxis1 = (DateAxis)axisChangeEvent0.getAxis();
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      categoryAxis3D0.setLabelAngle(712.1285952153);
      CategoryAxis3D categoryAxis3D1 = (CategoryAxis3D)axisChangeEvent0.getAxis();
      assertEquals(0.05, categoryAxis3D1.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.plot.PlotRenderingInfo");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis0);
      numberAxis0.setLabelAngle((-1.0));
      NumberAxis numberAxis1 = (NumberAxis)axisChangeEvent0.getAxis();
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      numberAxis3D0.setFixedDimension(1322.964532);
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)axisChangeEvent0.getAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      subCategoryAxis0.setFixedDimension(Double.NEGATIVE_INFINITY);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(subCategoryAxis0);
      SubCategoryAxis subCategoryAxis1 = (SubCategoryAxis)axisChangeEvent0.getAxis();
      assertEquals(0.0F, subCategoryAxis1.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisChangeEvent axisChangeEvent0 = null;
      try {
        axisChangeEvent0 = new AxisChangeEvent((Axis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
