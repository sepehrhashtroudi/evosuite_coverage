/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:32:56 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardGradientPaintTransformer_ESTest extends StandardGradientPaintTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) null);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1);
      // Undeclared exception!
      try { 
        standardGradientPaintTransformer0.transform((GradientPaint) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.StandardGradientPaintTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      standardGradientPaintTransformer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      StandardGradientPaintTransformer standardGradientPaintTransformer1 = new StandardGradientPaintTransformer();
      boolean boolean0 = standardGradientPaintTransformer0.equals(standardGradientPaintTransformer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = standardGradientPaintTransformer0.equals(standardGradientPaintTransformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = standardGradientPaintTransformer0.equals(gradientPaintTransformType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      JList<Integer> jList0 = new JList<Integer>();
      Color color0 = jList0.getSelectionForeground();
      GradientPaint gradientPaint0 = new GradientPaint('H', (-235.2191F), color0, 'H', 0.0F, color0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle2D_Double0);
      assertTrue(gradientPaint1.isCyclic());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Color color0 = Color.YELLOW;
      GradientPaint gradientPaint0 = new GradientPaint((-2191.76F), (-2191.76F), color0, (-2191.76F), (-2191.76F), color0, true);
      Rectangle rectangle0 = new Rectangle(999, 999);
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle0);
      assertTrue(gradientPaint1.isCyclic());
      assertNotSame(gradientPaint1, gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[][] objectArray0 = new Object[8][0];
      Object[] objectArray1 = new Object[0];
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      Color color0 = jTable0.getGridColor();
      GradientPaint gradientPaint0 = new GradientPaint(1.0F, 1.0F, color0, 1459.433F, (-366.0F), color0, false);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-366.0F), 1339.6302F, 1459.433F, 1339.6302F);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      GradientPaint gradientPaint1 = standardGradientPaintTransformer0.transform(gradientPaint0, rectangle2D_Float0);
      assertNotSame(gradientPaint1, gradientPaint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = null;
      try {
        standardGradientPaintTransformer0 = new StandardGradientPaintTransformer((GradientPaintTransformType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'type' argument.
         //
         verifyException("org.jfree.chart.util.StandardGradientPaintTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      Object object0 = standardGradientPaintTransformer0.clone();
      boolean boolean0 = standardGradientPaintTransformer0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      GradientPaintTransformType gradientPaintTransformType1 = standardGradientPaintTransformer0.getType();
      assertSame(gradientPaintTransformType0, gradientPaintTransformType1);
  }
}
