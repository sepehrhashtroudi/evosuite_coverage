/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:58:05 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.geom.Point2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotOrientation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CrosshairState_ESTest extends CrosshairState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setAnchorY(1.0);
      crosshairState0.updateCrosshairY(1042.460470734508, 0);
      assertEquals(1.0, crosshairState0.getAnchorY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setAnchorX((-1389.97983));
      crosshairState0.updateCrosshairX((double) 0, 0);
      assertEquals((-1389.97983), crosshairState0.getAnchorX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairDistance(1.3998235417085804E7);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      crosshairState0.setAnchor(point2D_Double0);
      crosshairState0.updateCrosshairPoint((-804.92), 68.5036207824, 0, 6, 1.0, 1.0, (PlotOrientation) null);
      assertEquals((-804.92), crosshairState0.getCrosshairX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Point2D.Float point2D_Float0 = new Point2D.Float((-212), (-391.62F));
      crosshairState0.setAnchor(point2D_Float0);
      crosshairState0.updateCrosshairPoint((double) (-212.0F), (-2806.037973381243), 0.0, 2693.091, plotOrientation0);
      assertEquals(0.0, crosshairState0.getCrosshairDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      crosshairState0.setAnchor(point2D_Float0);
      crosshairState0.setAnchorY(1.0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      crosshairState0.updateCrosshairPoint((-1.0), 1.0, 0, 0, 0.0, 0.0, plotOrientation0);
      assertEquals(1.0, crosshairState0.getAnchorY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      crosshairState0.setAnchor(point2D_Float0);
      crosshairState0.setAnchorX(1743.48155);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      crosshairState0.updateCrosshairPoint((-1.0), 1.0, 0, 0, 0.0, 0.0, plotOrientation0);
      assertEquals(1743.48155, crosshairState0.getAnchorX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      crosshairState0.updateCrosshairPoint(1.0, 1.0, (-1.0), 3868.1258348197, plotOrientation0);
      assertEquals(0.0, crosshairState0.getCrosshairY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairDistance(597.11393673308);
      crosshairState0.updateCrosshairY((-1.0), 1238);
      int int0 = crosshairState0.getRangeAxisIndex();
      assertEquals((-1.0), crosshairState0.getCrosshairY(), 0.01);
      assertEquals(1238, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setCrosshairDistance(694.257952759127);
      crosshairState0.updateCrosshairX(1.0, 3590);
      int int0 = crosshairState0.getDomainAxisIndex();
      assertEquals(1.0, crosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(3590, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setDatasetIndex(1536);
      int int0 = crosshairState0.getDatasetIndex();
      assertEquals(1536, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setDatasetIndex((-1754));
      int int0 = crosshairState0.getDatasetIndex();
      assertEquals((-1754), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setCrosshairY(1.0);
      double double0 = crosshairState0.getCrosshairY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.setCrosshairY((-509.13));
      double double0 = crosshairState0.getCrosshairY();
      assertEquals((-509.13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(false);
      crosshairState0.setCrosshairX(5922.0);
      double double0 = crosshairState0.getCrosshairX();
      assertEquals(5922.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setCrosshairX((-1496.3874728));
      double double0 = crosshairState0.getCrosshairX();
      assertEquals((-1496.3874728), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setCrosshairDistance(694.257952759127);
      double double0 = crosshairState0.getCrosshairDistance();
      assertEquals(694.257952759127, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairDistance((-2585.76208424947));
      double double0 = crosshairState0.getCrosshairDistance();
      assertEquals((-2585.76208424947), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setAnchorY(1.0);
      double double0 = crosshairState0.getAnchorY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchorY((-162.95655522718));
      double double0 = crosshairState0.getAnchorY();
      assertEquals((-162.95655522718), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchorX(3004.33438244417);
      double double0 = crosshairState0.getAnchorX();
      assertEquals(3004.33438244417, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setAnchorX((-1795.0));
      double double0 = crosshairState0.getAnchorX();
      assertEquals((-1795.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.updateCrosshairY(0.0, 3590);
      assertEquals(0, crosshairState0.getRangeAxisIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.updateCrosshairX(0.0, 1258);
      assertEquals(0, crosshairState0.getDomainAxisIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      crosshairState0.updateCrosshairPoint((double) (-1560), (double) 0, (-4491), (-1560), (double) (-4491), (double) (-4491), plotOrientation0);
      assertEquals(0, crosshairState0.getDomainAxisIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.setCrosshairDistance(401.8000506);
      crosshairState0.updateCrosshairY((-60.662282484), (-1170));
      int int0 = crosshairState0.getRangeAxisIndex();
      assertEquals((-60.662282484), crosshairState0.getCrosshairY(), 0.01);
      assertEquals((-1170), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.setCrosshairDistance(1577.70908178442);
      crosshairState0.updateCrosshairX((-1469.8262028884), (-1560));
      int int0 = crosshairState0.getDomainAxisIndex();
      assertEquals(1469.8262028884, crosshairState0.getCrosshairDistance(), 0.01);
      assertEquals((-1560), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Point2D.Float point2D_Float0 = new Point2D.Float();
      crosshairState0.setAnchor(point2D_Float0);
      crosshairState0.updateCrosshairPoint((-903.0), (-903.0), 0, 0, (double) 0, (double) 0, plotOrientation0);
      assertEquals(0.0, crosshairState0.getCrosshairY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      double double0 = crosshairState0.getCrosshairDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      Point2D point2D0 = crosshairState0.getAnchor();
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getAnchorX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      int int0 = crosshairState0.getDomainAxisIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getAnchorY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      int int0 = crosshairState0.getRangeAxisIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      crosshairState0.updateCrosshairY((double) 0);
      assertEquals(0, crosshairState0.getDomainAxisIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getCrosshairX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      double double0 = crosshairState0.getCrosshairY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState(true);
      int int0 = crosshairState0.getDatasetIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.updateCrosshairX(0.0);
      assertEquals(0, crosshairState0.getDatasetIndex());
  }
}
