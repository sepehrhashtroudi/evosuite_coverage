/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:17:30 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeterInterval_ESTest extends MeterInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      Range range1 = Range.scale(range0, 3643.0);
      Range range2 = Range.expand(range1, 3643.0, 3643.0);
      Range range3 = Range.combine(range2, range0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = new MeterInterval("17]=M+cUV>aQ.tlR`", range3, systemColor0, basicStroke0, systemColor0);
      Range range4 = meterInterval0.getRange();
      assertSame(range4, range3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      MeterInterval meterInterval0 = new MeterInterval(",", range0);
      Range range1 = meterInterval0.getRange();
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2994.48661552819));
      MeterInterval meterInterval0 = new MeterInterval("Null 'range' argument.", range0);
      Range range1 = meterInterval0.getRange();
      assertEquals((-2994.48661552819), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      Color color0 = Color.GRAY;
      MeterInterval meterInterval0 = new MeterInterval("P-", range0, color0, (Stroke) null, color0);
      Stroke stroke0 = meterInterval0.getOutlineStroke();
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      MeterInterval meterInterval0 = new MeterInterval("", range0, (Paint) null, (Stroke) null, (Paint) null);
      Paint paint0 = meterInterval0.getOutlinePaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      MeterInterval meterInterval0 = new MeterInterval("", range0, (Paint) null, (Stroke) null, (Paint) null);
      String string0 = meterInterval0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = new MeterInterval("17]=M+cUV>aQ.tlR`", range0, systemColor0, basicStroke0, systemColor0);
      SystemColor systemColor1 = (SystemColor)meterInterval0.getBackgroundPaint();
      assertEquals((-4144960), systemColor1.getRGB());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval("yje*", (Range) null, (Paint) null, (Stroke) null, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.plot.MeterInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = new MeterInterval("17]=M+cUV>aQ.tlR`", range0, systemColor0, basicStroke0, systemColor0);
      MeterInterval meterInterval1 = new MeterInterval("17]=M+cUV>aQ.tlR`", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      Range range1 = Range.scale(range0, 3643.0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = new MeterInterval("17]=M+cUV>aQ.tlR`", range0, systemColor0, basicStroke0, systemColor0);
      MeterInterval meterInterval1 = new MeterInterval("17]=M+cUV>aQ.tlR`", range1);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = new MeterInterval("17]=M+cUV>aQ.tlR`", range0, systemColor0, basicStroke0, systemColor0);
      MeterInterval meterInterval1 = new MeterInterval("Range[1.3271449E7,1.3271449E7]", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      MeterInterval meterInterval1 = new MeterInterval("Range[3643.0,3643.0]", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      boolean boolean0 = meterInterval0.equals(meterInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      boolean boolean0 = meterInterval0.equals(systemColor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval(";l!&uW>pNC7E\\(x[", (Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.plot.MeterInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      Color color0 = Color.RED;
      BasicStroke basicStroke0 = new BasicStroke();
      MeterInterval meterInterval0 = null;
      try {
        meterInterval0 = new MeterInterval((String) null, range0, color0, basicStroke0, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'label' argument.
         //
         verifyException("org.jfree.chart.plot.MeterInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      BasicStroke basicStroke0 = (BasicStroke)meterInterval0.getOutlineStroke();
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      String string0 = meterInterval0.getLabel();
      assertEquals("Range[3643.0,3643.0]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      Color color0 = (Color)meterInterval0.getOutlinePaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(3643.0, 3643.0);
      MeterInterval meterInterval0 = new MeterInterval("Range[3643.0,3643.0]", range0);
      Paint paint0 = meterInterval0.getBackgroundPaint();
      assertNull(paint0);
  }
}
