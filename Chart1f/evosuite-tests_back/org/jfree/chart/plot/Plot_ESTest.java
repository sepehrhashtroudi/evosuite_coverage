/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:20:44 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AnnotationChangeEvent;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Plot_ESTest extends Plot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      
      piePlot0.setBackgroundAlpha(2.0F);
      assertEquals(2.0F, piePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 10, 10);
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      multiplePiePlot0.setDatasetGroup(datasetGroup0);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      piePlot3D0.fireChangeEvent();
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("yyyy");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent(polarPlot0);
      JFreeChart jFreeChart0 = new JFreeChart("T^Z!f|Kc[:M&&", polarPlot0);
      polarPlot0.notifyListeners(plotChangeEvent0);
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      thermometerPlot0.addChangeListener(jFreeChart0);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      thermometerPlot0.setBackgroundPaint(color0);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      ringPlot0.setInsets(rectangleInsets0, false);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.setInsets(ringPlot0.DEFAULT_INSETS, false);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertTrue(ringPlot0.isNotify());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(234);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleEdge rectangleEdge0 = categoryPlot0.getRangeAxisEdge();
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("resolveDomainAxisLocation()", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(500);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(1073741824);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-715827882));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(xYPlot1, xYPlot0);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1032, 0, 2);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, (WaferMapRenderer) null);
      waferMapPlot0.setDataset(waferMapDataset0);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("H");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(0);
      double double0 = piePlot3D0.getRectY(0.4, (-5790.258922), 0.25, rectangleEdge0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.65, double0, 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      piePlot0.createAndAddEntity(rectangle2D_Double0, plotRenderingInfo0, "resolveRangeAxisLocation()", "9I//NScg%;qZ(");
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Rectangle rectangle0 = new Rectangle();
      meterPlot0.createAndAddEntity(rectangle0, (PlotRenderingInfo) null, "JsiJY!ecA4]B", "Null 'paint' argument.");
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      fastScatterPlot0.removeChangeListener(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setNotify(true);
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      
      piePlot3D0.setForegroundAlpha(1.0F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertTrue(piePlot3D0.isNotify());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PiePlot piePlot0 = new PiePlot();
      piePlot0.setOutlinePaint(combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertTrue(piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      
      fastScatterPlot0.setBackgroundImageAlpha(1.0F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DrawingSupplier drawingSupplier0 = thermometerPlot0.getDrawingSupplier();
      thermometerPlot0.setDrawingSupplier(drawingSupplier0, true);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      
      meterPlot0.setBackgroundAlpha(0.0F);
      assertEquals(0.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      spiderWebPlot0.setInsets(rectangleInsets0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0, 1);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("resolveDomainAxisLocation()", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      Plot plot0 = combinedDomainXYPlot0.getRootPlot();
      assertEquals(1.0F, plot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, plot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, plot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, plot0.getBackgroundImageAlignment());
      assertTrue(plot0.isNotify());
      assertTrue(plot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Paint paint0 = combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      multiplePiePlot0.setNoDataMessagePaint(paint0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      // Undeclared exception!
      try { 
        multiplePiePlot0.setNoDataMessageFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(yIntervalSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.setNoDataMessageFont(defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultKeyedValuesDataset0);
      piePlot3D0.getDatasetGroup();
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getOutlineStroke();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      meterPlot0.handleClick(106, 106, plotRenderingInfo0);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      float float0 = fastScatterPlot0.getBackgroundAlpha();
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getNoDataMessage();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      thermometerPlot0.setOutlineStroke(basicStroke0);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("#x6sdS9L`#'AB");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      int int0 = combinedRangeCategoryPlot0.getBackgroundImageAlignment();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setParent(piePlot3D0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(26.18539, 0.0, "resolveRangeAxisLocation()");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("resolveRangeAxisLocation()", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 6, 3573.3, (-1015.11), chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      combinedRangeXYPlot0.drawBackgroundImage(graphics2D0, rectangle2D0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZBF");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis3D0);
      meterPlot0.axisChanged(axisChangeEvent0);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 500.0, 10, 10);
      AnnotationChangeEvent annotationChangeEvent0 = new AnnotationChangeEvent(piePlot3D0, xYBoxAnnotation0);
      fastScatterPlot0.annotationChanged(annotationChangeEvent0);
      assertTrue(piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertTrue(piePlot3D0.isNotify());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      ringPlot0.zoom(10);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(ringPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setNoDataMessage("$.d$~hbvWtH+h");
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertTrue(multiplePiePlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(5026.4, (-687.82311121));
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      combinedDomainCategoryPlot0.markerChanged(markerChangeEvent0);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(102, 10);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((-3069), 10);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      float float0 = waferMapPlot0.getForegroundAlpha();
      assertTrue(waferMapPlot0.isOutlineVisible());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(waferMapPlot0.isNotify());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Color color0 = (Color)combinedRangeCategoryPlot0.getOutlinePaint();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-8355712), color0.getRGB());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
  }
}
