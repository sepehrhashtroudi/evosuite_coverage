/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:24:06 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.sql.Connection;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpiderWebPlot_ESTest extends SpiderWebPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle(10, 10, 92, (-587));
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)spiderWebPlot0.calculateLabelLocation(rectangle0, (-587), rectangle2D0, (-2835.6862));
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-46.0), point2D_Double0.x, 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Line2D.Double line2D_Double0 = new Line2D.Double(513.3698, 10, 0.4, 1505.53964378);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)spiderWebPlot0.getWebPoint(rectangle2D0, (-691.221601591208), 1505.53964378);
      assertEquals(338711.23102024954, point2D_Double0.x, 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-541227.1407453893), point2D_Double0.y, 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      
      spiderWebPlot0.setInteriorGap(0.0);
      assertEquals(0.0, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Paint paint0 = categoryAxis0.getLabelPaint();
      spiderWebPlot0.setSeriesPaint(paint0);
      Color color0 = (Color)spiderWebPlot0.getSeriesPaint();
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      spiderWebPlot0.getDataset();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      // Undeclared exception!
      try { 
        spiderWebPlot0.setSeriesOutlineStroke((-128), (Stroke) basicStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.setSeriesOutlinePaint((-2945), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.getWebPoint((Rectangle2D) null, (-78.487), (-204.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.getSeriesPaint((-2002));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.getPlotValue(613566757, 2141528341);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 613566757, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(2000.0, 0.01, (-1.0), 47.2669, (-209.67644082723493), 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        spiderWebPlot0.drawLabel((Graphics2D) null, rectangle2D0, 47.2669, (-2083), (-1.0), 0.01);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.calculateLabelLocation((Rectangle2D) null, 0, (Rectangle2D) null, 0.5235987755982988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Arc2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      spiderWebPlot0.getLegendItemShape();
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0, tableOrder0);
      spiderWebPlot0.getDataset();
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setAxisLinePaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      boolean boolean0 = spiderWebPlot0.equals(spiderWebPlot1);
      assertEquals(0.1, spiderWebPlot1.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot1.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot1.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot1.isWebFilled());
      assertEquals((-1.0), spiderWebPlot1.getMaxValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(90.0, spiderWebPlot1.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setHeadPercent(10.0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      boolean boolean0 = spiderWebPlot0.equals(spiderWebPlot1);
      assertEquals(10.0, spiderWebPlot0.getHeadPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-5052), (-5052));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot(slidingGanttCategoryDataset0);
      boolean boolean0 = spiderWebPlot0.equals(spiderWebPlot1);
      assertEquals(0.1, spiderWebPlot1.getAxisLabelGap(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.25, spiderWebPlot1.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot1.isWebFilled());
      assertEquals(90.0, spiderWebPlot1.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot1.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot1.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      boolean boolean0 = spiderWebPlot0.equals(spiderWebPlot1);
      assertEquals(0.01, spiderWebPlot1.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot1.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot1.getInteriorGap(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1.0), spiderWebPlot1.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot1.isWebFilled());
      assertEquals(90.0, spiderWebPlot1.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      boolean boolean0 = spiderWebPlot0.equals((Object) null);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrameFromCenter((-1.0), (-5638.89937392), 881.618174354, 0.4);
      Point2D.Double point2D_Double0 = (Point2D.Double)spiderWebPlot0.calculateLabelLocation(rectangle2D_Double0, 90.0, rectangle2D_Double0, 0.25);
      assertEquals((-5665.965981969459), point2D_Double0.y, 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(969.8707497116247, point2D_Double0.x, 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.getPlotValue(705, 705);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.getPlotValue((-2524), (-2524));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(15, 10);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        spiderWebPlot0.drawRadarPoly((Graphics2D) null, rectangle2D0, point0, plotRenderingInfo0, (-2623), 0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(",%''", spiderWebPlot0.DEFAULT_LABEL_FONT, spiderWebPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 606, (-1.0), (double) 10, chartRenderingInfo0);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      // Undeclared exception!
      try { 
        spiderWebPlot0.draw((Graphics2D) null, rectangle2D0, (Point2D) null, (PlotState) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      spiderWebPlot0.getLegendItems();
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getLegendItems();
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setLabelGenerator((CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", dateFormat0);
      spiderWebPlot0.setLabelGenerator(intervalCategoryItemLabelGenerator0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getItemPaint(10, 48, false);
      spiderWebPlot0.setLabelPaint(paint0);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      spiderWebPlot0.setLabelFont(spiderWebPlot0.DEFAULT_LABEL_FONT);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setLegendItemShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.1, 0.0, 0.0, (-1.0));
      spiderWebPlot0.setLegendItemShape(rectangle2D_Double0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setBaseSeriesOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      spiderWebPlot0.setBaseSeriesOutlineStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[12];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0, tableOrder0);
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getSeriesOutlineStroke(203);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertNotNull(basicStroke0);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, basicStroke0.getEndCap());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setBaseSeriesOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemFillPaint(10, 87, false);
      spiderWebPlot0.setBaseSeriesOutlinePaint(paint0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-142), (-142));
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      Color color0 = (Color)spiderWebPlot0.getSeriesOutlinePaint((-142));
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(128, color0.getBlue());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertNotNull(color0);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-142), (-142));
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      Color color0 = (Color)spiderWebPlot0.getSeriesPaint((int) (byte)3);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(85, color0.getBlue());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertNotNull(color0);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1797), (-815));
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("&U>nG226[ ?", spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Stroke stroke0 = chartPanel0.getSelectionOutlineStroke();
      spiderWebPlot0.setAxisLineStroke(stroke0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setInteriorGap(0.4);
      assertEquals(0.4, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      // Undeclared exception!
      try { 
        spiderWebPlot0.setInteriorGap(360.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Percentage outside valid range.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      
      spiderWebPlot0.setInteriorGap(0.25);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.setInteriorGap((-1405.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Percentage outside valid range.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.setDirection((Rotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      Rotation rotation0 = Rotation.ANTICLOCKWISE;
      spiderWebPlot0.setDirection(rotation0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        spiderWebPlot0.setDataExtractOrder((TableOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      spiderWebPlot0.setDataExtractOrder(tableOrder0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0);
      spiderWebPlot0.setDataset(jDBCCategoryDataset0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      spiderWebPlot0.setDataset((CategoryDataset) null);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = null;
      try {
        spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0, (TableOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'extract' argument.
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      boolean boolean0 = spiderWebPlot0.isWebFilled();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.setURLGenerator((CategoryURLGenerator) null);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(90.0, "t \"bL}|");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Stroke stroke0 = combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      spiderWebPlot0.setSeriesOutlineStroke(stroke0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-142), (-142));
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      double double0 = spiderWebPlot0.getHeadPercent();
      assertEquals(0.01, double0, 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      spiderWebPlot0.getLabelFont();
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      
      spiderWebPlot0.setAxisLabelGap(0.0);
      assertEquals(0.0, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      double double0 = spiderWebPlot0.getStartAngle();
      assertEquals(90.0, double0, 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getBaseSeriesOutlineStroke();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1, basicStroke0.getLineJoin());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      spiderWebPlot0.setSeriesOutlinePaint(87, defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      Color color0 = (Color)spiderWebPlot0.getLabelPaint();
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0, color0.getGreen());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      spiderWebPlot0.setSeriesOutlineStroke(0, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      assertTrue(spiderWebPlot0.isWebFilled());
      
      spiderWebPlot0.setWebFilled(false);
      assertFalse(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      Color color0 = (Color)spiderWebPlot0.getAxisLinePaint();
      spiderWebPlot0.setBaseSeriesPaint(color0);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-142), (-142));
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      spiderWebPlot0.getURLGenerator();
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      Stroke stroke0 = spiderWebPlot0.getSeriesOutlineStroke();
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      Paint paint0 = spiderWebPlot0.getSeriesOutlinePaint();
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNull(paint0);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      Paint paint0 = spiderWebPlot0.getBaseSeriesPaint();
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(paint0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      Paint paint0 = spiderWebPlot0.getSeriesPaint();
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(paint0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      String string0 = spiderWebPlot0.getPlotType();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals("Spider Web Plot", string0);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      double double0 = spiderWebPlot0.getMaxValue();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Color color0 = (Color)spiderWebPlot0.getBaseSeriesOutlinePaint();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      BasicStroke basicStroke0 = (BasicStroke)spiderWebPlot0.getAxisLineStroke();
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      spiderWebPlot0.getDataExtractOrder();
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getLabelGenerator();
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getDirection();
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getToolTipGenerator();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      spiderWebPlot0.getLegendItems();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      SpiderWebPlot spiderWebPlot1 = (SpiderWebPlot)spiderWebPlot0.clone();
      assertEquals(0.01, spiderWebPlot1.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot1.isWebFilled());
      assertEquals(90.0, spiderWebPlot1.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot1.equals((Object)spiderWebPlot0));
      assertEquals(0.25, spiderWebPlot1.getInteriorGap(), 0.01);
      assertNotSame(spiderWebPlot1, spiderWebPlot0);
      assertEquals(0.1, spiderWebPlot1.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot1.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      
      spiderWebPlot0.setStartAngle(0.0);
      assertEquals(0.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      double double0 = spiderWebPlot0.getInteriorGap();
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.25, double0, 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(taskSeriesCollection0);
      spiderWebPlot0.setMaxValue((-3797.932344725523));
      assertEquals((-3797.932344725523), spiderWebPlot0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("Spider Web Plot", dateFormat0);
      spiderWebPlot0.setToolTipGenerator(intervalCategoryToolTipGenerator0);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
      spiderWebPlot0.setSeriesOutlinePaint(paint0);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Paint paint0 = categoryAxis0.getLabelPaint();
      spiderWebPlot0.setSeriesPaint(paint0);
      Color color0 = (Color)spiderWebPlot0.getSeriesPaint(1408);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      spiderWebPlot0.setSeriesPaint(10, fastScatterPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      double double0 = spiderWebPlot0.getAxisLabelGap();
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.1, double0, 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
  }
}
