/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:04:32 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import javax.swing.JCheckBox;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastScatterPlot_ESTest extends FastScatterPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-3344.1F);
      floatArray0[1] = floatArray1;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4240.231354786), (-2572.0F));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      assertEquals(5.0E-9, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-436.71085F);
      floatArray0[1] = floatArray1;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4240.231354786), (-2572.0F));
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      float[] floatArray1 = new float[5];
      floatArray1[0] = Float.NEGATIVE_INFINITY;
      floatArray0[0] = floatArray1;
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("Y", stringArray0);
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, symbolAxis0, symbolAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemStroke(10, 1717986918, true);
      fastScatterPlot0.setRangeGridlineStroke(stroke0);
      BasicStroke basicStroke0 = (BasicStroke)fastScatterPlot0.getRangeGridlineStroke();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ValueAxis valueAxis0 = fastScatterPlot0.getDomainAxis();
      fastScatterPlot0.setDomainGridlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals("X", valueAxis0.getLabel());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      fastScatterPlot0.setDomainGridlineStroke(basicStroke0);
      Stroke stroke0 = fastScatterPlot0.getDomainGridlineStroke();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertSame(stroke0, basicStroke0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vm+w)OoW");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, logarithmicAxis0, logarithmicAxis0);
      Point point0 = new Point(0, 10);
      Rectangle rectangle0 = new Rectangle(point0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      fastScatterPlot0.drawRangeGridlines((Graphics2D) null, rectangle0, arrayList0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      fastScatterPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D_Double0, linkedList0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, numberAxis0, numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2411, 10, 0, 10, 0, 3926, false, false, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-977.0F), 2256.49F, 392.12F);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D_Float0, rectangleAnchor0);
      fastScatterPlot0.zoomRangeAxes(0.05, (double) 0.9F, plotRenderingInfo0, point2D0);
      assertEquals((-4.5E-9), numberAxis0.getLowerBound(), 0.01);
      assertEquals(3.9999997615814204E-9, numberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      fastScatterPlot0.zoomDomainAxes((-4181.212111394874), plotRenderingInfo0, (Point2D) point2D_Double0, true);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(75.0, (-1.0), ">1/6J");
      fastScatterPlot0.setRangeAxis(cyclicNumberAxis0);
      fastScatterPlot0.getRangeAxis();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-352.199015), (-352.199015), "96f|`>!$l:y{hLRE");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      fastScatterPlot0.getRangeAxis();
      assertEquals(5.0E-9, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[9][1];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E7, 2131.87226, "~g;k@~");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      fastScatterPlot0.getDomainAxis();
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-2.5E7), cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1781.386F;
      floatArray0[0] = floatArray1;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4240.231354786), (-2572.0F));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      fastScatterPlot0.getDataRange(cyclicNumberAxis0);
      assertEquals(1870.4552856445312, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1870.4552856445312, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-3344.1F);
      floatArray0[0] = floatArray1;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4240.231354786), (-2572.0F));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      fastScatterPlot0.getDataRange(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(3511.3051025390623, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[6][1];
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      fastScatterPlot0.getData();
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      float[][] floatArray0 = new float[0][4];
      fastScatterPlot0.setData(floatArray0);
      fastScatterPlot0.getData();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        fastScatterPlot0.zoomRangeAxes((double) 250, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      // Undeclared exception!
      try { 
        fastScatterPlot0.zoomDomainAxes(0.0, (-3892.1484692514928), (PlotRenderingInfo) null, (Point2D) point2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-4086.7558927140676).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      // Undeclared exception!
      try { 
        fastScatterPlot0.render((Graphics2D) null, rectangle2D_Double0, plotRenderingInfo0, xYCrosshairState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      // Undeclared exception!
      try { 
        fastScatterPlot0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      float[] floatArray1 = new float[2];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Nwg{N{o");
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, logarithmicAxis0, logarithmicAxis0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = new FastScatterPlot();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.isDomainPannable();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)fastScatterPlot0.getRangeGridlinePaint();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(192, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)fastScatterPlot0.getDomainGridlinePaint();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals((-4144960), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getOrientation();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.isRangeGridlinesVisible();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isDomainGridlinesVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isDomainZoomable();
      assertTrue(boolean0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isRangeZoomable();
      assertTrue(boolean0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      DateAxis dateAxis0 = new DateAxis("q#");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      fastScatterPlot0.clone();
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      assertTrue(fastScatterPlot1.equals((Object)fastScatterPlot0));
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      fastScatterPlot1.setDomainAxis(numberAxis0);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertFalse(fastScatterPlot1.equals((Object)fastScatterPlot0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      assertTrue(fastScatterPlot1.equals((Object)fastScatterPlot0));
      
      float[][] floatArray0 = new float[4][2];
      fastScatterPlot1.setData(floatArray0);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertFalse(boolean0);
      assertFalse(fastScatterPlot1.equals((Object)fastScatterPlot0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      boolean boolean0 = fastScatterPlot0.equals(combinedDomainXYPlot0);
      assertFalse(boolean0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertTrue(fastScatterPlot1.isDomainGridlinesVisible());
      assertTrue(boolean0);
      assertNotSame(fastScatterPlot1, fastScatterPlot0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot0);
      assertTrue(boolean0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      boolean boolean0 = fastScatterPlot0.equals(rectangle2D_Double0);
      assertFalse(boolean0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Rectangle rectangle0 = new Rectangle();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 0.25, 0);
      fastScatterPlot0.panRangeAxes(0.0, plotRenderingInfo0, point2D0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 15, 2146861289, (-920), (-2145753897), (-920), true, false, true, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = chartPanel0.getLocation();
      fastScatterPlot0.zoomRangeAxes(1505.5962, plotRenderingInfo0, (Point2D) point0, true);
      assertTrue(chartPanel0.getRefreshBuffer());
      assertTrue(fastScatterPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.zoomRangeAxes(5.0, plotRenderingInfo0, (Point2D) null, false);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      Point2D point2D0 = combinedDomainXYPlot0.getQuadrantOrigin();
      // Undeclared exception!
      try { 
        fastScatterPlot0.zoomDomainAxes((-1.0), (PlotRenderingInfo) null, point2D0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D_Double0, rectangleAnchor0);
      fastScatterPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, point2D0, false);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-856.301F), (-170.5948F));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getDataRange((ValueAxis) null);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      jFreeChart0.createBufferedImage(10, 1);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = Color.cyan;
      fastScatterPlot0.setRangeGridlinePaint(color0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setRangeGridlinesVisible(false);
      boolean boolean0 = fastScatterPlot0.isRangeGridlinesVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setRangeGridlinesVisible(true);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0, "TJbYEh'");
      fastScatterPlot0.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      Color color0 = (Color)fastScatterPlot0.getDomainGridlinePaint();
      assertEquals(128, color0.getBlue());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      
      fastScatterPlot0.setDomainGridlinesVisible(false);
      assertFalse(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[9][2];
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = new Locale("Null 'domainAxis' argument.", "01QiXo6q");
      DateAxis dateAxis0 = new DateAxis("Null 'domainAxis' argument.", zoneInfo0, locale0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      fastScatterPlot0.setDomainGridlinesVisible(true);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)WaferMapPlot.DEFAULT_CROSSHAIR_PAINT;
      fastScatterPlot0.setPaint(color0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setRangeAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setDomainAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[][] floatArray0 = new float[1][3];
      PeriodAxis periodAxis0 = new PeriodAxis("t52~KLs*.X8I");
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rangeAxis' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float[][] floatArray0 = new float[5][9];
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) null, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'domainAxis' argument.
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setRangePannable(false);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setDomainPannable(false);
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getPlotType();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JCheckBox jCheckBox0 = new JCheckBox("yp--%x&", false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jCheckBox0, 10, 10, 0, 10, 0, 10, 0, 1990, true, 1990, 28, 1988, 10);
      Point point0 = mouseWheelEvent0.getPoint();
      fastScatterPlot0.zoomRangeAxes((-2299.180989012), plotRenderingInfo0, (Point2D) point0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float((-181), 0.0F);
      fastScatterPlot0.zoomDomainAxes(523.80222385607, 523.80222385607, plotRenderingInfo0, (Point2D) point2D_Float0);
      ValueAxis valueAxis0 = fastScatterPlot0.getDomainAxis();
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertEquals(549.9923350488735, valueAxis0.getLowerBound(), 0.01);
      assertEquals("X", valueAxis0.getLabel());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-3078.05411157));
      fastScatterPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)fastScatterPlot0.getPaint();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D point2D0 = combinedDomainXYPlot0.getQuadrantOrigin();
      fastScatterPlot0.panDomainAxes(1095.0, (PlotRenderingInfo) null, point2D0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      fastScatterPlot0.isRangePannable();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D_Double0, rectangleAnchor0);
      // Undeclared exception!
      try { 
        fastScatterPlot0.zoomRangeAxes(1.0E-8, (-2260.15252510444), plotRenderingInfo0, point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0500000000000001E-8) <= upper (-2373.160151359662).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getData();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ValueAxis valueAxis0 = fastScatterPlot0.getRangeAxis();
      fastScatterPlot0.getDataRange(valueAxis0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals("Y", valueAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'stroke' argument.", fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(1024, 10, 1, chartRenderingInfo0);
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
  }
}
