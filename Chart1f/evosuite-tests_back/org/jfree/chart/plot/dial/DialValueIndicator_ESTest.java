/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:30:07 GMT 2022
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.text.NumberFormat;
import java.util.Map;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialValueIndicator;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DialValueIndicator_ESTest extends DialValueIndicator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(10);
      DialValueIndicator dialValueIndicator1 = new DialValueIndicator();
      boolean boolean0 = dialValueIndicator0.equals(dialValueIndicator1);
      assertEquals(0.3, dialValueIndicator1.getRadius(), 0.01);
      assertEquals(10, dialValueIndicator0.getDatasetIndex());
      assertFalse(dialValueIndicator1.equals((Object)dialValueIndicator0));
      assertFalse(boolean0);
      assertEquals((-90.0), dialValueIndicator1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-745));
      Double double0 = AbstractRenderer.ZERO;
      dialValueIndicator0.setTemplateValue(double0);
      dialValueIndicator0.getTemplateValue();
      assertEquals((-745), dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      
      dialValueIndicator0.setRadius(0.0);
      double double0 = dialValueIndicator0.getRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      dialValueIndicator0.setNumberFormat(numberFormat0);
      dialValueIndicator0.getNumberFormat();
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(29);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      dialValueIndicator0.setMaxTemplateValue(integer0);
      dialValueIndicator0.getMaxTemplateValue();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(29, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      Font font0 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      dialValueIndicator0.setFont(font0);
      dialValueIndicator0.getFont();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.setDatasetIndex(290);
      int int0 = dialValueIndicator0.getDatasetIndex();
      assertEquals(290, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-4011));
      int int0 = dialValueIndicator0.getDatasetIndex();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals((-4011), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(103);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      
      dialValueIndicator0.setAngle(0.0F);
      double double0 = dialValueIndicator0.getAngle();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.setAngle(175.0);
      double double0 = dialValueIndicator0.getAngle();
      assertEquals(175.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(29);
      DialPlot dialPlot0 = new DialPlot();
      JFreeChart jFreeChart0 = new JFreeChart(dialPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 56512722, 15, 1, (-557), 56512722, (-400), true, true, true, false, true, true, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(0, (-1927));
      // Undeclared exception!
      try { 
        dialValueIndicator0.draw((Graphics2D) null, dialPlot0, rectangle2D0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      DialPlot dialPlot0 = new DialPlot();
      // Undeclared exception!
      try { 
        dialValueIndicator0.draw((Graphics2D) null, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      DialValueIndicator dialValueIndicator1 = new DialValueIndicator();
      assertTrue(dialValueIndicator1.equals((Object)dialValueIndicator0));
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.plot.dial.DialValueIndicator", 0.0, 0.0, (-3529.86009));
      Paint paint0 = xYPointerAnnotation0.getPaint();
      dialValueIndicator1.setOutlinePaint(paint0);
      boolean boolean0 = dialValueIndicator0.equals(dialValueIndicator1);
      assertFalse(dialValueIndicator1.equals((Object)dialValueIndicator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      Object object0 = dialValueIndicator0.clone();
      assertTrue(object0.equals((Object)dialValueIndicator0));
      
      Color color0 = Color.gray;
      dialValueIndicator0.setBackgroundPaint(color0);
      boolean boolean0 = dialValueIndicator0.equals(object0);
      assertFalse(object0.equals((Object)dialValueIndicator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      DialValueIndicator dialValueIndicator1 = (DialValueIndicator)dialValueIndicator0.clone();
      assertEquals((-90.0), dialValueIndicator1.getAngle(), 0.01);
      
      dialValueIndicator1.setAngle(0.0);
      boolean boolean0 = dialValueIndicator0.equals(dialValueIndicator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-1891));
      DialValueIndicator dialValueIndicator1 = new DialValueIndicator();
      boolean boolean0 = dialValueIndicator0.equals(dialValueIndicator1);
      assertEquals((-90.0), dialValueIndicator1.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator1.getRadius(), 0.01);
      assertFalse(boolean0);
      assertFalse(dialValueIndicator1.equals((Object)dialValueIndicator0));
      assertEquals((-1891), dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      boolean boolean0 = dialValueIndicator0.equals(dialValueIndicator0);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertTrue(boolean0);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      boolean boolean0 = dialValueIndicator0.equals(rectangleAnchor0);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertFalse(boolean0);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-4011));
      // Undeclared exception!
      try { 
        dialValueIndicator0.setTextAnchor((TextAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("YtX>S9&)H$k]vO9M", 0, 0, 1246.8);
      dialValueIndicator0.setTextAnchor(xYPointerAnnotation0.DEFAULT_ROTATION_ANCHOR);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setValueAnchor((RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-617));
      RectangleAnchor rectangleAnchor0 = dialValueIndicator0.getValueAnchor();
      dialValueIndicator0.setValueAnchor(rectangleAnchor0);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-617), dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-937));
      // Undeclared exception!
      try { 
        dialValueIndicator0.setInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      dialValueIndicator0.setInsets(rectangleInsets0);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      BasicStroke basicStroke0 = new BasicStroke(10);
      dialValueIndicator0.setOutlineStroke(basicStroke0);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(0);
      // Undeclared exception!
      try { 
        dialValueIndicator0.setBackgroundPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(0);
      // Undeclared exception!
      try { 
        dialValueIndicator0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseItemLabelPaint();
      dialValueIndicator0.setPaint(paint0);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setNumberFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      dialValueIndicator0.setNumberFormat(numberFormat0);
      dialValueIndicator0.getNumberFormat();
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setTemplateValue((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'value' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      // Undeclared exception!
      try { 
        dialValueIndicator0.setFrameAnchor((RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialValueIndicator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-617));
      Number number0 = dialValueIndicator0.getTemplateValue();
      assertEquals(100.0, number0);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals((-617), dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      NumberFormat numberFormat0 = dialValueIndicator0.getNumberFormat();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(1, numberFormat0.getMinimumFractionDigits());
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.getBackgroundPaint();
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.getMaxTemplateValue();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      RectangleInsets rectangleInsets0 = dialValueIndicator0.getInsets();
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      double double0 = dialValueIndicator0.getAngle();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), double0, 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      boolean boolean0 = dialValueIndicator0.isClippedToWindow();
      assertTrue(boolean0);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      DialValueIndicator dialValueIndicator1 = (DialValueIndicator)dialValueIndicator0.clone();
      boolean boolean0 = dialValueIndicator0.equals(dialValueIndicator1);
      assertTrue(boolean0);
      assertEquals(0, dialValueIndicator1.getDatasetIndex());
      assertEquals(0.3, dialValueIndicator1.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      double double0 = dialValueIndicator0.getRadius();
      assertEquals(0.3, double0, 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.getPaint();
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.hashCode();
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      int int0 = dialValueIndicator0.getDatasetIndex();
      assertEquals(0, int0);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-2891));
      Font font0 = dialValueIndicator0.getFont();
      assertEquals("Tahoma", font0.getName());
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertEquals((-2891), dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertFalse(font0.isPlain());
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      BigInteger bigInteger0 = BigInteger.TEN;
      dialValueIndicator0.setMaxTemplateValue(bigInteger0);
      dialValueIndicator0.getMaxTemplateValue();
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      RectangleAnchor rectangleAnchor0 = dialValueIndicator0.getFrameAnchor();
      dialValueIndicator0.setFrameAnchor(rectangleAnchor0);
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      BasicStroke basicStroke0 = (BasicStroke)dialValueIndicator0.getOutlineStroke();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.getOutlinePaint();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.getTextAnchor();
      assertEquals(0.3, dialValueIndicator0.getRadius(), 0.01);
      assertEquals(0, dialValueIndicator0.getDatasetIndex());
      assertEquals((-90.0), dialValueIndicator0.getAngle(), 0.01);
  }
}
