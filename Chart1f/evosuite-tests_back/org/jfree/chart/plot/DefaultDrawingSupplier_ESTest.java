/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:54:08 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultDrawingSupplier_ESTest extends DefaultDrawingSupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      Paint[] paintArray0 = new Paint[1];
      Stroke[] strokeArray0 = new Stroke[1];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      Paint paint0 = defaultDrawingSupplier0.getNextPaint();
      assertEquals(10, shapeArray0.length);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      Stroke[] strokeArray0 = new Stroke[2];
      Shape[] shapeArray0 = new Shape[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      Stroke stroke0 = defaultDrawingSupplier0.getNextStroke();
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stroke[] strokeArray0 = new Stroke[8];
      Shape[] shapeArray0 = new Shape[8];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, (Paint[]) null, strokeArray0, strokeArray0, shapeArray0);
      Shape shape0 = defaultDrawingSupplier0.getNextShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      Paint[] paintArray0 = new Paint[4];
      Stroke[] strokeArray0 = new Stroke[1];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      Stroke stroke0 = defaultDrawingSupplier0.getNextOutlineStroke();
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Paint[] paintArray0 = new Paint[2];
      Stroke[] strokeArray0 = new Stroke[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, strokeArray0, (Shape[]) null);
      // Undeclared exception!
      try { 
        defaultDrawingSupplier0.getNextShape();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Paint[] paintArray0 = new Paint[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, (Stroke[]) null, (Stroke[]) null, (Shape[]) null);
      // Undeclared exception!
      try { 
        defaultDrawingSupplier0.getNextOutlineStroke();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Paint[] paintArray0 = new Paint[0];
      Stroke[] strokeArray0 = new Stroke[2];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(paintArray0, paintArray0, paintArray0, strokeArray0, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      // Undeclared exception!
      try { 
        defaultDrawingSupplier1.getNextOutlinePaint();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      Stroke[] strokeArray0 = new Stroke[1];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, (Paint[]) null, strokeArray0, strokeArray0, shapeArray0);
      // Undeclared exception!
      try { 
        defaultDrawingSupplier0.getNextFillPaint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.DefaultDrawingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Object object0 = defaultDrawingSupplier0.clone();
      assertTrue(object0.equals((Object)defaultDrawingSupplier0));
      
      defaultDrawingSupplier0.getNextOutlinePaint();
      boolean boolean0 = defaultDrawingSupplier0.equals(object0);
      assertFalse(object0.equals((Object)defaultDrawingSupplier0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_SHAPE_SEQUENCE);
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      boolean boolean0 = defaultDrawingSupplier0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextShape();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)defaultDrawingSupplier0.getNextShape();
      assertEquals((-3.0), ellipse2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Object object0 = defaultDrawingSupplier0.clone();
      boolean boolean0 = defaultDrawingSupplier0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultDrawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextStroke();
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextStroke();
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals(85, color0.getGreen());
      
      Color color1 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals((-11184641), color1.getRGB());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextOutlineStroke();
      BasicStroke basicStroke0 = (BasicStroke)defaultDrawingSupplier0.getNextOutlineStroke();
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextOutlinePaint();
      Color color0 = (Color)defaultDrawingSupplier0.getNextOutlinePaint();
      assertEquals(192, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape[] shapeArray0 = DefaultDrawingSupplier.createStandardSeriesShapes();
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      Color color0 = (Color)defaultDrawingSupplier0.getNextPaint();
      assertEquals(85, color0.getBlue());
      
      DefaultDrawingSupplier defaultDrawingSupplier1 = new DefaultDrawingSupplier(defaultDrawingSupplier0.DEFAULT_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_FILL_PAINT_SEQUENCE, defaultDrawingSupplier0.DEFAULT_STROKE_SEQUENCE, defaultDrawingSupplier0.DEFAULT_OUTLINE_STROKE_SEQUENCE, shapeArray0);
      boolean boolean0 = defaultDrawingSupplier0.equals(defaultDrawingSupplier1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier();
      defaultDrawingSupplier0.getNextFillPaint();
      Color color0 = (Color)defaultDrawingSupplier0.getNextFillPaint();
      assertEquals((-1), color0.getRGB());
  }
}
