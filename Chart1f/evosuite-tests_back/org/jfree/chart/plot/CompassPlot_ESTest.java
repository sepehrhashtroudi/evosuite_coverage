/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:47:03 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.needle.LineNeedle;
import org.jfree.chart.needle.LongNeedle;
import org.jfree.chart.needle.MeterNeedle;
import org.jfree.chart.needle.MiddlePinNeedle;
import org.jfree.chart.needle.PointerNeedle;
import org.jfree.chart.needle.WindNeedle;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompassPlot_ESTest extends CompassPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setRevolutionDistance((-3474.01));
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) null);
      CompassPlot compassPlot1 = (CompassPlot)compassPlot0.clone();
      assertEquals(360.0, compassPlot1.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      Font font0 = compassPlot0.getCompassFont(80);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals("Tahoma", font0.getName());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(font0.isPlain());
      assertEquals(8.0F, font0.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.createBufferedImage(1, 212, (double) 10.0F, 1.0, chartRenderingInfo0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      compassPlot0.setInsets(rectangleInsets0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1907, chartRenderingInfo0);
      assertEquals(1907, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      PointerNeedle pointerNeedle0 = new PointerNeedle();
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0);
      LineNeedle lineNeedle0 = new LineNeedle();
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) lineNeedle0);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) pointerNeedle0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      compassPlot0.setSeriesNeedle(1, 2);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getItemOutlineStroke(0, 10, false);
      compassPlot0.setSeriesOutlineStroke(1, stroke0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT;
      compassPlot0.setSeriesOutlinePaint(1, color0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      compassPlot0.setRoseHighlightPaint(areaRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2635.7);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      assertFalse(compassPlot0.getDrawBorder());
      
      compassPlot0.setDrawBorder(true);
      boolean boolean0 = compassPlot0.getDrawBorder();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(789, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 789
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Point point0 = chartPanel0.translateJava2DToScreen(point2D_Float0);
      Rectangle rectangle0 = new Rectangle(point0);
      PlotState plotState0 = new PlotState();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        compassPlot0.draw((Graphics2D) null, rectangle0, point2D_Float0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) null);
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      compassPlot0.setSeriesOutlinePaint(1, color0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle((-2615), (MeterNeedle) middlePinNeedle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2615
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      LongNeedle longNeedle0 = new LongNeedle();
      compassPlot0.setSeriesNeedle(824, (MeterNeedle) longNeedle0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.setSeriesNeedle(506, (int) (byte)1);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1708.2763324009375);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(0, 1832);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      compassPlot0.setSeriesPaint(0, paint0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.getLegendItems();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setRevolutionDistance(42);
      assertEquals(42.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setRevolutionDistance(0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      CompassPlot compassPlot1 = (CompassPlot)compassPlot0.clone();
      assertFalse(compassPlot1.getDrawBorder());
      assertEquals(360.0, compassPlot1.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      CompassPlot compassPlot1 = (CompassPlot)compassPlot0.clone();
      boolean boolean0 = compassPlot0.equals(compassPlot1);
      assertEquals(360.0, compassPlot1.getRevolutionDistance(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2.0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      CompassPlot compassPlot1 = new CompassPlot();
      assertTrue(compassPlot1.equals((Object)compassPlot0));
      
      compassPlot0.setRoseHighlightPaint(compassPlot1.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = compassPlot0.equals(compassPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      boolean boolean0 = compassPlot0.equals(middlePinNeedle0);
      assertFalse(boolean0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      boolean boolean0 = compassPlot0.equals(compassPlot0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertTrue(boolean0);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2.0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      CompassPlot compassPlot1 = new CompassPlot();
      assertTrue(compassPlot1.equals((Object)compassPlot0));
      
      compassPlot0.setRosePaint(compassPlot1.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = compassPlot0.equals(compassPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      Font font0 = compassPlot0.getCompassFont(4160);
      assertEquals(416.0F, font0.getSize2D(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals("Tahoma", font0.getName());
      assertTrue(font0.isPlain());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.createBufferedImage(10, 10, (double) 1907, (double) 0, chartRenderingInfo0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(12, 36);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0E-100);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      WindNeedle windNeedle0 = new WindNeedle();
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0, (MeterNeedle) windNeedle0);
      compassPlot0.addDataset((ValueDataset) defaultValueDataset0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      compassPlot0.addDataset((ValueDataset) null, (MeterNeedle) arrowNeedle0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setSeriesNeedle(10, (MeterNeedle) null);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      compassPlot0.setSeriesNeedle(4);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setSeriesNeedle(3);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setSeriesNeedle(6);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1872.171369916));
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      compassPlot0.setSeriesOutlineStroke(94, stroke0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      compassPlot0.setSeriesOutlineStroke(0, meterPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2.0);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.setSeriesOutlineStroke((-1052), compassPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      compassPlot0.setSeriesOutlinePaint(0, systemColor0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0E-100);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(">@E|8C$xV>!", compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      Color color0 = chartPanel0.getBackground();
      compassPlot0.setSeriesOutlinePaint(4673, color0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      compassPlot0.setSeriesOutlinePaint((-2885), color0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0E-100);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(">@E|8C$xV>!", compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      Color color0 = chartPanel0.getBackground();
      compassPlot0.setSeriesPaint(66, color0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      compassPlot0.setSeriesPaint((-1606), meterPlot0.DEFAULT_BACKGROUND_PAINT);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        compassPlot0.setRoseHighlightPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setRoseCenterPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      compassPlot0.setRoseCenterPaint(color0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-982.97529));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        compassPlot0.setRosePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      compassPlot0.setRosePaint(color0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        compassPlot0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' not allowed.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      compassPlot0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      compassPlot0.getLabelFont();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.setLabelType(1);
      assertEquals(1, compassPlot0.getLabelType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setLabelType((-2885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MeterPlot.setLabelType(int): unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.setLabelType(0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0, compassPlot0.getLabelType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) null);
      compassPlot0.setSeriesNeedle(2, 2);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)compassPlot0.getRoseCenterPaint();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.getDatasets();
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      double double0 = compassPlot0.getRevolutionDistance();
      assertEquals(360.0, double0, 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      int int0 = compassPlot0.getLabelType();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(0, int0);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.zoom(0.0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)compassPlot0.getRosePaint();
      compassPlot0.setSeriesPaint(1, color0);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      compassPlot0.getPlotType();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(compassPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      boolean boolean0 = compassPlot0.getDrawBorder();
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      Font font0 = compassPlot0.getLabelFont();
      assertFalse(compassPlot0.getDrawBorder());
      assertNull(font0);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      Color color0 = (Color)compassPlot0.getRoseHighlightPaint();
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0, color0.getGreen());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
  }
}
