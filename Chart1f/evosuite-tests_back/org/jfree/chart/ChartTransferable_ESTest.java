/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:16:33 GMT 2022
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.datatransfer.DataFlavor;
import java.awt.image.BufferedImage;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartTransferable;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartTransferable_ESTest extends ChartTransferable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 10, 10, 10, 2762, 10, true);
      DataFlavor dataFlavor0 = new DataFlavor("image/x-java-image; class=java.awt.Image");
      BufferedImage bufferedImage0 = (BufferedImage)chartTransferable0.getTransferData(dataFlavor0);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(15, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("EU/kp:y", meterPlot0);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 366, 15, 15, 365, 0, 10, true);
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      BufferedImage bufferedImage0 = (BufferedImage)chartTransferable0.getTransferData(dataFlavor0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(15, bufferedImage0.getTileHeight());
      assertEquals(366, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont(")=5Mx|4", 1, 1);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart(")=5Mx|4", font0, waferMapPlot0, false);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 1, 2, 10, 1, 727, 1, true);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      BufferedImage bufferedImage0 = (BufferedImage)chartTransferable0.getTransferData(dataFlavor0);
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Font font0 = JFreeChart.DEFAULT_TITLE_FONT;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'tasks' argument.", font0, multiplePiePlot0, false);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 15, 689, 29, 29, 29, 10, false);
      DataFlavor dataFlavor0 = chartTransferable0.imageFlavor;
      BufferedImage bufferedImage0 = (BufferedImage)chartTransferable0.getTransferData(dataFlavor0);
      assertEquals(689, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(15, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart(")=5Mx|4", font0, waferMapPlot0, false);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 10, 2, 10, 1, 10, 1, false);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      BufferedImage bufferedImage0 = (BufferedImage)chartTransferable0.getTransferData(dataFlavor0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1100), 342, (Number) null);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 2, 2);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      JFreeChart jFreeChart0 = new JFreeChart(waferMapPlot0);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, Integer.MAX_VALUE, 10, Integer.MAX_VALUE, (-1348), 2139095040, 4414, false);
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable((JFreeChart) null, 0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable((JFreeChart) null, 624, 624, 180, 1383, 92, 624, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'unit' argument.", spiderWebPlot0);
      spiderWebPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable(jFreeChart0, 0, (-1938));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont(")=5Mx|4", 1, 1);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart(")=5Mx|4", font0, waferMapPlot0, false);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 4414, 2, 10, 1, 10, 1, true);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      BufferedImage bufferedImage0 = (BufferedImage)chartTransferable0.getTransferData(dataFlavor0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(4414, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("\"^z0>pJgFH1e", 0, 2);
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", font0, ringPlot0, false);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, (-1601), (-1601), true);
      DataFlavor dataFlavor0 = DataFlavor.fragmentHtmlFlavor;
      // Undeclared exception!
      try { 
        chartTransferable0.getTransferData(dataFlavor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1601) and height (-1601) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 1, 3, 42, 10, 42, 0, false);
      DataFlavor[] dataFlavorArray0 = chartTransferable0.getTransferDataFlavors();
      assertEquals(1, dataFlavorArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartTransferable chartTransferable0 = new ChartTransferable(jFreeChart0, 1, 3, 42, 10, 42, 0, false);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      boolean boolean0 = chartTransferable0.isDataFlavorSupported(dataFlavor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChartTransferable chartTransferable0 = null;
      try {
        chartTransferable0 = new ChartTransferable((JFreeChart) null, (-1245), 502);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartTransferable", e);
      }
  }
}
