/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:05:33 GMT 2022
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.SoftBevelBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.needle.LongNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LongNeedle_ESTest extends LongNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(defaultEditorKit_CopyAction0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((-96));
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jCheckBoxMenuItem0, (Border) softBevelBorder0, (-96), 31, (-96), (-96));
      rectangle0.setFrame((double) 1891, 1438.24, (double) 2288, (double) 1891);
      longNeedle0.drawNeedle((Graphics2D) null, rectangle0, (Point2D) null, 0.0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(defaultEditorKit_CopyAction0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((-96));
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jCheckBoxMenuItem0, (Border) softBevelBorder0, (-96), 31, (-96), (-96));
      Point point0 = new Point();
      longNeedle0.drawNeedle((Graphics2D) null, rectangle0, point0, 0.0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Color color0 = Color.LIGHT_GRAY;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      longNeedle0.setOutlinePaint(color0);
      Point point0 = new Point(1, 2104533975);
      longNeedle0.drawNeedle(graphics2D0, rectangle2D_Double0, point0, 2.0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      boolean boolean0 = longNeedle0.equals((Object) null);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      Character character0 = new Character('');
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultStyledDocument0;
      objectArray0[2] = (Object) defaultStyledDocument0;
      objectArray0[4] = (Object) character0;
      objectArray0[6] = (Object) longNeedle0;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      // Undeclared exception!
      try { 
        styleContext0.removeAttributes((AttributeSet) styleContext_SmallAttributeSet0, (AttributeSet) styleContext_SmallAttributeSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(defaultEditorKit_CopyAction0);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((-96));
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jCheckBoxMenuItem0, (Border) softBevelBorder0, (-96), (-96), (-96), (-96));
      Color color0 = Color.YELLOW;
      longNeedle0.setOutlinePaint(color0);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        longNeedle0.drawNeedle((Graphics2D) null, rectangle0, point0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.LongNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Color color0 = Color.LIGHT_GRAY;
      longNeedle0.setFillPaint(color0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      longNeedle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Color color0 = Color.BLUE;
      longNeedle0.setHighlightPaint(color0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      longNeedle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      longNeedle0.hashCode();
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LongNeedle longNeedle0 = new LongNeedle();
      LongNeedle longNeedle1 = (LongNeedle)longNeedle0.clone();
      boolean boolean0 = longNeedle0.equals(longNeedle1);
      assertEquals(0.8, longNeedle1.getRotateY(), 0.01);
      assertTrue(boolean0);
  }
}
