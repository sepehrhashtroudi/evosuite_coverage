/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:10:57 GMT 2022
 */

package org.jfree.chart.encoders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.encoders.SunPNGEncoderAdapter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SunPNGEncoderAdapter_ESTest extends SunPNGEncoderAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        sunPNGEncoderAdapter0.encode(bufferedImage0, (OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1577, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      sunPNGEncoderAdapter0.encode(bufferedImage0, (OutputStream) byteArrayOutputStream0);
      assertEquals(86, byteArrayOutputStream0.size());
      assertEquals("\uFFFDPNG\r\n\u001A\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0000\u0001\u0000\u0000\u0006)\b\u0002\u0000\u0000\u0000\u0018X\uFFFD\u0000\u0000\u0000\u001DIDATx\uFFFD\uFFFD\uFFFD1\u0001\u0000\u0000\u0000\u00A0\uFFFDOm\u000B/\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0006\u0018\uFFFD\u0000\u0001}\uFFFDa\u0012\u0000\u0000\u0000\u0000IEND\uFFFDB`\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        sunPNGEncoderAdapter0.encode((BufferedImage) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      // Undeclared exception!
      try { 
        sunPNGEncoderAdapter0.encode(bufferedImage0, (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'outputStream' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      // Undeclared exception!
      try { 
        sunPNGEncoderAdapter0.encode((BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.encoders.SunPNGEncoderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      sunPNGEncoderAdapter0.setQuality(445.22293F);
      assertFalse(sunPNGEncoderAdapter0.isEncodingAlpha());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      sunPNGEncoderAdapter0.setEncodingAlpha(false);
      assertEquals(0.0F, sunPNGEncoderAdapter0.getQuality(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1577, 1);
      byte[] byteArray0 = sunPNGEncoderAdapter0.encode(bufferedImage0);
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      float float0 = sunPNGEncoderAdapter0.getQuality();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SunPNGEncoderAdapter sunPNGEncoderAdapter0 = new SunPNGEncoderAdapter();
      boolean boolean0 = sunPNGEncoderAdapter0.isEncodingAlpha();
      assertFalse(boolean0);
  }
}
