/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:14:52 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.chrono.HijrahDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.YIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparableObjectSeries_ESTest extends ComparableObjectSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.delete(23, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(quarter0);
      yIntervalSeries0.add(0.0, 1541.669533, 1541.669533, 0.0);
      yIntervalSeries0.add(1, 1, 3810.967102272531, 1541.669533);
      assertEquals(2, yIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.add(1392409281320L, 24.966, 24.966, 41685L, 288.0155984841, 288.0155984841);
      xYIntervalSeries0.setMaximumItemCount(1);
      assertEquals(1, xYIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, false, false);
      Object object0 = new Object();
      comparableObjectSeries0.add(xYDataItem0, object0, false);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.setMaximumItemCount((-1128));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(quarter0);
      boolean boolean0 = yIntervalSeries0.equals(yIntervalSeries0);
      assertTrue(boolean0);
      assertTrue(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      comparableObjectSeries0.add(hour0, hour0, true);
      comparableObjectSeries0.remove(hour0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      comparableObjectSeries0.add(hour0, hour0, true);
      comparableObjectSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.add(1392409281320L, 24.966, 24.966, 41685L, 288.0155984841, 288.0155984841);
      xYIntervalSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hour hour0 = new Hour();
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(hour0);
      xIntervalSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertTrue(xIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week(2990, 2990);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(week0, false, false);
      boolean boolean0 = comparableObjectSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.updateByIndex((-1167), xYDataItem0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Day day0 = new Day();
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0);
      // Undeclared exception!
      try { 
        xIntervalSeries0.remove((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.ComparableObjectItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Day day0 = new Day();
      Calendar calendar0 = MockCalendar.getInstance();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.add(1392409281320L, 24.966, 24.966, 41685L, 288.0155984841, 288.0155984841);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.remove(calendar0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(0, 0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(week0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(quarter0);
      // Undeclared exception!
      try { 
        yIntervalSeries0.indexOf((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.ComparableObjectItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(quarter0);
      yIntervalSeries0.add(0.0, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        yIntervalSeries0.indexOf(quarter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Quarter cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem(486);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 486, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, true, true);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem((-1167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.delete((-1167), 1826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = null;
      try {
        comparableObjectSeries0 = new ComparableObjectSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = null;
      try {
        comparableObjectSeries0 = new ComparableObjectSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, false, false);
      Object object0 = new Object();
      comparableObjectSeries0.add(xYDataItem0, object0, false);
      int int0 = comparableObjectSeries0.indexOf(xYDataItem0);
      assertEquals(0, int0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(xYDataItem0, true, true);
      yIntervalSeries0.indexOf(bigInteger0);
      assertTrue(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0L, 0.0, 0L, 0.0, 0.0);
      Number number0 = oHLCDataItem0.getClose();
      XYDataItem xYDataItem0 = new XYDataItem(number0, number0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYDataItem0, false, false);
      xYIntervalSeries0.hashCode();
      assertFalse(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.add(1392409281320L, 24.966, 24.966, 41685L, 288.0155984841, 288.0155984841);
      xYIntervalSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, true, false);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertFalse(boolean0);
      assertTrue(xIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertFalse(xIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, false, true);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertFalse(boolean0);
      assertTrue(xIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.setDescription("15-February-2014");
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, true, false);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertFalse(xIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xIntervalSeries0.getAutoSort());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Day day0 = new Day();
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, false, true);
      boolean boolean0 = xIntervalSeries0.equals(day0);
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertTrue(xIntervalSeries0.getAllowDuplicateXValues());
      assertFalse(xIntervalSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, true, true);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertTrue(xIntervalSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.add(1392409281320L, 24.966, 24.966, 41685L, 288.0155984841, 288.0155984841);
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, true, true);
      boolean boolean0 = xYIntervalSeries0.equals(xIntervalSeries0);
      assertTrue(xIntervalSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(quarter0);
      yIntervalSeries0.add(0.0, 0.0, 0.0, 0.0);
      yIntervalSeries0.clear();
      assertEquals(0, yIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      xYIntervalSeries0.clear();
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(23, 23, 23, 23, (-597), (-597));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(simpleTimePeriod0);
      comparableObjectSeries0.delete(1506, 0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3256, 3256, 3256, (-2675), (-2675));
      Week week0 = new Week(mockDate0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(week0, true, true);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.from(hijrahDate0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update(week0, thaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = Week 50, 5435
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      comparableObjectSeries0.add(hour0, hour0, true);
      assertEquals(1, comparableObjectSeries0.getItemCount());
      
      Quarter quarter0 = new Quarter(1, 2);
      Object object0 = new Object();
      comparableObjectSeries0.update(quarter0, object0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, false, false);
      Object object0 = new Object();
      comparableObjectSeries0.add(xYDataItem0, object0, false);
      int int0 = comparableObjectSeries0.indexOf("[1.0, 1.0]");
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(xYDataItem0, false, false);
      comparableObjectSeries0.add(xYDataItem0, xYDataItem0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add(xYDataItem0, object0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Day day0 = new Day();
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, false, true);
      xIntervalSeries0.add(1.0, 1392409281320L, (-1), (-1704.065));
      assertEquals(1, xIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(simpleHistogramBin0);
      comparableObjectSeries0.add(simpleHistogramBin0, simpleHistogramBin0, true);
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(simpleHistogramBin0, true, false);
      comparableObjectSeries0.add(simpleHistogramBin0, yIntervalSeries0, true);
      comparableObjectSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add((ComparableObjectItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      
      xYIntervalSeries0.setMaximumItemCount(1);
      assertEquals(1, xYIntervalSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Day day0 = new Day();
      Calendar calendar0 = MockCalendar.getInstance();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.remove(calendar0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      boolean boolean0 = xYIntervalSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertTrue(xYIntervalSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week();
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(week0, false, false);
      boolean boolean0 = xIntervalSeries0.getAutoSort();
      assertFalse(xIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.updateByIndex(143, hour0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 143, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hour hour0 = new Hour();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(hour0);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((-414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Day day0 = new Day();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(day0);
      int int0 = xYIntervalSeries0.getMaximumItemCount();
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYIntervalSeries0.getAutoSort());
  }
}
