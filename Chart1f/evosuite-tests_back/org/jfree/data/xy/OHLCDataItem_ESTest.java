/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:45:56 GMT 2022
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OHLCDataItem_ESTest extends OHLCDataItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-813.0), 0.0, (-813.0), 0.0, 0.0);
      Number number0 = oHLCDataItem0.getVolume();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-575), (-575), (-575), (-575), (-575), 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3092.320984448639), 0, (-2064.5), (-3092.320984448639), (-766.68709));
      Number number0 = oHLCDataItem0.getVolume();
      assertEquals((-766.68709), number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5066L), (-5066L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5066L), (-5066L), (-5066L), (-5066L), (-5066L));
      Number number0 = oHLCDataItem0.getOpen();
      assertEquals((-5066.0), number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, (-1641.5167579545), (-1641.5167579545), (-1641.5167579545), (-1641.5167579545));
      Number number0 = oHLCDataItem0.getOpen();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1163, 1163, 1163);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1232.4789020347578, (-1.0), 1163, 1163, (-2058.207179));
      Number number0 = oHLCDataItem0.getOpen();
      assertEquals(1232.4789020347578, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), 0.0, 1530.97, (-1.0));
      Number number0 = oHLCDataItem0.getLow();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-575), (-575), (-575), (-575), (-575), 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3092.320984448639), 0, (-2064.5), (-3092.320984448639), (-766.68709));
      Number number0 = oHLCDataItem0.getLow();
      assertEquals((-2064.5), number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5075L), 1L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5075L), 1L, 1L, 1L, (-1594.051229775));
      Number number0 = oHLCDataItem0.getHigh();
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5075L), 1L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5075L), 0.0, 1L, 0.0, (-1594.051229775));
      Number number0 = oHLCDataItem0.getHigh();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, (-1), 1.0, 1.0, (-293.6));
      Number number0 = oHLCDataItem0.getHigh();
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5075L), 1L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5075L), 1L, 1L, 1L, (-1594.051229775));
      Number number0 = oHLCDataItem0.getClose();
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5075L), 1L);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5075L), 0.0, 1L, 0.0, (-1594.051229775));
      Number number0 = oHLCDataItem0.getClose();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.0, (-2365.09074), (-318.0), 0.0);
      Number number0 = oHLCDataItem0.getClose();
      assertEquals((-318.0), number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), 0.0, (-1.0));
      MockDate mockDate1 = new MockDate(0L);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, (-1327.1101), (-1.0), 169.3632189466, (-1327.1101), (-1.0));
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-575), (-575), (-575), (-575), (-575), 0);
      MockDate mockDate1 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3092.320984448639), 0, (-2064.5), (-3092.320984448639), (-766.68709));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, (-766.68709), 0.0, (-2711.9297), 0.0, 0.0);
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 0, 0, 0, 0, 11);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11, 0, 0.0, 11, 11);
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5075L), (-5075L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5075L), (-5075L), (-5075L), (-5075L), (-5075L));
      // Undeclared exception!
      try { 
        oHLCDataItem0.compareTo("Wywz^4GF]|");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // OHLCDataItem.compareTo().
         //
         verifyException("org.jfree.data.xy.OHLCDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5075L), 1L, 1L, 1L, (-1594.051229775));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-5075L), 1.0, 1.0, 1.0, (-5075L));
      boolean boolean0 = oHLCDataItem0.equals(oHLCDataItem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5075L), 1L, 1L, 1L, (-5075L));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1L, 1.0, 1.0, 1.0, 1L);
      boolean boolean0 = oHLCDataItem0.equals(oHLCDataItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 0, 0, 0, 0, 11);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11, 0, 0.0, 11, 11);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, 0.0, 11, 11, 0.0);
      boolean boolean0 = oHLCDataItem1.equals(oHLCDataItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(402, 402, 402, 402, 402, 402);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 402, 402, 402, 402, 402);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 402, 789.1095082196887, 789.1095082196887, 402, 402);
      boolean boolean0 = oHLCDataItem0.equals(oHLCDataItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5075L), 1L, 1L, 1L, (-5075L));
      MockDate mockDate1 = new MockDate((-548), (-548), (-548));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, (-5075L), (-5075L), (-548), (-548), (-548));
      boolean boolean0 = oHLCDataItem0.equals(oHLCDataItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 0, 0, 0, 0, 11);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11, 0, 0.0, 11, 11);
      boolean boolean0 = oHLCDataItem0.equals(mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5066L), (-5066L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5066L), (-5066L), (-5066L), (-5066L), (-5066L));
      boolean boolean0 = oHLCDataItem0.equals(oHLCDataItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-5075L), (-5075L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-5075L), (-5075L), (-5075L), (-5075L), (-5075L));
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-5075L), (-5075L), (-5075L), (-1.0), (-5075L));
      boolean boolean0 = oHLCDataItem0.equals(oHLCDataItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OHLCDataItem oHLCDataItem0 = null;
      try {
        oHLCDataItem0 = new OHLCDataItem((Date) null, (-1.0), (-1.0), (-2697.0), (-1910.3832929908), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.data.xy.OHLCDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5075L), 1L, 1L, 1L, (-5075L));
      Date date0 = oHLCDataItem0.getDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(402, 402, 402, 402, 402, 402);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 402, 402, 402, 402, 402);
      Number number0 = oHLCDataItem0.getVolume();
      assertEquals(402.0, number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5075L), 1L, 1L, 1L, (-5075L));
      Number number0 = oHLCDataItem0.getLow();
      assertEquals(1.0, number0);
  }
}
