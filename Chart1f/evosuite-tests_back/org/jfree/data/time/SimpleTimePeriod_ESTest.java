/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:37:52 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Hour;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleTimePeriod_ESTest extends SimpleTimePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-606L), 484L);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod0);
      assertEquals(0, int0);
      assertEquals(484L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2565L), (-2565L));
      Date date0 = simpleTimePeriod0.getStart();
      MockDate mockDate0 = new MockDate((-230), (-230), 1747);
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(mockDate0, date0);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod1);
      assertEquals(1, int0);
      assertEquals((-2565L), simpleTimePeriod1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 555L);
      Hour hour0 = new Hour();
      int int0 = simpleTimePeriod0.compareTo(hour0);
      assertEquals(555L, simpleTimePeriod0.getEndMillis());
      assertEquals((-1), int0);
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1199L);
      Date date0 = Date.from(instant0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      boolean boolean0 = simpleTimePeriod0.equals(simpleTimePeriod0);
      assertEquals(1199000L, simpleTimePeriod0.getStartMillis());
      assertTrue(boolean0);
      assertEquals(1199000L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 555L);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(555L, simpleTimePeriod0.getEndMillis());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2897);
      Date date0 = spreadsheetDate0.toDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1278L), 1L);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals((-1278L), simpleTimePeriod0.getStartMillis());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2333L, 2333L);
      Date date0 = simpleTimePeriod0.getEnd();
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo(date0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to org.jfree.data.time.TimePeriod
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate((-937L));
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(2377L);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2377L, 2377L);
      Week week0 = new Week();
      int int0 = simpleTimePeriod0.compareTo(week0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(2377L);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2377L, 2377L);
      Week week0 = new Week();
      boolean boolean0 = simpleTimePeriod0.equals(week0);
      assertFalse(boolean0);
      assertEquals(2377L, simpleTimePeriod0.getStartMillis());
      assertEquals(2377L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1199L);
      Date date0 = Date.from(instant0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      Week week0 = new Week();
      boolean boolean0 = simpleTimePeriod0.equals(week0);
      assertFalse(boolean0);
      assertEquals(1199000L, simpleTimePeriod0.getEndMillis());
      assertEquals(1199000L, simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2592L), (-2592L));
      Object object0 = new Object();
      boolean boolean0 = simpleTimePeriod0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-2592L), simpleTimePeriod0.getStartMillis());
      assertEquals((-2592L), simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(1, (-2593L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2592L), (-2592L));
      simpleTimePeriod0.hashCode();
      assertEquals((-2592L), simpleTimePeriod0.getEndMillis());
      assertEquals((-2592L), simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2592L), (-2592L));
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals((-2592L), simpleTimePeriod0.getStartMillis());
      assertEquals((-2592L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2593L), (-2593L));
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals((-2593L), long0);
      assertEquals((-2593L), simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1199L);
      Date date0 = Date.from(instant0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      Date date1 = simpleTimePeriod0.getStart();
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(date1, date1);
      boolean boolean0 = simpleTimePeriod0.equals(simpleTimePeriod1);
      assertEquals(1199000L, simpleTimePeriod0.getEndMillis());
      assertTrue(boolean0);
  }
}
