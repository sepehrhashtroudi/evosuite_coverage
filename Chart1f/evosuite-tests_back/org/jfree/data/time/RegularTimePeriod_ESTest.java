/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:56:21 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegularTimePeriod_ESTest extends RegularTimePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Day day0 = new Day();
      Calendar calendar0 = MockCalendar.getInstance();
      Date date0 = day0.getStart();
      Second second0 = new Second(date0);
      long long0 = second0.getMiddleMillisecond(calendar0);
      assertEquals(1392409281819L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Second second0 = new Second();
      long long0 = second0.getMiddleMillisecond();
      assertEquals(1392409281819L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-8L));
      Calendar calendar0 = MockCalendar.getInstance();
      Date date0 = fixedMillisecond0.getStart();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("4ZYeqgnfjPV");
      Week week0 = new Week(date0, timeZone0, locale0);
      week0.peg(calendar0);
      assertEquals(1, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(999L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      long long0 = fixedMillisecond0.getSerialIndex();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Day day0 = new Day();
      long long0 = day0.getSerialIndex();
      assertEquals(41684L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 9999, 1400, 1, 9999);
      long long0 = quarter0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year(539);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-9999), 0, 334, (-1));
      mockGregorianCalendar0.setTimeInMillis((-9999));
      long long0 = year0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-9999L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 9999, 1400, 1, 9999);
      year0.peg(mockGregorianCalendar0);
      long long0 = year0.getMiddleMillisecond();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 212, (-1465), 2213, 1, 1653);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(212, "");
      Month month0 = new Month(mockDate0, simpleTimeZone0);
      long long0 = month0.getMiddleMillisecond();
      assertEquals((-1770229887000L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Month month0 = new Month();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-6409), 649, (-6409), (-9999));
      long long0 = month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-8L));
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = fixedMillisecond0.getLastMillisecond(calendar0);
      assertEquals((-8L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minute minute0 = new Minute();
      long long0 = minute0.getLastMillisecond();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4);
      long long0 = quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Calendar calendar0 = MockCalendar.getInstance();
      long long0 = quarter0.getFirstMillisecond(calendar0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(412, "ZthKZJ7N#V4<dA[y");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      long long0 = quarter0.getFirstMillisecond();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 678, 321, (-3338), 181);
      Month month0 = new Month(mockDate0);
      long long0 = month0.getFirstMillisecond();
      assertEquals((-2115326099000L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-530), (-530), (-530), 12, (-530));
      Month month0 = new Month(mockDate0);
      // Undeclared exception!
      try { 
        month0.getMiddleMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegularTimePeriod.downsize((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.RegularTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      RegularTimePeriod.downsize(class0);
      Class<Second> class1 = Second.class;
      Class class2 = RegularTimePeriod.downsize(class1);
      assertEquals("class org.jfree.data.time.Millisecond", class2.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Second> class0 = Second.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      Class<String> class1 = String.class;
      RegularTimePeriod.downsize(class1);
      Class class2 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Second", class2.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Minute> class0 = Minute.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Second", class1.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      RegularTimePeriod.downsize(class1);
      Class class2 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class2.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      Class<Object> class1 = Object.class;
      RegularTimePeriod.downsize(class1);
      Class class2 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Minute", class2.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Minute", class1.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Day> class0 = Day.class;
      RegularTimePeriod.downsize(class0);
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertEquals("class org.jfree.data.time.Hour", class1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      
      Class<Month> class2 = Month.class;
      Class class3 = RegularTimePeriod.downsize(class2);
      assertEquals("class org.jfree.data.time.Day", class3.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Day", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      
      Class<Quarter> class2 = Quarter.class;
      Class class3 = RegularTimePeriod.downsize(class2);
      assertNotSame(class3, class1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Quarter> class0 = Quarter.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Month", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      
      Class<Year> class2 = Year.class;
      Class class3 = RegularTimePeriod.downsize(class2);
      assertEquals("class org.jfree.data.time.Quarter", class3.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Year> class0 = Year.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertEquals("class org.jfree.data.time.Quarter", class1.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("9pk@cpey");
      RegularTimePeriod.createInstance(class0, date0, timeZone0);
      Millisecond millisecond0 = new Millisecond();
      Date date1 = millisecond0.getStart();
      Class<Month> class1 = Month.class;
      Month month0 = (Month)RegularTimePeriod.createInstance(class1, date1, timeZone0);
      assertEquals(2014, month0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      Date date0 = fixedMillisecond0.getEnd();
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minute minute0 = new Minute();
      String string0 = minute0.toString();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
  }
}
