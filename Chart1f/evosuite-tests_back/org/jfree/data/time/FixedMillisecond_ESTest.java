/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:45:41 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedMillisecond_ESTest extends FixedMillisecond_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-3678L));
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond1.previous();
      boolean boolean0 = fixedMillisecond0.equals(regularTimePeriod0);
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(boolean0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      assertFalse(fixedMillisecond1.equals((Object)regularTimePeriod0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      long long0 = fixedMillisecond0.getSerialIndex();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-2749), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      long long0 = fixedMillisecond0.getSerialIndex();
      assertEquals((-9438249600000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      long long0 = fixedMillisecond0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      long long0 = fixedMillisecond0.getMiddleMillisecond();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      long long0 = fixedMillisecond0.getMiddleMillisecond();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-479L));
      long long0 = fixedMillisecond0.getMiddleMillisecond();
      assertEquals((-479L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      long long0 = fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2009));
      long long0 = fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      long long0 = fixedMillisecond0.getLastMillisecond();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 384, 0, 1, 384);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      long long0 = fixedMillisecond0.getLastMillisecond();
      assertEquals((-1199291760000L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(548, 548, 548);
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2009));
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      long long0 = fixedMillisecond0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      long long0 = fixedMillisecond0.getFirstMillisecond();
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = null;
      try {
        fixedMillisecond0 = new FixedMillisecond((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.FixedMillisecond", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      long long0 = fixedMillisecond0.getLastMillisecond();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      long long0 = fixedMillisecond0.getFirstMillisecond();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      int int0 = fixedMillisecond0.compareTo((Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      
      int int0 = ((FixedMillisecond) regularTimePeriod0).compareTo(fixedMillisecond0);
      assertEquals((-1), int0);
      assertEquals(1L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1L);
      int int0 = fixedMillisecond0.compareTo(fixedMillisecond1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      int int0 = fixedMillisecond0.compareTo(fixedMillisecond0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      Millisecond millisecond0 = new Millisecond();
      int int0 = fixedMillisecond0.compareTo(millisecond0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      boolean boolean0 = fixedMillisecond0.equals("org.jfree.data.time.FixedMillisecod");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = fixedMillisecond0.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(1L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775766L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      //  // Unstable assertion: assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      Date date0 = fixedMillisecond0.getTime();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      long long0 = fixedMillisecond0.getLastMillisecond(calendar0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      long long0 = fixedMillisecond0.getMiddleMillisecond(calendar0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      boolean boolean0 = fixedMillisecond0.equals(fixedMillisecond0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      fixedMillisecond0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Date date0 = spreadsheetDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      fixedMillisecond0.peg(calendar0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2L);
      long long0 = fixedMillisecond0.getSerialIndex();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
  }
}
