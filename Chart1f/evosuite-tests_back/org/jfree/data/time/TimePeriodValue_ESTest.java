/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:08:02 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValue_ESTest extends TimePeriodValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-2427), hour0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (-353.47850784));
      timePeriodValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1065, 1065, 2782, 1065, (-915), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(fixedMillisecond0, (Number) null);
      Number number0 = timePeriodValue0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1271L));
      Integer integer0 = new Integer((-1705));
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) integer0);
      Number number0 = timePeriodValue0.getValue();
      assertEquals((-1705), number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-818L));
      Date date0 = Date.from(instant0);
      Millisecond millisecond0 = new Millisecond(date0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 999);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(999, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = null;
      try {
        timePeriodValue0 = new TimePeriodValue((TimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, 0.0);
      Second second1 = (Second)timePeriodValue0.getPeriod();
      assertEquals(1392409282319L, second1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, 0.0);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4593, 1799, 1799, 29, 4593, 29);
      Day day0 = new Day(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-0.7986891356429928));
      timePeriodValue0.setValue((Number) null);
      timePeriodValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(593, 593, 593, 593, 593);
      Day day0 = new Day(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, (Number) null);
      Object object0 = timePeriodValue0.clone();
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (double) 23);
      Object object0 = timePeriodValue0.clone();
      assertTrue(object0.equals((Object)timePeriodValue0));
      
      timePeriodValue0.setValue(23);
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertFalse(object0.equals((Object)timePeriodValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (double) 23);
      Object object0 = timePeriodValue0.clone();
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (Number) 999);
      TimePeriodValue timePeriodValue1 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (double) 23);
      boolean boolean0 = timePeriodValue0.equals(hour0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (double) 23);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = null;
      try {
        timePeriodValue0 = new TimePeriodValue((TimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (double) 54);
      Object object0 = timePeriodValue0.clone();
      assertTrue(object0.equals((Object)timePeriodValue0));
      
      timePeriodValue0.setValue((Number) null);
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 999);
      String string0 = timePeriodValue0.toString();
      assertEquals("TimePeriodValue[Fri Feb 14 20:21:21 GMT 2014,999]", string0);
  }
}
