/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:04:47 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minute_ESTest extends Minute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minute minute0 = Minute.parseMinute("Null 'day' argument.");
      assertNull(minute0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(101, hour0);
      Minute minute1 = (Minute)minute0.previous();
      int int0 = minute1.compareTo(minute0);
      assertEquals(100, minute1.getMinute());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(101, hour0);
      Minute minute1 = (Minute)minute0.next();
      assertEquals(102, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("Could not find separator.");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(999, hour0);
      Minute minute1 = (Minute)minute0.previous();
      assertEquals((-26), minute1.getMinute());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-1), day0);
      Minute minute0 = new Minute(0, hour0);
      int int0 = minute0.getMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4049, (-231), (-183));
      TimeZone timeZone0 = TimeZone.getTimeZone("6c<i#>T($~t*r");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(999, hour0);
      int int0 = minute0.getMinute();
      assertEquals((-25), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 0, 59);
      minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(101, hour0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2245, 0, 23, (-1250));
      minute0.peg(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=101,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      minute0.getLastMillisecond();
      assertEquals(101, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-959L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getLastMillisecond();
      assertEquals(44, minute0.getMinute());
      assertEquals(23, minute0.getHourValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4049, (-231), (-183));
      TimeZone timeZone0 = TimeZone.getTimeZone("6c<i#>T($~t*r");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(999, hour0);
      minute0.getHourValue();
      assertEquals((-25), minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-1), day0);
      Minute minute0 = new Minute(0, hour0);
      int int0 = minute0.getHourValue();
      assertEquals(0, minute0.getMinute());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(28, 0, 0, 0, 0, 0);
      Minute minute0 = new Minute(mockDate0);
      Hour hour0 = minute0.getHour();
      assertEquals(0, hour0.getHour());
      assertEquals(0, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-1), day0);
      Minute minute0 = new Minute(0, hour0);
      Hour hour1 = minute0.getHour();
      assertEquals((-1), hour1.getHour());
      assertEquals(0, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(101, hour0);
      System.setCurrentTimeMillis(0);
      Hour hour1 = minute0.getHour();
      assertEquals(101, minute0.getMinute());
      assertEquals(20, hour1.getHour());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("Could not find separator.");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      Minute minute0 = new Minute(999, hour0);
      Hour hour1 = minute0.getHour();
      assertEquals((-25), minute0.getMinute());
      assertEquals(23, hour1.getHour());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-1), day0);
      Minute minute0 = new Minute(0, hour0);
      Calendar calendar0 = MockCalendar.getInstance();
      minute0.getFirstMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=-1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1902), (-1597), (-1597), 0, 59);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.setTime(date0);
      minute0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1046, 0, 1046, 210, 59);
      minute0.peg(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      minute0.getFirstMillisecond();
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-959L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      long long0 = minute0.getFirstMillisecond();
      assertEquals(44, minute0.getMinute());
      assertEquals((-959000L), long0);
      assertEquals(23, minute0.getHourValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-959L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getDay();
      assertEquals(44, minute0.getMinute());
      assertEquals(23, minute0.getHourValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        minute0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minute.parseMinute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        minute0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        minute0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minute minute0 = null;
      try {
        minute0 = new Minute((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minute minute0 = null;
      try {
        minute0 = new Minute((-72), (-72), 1071, (-72), 1071);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockDate mockDate0 = new MockDate(17, 1575, 59, 32, 20, 1575);
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertEquals(8, minute0.getHourValue());
      assertEquals(46, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1902), (-1597), (-1597), 0, 59);
      minute0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(101, hour0);
      TimeZone timeZone0 = TimeZone.getTimeZone("N-v5o^ih];dpgsoL");
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=101,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2006L));
      Minute minute0 = new Minute(mockDate0);
      Millisecond millisecond0 = new Millisecond();
      int int0 = minute0.compareTo(millisecond0);
      assertEquals(23, minute0.getHourValue());
      assertEquals(59, minute0.getMinute());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2006L));
      Minute minute0 = new Minute(mockDate0);
      Minute minute1 = new Minute();
      int int0 = minute0.compareTo(minute1);
      assertEquals(20, minute1.getHourValue());
      assertEquals(59, minute0.getMinute());
      assertEquals(21, minute1.getMinute());
      assertEquals((-16116), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-1), day0);
      Minute minute0 = new Minute(0, hour0);
      int int0 = minute0.compareTo("Null 'locale' argument.");
      assertEquals(1, int0);
      assertEquals(0, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      Minute minute1 = new Minute();
      boolean boolean0 = minute0.equals(minute1);
      assertEquals(21, minute1.getMinute());
      assertTrue(boolean0);
      assertEquals(20, minute1.getHourValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minute minute0 = new Minute();
      boolean boolean0 = minute0.equals(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1046, 59, 0, 0, 59);
      minute0.equals(mockGregorianCalendar0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minute minute0 = new Minute();
      Minute minute1 = (Minute)minute0.next();
      boolean boolean0 = minute0.equals(minute1);
      assertEquals(22, minute1.getMinute());
      assertFalse(boolean0);
      assertEquals(20, minute0.getHourValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2006L));
      Minute minute0 = new Minute(mockDate0);
      Minute minute1 = (Minute)minute0.next();
      assertNotNull(minute1);
      
      Minute minute2 = (Minute)minute1.previous();
      assertEquals(59, minute2.getMinute());
      assertEquals(0, minute1.getHourValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-9223372036854775808L));
      Minute minute0 = null;
      try {
        minute0 = new Minute(mockDate0, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Minute minute0 = null;
      try {
        minute0 = new Minute((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minute minute0 = null;
      try {
        minute0 = new Minute(0, (Hour) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hour' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minute minute0 = new Minute(5, 5, 5, 5, 1918);
      assertEquals(5, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.hashCode();
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.getLastMillisecond();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minute minute0 = new Minute();
      long long0 = minute0.getSerialIndex();
      assertEquals(60026181L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minute minute0 = new Minute();
      Minute minute1 = (Minute)minute0.previous();
      boolean boolean0 = minute0.equals(minute1);
      assertEquals(20, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.getFirstMillisecond();
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Minute minute0 = new Minute();
      int int0 = minute0.getMinute();
      assertEquals(21, int0);
      assertEquals(20, minute0.getHourValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Minute minute0 = new Minute();
      int int0 = minute0.getHourValue();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.getDay();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
  }
}
