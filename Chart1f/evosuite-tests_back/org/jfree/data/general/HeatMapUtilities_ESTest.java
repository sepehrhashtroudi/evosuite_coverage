/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:07:52 GMT 2022
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.HeatMapDataset;
import org.jfree.data.general.HeatMapUtilities;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeatMapUtilities_ESTest extends HeatMapUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(2297, 2297, (-2614.633), 2297, (-2614.633), (-2614.633));
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      // Undeclared exception!
      HeatMapUtilities.extractRowFromHeatMapDataset(defaultHeatMapDataset0, 30, year0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2901L);
      // Undeclared exception!
      try { 
        HeatMapUtilities.extractRowFromHeatMapDataset((HeatMapDataset) null, (-264), fixedMillisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.HeatMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HeatMapUtilities.extractRowFromHeatMapDataset((HeatMapDataset) null, 340, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1599, 1599, 0.0, (-2491.04142039), 0.0, 1599);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        HeatMapUtilities.extractRowFromHeatMapDataset(defaultHeatMapDataset0, 1599, millisecond0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(54, 1057, 537.28120316, 1057, 0.0, 537.28120316);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      HeatMapUtilities.extractColumnFromHeatMapDataset(defaultHeatMapDataset0, 1, fixedMillisecond0);
      // Undeclared exception!
      HeatMapUtilities.extractColumnFromHeatMapDataset(defaultHeatMapDataset0, 1, fixedMillisecond0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      // Undeclared exception!
      try { 
        HeatMapUtilities.extractColumnFromHeatMapDataset((HeatMapDataset) null, 7, day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.HeatMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(206, 206, 1914.2969, 206, 1.0, 1.0);
      // Undeclared exception!
      try { 
        HeatMapUtilities.extractColumnFromHeatMapDataset(defaultHeatMapDataset0, 206, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(2568, 2568, 2568, 2568, (-647.0), 0.0);
      SerialDate serialDate0 = SerialDate.createInstance(2568);
      // Undeclared exception!
      try { 
        HeatMapUtilities.extractColumnFromHeatMapDataset(defaultHeatMapDataset0, 2568, serialDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1600, 1600, (-163.1053358), (-1596.3864708), (-1596.3864708), 1600);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      // Undeclared exception!
      HeatMapUtilities.createHeatMapImage(defaultHeatMapDataset0, lookupPaintScale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(353, 353, (-3.7974427657673573), (-3.7974427657673573), 353, 353);
      // Undeclared exception!
      try { 
        HeatMapUtilities.createHeatMapImage(defaultHeatMapDataset0, (PaintScale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paintScale' argument.
         //
         verifyException("org.jfree.data.general.HeatMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      // Undeclared exception!
      try { 
        HeatMapUtilities.createHeatMapImage((HeatMapDataset) null, grayPaintScale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.HeatMapUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(8, 356, 356, 8, (-1334.009345), 0.0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      BufferedImage bufferedImage0 = HeatMapUtilities.createHeatMapImage(defaultHeatMapDataset0, lookupPaintScale0);
      assertEquals(356, bufferedImage0.getHeight());
      assertEquals(8, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(8, 356, 356, 8, (-1334.009345), 0.0);
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)HeatMapUtilities.extractRowFromHeatMapDataset(defaultHeatMapDataset0, 0, timeSeriesDataItem0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }
}
