/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:01:05 GMT 2022
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.DefaultKeyedValue;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValueDataset_ESTest extends DefaultKeyedValueDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(hour0, 0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(defaultKeyedValue0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getStart();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(millisecond0, 0);
      defaultKeyedValueDataset0.setValue(date0, 59);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals(59, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset1.updateValue((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Second second0 = millisecond0.getSecond();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(millisecond0, 0);
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.setValue((Comparable) null, second0.LAST_SECOND_IN_MINUTE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = null;
      try {
        defaultKeyedValueDataset0 = new DefaultKeyedValueDataset((Comparable) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Day day0 = new Day();
      Byte byte0 = new Byte((byte) (-63));
      defaultKeyedValueDataset0.setValue(day0, byte0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals((byte) (-63), number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Comparable comparable0 = defaultKeyedValueDataset0.getKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Day day0 = new Day();
      Byte byte0 = new Byte((byte) (-63));
      defaultKeyedValueDataset0.setValue(day0, byte0);
      Comparable comparable0 = defaultKeyedValueDataset0.getKey();
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(millisecond0, 999);
      defaultKeyedValueDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(week0, 1);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      assertTrue(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset0));
      
      defaultKeyedValueDataset1.updateValue(53);
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertFalse(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(week0, 1);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertTrue(defaultKeyedValueDataset0.equals((Object)defaultKeyedValueDataset1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(millisecond0, 999);
      Object object0 = new Object();
      boolean boolean0 = defaultKeyedValueDataset0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(millisecond0, 999);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset();
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(millisecond0, 999);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset();
      Object object0 = defaultKeyedValueDataset1.clone();
      boolean boolean0 = defaultKeyedValueDataset0.equals(object0);
      assertFalse(boolean0);
      assertNotSame(object0, defaultKeyedValueDataset1);
      assertTrue(object0.equals((Object)defaultKeyedValueDataset1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertTrue(boolean0);
  }
}
