/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:06:44 GMT 2022
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import javax.swing.plaf.synth.SynthRootPaneUI;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.Year;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Series_ESTest extends Series_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("0Z?M", false, false);
      comparableObjectSeries0.setDescription("Null 'key' argument.");
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-98L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.setKey(regularTimePeriod0);
      assertTrue(timePeriodValues0.getNotify());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries(")6d<o>Rzx");
      assertTrue(taskSeries0.getNotify());
      
      taskSeries0.setNotify(false);
      boolean boolean0 = taskSeries0.getNotify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("0Z?M", false, false);
      comparableObjectSeries0.setDescription("0Z?M");
      String string0 = comparableObjectSeries0.getDescription();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1900, 0);
      matrixSeries0.setDescription("");
      String string0 = matrixSeries0.getDescription();
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "Description", "Description");
      timeSeries0.equals(timeSeries0);
      assertTrue(timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2420L), 0L);
      Date date0 = simpleTimePeriod0.getEnd();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(simpleTimePeriod0);
      comparableObjectSeries0.equals(date0);
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-98L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      timePeriodValues0.fireSeriesChanged();
      assertTrue(timePeriodValues0.getNotify());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Millisecond millisecond0 = new Millisecond(date0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(millisecond0, false, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      comparableObjectSeries0.addChangeListener(taskSeriesCollection0);
      comparableObjectSeries0.addChangeListener(taskSeriesCollection0);
      comparableObjectSeries0.fireSeriesChanged();
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries(")6d<o>Rzx");
      taskSeries0.hashCode();
      assertTrue(taskSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1900, 0);
      matrixSeries0.getDescription();
      assertTrue(matrixSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-98L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      timePeriodValues0.removeChangeListener(dynamicTimeSeriesCollection0);
      assertTrue(timePeriodValues0.getNotify());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Month month0 = new Month();
      Year year0 = month0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(year0, true, false);
      comparableObjectSeries0.removeChangeListener(timeSeriesTableModel0);
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1900, 0);
      matrixSeries0.setDescription("");
      matrixSeries0.hashCode();
      assertTrue(matrixSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("0Z*?N", false, false);
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      
      comparableObjectSeries1.setDescription("Null 'key' argument.");
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Month month0 = new Month();
      Year year0 = month0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 0L);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(year0, true, false);
      ComparableObjectSeries comparableObjectSeries1 = new ComparableObjectSeries(timeSeriesDataItem0, true, true);
      comparableObjectSeries1.equals(comparableObjectSeries0);
      assertTrue(comparableObjectSeries1.getNotify());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      boolean boolean0 = xYSeries0.isEmpty();
      assertTrue(boolean0);
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 0, (Number) 0);
      boolean boolean0 = xYSeries0.isEmpty();
      assertTrue(xYSeries0.getNotify());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      assertTrue(xYSeries0.getNotify());
      
      xYSeries0.setNotify(false);
      xYSeries0.fireSeriesChanged();
      assertFalse(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2420L), (-2420L));
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(simpleTimePeriod0);
      comparableObjectSeries0.setNotify(true);
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.setKey((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2420L), (-2420L));
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(simpleTimePeriod0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      comparableObjectSeries0.addPropertyChangeListener(synthSpinnerUI0);
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0);
      timePeriodValues0.setDomainDescription("-`PMb!' \bud>@w,F<");
      assertTrue(timePeriodValues0.getNotify());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("0Z*?N", false, false);
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2420L), (-2420L));
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(simpleTimePeriod0);
      SynthRootPaneUI synthRootPaneUI0 = new SynthRootPaneUI();
      comparableObjectSeries0.removePropertyChangeListener(synthRootPaneUI0);
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Month month0 = new Month();
      Year year0 = month0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getKey();
      assertTrue(timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0);
      boolean boolean0 = xYSeries0.getNotify();
      assertTrue(boolean0);
  }
}
