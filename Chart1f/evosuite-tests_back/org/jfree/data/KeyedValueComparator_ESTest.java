/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 19:48:03 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValue;
import org.jfree.data.KeyedValueComparator;
import org.jfree.data.KeyedValueComparatorType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyedValueComparator_ESTest extends KeyedValueComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1415);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, double0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(double0, double0);
      Float float0 = new Float((double) 1415);
      defaultKeyedValue0.setValue(float0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((-2504.257));
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      Short short0 = new Short((short) (-2770));
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue(float0, short0);
      // Undeclared exception!
      try { 
        keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.Comparable$MockitoMock$329980389 cannot be cast to java.lang.Float
         //
         verifyException("java.lang.Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      Double double0 = new Double(0.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(double0, double0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue("(java.lang.Double@0000000002, java.lang.Double@0000000002)", double0);
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      // Undeclared exception!
      try { 
        keyedValueComparator0.compare(defaultKeyedValue1, defaultKeyedValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator((KeyedValueComparatorType) null, sortOrder0);
      KeyedValueComparatorType keyedValueComparatorType0 = keyedValueComparator0.getType();
      assertNull(keyedValueComparatorType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte)0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, byte0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, (Number) null);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator((KeyedValueComparatorType) null, sortOrder0);
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte)0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, byte0);
      // Undeclared exception!
      try { 
        keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.data.KeyedValueComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      int int0 = keyedValueComparator0.compare(defaultKeyedValue0, defaultKeyedValue0);
      //  // Unstable assertion: assertEquals(943, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      int int0 = keyedValueComparator0.compare((Object) null, keyedValueComparatorType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      Object object0 = new Object();
      int int0 = keyedValueComparator0.compare(object0, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_KEY;
      KeyedValueComparator keyedValueComparator0 = null;
      try {
        keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, (SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.data.KeyedValueComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      SortOrder sortOrder1 = keyedValueComparator0.getOrder();
      assertEquals("SortOrder.ASCENDING", sortOrder1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedValueComparatorType keyedValueComparatorType0 = KeyedValueComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedValueComparator keyedValueComparator0 = new KeyedValueComparator(keyedValueComparatorType0, sortOrder0);
      KeyedValueComparatorType keyedValueComparatorType1 = keyedValueComparator0.getType();
      assertEquals("KeyedValueComparatorType.BY_VALUE", keyedValueComparatorType1.toString());
  }
}
