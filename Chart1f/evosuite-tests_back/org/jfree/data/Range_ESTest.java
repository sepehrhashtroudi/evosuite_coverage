/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:24:02 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      Range range1 = Range.expand(range0, 0.0, (-1927.15));
      range1.hashCode();
      assertEquals((-963.075), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(1158.7373, 1158.7373);
      Range range1 = Range.scale(range0, 1158.7373);
      Range range2 = Range.shift(range0, 1158.7373);
      Range range3 = Range.combine(range2, range1);
      boolean boolean0 = range2.equals(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(boolean0);
      assertFalse(range3.equals((Object)range1));
      assertEquals(672494.8025056451, range3.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-938.321913747), (-938.321913747));
      Range range1 = Range.shift(range0, (-2638.1059826261));
      boolean boolean0 = range1.equals(range0);
      assertEquals((-3576.4278963731), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1061.18833), 3131.0);
      Range range1 = Range.scale(range0, 0.0);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range1.intersects((-1.0), (-177.004406877));
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-917.75158150417), 3634.752);
      Range range1 = Range.shift(range0, 3634.752, true);
      Range range2 = Range.shift(range1, 621.0287982);
      assertEquals(5614.281007447915, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-2199.540355603911), (-2199.540355603911));
      Range range1 = Range.scale(range0, 1.0);
      assertEquals((-2199.540355603911), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2676.29479252);
      Range range1 = Range.scale(range0, 2676.29479252);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      double double0 = range0.getLowerBound();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-1660.196434006), 0.0);
      double double0 = range0.getLength();
      assertEquals(1660.196434006, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(1747.964688, 1747.964688);
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.shift(range1, 0.0, false);
      double double0 = range2.getCentralValue();
      assertEquals(1747.964688, range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 4746.0);
      double double0 = range0.getCentralValue();
      assertEquals(2373.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-243.29920110526908));
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-2165.27842), 1232.5764749392);
      Range range1 = Range.expand(range0, 1232.5764749392, 1232.5764749392);
      Range range2 = Range.expandToInclude(range1, (-2165.27842));
      Range range3 = Range.combine(range0, range2);
      assertEquals(8379629.872413067, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain((-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-2165.27842), 1232.5764749392);
      double double0 = range0.constrain((-2165.27842));
      assertEquals(1232.5764749392, range0.getUpperBound(), 0.01);
      assertEquals((-2165.27842), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.shift(range0, (-539.65269));
      Range range2 = Range.combine(range1, (Range) null);
      assertEquals((-539.65269), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range((-1061.18833), 3131.0);
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.combine(range1, range1);
      assertNotSame(range2, range1);
      assertEquals(-0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-2967.9564449004447), 67.68042623743);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1.0), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1475.04);
      boolean boolean0 = range1.intersects(1.0, 1475.04);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      boolean boolean0 = range0.intersects(1.0, 1096.16384778813);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      boolean boolean0 = range0.contains(2.0);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-807.776));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(1158.7373, 1158.7373);
      double double0 = range0.getUpperBound();
      assertEquals(1158.7373, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(1901.858264131822, 1901.858264131822);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-2199.540355603911), (-2199.540355603911));
      double double0 = range0.getLowerBound();
      assertEquals((-2199.540355603911), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(475.0, 475.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range0, (-934.9710579664876), false);
      boolean boolean0 = range1.equals(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-2199.540355603911), (-2199.540355603911));
      Range range1 = Range.shift(range0, (-2199.540355603911), false);
      boolean boolean0 = range0.equals(range1);
      assertEquals((-4399.080711207822), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-2165.27842), 1232.5764749392);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals((-466.3509725304001), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(913.8782580012863, 913.8782580012863);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-939.6959982801));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-319.73403043829), 81.1755734587619);
      Range range1 = Range.scale(range0, 2326.351298);
      assertEquals((-277485.3880216012), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(913.8782580012863, 913.8782580012863);
      assertEquals(913.8782580012863, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-939.6959982801));
      Range range2 = Range.shift(range1, (-939.6959982801), false);
      assertEquals((-939.6959982801), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 116.6618);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-319.73403043829), 81.1755734587619);
      Range range1 = Range.expand(range0, 45.1, (-1857.8444842235133));
      assertEquals((-381573.638932554), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 843.3196511276802, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2676.29479252);
      Range range1 = Range.expandToInclude(range0, 2676.29479252);
      assertEquals(2676.29479252, range1.getLowerBound(), 0.01);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2676.29479252);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(2676.29479252, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-319.73403043829), 85.88551715022632);
      double double0 = range0.constrain(85.88551715022632);
      assertEquals(85.88551715022632, double0, 0.01);
      assertEquals((-319.73403043829), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-319.73403043829), 85.88551715022632);
      Range range1 = Range.shift(range0, 85.88551715022632, false);
      boolean boolean0 = range1.intersects(85.88551715022632, (-319.73403043829));
      assertEquals(405.6195475885163, range1.getLength(), 0.01);
      assertFalse(boolean0);
      assertEquals((-319.73403043829), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(913.8782580012863, 913.8782580012863);
      boolean boolean0 = range0.intersects(913.8782580012863, 913.8782580012863);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-319.73403043829), 85.88551715022632);
      boolean boolean0 = range0.intersects(85.88551715022632, (-319.73403043829));
      assertFalse(boolean0);
      assertEquals((-116.92425664403184), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-319.73403043829), 81.1755734587619);
      double double0 = range0.constrain(2326.351298);
      assertEquals((-319.73403043829), range0.getLowerBound(), 0.01);
      assertEquals(81.1755734587619, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range((-2967.9564449004447), 67.68042623743);
      boolean boolean0 = range0.contains(1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(34922.73012803079, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (34922.73012803079) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = new Range((-2967.9564449004447), 67.68042623743);
      String string0 = range0.toString();
      assertEquals("Range[-2967.9564449004447,67.68042623743]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = new Range((-2967.9564449004447), 67.68042623743);
      double double0 = range0.getCentralValue();
      assertEquals((-1450.1380093315074), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2676.29479252);
      Range range1 = Range.expand(range0, 2676.29479252, 2676.29479252);
      assertTrue(range1.equals((Object)range0));
  }
}
