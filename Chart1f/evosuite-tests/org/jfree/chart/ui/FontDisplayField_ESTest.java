/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:03:38 GMT 2022
 */

package org.jfree.chart.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ui.FontDisplayField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FontDisplayField_ESTest extends FontDisplayField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FontDisplayField fontDisplayField0 = new FontDisplayField((Font) null);
      Font font0 = fontDisplayField0.getDisplayFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont(", ", 12, 0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(12, 0);
      Font font1 = font0.deriveFont(affineTransform0);
      FontDisplayField fontDisplayField0 = new FontDisplayField(font1);
      Font font2 = fontDisplayField0.getDisplayFont();
      assertEquals(0, font2.getSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      Font font1 = font0.deriveFont(4742, (float) 4742);
      FontDisplayField fontDisplayField0 = new FontDisplayField(font1);
      Font font2 = fontDisplayField0.getDisplayFont();
      assertEquals("Default", font2.getName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Font font0 = new Font("[m]=[)EAc3", (-474), (-474));
      Font font1 = font0.deriveFont(1, 0.0F);
      FontDisplayField fontDisplayField0 = new FontDisplayField(font1);
      Font font2 = fontDisplayField0.getDisplayFont();
      assertEquals("[m]=[)EAc3", font2.getName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Font font0 = new Font("x%7.l", (-801), (-801));
      FontDisplayField fontDisplayField0 = new FontDisplayField(font0);
      Font font1 = fontDisplayField0.getDisplayFont();
      assertFalse(font1.isTransformed());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FontDisplayField fontDisplayField0 = new FontDisplayField((Font) null);
      fontDisplayField0.setFont((Font) null);
      // Undeclared exception!
      try { 
        fontDisplayField0.setDisplayFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FontDisplayField fontDisplayField0 = new FontDisplayField((Font) null);
      fontDisplayField0.setDisplayFont((Font) null);
      assertTrue(fontDisplayField0.getFocusTraversalKeysEnabled());
  }
}
