/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:12:44 GMT 2022
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import javax.swing.JInternalFrame;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoxAndWhiskerRenderer_ESTest extends BoxAndWhiskerRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Color color0 = Color.red;
      boxAndWhiskerRenderer0.setArtifactPaint(color0);
      Color color1 = (Color)boxAndWhiskerRenderer0.getArtifactPaint();
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(255, color1.getRed());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      
      boxAndWhiskerRenderer0.setMaximumBarWidth((double) boxAndWhiskerRenderer0.ZERO);
      double double0 = boxAndWhiskerRenderer0.getMaximumBarWidth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setMaximumBarWidth((-2358.50921185));
      double double0 = boxAndWhiskerRenderer0.getMaximumBarWidth();
      assertEquals((-2358.50921185), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setItemMargin((-1178.096335976));
      double double0 = boxAndWhiskerRenderer0.getItemMargin();
      assertEquals((-1178.096335976), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      
      boxAndWhiskerRenderer0.setFillBox(false);
      boolean boolean0 = boxAndWhiskerRenderer0.getFillBox();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, (CategoryPlot) null, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2);
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, boxAndWhiskerRenderer0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double((-420.4757740381166), 0.0, 0.2, (-2319.673265), 10, (double) boxAndWhiskerRenderer0.ZERO);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawVerticalItem((Graphics2D) null, categoryStepRenderer_State0, rectangle2D0, categoryPlot0, categoryAxis3D0, cyclicNumberAxis0, jDBCCategoryDataset0, (-4119), (-626), true, 10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.jdbc.JDBCCategoryDataset cannot be cast to org.jfree.data.statistics.BoxAndWhiskerCategoryDataset
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      float[][] floatArray0 = new float[7][1];
      LogAxis logAxis0 = new LogAxis("");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, false, true, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawHorizontalItem(graphics2D0, (CategoryItemRendererState) null, rectangle0, combinedDomainCategoryPlot0, subCategoryAxis0, logAxis0, defaultMultiValueCategoryDataset0, 1, 1, true, 3006);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to org.jfree.data.statistics.BoxAndWhiskerCategoryDataset
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      
      boxAndWhiskerRenderer0.setMaximumBarWidth((double) boxAndWhiskerRenderer0.ZERO);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer1);
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer1.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer1.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer1.getFillBox());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer0);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      boolean boolean0 = boxAndWhiskerRenderer0.equals(categoryAxis3D0);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getLegendItem(0, 0);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      
      boxAndWhiskerRenderer0.setMeanVisible(false);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      
      boxAndWhiskerRenderer0.setMeanVisible(true);
      boolean boolean0 = boxAndWhiskerRenderer0.isMeanVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setArtifactPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.BoxAndWhiskerRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMeanVisible();
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boolean0);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.isMedianVisible();
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boolean0);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double double0 = boxAndWhiskerRenderer0.getItemMargin();
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, double0, 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      
      boxAndWhiskerRenderer0.setMedianVisible(false);
      assertFalse(boxAndWhiskerRenderer0.isMedianVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double double0 = boxAndWhiskerRenderer0.getMaximumBarWidth();
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.getFillBox();
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boolean0);
  }
}
