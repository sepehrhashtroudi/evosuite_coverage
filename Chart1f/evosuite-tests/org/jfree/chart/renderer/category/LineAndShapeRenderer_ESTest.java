/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:18:20 GMT 2022
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineAndShapeRenderer_ESTest extends LineAndShapeRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setSeriesShapesFilled(1250, false);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      
      lineRenderer3D0.setUseSeriesOffset(true);
      boolean boolean0 = lineRenderer3D0.getUseSeriesOffset();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      
      statisticalLineAndShapeRenderer0.setUseFillPaint(true);
      boolean boolean0 = statisticalLineAndShapeRenderer0.getUseFillPaint();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesShapesVisible(363, true);
      Boolean boolean0 = lineRenderer3D0.getSeriesShapesVisible(363);
      assertTrue(boolean0);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertNotNull(boolean0);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      Boolean boolean0 = new Boolean(true);
      lineAndShapeRenderer0.setSeriesShapesFilled(0, boolean0);
      Boolean boolean1 = lineAndShapeRenderer0.getSeriesShapesFilled(0);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertNotNull(boolean1);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.getItemShapeVisible((-1879), (-1879));
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertFalse(boolean0);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      
      lineAndShapeRenderer0.setBaseLinesVisible(false);
      boolean boolean0 = lineAndShapeRenderer0.getItemLineVisible(0, (-738));
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      
      statisticalLineAndShapeRenderer0.setDrawOutlines(false);
      boolean boolean0 = statisticalLineAndShapeRenderer0.getDrawOutlines();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      boolean boolean0 = lineAndShapeRenderer0.getBaseShapesVisible();
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      
      lineRenderer3D0.setBaseShapesFilled(false);
      boolean boolean0 = lineRenderer3D0.getBaseShapesFilled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesShapesVisible((-54), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesShapesVisible((-9999), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesShapesFilled((-64), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-2942), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesLinesVisible((-1), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getSeriesShapesFilled(2);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesLinesVisible(363, (Boolean) null);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.getSeriesLinesVisible(0);
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.setBaseShapesFilled(false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(lineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertTrue(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      
      Boolean boolean0 = Boolean.valueOf(false);
      lineAndShapeRenderer1.setSeriesShapesFilled(19, boolean0);
      boolean boolean1 = lineAndShapeRenderer1.equals(lineAndShapeRenderer0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      Boolean boolean0 = new Boolean(true);
      lineAndShapeRenderer0.setSeriesShapesVisible(544, boolean0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean1 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(boolean1);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(boolean0);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getBaseLinesVisible());
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer1.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertTrue(lineAndShapeRenderer1.getBaseShapesFilled());
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      boolean boolean0 = lineAndShapeRenderer0.equals(lineAndShapeRenderer0);
      assertTrue(boolean0);
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Boolean boolean0 = new Boolean("kDxyM");
      boolean boolean1 = lineAndShapeRenderer0.equals(boolean0);
      assertFalse(boolean1);
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.getLegendItem((-417), (-2235));
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin(250000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setItemMargin(0);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setItemMargin((-699.0044679398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 0.0 <= margin < 1.0.
         //
         verifyException("org.jfree.chart.renderer.category.LineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      Boolean boolean0 = Boolean.valueOf(false);
      lineAndShapeRenderer0.setSeriesShapesFilled(19, boolean0);
      boolean boolean1 = lineAndShapeRenderer0.getItemShapeFilled(19, 28);
      assertFalse(boolean1);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = statisticalLineAndShapeRenderer0.getItemShapeVisible(1343, 2);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(boolean0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      double double0 = lineAndShapeRenderer0.getItemMargin();
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, double0, 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      int int0 = statisticalLineAndShapeRenderer0.getPassCount();
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2, int0);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      boolean boolean0 = lineAndShapeRenderer0.getBaseLinesVisible();
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(boolean0);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      boolean boolean0 = lineAndShapeRenderer0.getUseOutlinePaint();
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.getBaseShapesFilled();
      assertTrue(boolean0);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getSeriesShapesVisible(363);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.getItemShapeFilled(363, 363);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(boolean0);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      
      lineAndShapeRenderer0.setBaseLinesVisible(false);
      boolean boolean0 = lineAndShapeRenderer0.getBaseLinesVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getUseFillPaint();
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(boolean0);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.setBaseShapesVisible(false);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getDrawOutlines();
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      boolean boolean0 = lineAndShapeRenderer0.getUseSeriesOffset();
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      
      lineAndShapeRenderer0.setUseOutlinePaint(true);
      assertTrue(lineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesLinesVisible(363, false);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesShapesFilled((-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getItemLineVisible(0, (-738));
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(boolean0);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      boolean boolean0 = lineAndShapeRenderer0.equals(lineAndShapeRenderer1);
      assertTrue(boolean0);
      assertFalse(lineAndShapeRenderer1.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertTrue(lineAndShapeRenderer1.getBaseShapesFilled());
      assertNotSame(lineAndShapeRenderer1, lineAndShapeRenderer0);
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer1.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.getBaseShapesVisible();
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(boolean0);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
  }
}
