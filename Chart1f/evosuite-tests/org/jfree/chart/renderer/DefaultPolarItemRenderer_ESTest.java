/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:40:35 GMT 2022
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.List;
import java.util.Stack;
import javax.swing.JColorChooser;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.util.BooleanList;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPolarItemRenderer_ESTest extends DefaultPolarItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PolarPlot polarPlot0 = new PolarPlot(categoryTableXYDataset0, numberAxis3D0, defaultPolarItemRenderer0);
      PolarPlot polarPlot1 = defaultPolarItemRenderer0.getPlot();
      assertTrue(polarPlot1.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      defaultPolarItemRenderer0.setPlot(polarPlot0);
      PolarPlot polarPlot1 = defaultPolarItemRenderer0.getPlot();
      assertTrue(polarPlot1.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(defaultPolarItemRenderer0.ZERO);
      NumberAxis numberAxis0 = new NumberAxis();
      PolarPlot polarPlot0 = new PolarPlot(simpleHistogramDataset0, numberAxis0, defaultPolarItemRenderer0);
      LegendItem legendItem0 = defaultPolarItemRenderer0.getLegendItem(1466);
      assertEquals(0, legendItem0.getDatasetIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.setSeriesFilled((-1363), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PolarPlot polarPlot0 = new PolarPlot(categoryTableXYDataset0, numberAxis3D0, defaultPolarItemRenderer0);
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.getLegendItem(19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(defaultPolarItemRenderer0.ZERO);
      NumberAxis numberAxis0 = new NumberAxis();
      PolarPlot polarPlot0 = new PolarPlot(simpleHistogramDataset0, numberAxis0, defaultPolarItemRenderer0);
      AffineTransform affineTransform0 = new AffineTransform(1365.11F, (-91.3595F), 1365.11F, 1365.11F, 1365.11F, (-1904.6F));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = numberAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.drawSeries((Graphics2D) null, rectangle2D0, plotRenderingInfo0, polarPlot0, simpleHistogramDataset0, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.DefaultPolarItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.drawSeries((Graphics2D) null, (Rectangle2D) null, plotRenderingInfo0, (PolarPlot) null, xIntervalSeriesCollection0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-752.4));
      JColorChooser jColorChooser0 = new JColorChooser(((SunGraphics2D) graphics2D0).foregroundColor);
      JScrollPane jScrollPane0 = new JScrollPane(jColorChooser0);
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 1, 2);
      Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.drawRadialGridLines(graphics2D0, polarPlot0, cyclicNumberAxis0, (List) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = defaultPolarItemRenderer0.getPlot();
      assertNull(polarPlot0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setSeriesFilled(0, true);
      boolean boolean0 = defaultPolarItemRenderer0.equals(defaultPolarItemRenderer1);
      assertTrue(defaultPolarItemRenderer1.equals((Object)defaultPolarItemRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      boolean boolean0 = defaultPolarItemRenderer0.equals(defaultPolarItemRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      boolean boolean0 = defaultPolarItemRenderer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BooleanList booleanList0 = new BooleanList();
      boolean boolean0 = defaultPolarItemRenderer0.equals(booleanList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      defaultPolarItemRenderer0.setPlot(polarPlot0);
      LegendItem legendItem0 = defaultPolarItemRenderer0.getLegendItem(10);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(defaultPolarItemRenderer0.ZERO, "", "<");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, numberAxis3D0, defaultPolarItemRenderer0);
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.getLegendItem(332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      LegendItem legendItem0 = defaultPolarItemRenderer0.getLegendItem(6011);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 2000, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(defaultPolarItemRenderer0.ZERO, "", "<");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, numberAxis3D0, defaultPolarItemRenderer0);
      Stack<String> stack0 = new Stack<String>();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 1, (-170.025110953), 0.05);
      defaultPolarItemRenderer0.drawRadialGridLines(graphics2D0, polarPlot0, numberAxis3D0, stack0, rectangle2D_Double0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 2000, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(defaultPolarItemRenderer0.ZERO, "", "<");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, numberAxis3D0, defaultPolarItemRenderer0);
      Stack<String> stack0 = new Stack<String>();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 1, (-170.025110953), 0.05);
      stack0.setSize(2000);
      // Undeclared exception!
      try { 
        defaultPolarItemRenderer0.drawAngularGridLines(graphics2D0, polarPlot0, stack0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.DefaultPolarItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 2000, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(defaultPolarItemRenderer0.ZERO, "", "<");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, numberAxis3D0, defaultPolarItemRenderer0);
      Stack<String> stack0 = new Stack<String>();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 1, (-170.025110953), 0.05);
      defaultPolarItemRenderer0.drawAngularGridLines(graphics2D0, polarPlot0, stack0, rectangle2D_Double0);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, ringPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15, (double) 10, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, true, false);
      Rectangle2D rectangle2D0 = defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      defaultPolarItemRenderer0.drawSeries(graphics2D0, rectangle2D0, plotRenderingInfo0, (PolarPlot) null, jDBCXYDataset0, (-378));
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.setSeriesFilled(1769, true);
      boolean boolean0 = defaultPolarItemRenderer0.isSeriesFilled(1769);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      boolean boolean0 = defaultPolarItemRenderer0.isSeriesFilled(19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      defaultPolarItemRenderer0.setPlot(polarPlot0);
      DrawingSupplier drawingSupplier0 = defaultPolarItemRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Object object0 = defaultPolarItemRenderer0.clone();
      assertNotSame(object0, defaultPolarItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DrawingSupplier drawingSupplier0 = defaultPolarItemRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }
}
