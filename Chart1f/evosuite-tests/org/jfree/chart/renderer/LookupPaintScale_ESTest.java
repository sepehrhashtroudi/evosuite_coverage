/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:39:32 GMT 2022
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.geom.Point2D;
import javax.swing.DebugGraphics;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.LookupPaintScale;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LookupPaintScale_ESTest extends LookupPaintScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Paint paint0 = lookupPaintScale0.getDefaultPaint();
      lookupPaintScale0.add(0.0, paint0);
      lookupPaintScale0.add((-0.7443153822667042), paint0);
      lookupPaintScale0.add(0.0, paint0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.white;
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem((-1.0), color0);
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem1 = new LookupPaintScale.PaintItem(0.0, color0);
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(lookupPaintScale_PaintItem1);
      assertFalse(lookupPaintScale_PaintItem1.equals((Object)lookupPaintScale_PaintItem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Color color0 = DebugGraphics.flashColor();
      lookupPaintScale0.add(1.0, color0);
      lookupPaintScale0.add(Double.NaN, color0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement((-811));
      GlyphView glyphView0 = new GlyphView(element0);
      Color color0 = glyphView0.getForeground();
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem(385.17, color0);
      int int0 = lookupPaintScale_PaintItem0.compareTo(lookupPaintScale_PaintItem0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-11.4099));
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      GradientPaint gradientPaint0 = new GradientPaint(point2D_Double0, systemColor0, point2D_Double0, systemColor0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-1172.9662236785068), 0.0, gradientPaint0);
      double double0 = lookupPaintScale0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1172.9662236785068), lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-2429.622031616834), (-1.0), systemColor0);
      double double0 = lookupPaintScale0.getUpperBound();
      assertEquals((-2429.622031616834), lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      lookupPaintScale0.add(1.0, (Paint) null);
      Paint paint0 = lookupPaintScale0.getPaint(1.0);
      assertNull(paint0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(1074.633, 2257.8341, color0);
      double double0 = lookupPaintScale0.getLowerBound();
      assertEquals(2257.8341, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(1074.633, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.getHSBColor(1.0F, 1.0F, 1.0F);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-181.264458648504), 2694.6386235, color0);
      double double0 = lookupPaintScale0.getLowerBound();
      assertEquals((-181.264458648504), double0, 0.01);
      assertEquals(2694.6386235, lookupPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale();
      assertTrue(lookupPaintScale1.equals((Object)lookupPaintScale0));
      
      lookupPaintScale1.add(1.0, (Paint) null);
      boolean boolean0 = lookupPaintScale1.equals(lookupPaintScale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Color color0 = Color.yellow;
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale((-671.0), 1152.78, color0);
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale1);
      assertFalse(boolean0);
      assertEquals((-671.0), lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1152.78, lookupPaintScale1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LookupPaintScale lookupPaintScale1 = new LookupPaintScale();
      boolean boolean0 = lookupPaintScale1.equals(lookupPaintScale0);
      assertTrue(boolean0);
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      boolean boolean0 = lookupPaintScale0.equals(lookupPaintScale0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(1074.633, 2257.8341, color0);
      boolean boolean0 = lookupPaintScale0.equals((Object) null);
      assertEquals(2257.8341, lookupPaintScale0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(1074.633, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Color color0 = DebugGraphics.flashColor();
      lookupPaintScale0.add(1.0, color0);
      lookupPaintScale0.add(1152.78, color0);
      Color color1 = (Color)lookupPaintScale0.getPaint(1.0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(color1);
      assertEquals(0, color1.getBlue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Paint paint0 = lookupPaintScale0.getPaint((byte)0);
      lookupPaintScale0.add(1.0, paint0);
      lookupPaintScale0.getPaint(0.0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(1074.633, 2257.8341, color0);
      lookupPaintScale0.getPaint(2756.74654683);
      assertEquals(1074.633, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(2257.8341, lookupPaintScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      lookupPaintScale0.getPaint((-3269.7992216));
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = null;
      try {
        lookupPaintScale0 = new LookupPaintScale(352L, 413.6355590929, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.LookupPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowBorder;
      LookupPaintScale lookupPaintScale0 = null;
      try {
        lookupPaintScale0 = new LookupPaintScale((-2368.68188440536), (-2368.68188440536), systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.LookupPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem(1.0, (Paint) null);
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem1 = new LookupPaintScale.PaintItem((-3269.7992216), (Paint) null);
      assertFalse(lookupPaintScale_PaintItem1.equals((Object)lookupPaintScale_PaintItem0));
      
      lookupPaintScale_PaintItem1.value = 1.0;
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(lookupPaintScale_PaintItem1);
      assertTrue(lookupPaintScale_PaintItem1.equals((Object)lookupPaintScale_PaintItem0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem(1.0, (Paint) null);
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem1 = new LookupPaintScale.PaintItem((-3269.7992216), (Paint) null);
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(lookupPaintScale_PaintItem1);
      assertFalse(lookupPaintScale_PaintItem1.equals((Object)lookupPaintScale_PaintItem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem(1.0, (Paint) null);
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(lookupPaintScale_PaintItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Class<LookupPaintScale> class0 = LookupPaintScale.class;
      Paint paint0 = lookupPaintScale0.getDefaultPaint();
      LookupPaintScale.PaintItem lookupPaintScale_PaintItem0 = new LookupPaintScale.PaintItem((-0.7443153822667042), paint0);
      boolean boolean0 = lookupPaintScale_PaintItem0.equals(class0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      Paint paint0 = lookupPaintScale0.getDefaultPaint();
      lookupPaintScale0.add(0.0, paint0);
      lookupPaintScale0.add((-0.7443153822667042), paint0);
      Paint paint1 = lookupPaintScale0.getPaint(0.0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
      assertNotNull(paint1);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LookupPaintScale lookupPaintScale1 = (LookupPaintScale)lookupPaintScale0.clone();
      assertEquals(0.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(1.0, lookupPaintScale1.getUpperBound(), 0.01);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      double double0 = lookupPaintScale0.getUpperBound();
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      double double0 = lookupPaintScale0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01);
  }
}
