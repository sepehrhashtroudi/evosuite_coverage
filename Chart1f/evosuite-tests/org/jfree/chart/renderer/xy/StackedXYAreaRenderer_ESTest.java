/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:49:04 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.time.chrono.HijrahEra;
import java.util.Stack;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackedXYAreaRenderer_ESTest extends StackedXYAreaRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      double double0 = stackedXYAreaRenderer0.getPreviousHeight((TableXYDataset) null, 0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(618, standardXYToolTipGenerator0, (XYURLGenerator) null);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Stroke stroke0 = spiderWebPlot0.getSeriesOutlineStroke(3);
      stackedXYAreaRenderer0.setShapeStroke(stroke0);
      BasicStroke basicStroke0 = (BasicStroke)stackedXYAreaRenderer0.getShapeStroke();
      assertEquals(1, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-16));
      SystemColor systemColor0 = SystemColor.textHighlight;
      stackedXYAreaRenderer0.setShapePaint(systemColor0);
      SystemColor systemColor1 = (SystemColor)stackedXYAreaRenderer0.getShapePaint();
      assertEquals(0, systemColor1.getGreen());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "");
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("}iF=f^B*])G#i\"", decimalFormat0, decimalFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-202), standardXYToolTipGenerator0, standardXYURLGenerator0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      stackedXYAreaRenderer0.findRangeBounds(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(4);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight((TableXYDataset) null, 15, (-1321));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-6478));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight(jDBCXYDataset0, 1, (-835));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(4);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState((PlotRenderingInfo) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Second second0 = new Second();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 500, second0);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle2D0, (XYPlot) null, numberAxis3D0, numberAxis3D0, dynamicTimeSeriesCollection0, 0, 4, false, (-1399));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState((PlotRenderingInfo) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, false, true);
      Rectangle2D rectangle2D0 = stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_FONT.getStringBounds("", fontRenderContext0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      LogAxis logAxis0 = new LogAxis();
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D0, stackedXYAreaRenderer_StackedXYAreaRendererState0, rectangle2D0, combinedRangeXYPlot0, logAxis0, logAxis0, jDBCXYDataset0, 10, 1031, false, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1031, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(76);
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 3, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(126.0559F, 0.0F, 913.112F, 0.0F, 0.0F, 6.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0.0F, oHLCDataItemArray0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise(graphics2D0, rectangle2D0, combinedRangeXYPlot0, defaultOHLCDataset0, plotRenderingInfo0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(799.73168);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D0, xYItemRendererState0, rectangle2D0, combinedRangeXYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, defaultOHLCDataset0, 10, 15, true, 500);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.SamplingXYLineRenderer$State cannot be cast to org.jfree.chart.renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState((PlotRenderingInfo) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      FontRenderContext fontRenderContext0 = new FontRenderContext(((SunGraphics2D) graphics2D0).transform, false, true);
      Rectangle2D rectangle2D0 = stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_FONT.getStringBounds("", fontRenderContext0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 2934.486795800444, "");
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, logAxis0, cyclicNumberAxis0, stackedXYAreaRenderer0);
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.drawItem(graphics2D0, stackedXYAreaRenderer_StackedXYAreaRendererState0, rectangle2D0, xYPlot0, logAxis0, cyclicNumberAxis0, jDBCXYDataset0, 10, (-759), true, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer();
      assertTrue(stackedXYAreaRenderer1.equals((Object)stackedXYAreaRenderer0));
      
      stackedXYAreaRenderer1.setShapeStroke(stackedXYAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      boolean boolean0 = stackedXYAreaRenderer0.equals(stackedXYAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer();
      boolean boolean0 = stackedXYAreaRenderer0.equals(stackedXYAreaRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-2297));
      boolean boolean0 = stackedXYAreaRenderer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      boolean boolean0 = stackedXYAreaRenderer0.equals(stackedXYAreaRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer(2614, boxAndWhiskerXYToolTipGenerator0, (XYURLGenerator) null);
      boolean boolean0 = stackedXYAreaRenderer0.equals(stackedXYAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.getPreviousHeight(categoryTableXYDataset0, 334, 779);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 779, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      double double0 = stackedXYAreaRenderer0.getPreviousHeight(defaultTableXYDataset0, (-2635), (-3391));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(680);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        stackedXYAreaRenderer0.findRangeBounds(xYIntervalSeriesCollection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(26);
      Range range0 = stackedXYAreaRenderer0.findRangeBounds((XYDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart("&@Fv'j", (Font) null, combinedDomainCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 4, 2222, (-1), (-1), 0, false, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Polygon polygon0 = stackedXYAreaRenderer_StackedXYAreaRendererState0.getSeriesArea();
      assertNull(polygon0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState((PlotRenderingInfo) null);
      Stack stack0 = stackedXYAreaRenderer_StackedXYAreaRendererState0.getCurrentSeriesPoints();
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Stack<TimeSeriesTableModel> stack0 = new Stack<TimeSeriesTableModel>();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setLastSeriesPoints(stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState((PlotRenderingInfo) null);
      Stack stack0 = stackedXYAreaRenderer_StackedXYAreaRendererState0.getLastSeriesPoints();
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState((PlotRenderingInfo) null);
      Stack<HijrahEra> stack0 = new Stack<HijrahEra>();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setCurrentSeriesPoints(stack0);
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Line2D.Double line2D_Double0 = (Line2D.Double)stackedXYAreaRenderer_StackedXYAreaRendererState0.getLine();
      assertEquals(0.0, line2D_Double0.y1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StackedXYAreaRenderer.StackedXYAreaRendererState stackedXYAreaRenderer_StackedXYAreaRendererState0 = new StackedXYAreaRenderer.StackedXYAreaRendererState(plotRenderingInfo0);
      Polygon polygon0 = new Polygon();
      stackedXYAreaRenderer_StackedXYAreaRendererState0.setSeriesArea(polygon0);
      assertEquals(0, polygon0.npoints);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Rectangle2D rectangle2D0 = compositeTitle0.getBounds();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = stackedXYAreaRenderer0.initialise((Graphics2D) null, rectangle2D0, (XYPlot) null, timePeriodValuesCollection0, plotRenderingInfo0);
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(21);
      Stroke stroke0 = stackedXYAreaRenderer0.getShapeStroke();
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-2297));
      Paint paint0 = stackedXYAreaRenderer0.getShapePaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-2297));
      int int0 = stackedXYAreaRenderer0.getPassCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      StackedXYAreaRenderer stackedXYAreaRenderer1 = (StackedXYAreaRenderer)stackedXYAreaRenderer0.clone();
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesShape());
  }
}
