/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 02:52:19 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.SimpleTimeZone;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYDifferenceRenderer_ESTest extends XYDifferenceRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(234, 1, 1, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = clusteredXYBarRenderer0.createState(plotRenderingInfo0);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3196.367107622624);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      xYDifferenceRenderer0.drawItemPass0(graphics2D0, xYItemRendererState0, rectangle2D0, combinedDomainXYPlot0, cyclicNumberAxis0, cyclicNumberAxis0, timeTableXYDataset0, 500, 234, false);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) xYDifferenceRenderer0.ZERO, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      XYItemRendererState xYItemRendererState0 = cyclicXYItemRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (XYPlot) null, timeTableXYDataset0, plotRenderingInfo0);
      DateAxis dateAxis0 = new DateAxis("~1npG>VyV\"%M+*9p^", zoneInfo0);
      xYDifferenceRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, combinedDomainXYPlot0, dateAxis0, dateAxis0, timeTableXYDataset0, 3, 2450, true, 10);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.green;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      xYDifferenceRenderer0.setPositivePaint(color0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      Color color0 = (Color)xYDifferenceRenderer0.getPositivePaint();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(255, color0.getRed());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      boolean boolean0 = xYDifferenceRenderer0.getShapesVisible();
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      
      xYDifferenceRenderer0.setRoundXCoordinates(true);
      boolean boolean0 = xYDifferenceRenderer0.getRoundXCoordinates();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (XYPlot) null, timeTableXYDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.AbstractXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, paint0, false);
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.drawItemPass1((Graphics2D) null, (XYItemRendererState) null, defaultCaret0, combinedDomainXYPlot0, (ValueAxis) null, logAxis0, jDBCXYDataset0, 2, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.gray;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, true);
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getNeedlePaint();
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer(paint0, xYDifferenceRenderer0.DEFAULT_PAINT, true);
      boolean boolean0 = xYDifferenceRenderer0.equals(xYDifferenceRenderer1);
      assertFalse(boolean0);
      assertTrue(xYDifferenceRenderer1.getShapesVisible());
      assertFalse(xYDifferenceRenderer1.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      boolean boolean0 = xYDifferenceRenderer0.equals(xYDifferenceRenderer0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertTrue(boolean0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      Integer integer0 = new Integer(0);
      boolean boolean0 = xYDifferenceRenderer0.equals(integer0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(boolean0);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      xYDifferenceRenderer0.setPlot(combinedRangeXYPlot0);
      xYDifferenceRenderer0.getLegendItem(10, 10);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseItemLabelPaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, defaultPolarItemRenderer0.DEFAULT_PAINT, false);
      xYDifferenceRenderer0.getLegendItem(143, 143);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_ALTERNATE_PAINT;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3965, (double) 1.0F, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(0, symbolicXYItemLabelGenerator0, (XYURLGenerator) null);
      Rectangle rectangle0 = new Rectangle(5, (-603), 3965, 58);
      Rectangle2D rectangle2D0 = multiplePiePlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYItemRendererState xYItemRendererState0 = xYAreaRenderer0.initialise(graphics2D0, rectangle2D0, (XYPlot) null, xYSeriesCollection0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.drawItemPass1(graphics2D0, xYItemRendererState0, rectangle2D0, combinedDomainXYPlot0, numberAxis3D0, numberAxis3D0, xYSeriesCollection0, 527, 999, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 527, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.setLegendLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultMultiValueCategoryDataset0, tableOrder0);
      Paint paint0 = spiderWebPlot0.getSeriesOutlinePaint(1693);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, spiderWebPlot0.DEFAULT_BACKGROUND_PAINT, true);
      xYDifferenceRenderer0.setLegendLine(spiderWebPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.setNegativePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      xYDifferenceRenderer0.setNegativePaint(color0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      // Undeclared exception!
      try { 
        xYDifferenceRenderer0.setPositivePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_PAINT;
      XYDifferenceRenderer xYDifferenceRenderer0 = null;
      try {
        xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, (Paint) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'negativePaint' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      XYDifferenceRenderer xYDifferenceRenderer0 = null;
      try {
        xYDifferenceRenderer0 = new XYDifferenceRenderer((Paint) null, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'positivePaint' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYDifferenceRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      Line2D.Double line2D_Double0 = (Line2D.Double)xYDifferenceRenderer0.getLegendLine();
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      Paint paint0 = candlestickRenderer0.getVolumePaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, true);
      boolean boolean0 = xYDifferenceRenderer0.getShapesVisible();
      assertTrue(boolean0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      XYDifferenceRenderer xYDifferenceRenderer1 = (XYDifferenceRenderer)xYDifferenceRenderer0.clone();
      boolean boolean0 = xYDifferenceRenderer0.equals(xYDifferenceRenderer1);
      assertFalse(xYDifferenceRenderer1.getRoundXCoordinates());
      assertTrue(boolean0);
      assertNotSame(xYDifferenceRenderer1, xYDifferenceRenderer0);
      assertFalse(xYDifferenceRenderer1.getShapesVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2248, 3316);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      TimeSeries timeSeries0 = new TimeSeries(0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      XYItemRendererState xYItemRendererState0 = xYDifferenceRenderer0.initialise(graphics2D0, rectangle0, (XYPlot) null, timeSeriesCollection0, plotRenderingInfo0);
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      Paint paint0 = candlestickRenderer0.getVolumePaint();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, true);
      xYDifferenceRenderer0.setShapesVisible(true);
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultMultiValueCategoryDataset0, tableOrder0);
      Paint paint0 = spiderWebPlot0.getSeriesOutlinePaint(1693);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(paint0, spiderWebPlot0.DEFAULT_BACKGROUND_PAINT, true);
      int int0 = xYDifferenceRenderer0.getPassCount();
      assertEquals(2, int0);
      assertTrue(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      boolean boolean0 = xYDifferenceRenderer0.getRoundXCoordinates();
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Color color0 = Color.CYAN;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, color0, false);
      Color color1 = (Color)xYDifferenceRenderer0.getNegativePaint();
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertEquals((-16711681), color1.getRGB());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
  }
}
