/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:00:47 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.data.DomainOrder;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CyclicXYItemRenderer_ESTest extends CyclicXYItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = null;
      try {
        cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray1, (XYDataset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYIntervalSeriesCollection0);
      int int0 = cyclicXYItemRenderer_OverwriteDataSet0.indexOf(1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((-4066.8776932561414), dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultHighLowDataset0);
      Number number0 = cyclicXYItemRenderer_OverwriteDataSet0.getY(0, 0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(4, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultHighLowDataset0);
      Comparable comparable0 = cyclicXYItemRenderer_OverwriteDataSet0.getSeriesKey(4);
      assertEquals(4, comparable0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultTableXYDataset0);
      int int0 = cyclicXYItemRenderer_OverwriteDataSet0.getSeriesCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      cyclicXYItemRenderer_OverwriteDataSet0.addChangeListener(ringPlot0);
      assertTrue(ringPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, categoryTableXYDataset0);
      double double0 = cyclicXYItemRenderer_OverwriteDataSet0.getXValue(2, 1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(9999);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = defaultXYItemRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeXYPlot0, defaultTableXYDataset0, plotRenderingInfo0);
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet", stringArray0);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, combinedRangeXYPlot0, symbolAxis0, symbolAxis0, defaultTableXYDataset0, 10, (-542), false, 1886);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10001);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = defaultXYItemRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeXYPlot0, defaultTableXYDataset0, plotRenderingInfo0);
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet", stringArray0);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, (Rectangle2D) null, combinedRangeXYPlot0, symbolAxis0, symbolAxis0, defaultTableXYDataset0, 10, (-542), false, 1886);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(832, standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)cyclicXYItemRenderer0.lookupLegendShape(2261);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DateAxis dateAxis0 = new DateAxis("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart(":4D1y~K^AZ{Iv^,^", categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT, thermometerPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 1);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(10);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYBarRenderer.XYBarRendererState xYBarRenderer_XYBarRendererState0 = (XYBarRenderer.XYBarRendererState)stackedXYBarRenderer0.initialise(sunGraphics2D0, rectangle2D_Double0, (XYPlot) null, categoryTableXYDataset0, plotRenderingInfo0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        cyclicXYItemRenderer0.drawItem(sunGraphics2D0, xYBarRenderer_XYBarRendererState0, rectangle2D_Double0, (XYPlot) null, dateAxis0, dateAxis0, xYTaskDataset0, 5, 1373, false, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.StandardXYItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultXYDataset0);
      DomainOrder domainOrder0 = cyclicXYItemRenderer_OverwriteDataSet0.getDomainOrder();
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, categoryTableXYDataset0);
      DatasetGroup datasetGroup0 = cyclicXYItemRenderer_OverwriteDataSet0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYSeriesCollection0);
      Number number0 = cyclicXYItemRenderer_OverwriteDataSet0.getX((-663), 3);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYTaskDataset0);
      double double0 = cyclicXYItemRenderer_OverwriteDataSet0.getYValue(48, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYTaskDataset0);
      cyclicXYItemRenderer_OverwriteDataSet0.removeChangeListener(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYSeriesCollection0);
      cyclicXYItemRenderer_OverwriteDataSet0.setGroup((DatasetGroup) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, defaultTableXYDataset0);
      int int0 = cyclicXYItemRenderer_OverwriteDataSet0.getItemCount((-406));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      CyclicXYItemRenderer.OverwriteDataSet cyclicXYItemRenderer_OverwriteDataSet0 = new CyclicXYItemRenderer.OverwriteDataSet(doubleArray0, doubleArray0, xYTaskDataset0);
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", dateFormat0, dateFormat0, dateFormat0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(2599, standardXYZToolTipGenerator0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYPlot xYPlot0 = new XYPlot(cyclicXYItemRenderer_OverwriteDataSet0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      assertTrue(xYPlot0.canSelectByPoint());
  }
}
