/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:04:55 GMT 2022
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.data.Range;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYLineAndShapeRenderer_ESTest extends XYLineAndShapeRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      boolean boolean0 = xYSplineRenderer0.isLinePass((-797));
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertTrue(xYSplineRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
      assertTrue(xYSplineRenderer0.getBaseShapesVisible());
      assertTrue(xYSplineRenderer0.getDrawOutlines());
      assertTrue(xYSplineRenderer0.getBaseShapesFilled());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      xYLineAndShapeRenderer0.setSeriesShapesFilled(2059, (Boolean) null);
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      xYLineAndShapeRenderer0.setSeriesShapesVisible(2427, false);
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Requires 'lower' < 'upper'.", xYLine3DRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(856, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      xYLine3DRenderer0.drawShape1(graphics2D0, 1315, 15, (-1432), true, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLine3DRenderer0.getBaseLinesVisible());
      assertTrue(xYLine3DRenderer0.getDrawOutlines());
      assertTrue(xYLine3DRenderer0.getBaseShapesVisible());
      assertFalse(xYLine3DRenderer0.getUseFillPaint());
      assertTrue(xYLine3DRenderer0.getBaseShapesFilled());
      assertFalse(xYLine3DRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      boolean boolean0 = xYLineAndShapeRenderer0.isLinePass(0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(500, (OHLCDataItem[]) null);
      deviationRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeXYPlot0, defaultOHLCDataset0, plotRenderingInfo0);
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertFalse(deviationRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      
      xYErrorRenderer0.setUseFillPaint(true);
      boolean boolean0 = xYErrorRenderer0.getUseFillPaint();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      boolean boolean0 = xYLineAndShapeRenderer0.getItemShapeVisible(2, 0);
      assertFalse(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      
      xYLineAndShapeRenderer0.setBaseLinesVisible(false);
      xYLineAndShapeRenderer0.getItemLineVisible((-2203), (-261));
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      boolean boolean0 = xYErrorRenderer0.getDrawSeriesLineAsPath();
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(boolean0);
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      boolean boolean0 = deviationRenderer0.getBaseShapesVisible();
      assertFalse(deviationRenderer0.getBaseLinesVisible());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertFalse(boolean0);
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      boolean boolean0 = xYLine3DRenderer0.getBaseLinesVisible();
      assertTrue(boolean0);
      assertTrue(xYLine3DRenderer0.getBaseShapesVisible());
      assertTrue(xYLine3DRenderer0.getBaseShapesFilled());
      assertTrue(xYLine3DRenderer0.getDrawOutlines());
      assertFalse(xYLine3DRenderer0.getUseFillPaint());
      assertFalse(xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLine3DRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        defaultXYItemRenderer0.setSeriesShapesVisible((-837), boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      // Undeclared exception!
      try { 
        deviationRenderer0.setSeriesShapesFilled((-2017), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      // Undeclared exception!
      try { 
        xYStepRenderer0.setSeriesLinesVisible((-3793), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      Boolean boolean0 = Boolean.valueOf("");
      // Undeclared exception!
      try { 
        xYSplineRenderer0.setSeriesLinesVisible((-1991), boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      // Undeclared exception!
      try { 
        xYStepRenderer0.equals(deviationRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.renderer.xy.DeviationRenderer cannot be cast to org.jfree.chart.renderer.xy.XYStepRenderer
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State", multiplePiePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = samplingXYLineRenderer0.initialise(graphics2D0, (Rectangle2D) null, (XYPlot) null, (XYDataset) null, plotRenderingInfo0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.drawPrimaryLineAsPath(xYItemRendererState0, graphics2D0, (XYPlot) null, (XYDataset) null, 10, 10, 10, false, moduloAxis0, moduloAxis0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer((-2212));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-2212), (-2212), 519, 1583, (-2212), (-1543), false, true, true, false, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      XYItemRendererState xYItemRendererState0 = xYStepAreaRenderer0.initialise((Graphics2D) null, rectangle0, (XYPlot) null, timeSeriesCollection0, (PlotRenderingInfo) null);
      DateAxis dateAxis0 = new DateAxis("ZOOM_RESET_RANGE");
      // Undeclared exception!
      try { 
        xYStepRenderer0.drawItem((Graphics2D) null, xYItemRendererState0, rectangle0, (XYPlot) null, dateAxis0, dateAxis0, timeSeriesCollection0, 3, 10, false, 2259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYStepRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        deviationRenderer0.setSeriesShapesFilled((-1), boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, false);
      xYLineAndShapeRenderer0.getSeriesShapesVisible((-555));
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYLineAndShapeRenderer xYLineAndShapeRenderer1 = (XYLineAndShapeRenderer)xYLineAndShapeRenderer0.clone();
      boolean boolean0 = xYLineAndShapeRenderer0.equals(xYLineAndShapeRenderer1);
      assertNotSame(xYLineAndShapeRenderer1, xYLineAndShapeRenderer0);
      assertTrue(xYLineAndShapeRenderer1.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer1.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer1.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer1.getUseFillPaint());
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer1.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer1.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer1.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, false);
      assertFalse(deviationRenderer0.getBaseShapesVisible());
      
      deviationRenderer0.setBaseShapesVisible(true);
      boolean boolean0 = xYLineAndShapeRenderer0.equals(deviationRenderer0);
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, true);
      boolean boolean0 = xYLineAndShapeRenderer0.equals(deviationRenderer0);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertFalse(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, false);
      deviationRenderer0.setBaseLegendTextPaint(xYLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = xYLineAndShapeRenderer0.equals(deviationRenderer0);
      assertFalse(boolean0);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertFalse(deviationRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, false);
      boolean boolean0 = xYLineAndShapeRenderer0.equals(deviationRenderer0);
      assertFalse(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertFalse(boolean0);
      assertFalse(deviationRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      boolean boolean0 = xYLineAndShapeRenderer0.equals(xYLineAndShapeRenderer0);
      assertTrue(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      Object object0 = new Object();
      boolean boolean0 = xYLineAndShapeRenderer0.equals(object0);
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendItem(519, 2259);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      boolean boolean0 = xYLineAndShapeRenderer0.isItemPass(0);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(boolean0);
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      boolean boolean0 = xYSplineRenderer0.isLinePass(2);
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertFalse(boolean0);
      assertTrue(xYSplineRenderer0.getBaseLinesVisible());
      assertTrue(xYSplineRenderer0.getBaseShapesVisible());
      assertTrue(xYSplineRenderer0.getDrawOutlines());
      assertTrue(xYSplineRenderer0.getBaseShapesFilled());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      
      xYLineAndShapeRenderer0.setBaseLinesVisible(false);
      assertFalse(xYLineAndShapeRenderer0.getBaseLinesVisible());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      xYLineAndShapeRenderer0.drawItem((Graphics2D) null, xYLineAndShapeRenderer_State0, (Rectangle2D) null, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, timeTableXYDataset0, 0, (-261), false, 0);
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.drawItem((Graphics2D) null, xYLineAndShapeRenderer_State0, (Rectangle2D) null, combinedRangeXYPlot0, (ValueAxis) null, (ValueAxis) null, timeTableXYDataset0, 0, (-261), false, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator("", dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "NY", "NY");
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      boolean boolean0 = xYStepRenderer0.getItemShapeFilled((-1), 1662);
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(boolean0);
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      Boolean boolean0 = Boolean.valueOf(true);
      xYLineAndShapeRenderer0.setSeriesShapesVisible(96, boolean0);
      xYLineAndShapeRenderer0.getItemShapeVisible(96, 1800);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      // Undeclared exception!
      try { 
        deviationRenderer0.setLegendLine((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'line' argument.
         //
         verifyException("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(standardXYToolTipGenerator0, customXYURLGenerator0);
      Rectangle rectangle0 = new Rectangle(2881, 2881, 2881, 2881);
      xYStepRenderer0.setLegendLine(rectangle0);
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      xYLineAndShapeRenderer0.setSeriesLinesVisible(0, (Boolean) true);
      xYLineAndShapeRenderer0.getItemLineVisible(0, 3831);
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      
      xYErrorRenderer0.setDrawSeriesLineAsPath(true);
      xYErrorRenderer0.setDrawSeriesLineAsPath(true);
      assertTrue(xYErrorRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State((PlotRenderingInfo) null);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer_State0.startSeriesPass(histogramDataset0, (-2394), 1074, 1074, 2881, 1074);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State(plotRenderingInfo0);
      xYLineAndShapeRenderer_State0.setLastPointGood(false);
      assertFalse(xYLineAndShapeRenderer_State0.isLastPointGood());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYLineAndShapeRenderer.State xYLineAndShapeRenderer_State0 = new XYLineAndShapeRenderer.State((PlotRenderingInfo) null);
      boolean boolean0 = xYLineAndShapeRenderer_State0.isLastPointGood();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      boolean boolean0 = xYLineAndShapeRenderer0.getUseOutlinePaint();
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(boolean0);
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      deviationRenderer0.getSeriesShapesFilled((-3061));
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator("", dateFormat0, numberFormat0);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "NY", "NY");
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      int int0 = xYStepRenderer0.getPassCount();
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertEquals(2, int0);
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.setDrawOutlines(true);
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.setUseOutlinePaint(false);
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        xYLineAndShapeRenderer0.setSeriesShapesVisible((-778), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      xYLineAndShapeRenderer0.setSeriesLinesVisible(1800, false);
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      xYLineAndShapeRenderer0.setSeriesShapesFilled(89, true);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      boolean boolean0 = xYSplineRenderer0.getBaseShapesVisible();
      assertFalse(xYSplineRenderer0.getUseFillPaint());
      assertFalse(xYSplineRenderer0.getUseOutlinePaint());
      assertTrue(boolean0);
      assertTrue(xYSplineRenderer0.getDrawOutlines());
      assertFalse(xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYSplineRenderer0.getBaseShapesFilled());
      assertTrue(xYSplineRenderer0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      boolean boolean0 = deviationRenderer0.getDrawSeriesLineAsPath();
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(boolean0);
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      deviationRenderer0.getSeriesLinesVisible((-1099));
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertFalse(deviationRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      Line2D.Double line2D_Double0 = (Line2D.Double)xYLineAndShapeRenderer0.getLegendLine();
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(7.0, line2D_Double0.x2, 0.01);
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals((-7.0), line2D_Double0.x1, 0.01);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      
      defaultXYItemRenderer0.setBaseShapesFilled(false);
      assertFalse(defaultXYItemRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      boolean boolean0 = xYErrorRenderer0.getUseFillPaint();
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(boolean0);
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      boolean boolean0 = xYErrorRenderer0.getDrawOutlines();
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      // Undeclared exception!
      try { 
        deviationRenderer0.drawShape1((Graphics2D) null, 10, 10, 10, false, deviationRenderer0.DEFAULT_SHAPE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      boolean boolean0 = xYLineAndShapeRenderer0.getBaseShapesFilled();
      assertTrue(xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(boolean0);
      assertTrue(xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(xYLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(xYLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      boolean boolean0 = xYErrorRenderer0.getBaseLinesVisible();
      assertFalse(boolean0);
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
  }
}
