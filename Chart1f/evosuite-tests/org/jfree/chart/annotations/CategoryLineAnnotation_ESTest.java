/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:57:37 GMT 2022
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.text.AttributedCharacterIterator;
import java.time.temporal.ChronoField;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryLineAnnotation_ESTest extends CategoryLineAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(123L);
      Color color0 = Color.pink;
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getItemOutlineStroke(0, 712, false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(fixedMillisecond0, (-1150.73740685), fixedMillisecond0, (-1150.73740685), color0, stroke0);
      categoryLineAnnotation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-901), "Null 'arrow' argument.");
      Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
      Second second0 = new Second((-901), minute0);
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getNeedlePaint();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(second0, 0, mockDate0, 1.0E-5, paint0, meterPlot0.DEFAULT_OUTLINE_STROKE);
      categoryLineAnnotation0.setValue2(0.0);
      double double0 = categoryLineAnnotation0.getValue2();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseOutlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(areaRenderer0.ZERO, (-1140.4772814939913), areaRenderer0.ZERO, (-2942.23), areaRenderer0.DEFAULT_OUTLINE_PAINT, stroke0);
      double double0 = categoryLineAnnotation0.getValue2();
      assertEquals((-1140.4772814939913), categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals((-2942.23), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Paint paint0 = stackedAreaRenderer0.lookupSeriesFillPaint((-1872));
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(chronoField0, 0.0, chronoField0, (-1532.2171), paint0, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      double double0 = categoryLineAnnotation0.getValue1();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("eUcL");
      DateAxis dateAxis0 = new DateAxis("eUcL");
      Millisecond millisecond0 = new Millisecond(dateAxis0.DEFAULT_ANCHOR_DATE);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(millisecond0, (-2107.21048983), 500, 0.0, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE);
      double double0 = categoryLineAnnotation0.getValue1();
      assertEquals((-2107.21048983), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(176, "Null 'negativePaint' argument.");
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(dateAxis0.DEFAULT_ANCHOR_DATE, timeZone0);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(year0, 530.736, 0.0F, 0.05, dateAxis0.DEFAULT_TICK_MARK_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 2.0F, 10, (-2109.0444F));
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("g-4^");
      JFreeChart jFreeChart0 = new JFreeChart("Null 'negativePaint' argument.", combinedDomainCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 9999, 10, (-9999), 176, 69, 10, false, true, true, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.draw((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D_Float0, subCategoryAxis0, dateAxis0, 1000, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseOutlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(areaRenderer0.ZERO, (-1140.4772814939913), areaRenderer0.ZERO, (-2942.23), areaRenderer0.DEFAULT_OUTLINE_PAINT, stroke0);
      categoryLineAnnotation0.getCategory1();
      assertEquals((-1140.4772814939913), categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(123L);
      Color color0 = Color.pink;
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Stroke stroke0 = areaRenderer0.getItemOutlineStroke(0, 712, false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(fixedMillisecond0, (-1150.73740685), fixedMillisecond0, (-1150.73740685), color0, stroke0);
      categoryLineAnnotation0.getCategory2();
      assertEquals((-1150.73740685), categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year(1034);
      TextBox textBox0 = new TextBox("PZ!*V(=;_Ni,d");
      Paint paint0 = textBox0.getOutlinePaint();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      Stroke stroke0 = ringPlot0.getBaseSectionOutlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(year0, 1554.011, year0, (-9999), paint0, stroke0);
      CategoryLineAnnotation categoryLineAnnotation1 = new CategoryLineAnnotation("COPY", 0.0, 420, 0.0, ringPlot0.DEFAULT_LABEL_SHADOW_PAINT, stroke0);
      boolean boolean0 = categoryLineAnnotation0.equals(categoryLineAnnotation1);
      assertFalse(boolean0);
      assertEquals(1554.011, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 2678400000L);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Paint paint0 = spiderWebPlot0.getAxisLinePaint();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(simpleTimePeriod0, 0L, simpleTimePeriod0, 1692.7, paint0, spiderWebPlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      boolean boolean0 = categoryLineAnnotation0.equals(attributedCharacterIterator_Attribute0);
      assertFalse(boolean0);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minute minute0 = new Minute();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      TextBox textBox0 = new TextBox("");
      Stroke stroke0 = textBox0.getOutlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(minute0, 1.0, minute0, (-1664.066015), color0, stroke0);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.setStroke(candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(4.0, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 55, dateTickUnitType0, 1048, mockSimpleDateFormat0);
      Color color0 = Color.red;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.5E-8);
      Stroke stroke0 = candlestickRenderer0.getBaseOutlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(dateTickUnit0, 55, dateTickUnit0, 0.0, color0, stroke0);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.setPaint(candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(4.0, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.setCategory2(0);
      assertEquals(4.0, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      // Undeclared exception!
      try { 
        categoryLineAnnotation0.setCategory1((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(675.602285643);
      Integer integer0 = (Integer)Plot.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(numberTickUnit0, (-2413.53369), numberTickUnit0, 675.602285643, paint0, meterPlot0.DEFAULT_OUTLINE_STROKE);
      categoryLineAnnotation0.setCategory1(270);
      assertEquals((-2413.53369), categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1649), (-1649), (-1649), (-1649), (-3462), 0);
      Year year0 = new Year(mockDate0);
      Color color0 = Color.RED;
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation(year0, 9999, year0, (-9999), color0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation("h", (-1266.015574836), serialDate0, 2, (Paint) null, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Color color0 = styleContext0.getForeground(styleContext_NamedStyle0);
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation(";#;q$E!GX\"rJ\"2r", 668.521543, (Comparable) null, 2.79793732216011, color0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category2' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Paint paint0 = areaRenderer0.getBaseOutlinePaint();
      CategoryLineAnnotation categoryLineAnnotation0 = null;
      try {
        categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) null, (-1140.32837144), (Comparable) null, 0.0, paint0, areaRenderer0.DEFAULT_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category1' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.getPaint();
      assertEquals(4.0, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Year year0 = new Year(3665);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Paint paint0 = stackedAreaRenderer0.getBasePaint();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(year0, (-9999), year0, 9999, paint0, stroke0);
      CategoryLineAnnotation categoryLineAnnotation1 = (CategoryLineAnnotation)categoryLineAnnotation0.clone();
      boolean boolean0 = categoryLineAnnotation0.equals(categoryLineAnnotation1);
      assertEquals((-9999.0), categoryLineAnnotation1.getValue1(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      double double0 = categoryLineAnnotation0.getValue1();
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.getStroke();
      assertEquals(4.0, categoryLineAnnotation0.getValue1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      double double0 = categoryLineAnnotation0.getValue2();
      assertEquals(4.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(1.0000000000018843E11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(542.9);
      Paint paint0 = candlestickRenderer0.getItemOutlinePaint(4, (-3889), false);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(quarter0, 4, quarter0, 1.0000000000018843E11, paint0, candlestickRenderer0.DEFAULT_STROKE);
      categoryLineAnnotation0.setValue1(1);
      assertEquals(1.0, categoryLineAnnotation0.getValue1(), 0.01);
  }
}
