/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:03:22 GMT 2022
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYPointerAnnotation_ESTest extends XYPointerAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, (-1325.941835), 3.0);
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_PAINT;
      xYPointerAnnotation0.setArrowPaint(color0);
      xYPointerAnnotation0.hashCode();
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("_U", 1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      xYPointerAnnotation0.setArrowWidth(1.5707963267948966);
      xYPointerAnnotation0.hashCode();
      assertEquals(1.5707963267948966, xYPointerAnnotation0.getArrowWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-3460.0), (-3460.0), (-3460.0));
      xYPointerAnnotation0.setArrowWidth((-3460.0));
      xYPointerAnnotation0.hashCode();
      assertEquals((-3460.0), xYPointerAnnotation0.getArrowWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-986.8), (-986.8), (-986.8));
      xYPointerAnnotation0.setArrowLength((-986.8));
      xYPointerAnnotation0.hashCode();
      assertEquals((-986.8), xYPointerAnnotation0.getArrowLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("$*8Sn", 0.0, 0.0, 1.5707963267948966);
      xYPointerAnnotation0.setBaseRadius(1534.9406);
      xYPointerAnnotation0.hashCode();
      assertEquals(1534.9406, xYPointerAnnotation0.getBaseRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 10.0, 10.0, (-1451.564660961482));
      xYPointerAnnotation0.setTipRadius((-1451.564660961482));
      xYPointerAnnotation0.hashCode();
      assertEquals((-1451.564660961482), xYPointerAnnotation0.getTipRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-3071.0), 1.0, 0.75);
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getTickPaint();
      xYPointerAnnotation0.setArrowPaint(paint0);
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(0.75, xYPointerAnnotation1.getAngle(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertTrue(boolean0);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("b]gs..cyr+Q", (-1378.2766426404), 5.0, (-1378.2766426404));
      xYPointerAnnotation0.setArrowWidth((-1378.2766426404));
      Object object0 = xYPointerAnnotation0.clone();
      boolean boolean0 = xYPointerAnnotation0.equals(object0);
      assertEquals((-1378.2766426404), xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1.0E-9, 2833.414539, (-533.73844268268));
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("", 2470.0, 0.8, 0.0);
      boolean boolean0 = xYPointerAnnotation1.equals(xYPointerAnnotation0);
      assertEquals((-533.73844268268), xYPointerAnnotation0.getAngle(), 0.01);
      assertFalse(boolean0);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'stroke' not permitted.", (-172.43579), 51.4468861031735, 51.4468861031735);
      xYPointerAnnotation0.setArrowLength(30.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      LogAxis logAxis0 = new LogAxis("s");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw((Graphics2D) null, combinedRangeXYPlot0, rectangle2D0, logAxis0, logAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("PN/W+6srV5", 0.0, 10.0, 0.0);
      RingPlot ringPlot0 = new RingPlot();
      Paint paint0 = ringPlot0.getSectionPaint("PN/W+6srV5", true);
      xYPointerAnnotation0.setArrowPaint(paint0);
      Color color0 = (Color)xYPointerAnnotation0.getArrowPaint();
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, (-1325.941835), 3.0);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      
      xYPointerAnnotation0.setTipRadius(0.0);
      double double0 = xYPointerAnnotation0.getTipRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.annotations.XYPointerAnnotation", 360.0, (-193.26245), (-1499.866815667));
      xYPointerAnnotation0.setTipRadius((-193.26245));
      double double0 = xYPointerAnnotation0.getTipRadius();
      assertEquals((-193.26245), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("5z=a`&`8TU`?S>[", 0.0, 350.709, 350.709);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      
      xYPointerAnnotation0.setLabelOffset(0.0);
      double double0 = xYPointerAnnotation0.getLabelOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("1e", (-1825.2), (-136.9314720202698), (-136.9314720202698));
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      
      xYPointerAnnotation0.setBaseRadius(0.0);
      double double0 = xYPointerAnnotation0.getBaseRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Fie9]}wB5cRsl", 0.0, 0.0, 1000.0);
      xYPointerAnnotation0.setArrowWidth((-87.7));
      double double0 = xYPointerAnnotation0.getArrowWidth();
      assertEquals((-87.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, (-1325.941835), 3.0);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      
      xYPointerAnnotation0.setArrowLength(0.0);
      double double0 = xYPointerAnnotation0.getArrowLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("uaE{:np3%.i", 3920.90575, 10.0, 3920.90575);
      xYPointerAnnotation0.setArrowLength((-2074.173691894874));
      double double0 = xYPointerAnnotation0.getArrowLength();
      assertEquals((-2074.173691894874), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 0.0, 0.0, 0.0);
      double double0 = xYPointerAnnotation0.getAngle();
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1.0, 0.0, 1.0);
      double double0 = xYPointerAnnotation0.getAngle();
      assertEquals(1.0, double0, 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = null;
      try {
        xYPointerAnnotation0 = new XYPointerAnnotation((String) null, 5.0, 0.0, (-2076.8724962785027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.annotations.XYTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("b]gs..cyr+Q", (-1378.2766426404), 5.0, (-1378.2766426404));
      XYPointerAnnotation xYPointerAnnotation1 = (XYPointerAnnotation)xYPointerAnnotation0.clone();
      assertTrue(xYPointerAnnotation1.equals((Object)xYPointerAnnotation0));
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      xYPointerAnnotation1.setArrowStroke(basicStroke0);
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'negativeBarPaint' argument", 2498.9, 2498.9, 10.0);
      Object object0 = xYPointerAnnotation0.clone();
      xYPointerAnnotation0.setArrowWidth((-1378.2766426404));
      boolean boolean0 = xYPointerAnnotation0.equals(object0);
      assertEquals((-1378.2766426404), xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("QL/", 1109.126296574, 1109.126296574, (-533.73844268268));
      XYPointerAnnotation xYPointerAnnotation1 = new XYPointerAnnotation("QL/", 30.0, 464.2640486716697, 0.0);
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation1);
      assertEquals((-533.73844268268), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation1.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getLabelOffset(), 0.01);
      assertEquals(30.0, xYPointerAnnotation1.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation1.getArrowWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(5.0, xYPointerAnnotation1.getArrowLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      boolean boolean0 = xYPointerAnnotation0.equals(xYPointerAnnotation0);
      assertEquals((-4011.2767), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertTrue(boolean0);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-865.9), 1401.726468437952, (-865.9));
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      boolean boolean0 = xYPointerAnnotation0.equals(xYAreaRenderer0.LINES);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals((-865.9), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'stroke' not permitted.", (-172.43579), 51.4468861031735, 51.4468861031735);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      LogAxis logAxis0 = new LogAxis("s");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.draw((Graphics2D) null, combinedRangeXYPlot0, rectangle2D0, logAxis0, logAxis0, 10, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("q_P\"CK>", (-30.0), 1.0E-100, (-30.0));
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("VUN]<p3BzbV", 25000.0, (-945.12726), (-945.12726));
      // Undeclared exception!
      try { 
        xYPointerAnnotation0.setArrowStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' not permitted.
         //
         verifyException("org.jfree.chart.annotations.XYPointerAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      BasicStroke basicStroke0 = (BasicStroke)xYPointerAnnotation0.getArrowStroke();
      xYPointerAnnotation0.setArrowStroke(basicStroke0);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-4011.2767), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-2977.0), 1.5707963267948966, 1.5707963267948966);
      double double0 = xYPointerAnnotation0.getBaseRadius();
      assertEquals(30.0, double0, 0.01);
      assertEquals(1.5707963267948966, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      double double0 = xYPointerAnnotation0.getAngle();
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals((-4011.2767), double0, 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'stroke' not permitted.", (-172.43579), 51.4468861031735, 51.4468861031735);
      double double0 = xYPointerAnnotation0.getArrowWidth();
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(51.4468861031735, xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      double double0 = xYPointerAnnotation0.getTipRadius();
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-4011.2767), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      
      xYPointerAnnotation0.setArrowWidth(0.0);
      double double0 = xYPointerAnnotation0.getArrowWidth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-865.9), 1401.726468437952, (-865.9));
      double double0 = xYPointerAnnotation0.getLabelOffset();
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals((-865.9), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      xYPointerAnnotation0.setAngle((-3296.1076824003862));
      assertEquals((-3296.1076824003862), xYPointerAnnotation0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      double double0 = xYPointerAnnotation0.getArrowLength();
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01);
      assertEquals((-4011.2767), xYPointerAnnotation0.getAngle(), 0.01);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("<Ne9#2KR&", 1981.072, (-4011.2767), (-4011.2767));
      xYPointerAnnotation0.setBaseRadius((-526.9));
      xYPointerAnnotation0.hashCode();
      assertEquals((-526.9), xYPointerAnnotation0.getBaseRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'stroke' not permitted.", (-310.3), 0.0, 1129.539369866);
      xYPointerAnnotation0.setLabelOffset(1129.539369866);
      assertEquals(1129.539369866, xYPointerAnnotation0.getLabelOffset(), 0.01);
  }
}
