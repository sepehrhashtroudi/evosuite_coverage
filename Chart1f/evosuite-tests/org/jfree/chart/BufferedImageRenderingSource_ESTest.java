/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:51:09 GMT 2022
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.data.general.DatasetSelectionState;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BufferedImageRenderingSource_ESTest extends BufferedImageRenderingSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3645, 3645, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      bufferedImageRenderingSource0.putSelectionState(timeSeriesCollection0, timeSeriesCollection0);
      DatasetSelectionState datasetSelectionState0 = bufferedImageRenderingSource0.getSelectionState(timeSeriesCollection0);
      assertSame(timeSeriesCollection0, datasetSelectionState0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3645, 3645, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      bufferedImageRenderingSource0.putSelectionState(defaultIntervalXYDataset0, timeSeriesCollection0);
      DatasetSelectionState datasetSelectionState0 = bufferedImageRenderingSource0.getSelectionState(timeSeriesCollection0);
      assertNull(datasetSelectionState0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BufferedImageRenderingSource bufferedImageRenderingSource0 = null;
      try {
        bufferedImageRenderingSource0 = new BufferedImageRenderingSource((BufferedImage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'image' argument.
         //
         verifyException("org.jfree.chart.BufferedImageRenderingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(167, 167, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      assertEquals((-1), sunGraphics2D0.eargb);
  }
}
