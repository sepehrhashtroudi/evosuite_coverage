/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:10:56 GMT 2022
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartTheme;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelLinkStyle;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardChartTheme_ESTest extends StandardChartTheme_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("^L}", stringArray0);
      standardChartTheme0.applyToSymbolAxis(symbolAxis0);
      assertTrue(symbolAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      PiePlot3D piePlot3D0 = new PiePlot3D();
      standardChartTheme0.applyToPiePlot(piePlot3D0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      PeriodAxis periodAxis0 = new PeriodAxis("y]_@z#hfI3F)0i JFS");
      standardChartTheme0.applyToPeriodAxis(periodAxis0);
      assertFalse(periodAxis0.isVerticalTickLabels());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      MeterPlot meterPlot0 = new MeterPlot();
      standardChartTheme0.applyToMeterPlot(meterPlot0);
      assertTrue(meterPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("^II=<Xn&0BTG");
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(71, 71);
      standardChartTheme0.applyToAbstractRenderer(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("LzWYmb1:");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("LzWYmb1:");
      standardChartTheme0.applyToValueAxis(logarithmicAxis0);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0R<|c~*tId]L=VE(");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      standardChartTheme0.applyToFastScatterPlot(fastScatterPlot0);
      assertNull(fastScatterPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFree");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("JFree");
      standardChartTheme0.applyToCategoryAxis(extendedCategoryAxis0);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Font font0 = standardChartTheme0.getExtraLargeFont();
      standardChartTheme0.setRegularFont(font0);
      Font font1 = standardChartTheme0.getRegularFont();
      assertEquals("Tahoma", font1.getName());
      assertEquals(20.0F, font1.getSize2D(), 0.01F);
      assertTrue(font1.isBold());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      String string0 = standardChartTheme0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c");
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      standardChartTheme0.setLargeFont(stackedXYBarRenderer0.DEFAULT_VALUE_LABEL_FONT);
      Font font0 = standardChartTheme0.getLargeFont();
      assertFalse(font0.isItalic());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.axis.CategoryLabelPosition");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYPlot((XYPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'record' argument.");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToSymbolAxis((SymbolAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPolarPlot((PolarPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("LzWYmb1:");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPiePlot((PiePlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("{N4!Fm");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPeriodAxis((PeriodAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMultiplePiePlot((MultiplePiePlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'transformer' attribute.");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToMeterPlot((MeterPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToCategoryPlot((CategoryPlot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToBlockContainer((BlockContainer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("F9}?80tR_{vi@[OwYL");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToAbstractRenderer((AbstractRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      DrawingSupplier drawingSupplier0 = standardChartTheme0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      StandardChartTheme standardChartTheme1 = (StandardChartTheme)standardChartTheme0.clone();
      assertTrue(standardChartTheme1.equals((Object)standardChartTheme0));
      
      standardChartTheme1.setItemLabelPaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
      boolean boolean0 = standardChartTheme0.equals(standardChartTheme1);
      assertFalse(standardChartTheme1.equals((Object)standardChartTheme0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      StandardChartTheme standardChartTheme1 = (StandardChartTheme)standardChartTheme0.clone();
      assertTrue(standardChartTheme1.equals((Object)standardChartTheme0));
      
      standardChartTheme1.setChartBackgroundPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = standardChartTheme0.equals(standardChartTheme1);
      assertFalse(standardChartTheme1.equals((Object)standardChartTheme0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      Object object0 = standardChartTheme0.clone();
      boolean boolean0 = standardChartTheme0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      StandardChartTheme standardChartTheme1 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      boolean boolean0 = standardChartTheme0.equals(standardChartTheme1);
      assertFalse(boolean0);
      assertEquals("JFree", standardChartTheme1.getName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      boolean boolean0 = standardChartTheme0.equals(standardChartTheme0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      boolean boolean0 = standardChartTheme0.equals("Y.ZK^U[J&mg?t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("", 10, 1.0F);
      standardChartTheme0.applyToXYAnnotation(xYTextAnnotation0);
      assertEquals(1.0, xYTextAnnotation0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c");
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(rectangle2D0, (Stroke) null, stackedXYBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedXYBarRenderer0.DEFAULT_PAINT);
      standardChartTheme0.applyToXYAnnotation(xYShapeAnnotation0);
      assertEquals("c", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("[Ml4]^u)m/Y6b/*YpF");
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(0.0);
      standardChartTheme0.applyToXYItemRenderer(xYBarRenderer0);
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToXYItemRenderer((XYItemRenderer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'renderer' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      standardChartTheme0.applyToXYItemRenderer(xYBoxAndWhiskerRenderer0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'annotation' argument.");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      standardChartTheme0.applyToCategoryItemRenderer(minMaxCategoryRenderer0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFree");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      standardChartTheme0.applyToCategoryItemRenderer(statisticalBarRenderer0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("3cC");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      standardChartTheme0.applyToCategoryItemRenderer(lineRenderer3D0);
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Tf\"'E4j6)cj,");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      standardChartTheme0.applyToCategoryItemRenderer(stackedBarRenderer3D0);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("", week0, week0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYIntervalSeriesCollection0, periodAxis0, defaultPolarItemRenderer0);
      standardChartTheme0.applyToPolarPlot(polarPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("nw|_");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      standardChartTheme0.applyToThermometerPlot(thermometerPlot0);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("o4?s)$*.4Z7nO\"HX8");
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1386.87830752), (-1386.87830752), "o4?s)$*.4Z7nO\"HX8");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      standardChartTheme0.applyToPlot(polarPlot0);
      assertFalse(polarPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("5Sd%");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      standardChartTheme0.applyToCategoryPlot(combinedRangeCategoryPlot0);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("q3GSYfT]|VEEG");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("q3GSYfT]|VEEG");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("IPMl1");
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, subCategoryAxis0, logarithmicAxis0, layeredBarRenderer0);
      standardChartTheme0.applyToCategoryPlot(categoryPlot0);
      assertEquals("q3GSYfT]|VEEG", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("4N*R]$s0kux62|&r0");
      CategoryPlot categoryPlot0 = new CategoryPlot();
      standardChartTheme0.applyToCategoryPlot(categoryPlot0);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("CVSv[\"*q|(");
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      standardChartTheme0.applyToPlot(waferMapPlot0);
      assertTrue(waferMapPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFree");
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V", polarPlot0);
      standardChartTheme0.apply(jFreeChart0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.event.MarkerChangeListener");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      standardChartTheme0.applyToPlot(fastScatterPlot0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      standardChartTheme0.apply(jFreeChart0);
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 2647, (-7));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingCategoryDataset0);
      standardChartTheme0.applyToPlot(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      // Undeclared exception!
      try { 
        standardChartTheme0.applyToPlot((Plot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Auto_Range");
      standardChartTheme0.applyToBlock((Block) null);
      assertEquals("Auto_Range", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      TextTitle textTitle0 = new TextTitle("", xYBarRenderer0.DEFAULT_VALUE_LABEL_FONT, xYBarRenderer0.DEFAULT_OUTLINE_PAINT, rectangleEdge0, horizontalAlignment0, verticalAlignment0, rectangleInsets0);
      standardChartTheme0.applyToBlock(textTitle0);
      assertEquals("Darkness", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("-rv/+Eb(uL^PZ");
      LabelBlock labelBlock0 = new LabelBlock("-rv/+Eb(uL^PZ");
      standardChartTheme0.applyToBlock(labelBlock0);
      assertNull(labelBlock0.getID());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      GridArrangement gridArrangement0 = new GridArrangement((-1), (-1));
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      standardChartTheme0.applyToBlockContainer(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("^II=<Xn&0BTG");
      standardChartTheme0.applyToTitle((Title) null);
      assertEquals("^II=<Xn&0BTG", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("Pie Plot", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 0.0);
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeXYPlot0, flowArrangement0, flowArrangement0);
      standardChartTheme0.applyToTitle(legendTitle0);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      CompositeTitle compositeTitle0 = new CompositeTitle();
      standardChartTheme0.applyToTitle(compositeTitle0);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      standardChartTheme0.apply(jFreeChart0);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("u>J8e|TR>2qAiH%4");
      // Undeclared exception!
      try { 
        standardChartTheme0.apply((JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(";i=y[U954yhc48'");
      // Undeclared exception!
      try { 
        standardChartTheme0.setDrawingSupplier((DrawingSupplier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'supplier' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      Paint[] paintArray0 = new Paint[1];
      Shape[] shapeArray0 = new Shape[0];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier((Paint[]) null, paintArray0, (Stroke[]) null, (Stroke[]) null, shapeArray0);
      standardChartTheme0.setDrawingSupplier(defaultDrawingSupplier0);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("]H'=7(s");
      // Undeclared exception!
      try { 
        standardChartTheme0.setGridBandAlternatePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(";i=y[U954yhc48'");
      Color color0 = (Color)standardChartTheme0.getAxisLabelPaint();
      standardChartTheme0.setGridBandAlternatePaint(color0);
      assertEquals(64, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("Pie Plot", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      standardChartTheme0.setGridBandPaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("0xFFFF7F");
      // Undeclared exception!
      try { 
        standardChartTheme0.setErrorIndicatorPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getRangeGridlinePaint();
      standardChartTheme0.setErrorIndicatorPaint(paint0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Darkness");
      // Undeclared exception!
      try { 
        standardChartTheme0.setWallPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'annotation' argument.");
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'annotation' argument.", "Null 'annotation' argument.", 2.0, 1249.3646753263);
      standardChartTheme0.setWallPaint(categoryPointerAnnotation0.DEFAULT_PAINT);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.urls.CustomXYURLGenerator");
      // Undeclared exception!
      try { 
        standardChartTheme0.setThermometerPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      Color color0 = (Color)xYBoxAndWhiskerRenderer0.getBoxPaint();
      standardChartTheme0.setThermometerPaint(color0);
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.MiddlePinNeedle");
      // Undeclared exception!
      try { 
        standardChartTheme0.setXYBarPainter((XYBarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'transformer' attribute.");
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      standardChartTheme0.setXYBarPainter(standardXYBarPainter0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Nearest");
      BarPainter barPainter0 = BarRenderer.getDefaultBarPainter();
      standardChartTheme0.setBarPainter(barPainter0);
      assertEquals("Nearest", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c");
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      standardChartTheme0.setShadowPaint(stackedXYBarRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("fr");
      // Undeclared exception!
      try { 
        standardChartTheme0.setItemLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("-5/1");
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      Paint paint0 = xYLine3DRenderer0.getWallPaint();
      standardChartTheme0.setTickLabelPaint(paint0);
      assertEquals("-5/1", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(":~) ?r");
      // Undeclared exception!
      try { 
        standardChartTheme0.setAxisLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("4N*R]$s0kux62|&r0");
      CategoryPlot categoryPlot0 = new CategoryPlot();
      standardChartTheme0.setAxisLabelPaint(categoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("n");
      // Undeclared exception!
      try { 
        standardChartTheme0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 2647, (-7));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingCategoryDataset0);
      standardChartTheme0.setAxisOffset(multiplePiePlot0.DEFAULT_INSETS);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.setCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("Pie Plot", stringArray0);
      standardChartTheme0.setBaselinePaint(symbolAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("PZ~PV#TCiK*-af&)u");
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      standardChartTheme0.setRangeGridlinePaint(xYBarRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(xYBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("-rv/+Eb(uL^PZ");
      // Undeclared exception!
      try { 
        standardChartTheme0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(compassPlot0);
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      standardChartTheme0.setDomainGridlinePaint(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.setLabelLinkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("PZ~PV#TCiK*-af&)u");
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      standardChartTheme0.setLabelLinkPaint(xYBarRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYBarRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(";Y7`h-owUHbcD");
      // Undeclared exception!
      try { 
        standardChartTheme0.setLabelLinkStyle((PieLabelLinkStyle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'style' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      RingPlot ringPlot0 = new RingPlot();
      PieLabelLinkStyle pieLabelLinkStyle0 = ringPlot0.getLabelLinkStyle();
      standardChartTheme0.setLabelLinkStyle(pieLabelLinkStyle0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("bq(2mck]bIDm@");
      // Undeclared exception!
      try { 
        standardChartTheme0.setPlotOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("nw|_");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1.0));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      standardChartTheme0.setPlotOutlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(2, ThermometerPlot.LEFT);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("PZ~PV#TCiK*-af&)u");
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      standardChartTheme0.setPlotBackgroundPaint(xYBarRenderer0.DEFAULT_PAINT);
      assertFalse(xYBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'annotation' argument.");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = (Color)defaultPolarItemRenderer0.getItemLabelPaint(9, 9, true);
      standardChartTheme0.setLegendItemPaint(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Index out of range.");
      // Undeclared exception!
      try { 
        standardChartTheme0.setLegendBackgroundPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      RingPlot ringPlot0 = new RingPlot();
      standardChartTheme0.setLegendBackgroundPaint(ringPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("O.oV<'AQ");
      // Undeclared exception!
      try { 
        standardChartTheme0.setChartBackgroundPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("4N*R]$s0kux62|&r0");
      // Undeclared exception!
      try { 
        standardChartTheme0.setSubtitlePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("4N*R]$s0kux62|&r0");
      Color color0 = Color.darkGray;
      standardChartTheme0.setSubtitlePaint(color0);
      assertEquals(1, color0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("~**iDg_k/");
      // Undeclared exception!
      try { 
        standardChartTheme0.setTitlePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("^II=<Xn&0BTG");
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(71, 71);
      standardChartTheme0.setTitlePaint(waferMapRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      // Undeclared exception!
      try { 
        standardChartTheme0.setSmallFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'annotation' argument.");
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'annotation' argument.", "Null 'annotation' argument.", 2.0, 1249.3646753263);
      standardChartTheme0.setSmallFont(categoryPointerAnnotation0.DEFAULT_FONT);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.plot.WaferMapPlot");
      // Undeclared exception!
      try { 
        standardChartTheme0.setRegularFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("7h:r[{?G#fB");
      // Undeclared exception!
      try { 
        standardChartTheme0.setExtraLargeFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.event.MarkerChangeListener");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      standardChartTheme0.setExtraLargeFont(categoryAxis3D0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = null;
      try {
        standardChartTheme0 = new StandardChartTheme((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'name' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.MiddlePinNeedle");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      standardChartTheme0.applyToMultiplePiePlot(multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      Color color0 = (Color)standardChartTheme0.getSubtitlePaint();
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getRangeGridlinePaint();
      standardChartTheme0.setCrosshairPaint(paint0);
      assertTrue(standardChartTheme0.isShadowVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      BarPainter barPainter0 = standardChartTheme0.getBarPainter();
      assertNotNull(barPainter0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("5Sd%");
      PieLabelLinkStyle pieLabelLinkStyle0 = standardChartTheme0.getLabelLinkStyle();
      assertEquals("PieLabelLinkStyle.CUBIC_CURVE", pieLabelLinkStyle0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("3cC");
      Color color0 = (Color)standardChartTheme0.getItemLabelPaint();
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("q3GSYfT]|VEEG");
      Color color0 = (Color)standardChartTheme0.getTitlePaint();
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("Pie Plot", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      standardChartTheme0.applyToXYPlot(combinedRangeXYPlot0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme(";i=y[U954yhc48'");
      Color color0 = (Color)standardChartTheme0.getLegendItemPaint();
      assertEquals(64, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFree");
      standardChartTheme0.setShadowVisible(false);
      boolean boolean0 = standardChartTheme0.isShadowVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("^II=<Xn&0BTG");
      Paint paint0 = standardChartTheme0.getLegendBackgroundPaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("4N*R]$s0kux62|&r0");
      Font font0 = standardChartTheme0.getRegularFont();
      standardChartTheme0.setLargeFont(font0);
      assertEquals("Tahoma", font0.getName());
      assertFalse(font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("-5/1");
      Color color0 = (Color)standardChartTheme0.getPlotOutlinePaint();
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.MiddlePinNeedle");
      Font font0 = standardChartTheme0.getLargeFont();
      assertEquals(14, font0.getSize());
      assertEquals("Tahoma", font0.getName());
      assertEquals(1, font0.getStyle());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("c");
      Color color0 = (Color)standardChartTheme0.getDomainGridlinePaint();
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      Color color0 = (Color)standardChartTheme0.getLabelLinkPaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'color' argument.");
      Color color0 = (Color)standardChartTheme0.getShadowPaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createJFreeTheme();
      // Undeclared exception!
      try { 
        standardChartTheme0.setLargeFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.StandardChartTheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Paint paint0 = standardChartTheme0.getChartBackgroundPaint();
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFree");
      Color color0 = (Color)standardChartTheme0.getWallPaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.MiddlePinNeedle");
      boolean boolean0 = standardChartTheme0.isShadowVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      Font font0 = standardChartTheme0.getSmallFont();
      assertEquals(10, font0.getSize());
      assertTrue(font0.isPlain());
      assertEquals("Tahoma", font0.getName());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("JFree");
      Color color0 = (Color)standardChartTheme0.getGridBandPaint();
      assertEquals(128, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("1bU*q?t\"V+4|");
      Color color0 = (Color)standardChartTheme0.getTickLabelPaint();
      assertEquals(64, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'renderer' argument.");
      Color color0 = (Color)standardChartTheme0.getCrosshairPaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)StandardChartTheme.createDarknessTheme();
      standardChartTheme0.getThermometerPaint();
      assertEquals("Darkness", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      MeterPlot meterPlot0 = new MeterPlot();
      standardChartTheme0.applyToPlot(meterPlot0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0, tableOrder0);
      standardChartTheme0.applyToSpiderWebPlot(spiderWebPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("F9}?80tR_{vi@[OwYL");
      RectangleInsets rectangleInsets0 = standardChartTheme0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Y.ZK^U[J&mg?t");
      Color color0 = (Color)standardChartTheme0.getGridBandAlternatePaint();
      assertEquals(0, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("org.jfree.chart.needle.MiddlePinNeedle");
      Color color0 = (Color)standardChartTheme0.getErrorIndicatorPaint();
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("%B_b%vff;^<");
      Color color0 = (Color)standardChartTheme0.getBaselinePaint();
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("Null 'annotation' argument.");
      XYBarPainter xYBarPainter0 = standardChartTheme0.getXYBarPainter();
      assertNotNull(xYBarPainter0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("");
      Color color0 = (Color)standardChartTheme0.getPlotBackgroundPaint();
      assertEquals((-4144960), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = new StandardChartTheme("There is no existing value for the specified 'period'.");
      String string0 = standardChartTheme0.getName();
      assertEquals("There is no existing value for the specified 'period'.", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ChartTheme chartTheme0 = StandardChartTheme.createLegacyTheme();
      assertNotNull(chartTheme0);
  }
}
