/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:39:27 GMT 2022
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialValueIndicator;
import org.jfree.chart.plot.dial.StandardDialScale;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardDialScale_ESTest extends StandardDialScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-4052.07040901336), (-4052.07040901336), (-344.6958826255569), (-344.6958826255569), 3737.656, 3227);
      standardDialScale0.hashCode();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-344.6958826255569), standardDialScale0.getExtent(), 0.01);
      assertEquals(3737.656, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-4052.07040901336), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-4052.07040901336), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-344.6958826255569), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(3227, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setExtent((-939.7109766231098));
      StandardDialScale standardDialScale1 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals((-939.7109766231098), standardDialScale0.getExtent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(100.0, 100.0, 100.0, 100.0, 0.0, 1527);
      StandardDialScale standardDialScale1 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      
      standardDialScale0.setMajorTickLength(0.0);
      assertEquals(0.0, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickIncrement(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'increment' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setTickRadius(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.valueToAngle(2500.0);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-4075.0), double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.0, 0.0, 0.0, 1136.97295, 0.0, 78);
      double double0 = standardDialScale0.getUpperBound();
      assertEquals(78, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1136.97295, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(1.0, (-789.7421506024), 0.7, 0.7, 0.0, (-4));
      double double0 = standardDialScale0.getUpperBound();
      assertEquals(0.7, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-4), standardDialScale0.getMinorTickCount());
      assertEquals((-789.7421506024), double0, 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(1.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getMajorTickIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1.0), (-1.0), (-707.0), 3897.97, (-707.0), 429496730);
      standardDialScale0.setTickLabelOffset((-618.8950079090586));
      double double0 = standardDialScale0.getTickLabelOffset();
      assertEquals((-618.8950079090586), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1798.0), (-1798.0), 786.4228731, 1483.7, 970.151647041473, 4421);
      Locale locale0 = Locale.ENGLISH;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      decimalFormat0.applyLocalizedPattern(":z.QHO@ayW$9PD#M");
      standardDialScale0.setTickLabelFormatter(decimalFormat0);
      standardDialScale0.getTickLabelFormatter();
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1798.0), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(1483.7, standardDialScale0.getExtent(), 0.01);
      assertEquals((-1798.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(970.151647041473, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(786.4228731, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(4421, standardDialScale0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1798.0), (-1798.0), 786.4228731, 1483.7, 970.151647041473, 4421);
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      standardDialScale0.setTickLabelFormatter(numberFormat0);
      standardDialScale0.getTickLabelFormatter();
      assertEquals(970.151647041473, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(4421, standardDialScale0.getMinorTickCount());
      assertEquals(786.4228731, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-1798.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1798.0), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1483.7, standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      Font font0 = TextFragment.DEFAULT_FONT;
      double[] doubleArray0 = new double[9];
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      Font font1 = font0.deriveFont(232, affineTransform0);
      standardDialScale0.setTickLabelFont(font1);
      standardDialScale0.getTickLabelFont();
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      Font font0 = TextFragment.DEFAULT_FONT;
      standardDialScale0.setTickLabelFont(font0);
      standardDialScale0.getTickLabelFont();
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1356.119), (-1356.119), (-1356.119), (-1356.119), 0.0, 0);
      double double0 = standardDialScale0.getStartAngle();
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1356.119), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1356.119), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1356.119), double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-1356.119), standardDialScale0.getExtent(), 0.01);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      
      standardDialScale0.setMinorTickLength(0.0);
      double double0 = standardDialScale0.getMinorTickLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(Double.NaN, Double.NaN, 2.5E-4, (-917.419851177), 1.0E11, 37);
      int int0 = standardDialScale0.getMinorTickCount();
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(Double.NaN, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(Double.NaN, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(2.5E-4, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(37, int0);
      assertEquals(1.0E11, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-917.419851177), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(80.4587858233465, (-962.5), 3187.0, 175.0, 25.5, (-871));
      int int0 = standardDialScale0.getMinorTickCount();
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-962.5), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(3187.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(25.5, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-871), int0);
      assertEquals(175.0, standardDialScale0.getExtent(), 0.01);
      assertEquals(80.4587858233465, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-654.54976885257), (-654.54976885257), (-654.54976885257), Double.NaN, 0.0, (-3298));
      double double0 = standardDialScale0.getMajorTickIncrement();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-654.54976885257), standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-654.54976885257), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-654.54976885257), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, standardDialScale0.getExtent(), 0.01);
      assertEquals((-3298), standardDialScale0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(1161.3870146641, 1161.3870146641, 1161.3870146641, 1161.3870146641, (-694.29380364), 0);
      double double0 = standardDialScale0.getMajorTickIncrement();
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(1161.3870146641, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(1161.3870146641, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(1161.3870146641, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-694.29380364), double0, 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1161.3870146641, standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getLowerBound();
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setLowerBound(2115.143);
      double double0 = standardDialScale0.getLowerBound();
      assertEquals(2115.143, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-654.54976885257), (-654.54976885257), (-654.54976885257), Double.NaN, 0.0, (-3298));
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      
      standardDialScale0.setFirstTickLabelVisible(false);
      boolean boolean0 = standardDialScale0.getFirstTickLabelVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(449.88319262452, 0.0, 0.0, 0.0, 0.0, 40);
      double double0 = standardDialScale0.getExtent();
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(449.88319262452, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(40, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getExtent();
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-170.0), double0, 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D rectangle2D0 = dialPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0, false, false);
      // Undeclared exception!
      try { 
        standardDialScale0.draw((Graphics2D) null, dialPlot0, rectangle2D0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("SortOrder.ASCENDING", compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 780, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        standardDialScale0.draw(graphics2D0, (DialPlot) null, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1798.0), (-1798.0), 786.4228731, 1483.7, 970.151647041473, 4421);
      double double0 = standardDialScale0.valueToAngle(2175.3748412163905);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(4421, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(970.151647041473, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(1483.7, standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(786.4228731, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      Font font0 = TextTitle.DEFAULT_FONT;
      standardDialScale0.setTickLabelFont(font0);
      StandardDialScale standardDialScale1 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertFalse(boolean0);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setMinorTickCount(0);
      StandardDialScale standardDialScale1 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      StandardDialScale standardDialScale1 = new StandardDialScale();
      assertTrue(standardDialScale1.equals((Object)standardDialScale0));
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      standardDialScale1.setMajorTickPaint(color0);
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertFalse(standardDialScale1.equals((Object)standardDialScale0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      StandardDialScale standardDialScale1 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      StandardDialScale standardDialScale1 = new StandardDialScale();
      standardDialScale1.setStartAngle((-1676.0));
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals((-1676.0), standardDialScale1.getStartAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(Double.NaN, Double.NaN, 2.5E-4, (-917.419851177), 1.0E11, 37);
      StandardDialScale standardDialScale1 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale1);
      assertEquals((-170.0), standardDialScale1.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(175.0, standardDialScale1.getStartAngle(), 0.01);
      assertEquals(0.1, standardDialScale1.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale1.getTickRadius(), 0.01);
      assertEquals(10.0, standardDialScale1.getMajorTickIncrement(), 0.01);
      assertEquals(0.04, standardDialScale1.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale1.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale1.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale1.getMinorTickCount());
      assertEquals(0.0, standardDialScale1.getLowerBound(), 0.01);
      assertTrue(standardDialScale1.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-1798.0), (-1798.0), 786.4228731, 1483.7, 970.151647041473, 4443);
      boolean boolean0 = standardDialScale0.equals((Object) null);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-1798.0), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(1483.7, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-1798.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4443, standardDialScale0.getMinorTickCount());
      assertEquals(970.151647041473, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(786.4228731, standardDialScale0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.equals(standardDialScale0);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(boolean0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      Object object0 = standardDialScale0.clone();
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      
      standardDialScale0.setExtent(0.0);
      boolean boolean0 = standardDialScale0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      Font font0 = TextFragment.DEFAULT_FONT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(" -7N4o<)g/D|\n", font0, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(37, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-2973.485471));
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      standardDialScale0.draw(sunGraphics2D0, dialPlot0, rectangle2D_Float0, rectangle2D_Float0);
      assertEquals((-16776961), sunGraphics2D0.eargb);
      assertEquals(2, sunGraphics2D0.strokeState);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.0, 2013.7534, 0.0, 2782.40260684987, (-705.360194), (-2442));
      // Undeclared exception!
      try { 
        standardDialScale0.setTickLabelFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(50000.0, 1084.8507, 1084.8507, (-1028.194873374182), 50000.0, 1);
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator((-2221));
      Paint paint0 = dialValueIndicator0.getBackgroundPaint();
      standardDialScale0.setTickLabelPaint(paint0);
      assertEquals((-1028.194873374182), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(1, standardDialScale0.getMinorTickCount());
      assertEquals(1084.8507, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(50000.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(50000.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(1084.8507, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-451.0), 100000.0, 0.0, (-842.0651521168018), 100000.0, (-708));
      // Undeclared exception!
      try { 
        standardDialScale0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-24.0), (-24.0), (-2278.17692221382), (-24.0), (-24.0), 37);
      BasicStroke basicStroke0 = (BasicStroke)standardDialScale0.getMinorTickStroke();
      standardDialScale0.setMinorTickStroke(basicStroke0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-24.0), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-2278.17692221382), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(37, standardDialScale0.getMinorTickCount());
      assertEquals((-24.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-24.0), standardDialScale0.getExtent(), 0.01);
      assertEquals((-24.0), standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.data.statistics.SimpleHistogramBin");
      standardDialScale0.setMinorTickPaint(subCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-151.455229), (-151.455229), 2.5E-8, 2.5E-8, (-151.455229), (-1701));
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickLength((-1310.32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'length' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setMinorTickLength(1.0E8);
      assertEquals(1.0E8, standardDialScale0.getMinorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setMinorTickCount((-1775));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'count' cannot be negative.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-24.0), (-24.0), (-2278.17692221382), (-24.0), (-24.0), 37);
      standardDialScale0.setMinorTickCount(37);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-24.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(37, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-24.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-2278.17692221382), standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-24.0), standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-24.0), standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-5368.81271443643), (-1789.0462903793568), 0.04, (-1789.0462903793568), (-5689.88829172459), 506);
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-24.0), (-24.0), (-2278.17692221382), (-24.0), (-24.0), 37);
      BasicStroke basicStroke0 = (BasicStroke)standardDialScale0.getMinorTickStroke();
      standardDialScale0.setMajorTickStroke(basicStroke0);
      assertEquals((-24.0), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-24.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-24.0), standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2278.17692221382), standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-24.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(37, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-3585.4233), (-3585.4233), (-3585.4233), (-3585.4233), (-3585.4233), 3258);
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickLength((-939.211258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'length' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setMajorTickLength(300);
      assertEquals(300.0, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setMajorTickIncrement((-3545.98679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'increment' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setMajorTickIncrement(2551.5021912);
      assertEquals(2551.5021912, standardDialScale0.getMajorTickIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      // Undeclared exception!
      try { 
        standardDialScale0.setTickRadius((-1885.74621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'radius' must be positive.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-366.68), 0.0, (-518.346837075021), 0.0, 299.480744119, 0);
      standardDialScale0.setTickRadius(299.480744119);
      assertEquals(299.480744119, standardDialScale0.getTickRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.setUpperBound(1774.01974706);
      assertEquals(1774.01974706, standardDialScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.isClippedToWindow();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(boolean0);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(50000.0, 1084.8507, 1084.8507, (-1028.194873374182), 50000.0, 1);
      Font font0 = standardDialScale0.getTickLabelFont();
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(1084.8507, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1084.8507, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1028.194873374182), standardDialScale0.getExtent(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(1, standardDialScale0.getMinorTickCount());
      assertEquals(16, font0.getSize());
      assertEquals(50000.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals("Tahoma", font0.getName());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(50000.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(1, font0.getStyle());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getStartAngle();
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(175.0, double0, 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2846.454715), (-2846.454715), 8.397394513, (-738.0), 8.397394513, (-10));
      standardDialScale0.getTickLabelPaint();
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals((-738.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-2846.454715), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-2846.454715), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-10), standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.getTickLabelsVisible();
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertTrue(boolean0);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2846.454715), (-2846.454715), 8.397394513, (-738.0), 8.397394513, (-10));
      standardDialScale0.getMinorTickPaint();
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-2846.454715), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-10), standardDialScale0.getMinorTickCount());
      assertEquals((-2846.454715), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-738.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getMajorTickIncrement();
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(10.0, double0, 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.hashCode();
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      BasicStroke basicStroke0 = (BasicStroke)standardDialScale0.getMajorTickStroke();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(3.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-366.68), 0.0, (-518.346837075021), 0.0, 299.480744119, 0);
      double double0 = standardDialScale0.getLowerBound();
      assertEquals((-366.68), double0, 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(299.480744119, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.0, standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-518.346837075021), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2846.454715), (-2846.454715), 8.397394513, (-738.0), 8.397394513, (-10));
      double double0 = standardDialScale0.getMajorTickLength();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-738.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, double0, 0.01);
      assertEquals(8.397394513, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-2846.454715), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-10), standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-2846.454715), standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(10000.0, 10000.0, 2589.0, 2589.0, 10000.0, 1560);
      double double0 = standardDialScale0.getExtent();
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(10000.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(10000.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(2589.0, double0, 0.01);
      assertEquals(2589.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(1560, standardDialScale0.getMinorTickCount());
      assertEquals(10000.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      boolean boolean0 = standardDialScale0.getFirstTickLabelVisible();
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(boolean0);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2846.454715), (-2846.454715), 8.397394513, (-738.0), 8.397394513, (-10));
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(" -7N4o<)g/D|\n", font0, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(37, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-2973.485471));
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      standardDialScale0.draw(sunGraphics2D0, dialPlot0, rectangle2D_Float0, rectangle2D_Float0);
      assertEquals((-16776961), sunGraphics2D0.pixel);
      assertEquals((-738.0), standardDialScale0.getExtent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      DecimalFormat decimalFormat0 = (DecimalFormat)standardDialScale0.getTickLabelFormatter();
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      standardDialScale0.getMajorTickPaint();
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2846.454715), (-2846.454715), 8.397394513, (-738.0), 8.397394513, (-10));
      double double0 = standardDialScale0.getTickRadius();
      assertEquals((-738.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-2846.454715), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-2846.454715), standardDialScale0.getUpperBound(), 0.01);
      assertEquals((-10), standardDialScale0.getMinorTickCount());
      assertEquals(8.397394513, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-2846.454715), (-2846.454715), 8.397394513, (-738.0), 8.397394513, 1);
      double double0 = standardDialScale0.getTickLabelOffset();
      assertEquals((-738.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(1, standardDialScale0.getMinorTickCount());
      assertEquals((-2846.454715), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0.1, double0, 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-2846.454715), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(8.397394513, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getMinorTickLength();
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(100.0, standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, double0, 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      double double0 = standardDialScale0.getUpperBound();
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals((-170.0), standardDialScale0.getExtent(), 0.01);
      assertEquals(175.0, standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(10.0, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(4, standardDialScale0.getMinorTickCount());
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals(100.0, double0, 0.01);
      assertEquals(0.0, standardDialScale0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      assertTrue(standardDialScale0.getTickLabelsVisible());
      
      standardDialScale0.setTickLabelsVisible(false);
      boolean boolean0 = standardDialScale0.getTickLabelsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-654.54976885257), (-654.54976885257), (-654.54976885257), Double.NaN, 0.0, (-3298));
      assertEquals((-654.54976885257), standardDialScale0.getStartAngle(), 0.01);
      
      standardDialScale0.setStartAngle(0.0);
      double double0 = standardDialScale0.getStartAngle();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-366.68), 0.0, (-518.346837075021), 0.0, 299.480744119, 0);
      double double0 = standardDialScale0.angleToValue(0.0);
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-366.68), standardDialScale0.getLowerBound(), 0.01);
      assertEquals(0, standardDialScale0.getMinorTickCount());
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals(299.480744119, standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.0, standardDialScale0.getUpperBound(), 0.01);
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertEquals((-518.346837075021), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals(0.0, standardDialScale0.getExtent(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(standardDialScale0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale((-170.0), (-170.0), (-1111.5615), (-1111.5615), (-170.0), 0);
      int int0 = standardDialScale0.getMinorTickCount();
      assertTrue(standardDialScale0.getFirstTickLabelVisible());
      assertTrue(standardDialScale0.getTickLabelsVisible());
      assertEquals(0.7, standardDialScale0.getTickRadius(), 0.01);
      assertEquals(0.04, standardDialScale0.getMajorTickLength(), 0.01);
      assertEquals((-170.0), standardDialScale0.getLowerBound(), 0.01);
      assertEquals((-1111.5615), standardDialScale0.getStartAngle(), 0.01);
      assertEquals(0, int0);
      assertEquals((-170.0), standardDialScale0.getMajorTickIncrement(), 0.01);
      assertEquals(0.1, standardDialScale0.getTickLabelOffset(), 0.01);
      assertEquals((-170.0), standardDialScale0.getUpperBound(), 0.01);
      assertEquals(0.02, standardDialScale0.getMinorTickLength(), 0.01);
      assertEquals((-1111.5615), standardDialScale0.getExtent(), 0.01);
  }
}
