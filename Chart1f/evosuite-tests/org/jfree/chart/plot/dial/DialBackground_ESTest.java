/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:34:07 GMT 2022
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.dial.DialBackground;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DialBackground_ESTest extends DialBackground_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      DialBackground dialBackground0 = new DialBackground(color0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, multiplePiePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-1.0), (-1295.562), chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0F);
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      dialBackground0.draw(graphics2D0, dialPlot0, defaultCaret0, rectangle2D0);
      assertTrue(dialBackground0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Object object0 = dialBackground0.clone();
      boolean boolean0 = dialBackground0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      TimeSeries timeSeries0 = new TimeSeries(12.0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      boolean boolean0 = dialBackground0.equals(timeSeriesTableModel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.equals(dialBackground0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XYDataItem", spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DialPlot dialPlot0 = new DialPlot();
      // Undeclared exception!
      try { 
        dialBackground0.draw(graphics2D0, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      // Undeclared exception!
      try { 
        dialBackground0.setGradientPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialBackground", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      dialBackground0.setGradientPaintTransformer(standardGradientPaintTransformer0);
      assertTrue(dialBackground0.isClippedToWindow());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      // Undeclared exception!
      try { 
        dialBackground0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialBackground", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Paint paint0 = categoryAxis3D0.getTickMarkPaint();
      dialBackground0.setPaint(paint0);
      assertEquals(1, paint0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialBackground dialBackground0 = null;
      try {
        dialBackground0 = new DialBackground((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialBackground", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      dialBackground0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Object object0 = dialBackground0.clone();
      assertTrue(object0.equals((Object)dialBackground0));
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      dialBackground0.setPaint(color0);
      boolean boolean0 = dialBackground0.equals(object0);
      assertFalse(object0.equals((Object)dialBackground0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      GradientPaintTransformer gradientPaintTransformer0 = dialBackground0.getGradientPaintTransformer();
      assertNotNull(gradientPaintTransformer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.isClippedToWindow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Color color0 = (Color)dialBackground0.getPaint();
      assertEquals(255, color0.getBlue());
  }
}
