/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:33:12 GMT 2022
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.StandardDialRange;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardDialRange_ESTest extends StandardDialRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setOuterRadius((-2847.5487066453));
      standardDialRange0.hashCode();
      assertEquals((-2847.5487066453), standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setInnerRadius((-560.0));
      standardDialRange0.hashCode();
      assertEquals((-560.0), standardDialRange0.getInnerRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.infoText;
      StandardDialRange standardDialRange0 = new StandardDialRange((-10.1), (-10.1), systemColor0);
      standardDialRange0.hashCode();
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals((-10.1), standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setLowerBound((-30.74184611304));
      standardDialRange0.hashCode();
      assertEquals((-30.74184611304), standardDialRange0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object object0 = standardDialRange0.clone();
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      
      standardDialRange0.setInnerRadius(0.0);
      boolean boolean0 = standardDialRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setUpperBound(0.52);
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(0.52, standardDialRange0.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object object0 = standardDialRange0.clone();
      standardDialRange0.setBounds((-2441.127), 1021.106650178128);
      boolean boolean0 = standardDialRange0.equals(object0);
      assertEquals(1021.106650178128, standardDialRange0.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex((-3498));
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals((-3498), standardDialRange0.getScaleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      DialPlot dialPlot0 = new DialPlot();
      Rectangle rectangle0 = new Rectangle();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        standardDialRange0.draw((Graphics2D) null, dialPlot0, rectangle0, rectangle2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No scale for scaleIndex = 0
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      // Undeclared exception!
      try { 
        standardDialRange0.setBounds(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower must be less than upper.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.red;
      StandardDialRange standardDialRange0 = new StandardDialRange(2373.0, 0.0, color0);
      // Undeclared exception!
      try { 
        standardDialRange0.setUpperBound((-1786.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setUpperBound(2.5E-7);
      // Undeclared exception!
      try { 
        standardDialRange0.setLowerBound(2.5E-7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'range' argument.");
      StandardDialRange standardDialRange0 = new StandardDialRange((double) stackedAreaRenderer0.ZERO, 0.0F, subCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      double double0 = standardDialRange0.getUpperBound();
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(143.0116589597);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      Paint paint0 = compassPlot0.getRosePaint();
      StandardDialRange standardDialRange0 = new StandardDialRange((-18.5481410021221), (-1576.4747739), paint0);
      double double0 = standardDialRange0.getUpperBound();
      assertEquals((-1576.4747739), double0, 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals((-18.5481410021221), standardDialRange0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex(1253);
      int int0 = standardDialRange0.getScaleIndex();
      assertEquals(1253, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex((-933));
      int int0 = standardDialRange0.getScaleIndex();
      assertEquals((-933), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      
      standardDialRange0.setOuterRadius(0.0);
      double double0 = standardDialRange0.getOuterRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setOuterRadius((-2847.5487066453));
      double double0 = standardDialRange0.getOuterRadius();
      assertEquals((-2847.5487066453), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      Paint paint0 = compassPlot0.getRoseHighlightPaint();
      StandardDialRange standardDialRange0 = new StandardDialRange(28.2, 28.2, paint0);
      double double0 = standardDialRange0.getLowerBound();
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(28.2, double0, 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setLowerBound((-57.930843478));
      double double0 = standardDialRange0.getLowerBound();
      assertEquals((-57.930843478), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'numberFormatter' argument.", (-1.0), 360.0, 0.52);
      Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
      StandardDialRange standardDialRange0 = new StandardDialRange(360.0, 360.0, paint0);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      
      standardDialRange0.setInnerRadius(0.0);
      double double0 = standardDialRange0.getInnerRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setInnerRadius((-1161.6296));
      double double0 = standardDialRange0.getInnerRadius();
      assertEquals((-1161.6296), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 1.0, color0);
      DialPlot dialPlot0 = new DialPlot();
      // Undeclared exception!
      try { 
        standardDialRange0.draw((Graphics2D) null, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rect' argument.
         //
         verifyException("org.jfree.chart.plot.dial.DialPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      StandardDialRange standardDialRange1 = (StandardDialRange)standardDialRange0.clone();
      standardDialRange1.setOuterRadius(3874.963821);
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(3874.963821, standardDialRange1.getOuterRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object object0 = standardDialRange0.clone();
      standardDialRange0.setInnerRadius(98.68995711634462);
      boolean boolean0 = standardDialRange0.equals(object0);
      assertEquals(98.68995711634462, standardDialRange0.getInnerRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Object[][] objectArray0 = new Object[5][3];
      Object object0 = standardDialRange0.clone();
      assertTrue(object0.equals((Object)standardDialRange0));
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[0]);
      JTable jTable0 = new JTable(defaultTableModel0);
      Color color0 = jTable0.getSelectionForeground();
      standardDialRange0.setPaint(color0);
      boolean boolean0 = standardDialRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      DialPlot dialPlot0 = new DialPlot();
      StandardDialRange standardDialRange1 = new StandardDialRange((-11.513783059044709), (-11.513783059044709), dialPlot0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange1.getScaleIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setScaleIndex(1063);
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(1063, standardDialRange0.getScaleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      StandardDialRange standardDialRange1 = (StandardDialRange)standardDialRange0.clone();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(0, standardDialRange1.getScaleIndex());
      assertEquals(0.52, standardDialRange1.getOuterRadius(), 0.01);
      assertEquals(0.48, standardDialRange1.getInnerRadius(), 0.01);
      assertEquals(0.0, standardDialRange1.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialRange1.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange0);
      assertTrue(boolean0);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      boolean boolean0 = standardDialRange0.equals(xYDatasetTableModel0);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      // Undeclared exception!
      try { 
        standardDialRange0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'numberFormatter' argument.", 360.0, 360.0, 0.52);
      Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
      StandardDialRange standardDialRange0 = new StandardDialRange(360.0, 360.0, paint0);
      // Undeclared exception!
      try { 
        standardDialRange0.setBounds(682.383428943, 3.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower must be less than upper.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setBounds(0.0, 457.0613181199751);
      StandardDialRange standardDialRange1 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.equals(standardDialRange1);
      assertEquals(457.0613181199751, standardDialRange0.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      // Undeclared exception!
      try { 
        standardDialRange0.setUpperBound(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      standardDialRange0.setUpperBound(0.48);
      // Undeclared exception!
      try { 
        standardDialRange0.setLowerBound(98.68995711634462);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be less than upper bound.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardDialRange standardDialRange0 = null;
      try {
        standardDialRange0 = new StandardDialRange(200.0, 200.0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.dial.StandardDialRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 1.0, color0);
      double double0 = standardDialRange0.getLowerBound();
      assertEquals(1.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 1.0, color0);
      int int0 = standardDialRange0.getScaleIndex();
      assertEquals(1.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      boolean boolean0 = standardDialRange0.isClippedToWindow();
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertTrue(boolean0);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 1.0, color0);
      double double0 = standardDialRange0.getInnerRadius();
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.48, double0, 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(1.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      StandardDialRange standardDialRange0 = new StandardDialRange(0.0, 1.0, color0);
      double double0 = standardDialRange0.getUpperBound();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      double double0 = standardDialRange0.getOuterRadius();
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.52, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardDialRange standardDialRange0 = new StandardDialRange();
      Paint paint0 = standardDialRange0.getPaint();
      standardDialRange0.setPaint(paint0);
      assertEquals(100.0, standardDialRange0.getUpperBound(), 0.01);
      assertEquals(0, standardDialRange0.getScaleIndex());
      assertEquals(0.48, standardDialRange0.getInnerRadius(), 0.01);
      assertEquals(0.52, standardDialRange0.getOuterRadius(), 0.01);
      assertEquals(0.0, standardDialRange0.getLowerBound(), 0.01);
  }
}
