/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:26:47 GMT 2022
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Paint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.dial.DialBackground;
import org.jfree.chart.plot.dial.DialCap;
import org.jfree.chart.plot.dial.DialLayerChangeEvent;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialPointer;
import org.jfree.chart.plot.dial.DialValueIndicator;
import org.jfree.chart.plot.dial.StandardDialFrame;
import org.jfree.chart.plot.dial.StandardDialScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDialLayer_ESTest extends AbstractDialLayer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      DialPointer.Pointer dialPointer_Pointer0 = new DialPointer.Pointer();
      DialPlot dialPlot0 = new DialPlot();
      dialPointer_Pointer0.addChangeListener(dialPlot0);
      dialPointer_Pointer0.addChangeListener(dialPlot0);
      dialPointer_Pointer0.setFillPaint(stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(dialPointer_Pointer0.isVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      DialPlot dialPlot0 = new DialPlot();
      standardDialScale0.removeChangeListener(dialPlot0);
      assertTrue(standardDialScale0.isVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      dialBackground0.notifyListeners((DialLayerChangeEvent) null);
      assertTrue(dialBackground0.isVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator();
      dialValueIndicator0.hashCode();
      assertTrue(dialValueIndicator0.isVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale(0.75, 154.5, 2.5E-4, 0.0, 0.0, (-1922));
      DialPlot dialPlot0 = new DialPlot((ValueDataset) null);
      standardDialScale0.addChangeListener(dialPlot0);
      assertTrue(standardDialScale0.isVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(1514);
      assertTrue(dialValueIndicator0.isVisible());
      
      dialValueIndicator0.setVisible(false);
      boolean boolean0 = dialValueIndicator0.isVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 234);
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      StandardDialScale standardDialScale0 = new StandardDialScale(1.0F, 0.0, (-1.0), 1.0, (-135.0), 802);
      boolean boolean0 = standardDialScale0.hasListener(ringPlot0);
      assertFalse(boolean0);
      assertTrue(standardDialScale0.isVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialPointer.Pointer dialPointer_Pointer0 = new DialPointer.Pointer();
      Paint paint0 = dialPointer_Pointer0.getFillPaint();
      dialPointer_Pointer0.equals(paint0);
      assertTrue(dialPointer_Pointer0.isVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardDialScale standardDialScale0 = new StandardDialScale();
      StandardDialScale standardDialScale1 = (StandardDialScale)standardDialScale0.clone();
      assertTrue(standardDialScale1.isVisible());
      assertNotSame(standardDialScale1, standardDialScale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.addChangeListener(dialPlot0);
      DialPlot dialPlot1 = new DialPlot();
      dialPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      // Undeclared exception!
      try { 
        dialCap0.hasListener(dialPlot1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.addChangeListener(dialPlot0);
      StandardDialFrame standardDialFrame0 = new StandardDialFrame();
      standardDialFrame0.removeChangeListener(dialPlot0);
      assertTrue(standardDialFrame0.isVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialCap dialCap0 = new DialCap();
      DialPlot dialPlot0 = new DialPlot();
      dialCap0.addChangeListener(dialPlot0);
      DialPlot dialPlot1 = new DialPlot();
      boolean boolean0 = dialCap0.hasListener(dialPlot1);
      assertTrue(dialCap0.isVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialPointer.Pointer dialPointer_Pointer0 = new DialPointer.Pointer();
      DialPointer.Pointer dialPointer_Pointer1 = new DialPointer.Pointer(0);
      dialPointer_Pointer1.setVisible(false);
      boolean boolean0 = dialPointer_Pointer0.equals(dialPointer_Pointer1);
      assertFalse(dialPointer_Pointer1.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialValueIndicator dialValueIndicator0 = new DialValueIndicator(1514);
      boolean boolean0 = dialValueIndicator0.isVisible();
      assertTrue(boolean0);
  }
}
