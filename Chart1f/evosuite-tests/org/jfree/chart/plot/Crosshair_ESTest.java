/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:53:16 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.synth.SynthSeparatorUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.labels.CrosshairLabelGenerator;
import org.jfree.chart.labels.StandardCrosshairLabelGenerator;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.util.RectangleAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Crosshair_ESTest extends Crosshair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      crosshair0.setLabelOutlinePaint(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-4472.584));
      crosshair0.setLabelBackgroundPaint((Paint) null);
      assertEquals((-4472.584), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      crosshair0.setLabelPaint(color0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      BasicStroke basicStroke0 = new BasicStroke();
      crosshair0.setStroke(basicStroke0);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      assertTrue(crosshair0.isVisible());
      
      crosshair0.setVisible(false);
      boolean boolean0 = crosshair0.isVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(0.0);
      assertFalse(crosshair0.isLabelVisible());
      
      crosshair0.setLabelVisible(true);
      boolean boolean0 = crosshair0.isLabelVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      double double0 = crosshair0.getValue();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(1224.7487570562);
      double double0 = crosshair0.getValue();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(1224.7487570562, double0, 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-813.0159212185157));
      crosshair0.setLabelYOffset((-813.0159212185157));
      double double0 = crosshair0.getLabelYOffset();
      assertEquals((-813.0159212185157), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-813.0159212185157));
      crosshair0.setLabelXOffset((-715.2));
      double double0 = crosshair0.getLabelXOffset();
      assertEquals((-715.2), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelAnchor((RectangleAnchor) null);
      Object object0 = crosshair0.clone();
      // Undeclared exception!
      try { 
        crosshair0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1407.9426));
      double double0 = crosshair0.getValue();
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-1407.9426), double0, 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      crosshair1.setLabelXOffset((-1309.0));
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertEquals((-1309.0), crosshair1.getLabelXOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      assertTrue(crosshair1.equals((Object)crosshair0));
      
      Color color0 = Color.orange;
      crosshair1.setPaint(color0);
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      Crosshair crosshair1 = new Crosshair();
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertTrue(crosshair1.isVisible());
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, crosshair1.getValue(), 0.01);
      assertFalse(crosshair1.equals((Object)crosshair0));
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      boolean boolean0 = crosshair0.equals(crosshair0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(boolean0);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(3.0);
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      boolean boolean0 = crosshair0.equals(standardCrosshairLabelGenerator0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(514.655574428);
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(3.0);
      BasicStroke basicStroke0 = new BasicStroke();
      crosshair0.setLabelOutlineStroke(basicStroke0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      // Undeclared exception!
      try { 
        crosshair0.setLabelOutlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      // Undeclared exception!
      try { 
        crosshair0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = Color.DARK_GRAY;
      BasicStroke basicStroke0 = new BasicStroke();
      Crosshair crosshair0 = new Crosshair(0.0, color0, basicStroke0);
      // Undeclared exception!
      try { 
        crosshair0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Font font0 = new Font("", 7, (-77));
      crosshair0.setLabelFont(font0);
      Font font1 = crosshair0.getLabelFont();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals("", font1.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = Color.getColor("org.jfree.data.time.SerialDate", 0);
      BasicStroke basicStroke0 = new BasicStroke(0);
      Crosshair crosshair0 = new Crosshair(1637.82, color0, basicStroke0);
      // Undeclared exception!
      try { 
        crosshair0.setLabelGenerator((CrosshairLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(3.0);
      StandardCrosshairLabelGenerator standardCrosshairLabelGenerator0 = new StandardCrosshairLabelGenerator();
      crosshair0.setLabelGenerator(standardCrosshairLabelGenerator0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textHighlight;
      Crosshair crosshair0 = null;
      try {
        crosshair0 = new Crosshair(1.0, systemColor0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      Crosshair crosshair0 = null;
      try {
        crosshair0 = new Crosshair(3.0, (Paint) null, basicStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.Crosshair", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      crosshair0.removePropertyChangeListener(basicLabelUI0);
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      double double0 = crosshair0.getLabelYOffset();
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, double0, 0.01);
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.getLabelOutlineStroke();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.getPaint();
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.setValue((-1309.0));
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair(3.0);
      boolean boolean0 = crosshair0.isVisible();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(boolean0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      Crosshair crosshair1 = (Crosshair)crosshair0.clone();
      boolean boolean0 = crosshair0.equals(crosshair1);
      assertTrue(boolean0);
      assertFalse(crosshair1.isLabelVisible());
      assertEquals(3.0, crosshair1.getLabelXOffset(), 0.01);
      assertTrue(crosshair1.isVisible());
      assertEquals((-1309.0), crosshair1.getValue(), 0.01);
      assertEquals(3.0, crosshair1.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      crosshair0.addPropertyChangeListener(synthSeparatorUI0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      crosshair0.setLabelOutlineVisible(false);
      boolean boolean0 = crosshair0.isLabelOutlineVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      Font font0 = crosshair0.getLabelFont();
      assertEquals("Tahoma", font0.getName());
      assertTrue(crosshair0.isVisible());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertTrue(font0.isPlain());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      double double0 = crosshair0.getLabelXOffset();
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.getLabelGenerator();
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair();
      Color color0 = (Color)crosshair0.getLabelBackgroundPaint();
      crosshair0.setLabelBackgroundPaint(color0);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(0.0, crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(1056964863, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      boolean boolean0 = crosshair0.isLabelVisible();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.hashCode();
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      crosshair0.setLabelAnchor(rectangleAnchor0);
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.isLabelOutlineVisible();
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertTrue(crosshair0.isVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.getLabelOutlinePaint();
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      crosshair0.getLabelPaint();
      assertTrue(crosshair0.isVisible());
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Crosshair crosshair0 = new Crosshair((-1309.0));
      Stroke stroke0 = crosshair0.getStroke();
      crosshair0.setStroke(stroke0);
      assertFalse(crosshair0.isLabelVisible());
      assertEquals(3.0, crosshair0.getLabelXOffset(), 0.01);
      assertTrue(crosshair0.isVisible());
      assertEquals(3.0, crosshair0.getLabelYOffset(), 0.01);
      assertEquals((-1309.0), crosshair0.getValue(), 0.01);
  }
}
