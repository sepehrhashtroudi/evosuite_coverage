/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:25:53 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JViewport;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.TickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.event.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolarPlot_ESTest extends PolarPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      Rectangle rectangle0 = new Rectangle(2746, 10);
      Point point0 = polarPlot0.translateValueThetaRadiusToJava2D((double) defaultPolarItemRenderer0.ZERO, (double) defaultPolarItemRenderer0.ZERO, rectangle0);
      assertEquals(5, point0.y);
      assertEquals(1373, point0.x);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.zoom((-4.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3745, (-1705), simpleTimeZone0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("2XYTNM^.&tZf8bX32");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, numberAxis3D0, defaultPolarItemRenderer0);
      polarPlot0.setRadiusGridlinePaint(defaultPolarItemRenderer0.DEFAULT_PAINT);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 4268.72824);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      polarPlot0.setAngleLabelPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-7), "org.jfree.chart.plot.PolarPlot");
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.plot.PolarPlot", simpleTimeZone0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, dateAxis0, defaultPolarItemRenderer0);
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      polarPlot0.zoomRangeAxes(1.0E-8, 0.05, (PlotRenderingInfo) null, (Point2D) point0);
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.025000005000000002, dateAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point point0 = polarPlot0.translateValueThetaRadiusToJava2D((double) defaultPolarItemRenderer0.ZERO, (double) defaultPolarItemRenderer0.ZERO, defaultCaret0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      Rectangle rectangle0 = new Rectangle((-4376), 1073741824, 10, 2767);
      Point point0 = polarPlot0.translateValueThetaRadiusToJava2D((double) defaultPolarItemRenderer0.ZERO, (double) defaultPolarItemRenderer0.ZERO, rectangle0);
      assertEquals(1073743232, point0.y);
      assertEquals((-4371), point0.x);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      
      polarPlot0.setAngleLabelsVisible(false);
      boolean boolean0 = polarPlot0.isAngleLabelsVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getRenderer();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("ItemLabelAnchor.OUTSIDE10");
      dateAxis0.resizeRange2(52.430961921, 151.3336901225);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getMaxRadius();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      NumberAxis numberAxis0 = new NumberAxis("=~h0szx(-qA5=xU");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, numberAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataset();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getAxis();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYIntervalSeriesCollection0, valueAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAxis();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAxis();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      // Undeclared exception!
      try { 
        polarPlot0.zoomRangeAxes(3110.414859, plotRenderingInfo0, (Point2D) point2D_Float0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 300, 10, (-261), 1733, 15, 10, true, 0, (-261), 0);
      Point point0 = mouseWheelEvent0.getLocationOnScreen();
      // Undeclared exception!
      try { 
        polarPlot0.zoomRangeAxes(2.0, plotRenderingInfo0, (Point2D) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        polarPlot0.translateValueThetaRadiusToJava2D(0.0F, 45.0, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.getMaxRadius();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'unit' argument.", (Range) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = null;
      try {
        polarPlot0 = new PolarPlot(timePeriodValuesCollection0, moduloAxis0, defaultPolarItemRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DateAxis dateAxis0 = new DateAxis();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(dateAxis0, defaultBoxAndWhiskerCategoryDataset0, datasetChangeInfo0);
      polarPlot0.datasetChanged(datasetChangeEvent0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, logAxis0, defaultPolarItemRenderer0);
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultTableXYDataset0, defaultTableXYDataset0, datasetChangeInfo0);
      polarPlot0.datasetChanged(datasetChangeEvent0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LogAxis logAxis0 = new LogAxis("");
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, logAxis0, (PolarItemRenderer) null);
      polarPlot0.getDataRange(logAxis0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataRange(logAxis0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("n B3W#s");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoom(1.0F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, (ValueAxis) null, defaultPolarItemRenderer0);
      // Undeclared exception!
      try { 
        polarPlot0.zoom(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetGroup datasetGroup0 = categoryTableXYDataset0.getGroup();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(datasetGroup0);
      polarPlot0.rendererChanged(rendererChangeEvent0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      LogAxis logAxis0 = new LogAxis("");
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, logAxis0, (PolarItemRenderer) null);
      boolean boolean0 = polarPlot0.isDomainZoomable();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertFalse(boolean0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Null 'font' argument.");
      DateAxis dateAxis0 = new DateAxis("d-MMM", timeZone0, locale0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getMaxRadius();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getOrientation();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      boolean boolean0 = polarPlot0.isRangeZoomable();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(boolean0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0, tableOrder0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-4.0), 0.1, 2239, 1.0F);
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(rectangle2D_Double0, 90.0, rectangle2D_Double0, 0.1);
      polarPlot0.zoomRangeAxes((double) 2.0F, plotRenderingInfo0, point2D0, true);
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("TbwYyvLz,4D|@`");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeTableXYDataset0, numberAxis3D0, defaultPolarItemRenderer0);
      Point2D.Float point2D_Float0 = new Point2D.Float(188.232F, (-1157.3715F));
      polarPlot0.zoomRangeAxes(0.05, (PlotRenderingInfo) null, (Point2D) point2D_Float0, false);
      assertEquals(0.55125, polarPlot0.getMaxRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      assertNotSame(polarPlot1, polarPlot0);
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("!^idx.h");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot1 = new PolarPlot((XYDataset) null, numberAxis3D0, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.equals(polarPlot1);
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DateAxis dateAxis0 = new DateAxis("ItemLabelAnchor.OUTSIDE10");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      PolarPlot polarPlot1 = (PolarPlot)polarPlot0.clone();
      boolean boolean0 = polarPlot0.equals(polarPlot1);
      assertNotSame(polarPlot1, polarPlot0);
      assertTrue(boolean0);
      assertTrue(polarPlot1.isAngleLabelsVisible());
      assertTrue(polarPlot1.isAngleGridlinesVisible());
      assertTrue(polarPlot1.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2217, 2217);
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Polar Plot", dateAxis0.DEFAULT_RANGE);
      boolean boolean0 = polarPlot0.equals(moduloAxis0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertFalse(boolean0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      LegendItemCollection legendItemCollection0 = polarPlot0.getLegendItems();
      assertEquals(1, legendItemCollection0.getItemCount());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getLegendItems();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      int int0 = polarPlot0.getSeriesCount();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1, int0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      int int0 = polarPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        polarPlot0.render((Graphics2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      List list0 = polarPlot0.refreshAngleTicks();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(8, list0.size());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      
      polarPlot0.setRadiusGridlinesVisible(false);
      assertFalse(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      
      polarPlot0.setRadiusGridlinesVisible(true);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, logAxis0, defaultPolarItemRenderer0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      
      polarPlot0.setAngleGridlinesVisible(false);
      assertFalse(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      
      polarPlot0.setAngleGridlinesVisible(true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.setAngleLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      polarPlot0.setAngleLabelFont(areaRenderer0.DEFAULT_VALUE_LABEL_FONT);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      
      polarPlot0.setAngleLabelsVisible(true);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultPolarItemRenderer0.ZERO, "7BMk3\"h{e");
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.setAngleTickUnit(cyclicNumberAxis0.DEFAULT_TICK_UNIT);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setRenderer((PolarItemRenderer) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 4268.72824);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setRenderer(defaultPolarItemRenderer0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.setDataset(xYSeriesCollection0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      polarPlot0.setDataset(xYSeriesCollection0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-3201));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPAN;
      DateAxis dateAxis0 = new DateAxis("Null 'font' argument.", timeZone0, locale0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.setAxis(dateAxis0);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAxis((ValueAxis) null);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.clearCornerTextItems();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.removeCornerTextItem("");
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      // Undeclared exception!
      try { 
        polarPlot0.addCornerTextItem((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.addCornerTextItem("nicG5<_`");
      polarPlot0.clearCornerTextItems();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(999);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      Color color0 = (Color)polarPlot0.getAngleLabelPaint();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(0, color0.getGreen());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timePeriodValuesCollection0, (ValueAxis) null, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1025, 0, 0, 1318, 212, (-1), true, false, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double((-2684.2031821597), (-1497.0));
      polarPlot0.zoomDomainAxes((double) defaultPolarItemRenderer0.ZERO, (double) defaultPolarItemRenderer0.ZERO, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Paint[] paintArray0 = new Paint[7];
      Stroke[] strokeArray0 = new Stroke[7];
      Shape[] shapeArray0 = new Shape[6];
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier(paintArray0, paintArray0, strokeArray0, strokeArray0, shapeArray0);
      Stroke stroke0 = defaultDrawingSupplier0.getNextStroke();
      polarPlot0.setRadiusGridlineStroke(stroke0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Font font0 = polarPlot0.getAngleLabelFont();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(12, font0.getSize());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals("Tahoma", font0.getName());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertFalse(font0.isBold());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 4268.72824);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      polarPlot0.zoomDomainAxes((-1609.0), (PlotRenderingInfo) null, (Point2D) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2217, 2217);
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      Color color0 = (Color)polarPlot0.getRadiusGridlinePaint();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      Color color0 = (Color)polarPlot0.getAngleGridlinePaint();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(128, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      polarPlot0.getDataset();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2217, 2217);
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getRenderer();
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D point2D0 = combinedDomainXYPlot0.getQuadrantOrigin();
      // Undeclared exception!
      try { 
        polarPlot0.zoomRangeAxes(292.667380245, 0.0, plotRenderingInfo0, point2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 4268.72824);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.isAngleLabelsVisible();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      TickUnit tickUnit0 = polarPlot0.getAngleTickUnit();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(45.0, tickUnit0.getSize(), 0.01);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2217, 2217);
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      BasicStroke basicStroke0 = (BasicStroke)polarPlot0.getRadiusGridlineStroke();
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(2, basicStroke0.getLineJoin());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      BasicStroke basicStroke0 = (BasicStroke)polarPlot0.getAngleGridlineStroke();
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Paint paint0 = stackedAreaRenderer0.getItemPaint((-2898), (-892), true);
      polarPlot0.setAngleGridlinePaint(paint0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.setAngleGridlineStroke((Stroke) null);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 4268.72824);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1), 10, 3173, (-317), 10, 1945, true, false, true, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      polarPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) null);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.isRadiusGridlinesVisible();
      assertTrue(boolean0);
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logAxis0, defaultPolarItemRenderer0);
      boolean boolean0 = polarPlot0.isAngleGridlinesVisible();
      assertTrue(boolean0);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point(10, 10);
      polarPlot0.zoomDomainAxes((double) areaRenderer0.ZERO, plotRenderingInfo0, (Point2D) point0, true);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2217, 2217);
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(dynamicTimeSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getPlotType();
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
  }
}
