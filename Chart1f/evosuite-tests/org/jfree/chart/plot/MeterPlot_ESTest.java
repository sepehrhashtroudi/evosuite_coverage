/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:42:28 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.DialShape;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeterPlot_ESTest extends MeterPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-28.4992826466916));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setTickSize((-28.4992826466916));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'size' > 0.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        meterPlot0.setRange(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range length must be positive.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = Double.valueOf(1518.835);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("zD`mkq>", thermometerPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      meterPlot0.fillArc(graphics2D0, rectangle2D0, 1.0F, 1345.6586141, thermometerPlot0.DEFAULT_BACKGROUND_PAINT, true);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.drawTicks((Graphics2D) null, (Rectangle2D) null, 1383.913306214, (-4978.199));
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      double double0 = meterPlot0.valueToAngle(828.6);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals((-2012.2199999999998), double0, 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setDialBackgroundPaint((Paint) null);
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(paint0);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 3.0F);
      meterPlot0.setDataset(defaultValueDataset0);
      ValueDataset valueDataset0 = meterPlot0.getDataset();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertNotNull(valueDataset0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 2, 10, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        meterPlot0.fillArc(graphics2D0, (Rectangle2D) null, (-81.159983688), 2, jFreeChart0.DEFAULT_BACKGROUND_PAINT, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      // Undeclared exception!
      try { 
        meterPlot0.drawTick((Graphics2D) null, rectangle2D_Double0, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1091.704612));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      boolean boolean0 = meterPlot0.equals(meterPlot1);
      assertNotSame(meterPlot1, meterPlot0);
      assertTrue(meterPlot1.getTickLabelsVisible());
      assertTrue(boolean0);
      assertEquals("Units", meterPlot1.getUnits());
      assertEquals(270, meterPlot1.getMeterAngle());
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1091.704612));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      boolean boolean0 = meterPlot0.equals(meterPlot0);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(boolean0);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(0.0F, 10.0F, 0.0F, 10);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)ellipse2D_Float0.getBounds2D();
      Point point0 = new Point(123, 10);
      PlotState plotState0 = new PlotState();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      meterPlot0.draw((Graphics2D) null, rectangle2D_Float0, point0, plotState0, plotRenderingInfo0);
      assertEquals((-24.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(12.0, rectangle2D_Float0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      meterPlot0.getLegendItems();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      meterPlot0.setDataset((ValueDataset) null);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDataset();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-2404.4));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      double double0 = meterPlot0.valueToAngle((-2404.4));
      assertEquals(6716.88, double0, 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      MeterPlot meterPlot1 = (MeterPlot)meterPlot0.clone();
      assertTrue(meterPlot1.getTickLabelsVisible());
      assertEquals("Units", meterPlot1.getUnits());
      assertEquals(10.0, meterPlot1.getTickSize(), 0.01);
      assertEquals(270, meterPlot1.getMeterAngle());
      assertNotSame(meterPlot1, meterPlot0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      boolean boolean0 = meterPlot0.equals("No value");
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(boolean0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 2, 10, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      RescaleOp rescaleOp0 = new RescaleOp(0.5F, 0, (RenderingHints) null);
      Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
      meterPlot0.drawTick(graphics2D0, rectangle2D0, 0, true);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 20, (double) 10, 1545.2962, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)roundRectangle2D_Float0.getBounds2D();
      meterPlot0.drawArc(sunGraphics2D0, rectangle2D_Float0, 601.83545140077, 1545.2962, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("}", meterPlot0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      
      jFreeChart0.createBufferedImage(270, 2, 10, (ChartRenderingInfo) null);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(407.4176);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", meterPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 746, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        meterPlot0.drawTick(graphics2D0, (Rectangle2D) null, 2934.62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10.0F);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.addInterval((MeterInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'interval' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Series index out of bounds");
      MeterInterval meterInterval0 = new MeterInterval(",MQPAW`W/cE)M! ", cyclicNumberAxis0.DEFAULT_RANGE);
      meterPlot0.addInterval(meterInterval0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setDataset(defaultValueDataset0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setValuePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getValuePaint();
      meterPlot0.setValuePaint(color0);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(255, color0.getRed());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setValueFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      meterPlot0.setValueFont(categoryAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'format' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      DecimalFormat decimalFormat0 = new DecimalFormat(":>yi");
      meterPlot0.setTickLabelFormat(decimalFormat0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 270, 270, 180, (-1175), false, false, false, false, false, true, true);
      Color color0 = chartPanel0.getForeground();
      meterPlot0.setTickLabelPaint(color0);
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = Color.black;
      meterPlot0.setTickLabelPaint(color0);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      meterPlot0.setTickLabelFont(piePlot3D0.DEFAULT_LABEL_FONT);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setTickLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-3066.6251646775));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(false);
      assertFalse(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertTrue(meterPlot0.getTickLabelsVisible());
      
      meterPlot0.setTickLabelsVisible(true);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setNeedlePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = Color.RED;
      meterPlot0.setNeedlePaint(color0);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setTickPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-3066.6251646775));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)Axis.DEFAULT_TICK_MARK_PAINT;
      meterPlot0.setTickPaint(color0);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setTickSize(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'size' > 0.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setTickSize(1345.6586141);
      assertEquals(1345.6586141, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        meterPlot0.setRange(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range length must be positive.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setRange((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Range range0 = ValueAxis.DEFAULT_RANGE;
      meterPlot0.setRange(range0);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setMeterAngle(420);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'angle' (420)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 22);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.setMeterAngle(22);
      assertEquals(22, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      // Undeclared exception!
      try { 
        meterPlot0.setMeterAngle(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'angle' (0)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        meterPlot0.setDialShape((DialShape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DialShape dialShape0 = DialShape.CIRCLE;
      meterPlot0.setDialShape(dialShape0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals("Units", meterPlot0.getUnits());
      
      meterPlot0.setUnits("No value");
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      meterPlot0.getDrawBorder();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      boolean boolean0 = meterPlot0.getTickLabelsVisible();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(boolean0);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = Double.valueOf(1518.835);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'text' argument.", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      meterPlot0.setDialOutlinePaint(paint0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getTickLabelFormat();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1091.704612));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.getDialShape();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getIntervals();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getValueFont();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(12, font0.getSize());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Font font0 = meterPlot0.getTickLabelFont();
      assertEquals(10, font0.getSize());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialOutlinePaint();
      assertNull(paint0);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2839.41058419);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.zoom(10.0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      String string0 = meterPlot0.getUnits();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", string0);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1091.704612));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getTickLabelPaint();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("}", meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 2, 10, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        meterPlot0.drawValueLabel(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.MeterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Double double0 = Double.valueOf(1518.835);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getDialBackgroundPaint();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(0, color0.getGreen());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getNeedlePaint();
      assertEquals((-16711936), color0.getRGB());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      meterPlot0.clearIntervals();
      assertEquals("Units", meterPlot0.getUnits());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-2404.4));
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Range range0 = meterPlot0.getRange();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 22);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      double double0 = meterPlot0.getTickSize();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, double0, 0.01);
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 22);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Color color0 = (Color)meterPlot0.getTickPaint();
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals((-1), color0.getRGB());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      int int0 = meterPlot0.getMeterAngle();
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.setDrawBorder(true);
      assertTrue(meterPlot0.getDrawBorder());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getPlotType();
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
  }
}
