/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:45:24 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Point2D;
import java.text.NumberFormat;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.data.Range;
import org.jfree.data.event.DatasetChangeEvent;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThermometerPlot_ESTest extends ThermometerPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      Paint paint0 = xYBoxAndWhiskerRenderer0.getArtifactPaint();
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(paint0, defaultValueDataset0, datasetChangeInfo0);
      thermometerPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Color color0 = (Color)thermometerPlot0.getValuePaint();
      thermometerPlot0.setSubrangePaint(3, color0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setAxisLocation(0);
      assertEquals(0, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setValueLocation(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Location not recognised.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setUnits(0);
      assertEquals(0, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1001.97369));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setAxisRange();
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("A#xA6Z1]gU3.", font0, thermometerPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-2651), 0, (-395), (-640), 12, 2, true, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      thermometerPlot0.zoomRangeAxes((-2713.9853468097), plotRenderingInfo0, point2D0, true);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.zoomRangeAxes((-1.0), (-1.0), (PlotRenderingInfo) null, (Point2D) null);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setRange(855.831, 855.831);
      assertEquals(855.831, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = ThermometerPlot.isValidNumber(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) styleContext0;
      objectArray0[2] = (Object) styleContext0;
      objectArray0[4] = (Object) styleContext0;
      objectArray0[6] = (Object) thermometerPlot0;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      // Undeclared exception!
      try { 
        styleContext0.addAttributes(styleContext_SmallAttributeSet0, styleContext_SmallAttributeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleContext$SmallAttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(thermometerPlot0, defaultValueDataset0, datasetChangeInfo0);
      thermometerPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = Double.valueOf((-1738.5863054507092));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setDisplayRange(0, 1976.505299878665, 0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setSubrange(0, (-575.16908), 0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setSubrangeInfo((-422), (double) (-422), (-1260.08373456), (-2783.2), 3807.4091855551);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(245.9368786870345);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((Integer) 2, (Integer) thermometerPlot0.BULB);
      thermometerPlot0.setSubrangeInfo(0, (-2922.87394053431), (-2922.87394053431), 245.9368786870345, (double) waferMapRenderer0.ZERO);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      int int0 = thermometerPlot0.getColumnRadius();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(20, int0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, valueAxis0.getLowerBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, valueAxis0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.isRangeZoomable();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1001.97369));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      boolean boolean0 = thermometerPlot0.isDomainZoomable();
      assertEquals(2, thermometerPlot0.getUnits());
      assertFalse(boolean0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1891.528));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getOrientation();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2102.997);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Range range0 = thermometerPlot0.getDataRange((ValueAxis) null);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ThermometerPlot thermometerPlot1 = (ThermometerPlot)thermometerPlot0.clone();
      assertEquals(5, thermometerPlot1.getGap());
      assertEquals(100.0, thermometerPlot1.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot1.getBulbDiameter());
      assertNotSame(thermometerPlot1, thermometerPlot0);
      assertEquals(2, thermometerPlot1.getAxisLocation());
      assertEquals(0.0, thermometerPlot1.getLowerBound(), 0.01);
      assertEquals(3, thermometerPlot1.getValueLocation());
      assertEquals(2, thermometerPlot1.getUnits());
      assertEquals(40, thermometerPlot1.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Object object0 = thermometerPlot0.clone();
      assertTrue(object0.equals((Object)thermometerPlot0));
      
      thermometerPlot0.setDrawingSupplier((DrawingSupplier) null);
      defaultValueDataset0.removeChangeListener(thermometerPlot0);
      assertNotSame(thermometerPlot0, object0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Object object0 = thermometerPlot0.clone();
      defaultValueDataset0.removeChangeListener(thermometerPlot0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNotSame(thermometerPlot0, object0);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertTrue(thermometerPlot0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      boolean boolean0 = thermometerPlot0.equals((Object) null);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2102.997);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultValueDataset0, defaultValueDataset0, datasetChangeInfo0);
      thermometerPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(thermometerPlot0, defaultTableXYDataset0, datasetChangeInfo0);
      thermometerPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      SystemColor systemColor0 = SystemColor.menu;
      thermometerPlot0.setSubrangePaint(0, systemColor0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      thermometerPlot0.setSubrangePaint(80, color0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setSubrangePaint((-1), (Paint) null);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Color color0 = (Color)thermometerPlot0.getSubrangePaint(0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals((-16711936), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getSubrangePaint(2867);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.getSubrangePaint((-3401));
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1891.528));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setSubrangeInfo(0, (-1891.528), (double) 0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.setDisplayRange(2465, (-2074.4432), 100.0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setDisplayRange((-1684), (-3812.192290094716), (-3812.192290094716));
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setSubrange(1688, (-1254.175), 1688);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      thermometerPlot0.setSubrange((-2466), (double) defaultPolarItemRenderer0.ZERO, 910.706036);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.setSubrangeInfo(584, (double) 584, (double) 584, (-2671.9088), (double) 584);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setMercuryPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      RingPlot ringPlot0 = new RingPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setMercuryPaint(ringPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 3);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        thermometerPlot0.setValueFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      thermometerPlot0.setValueFormat(numberFormat0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      thermometerPlot0.setValuePaint(systemColor0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setValuePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Color color0 = (Color)MeterPlot.DEFAULT_NEEDLE_PAINT;
      thermometerPlot0.setValuePaint(color0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DateAxis dateAxis0 = new DateAxis();
      thermometerPlot0.setValueFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setValueFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setAxisLocation(2);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setAxisLocation(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Location not recognised.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setAxisLocation((-861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Location not recognised.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setValueLocation(0);
      assertEquals(0, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      // Undeclared exception!
      try { 
        thermometerPlot0.setValueLocation(23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Location not recognised.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        thermometerPlot0.setValueLocation((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Location not recognised.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setUnits(2060);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setUnits(3);
      assertEquals(3, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setUnits((-86));
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBasePaint();
      thermometerPlot0.setThermometerPaint(paint0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setThermometerPaint((Paint) null);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseOutlineStroke();
      thermometerPlot0.setThermometerStroke(stroke0);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setThermometerStroke((Stroke) null);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.setPadding(thermometerPlot0.DEFAULT_INSETS);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      // Undeclared exception!
      try { 
        thermometerPlot0.setRangeAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DateAxis dateAxis0 = new DateAxis();
      thermometerPlot0.setRangeAxis(dateAxis0);
      assertEquals((-5.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      thermometerPlot0.setDataset(defaultValueDataset0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.setDataset((ValueDataset) null);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setUseSubrangePaint(true);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      int int0 = thermometerPlot0.getAxisLocation();
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, int0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      int int0 = thermometerPlot0.getValueLocation();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, int0);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(Double.NaN);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      thermometerPlot0.zoomDomainAxes(Double.NaN, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Color color0 = (Color)thermometerPlot0.getThermometerPaint();
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0, color0.getRed());
      assertEquals(3, thermometerPlot0.getValueLocation());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setFollowDataInSubranges(true);
      assertTrue(thermometerPlot0.getFollowDataInSubranges());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2102.997);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getDataset();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      // Undeclared exception!
      try { 
        thermometerPlot0.zoomRangeAxes(50.0, (-3576.307411567), (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (5000.0) <= upper (-357630.7411567).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setSubrangeInfo(0, (double) 0, (double) 0);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.getPlotType();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      double double0 = thermometerPlot0.getLowerBound();
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, double0, 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = chartPanel0.getLocation();
      thermometerPlot0.zoomDomainAxes((double) 2, (double) 2, plotRenderingInfo0, (Point2D) point0);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.zoom(10);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.getFollowDataInSubranges();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setBulbRadius((-1268));
      int int0 = thermometerPlot0.getBulbDiameter();
      assertEquals((-2536), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      // Undeclared exception!
      try { 
        thermometerPlot0.setRange(0.65, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.65) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      int int0 = thermometerPlot0.getUnits();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, int0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      int int0 = thermometerPlot0.getBulbDiameter();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(80, int0);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2102.997);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      int int0 = thermometerPlot0.getBulbRadius();
      assertEquals(40, int0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2102.997);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      BasicStroke basicStroke0 = (BasicStroke)thermometerPlot0.getThermometerStroke();
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Color color0 = (Color)thermometerPlot0.getMercuryPaint();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(192, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-4158.966));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.setGap(0);
      assertEquals(0, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.getPadding();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.setLowerBound((-1637.0));
      assertEquals((-1637.0), thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      
      thermometerPlot0.setUpperBound(0.0);
      assertEquals(0.0, thermometerPlot0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      int int0 = thermometerPlot0.getColumnDiameter();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, int0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      double double0 = thermometerPlot0.getUpperBound();
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, double0, 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = chartPanel0.getLocation();
      thermometerPlot0.zoomRangeAxes(613.4759814276086, plotRenderingInfo0, (Point2D) point0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getLegendItems();
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.setColumnRadius((-4370));
      assertEquals((-8740), thermometerPlot0.getColumnDiameter());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      thermometerPlot0.setValueFont(font0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals("Tahoma", font0.getName());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(16.0F, font0.getSize2D(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1, font0.getStyle());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(Double.NaN);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      int int0 = thermometerPlot0.getGap();
      assertEquals(5, int0);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(20, thermometerPlot0.getColumnRadius());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(Double.NaN);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.getUseSubrangePaint();
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-4158.966));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      thermometerPlot0.zoomDomainAxes(410.41362301, plotRenderingInfo0, (Point2D) point0, false);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1001.97369));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        thermometerPlot0.zoomRangeAxes((-1001.97369), plotRenderingInfo0, (Point2D) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.ThermometerPlot", e);
      }
  }
}
