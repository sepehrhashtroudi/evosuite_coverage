/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 01:00:10 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.text.AttributedCharacterIterator;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryMarker_ESTest extends CategoryMarker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Year year0 = new Year();
      CategoryMarker categoryMarker0 = new CategoryMarker(year0);
      categoryMarker0.getKey();
      assertFalse(categoryMarker0.getDrawAsLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      assertFalse(categoryMarker0.getDrawAsLine());
      
      categoryMarker0.setDrawAsLine(true);
      boolean boolean0 = categoryMarker0.getDrawAsLine();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week(1, 1);
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, polarPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Color color0 = chartPanel0.getForeground();
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(week0, color0, polarPlot0.DEFAULT_GRIDLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT, polarPlot0.DEFAULT_OUTLINE_STROKE, (-2152.4F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5770, 5770, 5770, 5770, 44, 44);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      Paint paint0 = grayPaintScale0.getPaint(1);
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(quarter0, paint0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Year year0 = new Year();
      CategoryMarker categoryMarker0 = new CategoryMarker(year0);
      Object object0 = categoryMarker0.clone();
      categoryMarker0.setDrawAsLine(true);
      boolean boolean0 = categoryMarker0.equals(object0);
      assertTrue(categoryMarker0.getDrawAsLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      CategoryMarker categoryMarker0 = new CategoryMarker(year0);
      Object object0 = categoryMarker0.clone();
      assertTrue(object0.equals((Object)categoryMarker0));
      
      categoryMarker0.setKey(regularTimePeriod0);
      boolean boolean0 = categoryMarker0.equals(object0);
      assertFalse(object0.equals((Object)categoryMarker0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Color color0 = Color.green;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemStroke(0, 0, false);
      CategoryMarker categoryMarker0 = new CategoryMarker(integer0, color0, stroke0, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      CategoryMarker categoryMarker1 = new CategoryMarker(defaultPolarItemRenderer0.ZERO);
      boolean boolean0 = categoryMarker0.equals(categoryMarker1);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, cyclicNumberAxis0);
      boolean boolean0 = categoryMarker0.equals(paintScaleLegend0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      boolean boolean0 = categoryMarker0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(categoryMarker0.getDrawAsLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      CategoryMarker categoryMarker0 = new CategoryMarker(year0);
      boolean boolean0 = categoryMarker0.equals(categoryMarker0);
      assertTrue(boolean0);
      assertFalse(categoryMarker0.getDrawAsLine());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      // Undeclared exception!
      try { 
        categoryMarker0.setKey((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryMarker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      categoryMarker0.getKey();
      assertFalse(categoryMarker0.getDrawAsLine());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      boolean boolean0 = categoryMarker0.getDrawAsLine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Paint paint0 = stackedAreaRenderer0.getBasePaint();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, paint0, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        categoryMarker0.equals(categoryMarker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryMarker", e);
      }
  }
}
