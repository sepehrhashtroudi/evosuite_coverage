/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:06:14 GMT 2022
 */

package org.jfree.chart.needle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.needle.PinNeedle;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PinNeedle_ESTest extends PinNeedle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      Rectangle rectangle0 = new Rectangle(37, 37);
      pinNeedle0.drawNeedle((Graphics2D) null, rectangle0, (Point2D) null, 37);
      assertEquals(37.0, rectangle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      Color color0 = Color.BLACK;
      pinNeedle0.setFillPaint(color0);
      Rectangle rectangle0 = new Rectangle(0, 2488);
      // Undeclared exception!
      try { 
        pinNeedle0.drawNeedle((Graphics2D) null, rectangle0, (Point2D) null, 2488);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.needle.MeterNeedle", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      pinNeedle0.setRotateX((-1286.5));
      PinNeedle pinNeedle1 = new PinNeedle();
      boolean boolean0 = pinNeedle0.equals(pinNeedle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      PinNeedle pinNeedle1 = new PinNeedle();
      boolean boolean0 = pinNeedle1.equals(pinNeedle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      boolean boolean0 = pinNeedle0.equals(pinNeedle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      boolean boolean0 = pinNeedle0.equals("{1x=$qV'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Point point0 = new Point(0, 1);
      pinNeedle0.drawNeedle((Graphics2D) null, rectangle2D_Double0, point0, 1);
      assertEquals(1.0, point0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      JTable jTable0 = new JTable(1, 1);
      Rectangle rectangle0 = jTable0.getCellRect(1, 1, true);
      Point2D.Double point2D_Double0 = new Point2D.Double(1, 0);
      pinNeedle0.drawNeedle((Graphics2D) null, rectangle0, point2D_Double0, 0);
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      Rectangle rectangle0 = new Rectangle(27, 27);
      pinNeedle0.drawNeedle((Graphics2D) null, rectangle0, (Point2D) null, 27);
      assertEquals(0.0, rectangle0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      PinNeedle pinNeedle1 = (PinNeedle)pinNeedle0.clone();
      assertEquals(0.5, pinNeedle1.getRotateX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PinNeedle pinNeedle0 = new PinNeedle();
      pinNeedle0.hashCode();
  }
}
