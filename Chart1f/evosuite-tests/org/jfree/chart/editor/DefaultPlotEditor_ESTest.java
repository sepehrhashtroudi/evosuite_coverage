/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:16:19 GMT 2022
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.KeyStroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.editor.DefaultAxisEditor;
import org.jfree.chart.editor.DefaultNumberAxisEditor;
import org.jfree.chart.editor.DefaultPlotEditor;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPlotEditor_ESTest extends DefaultPlotEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedDomainXYPlot0);
      DefaultAxisEditor defaultAxisEditor0 = defaultPlotEditor0.getRangeAxisPropertyEditPanel();
      assertNull(defaultAxisEditor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      DateAxis dateAxis0 = new DateAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, dateAxis0);
      RectangleInsets rectangleInsets0 = paintScaleLegend0.getMargin();
      ringPlot0.setInsets(rectangleInsets0, true);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(ringPlot0);
      RectangleInsets rectangleInsets1 = defaultPlotEditor0.getPlotInsets();
      assertSame(rectangleInsets1, rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7976931348623157E308, 1.7976931348623157E308);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedRangeXYPlot0);
      DefaultAxisEditor defaultAxisEditor0 = defaultPlotEditor0.getDomainAxisPropertyEditPanel();
      assertNull(defaultAxisEditor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(piePlot0);
      // Undeclared exception!
      try { 
        defaultPlotEditor0.updatePlotProperties((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedRangeCategoryPlot0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.JAPAN;
      DateAxis dateAxis0 = new DateAxis("w3eNe3VK8TR):SB1", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(dateAxis0);
      // Undeclared exception!
      try { 
        defaultPlotEditor0.updatePlotProperties(combinedRangeCategoryPlot1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.DateAxis cannot be cast to org.jfree.chart.axis.NumberAxis
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPlotEditor defaultPlotEditor0 = null;
      try {
        defaultPlotEditor0 = new DefaultPlotEditor((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      RectangleInsets rectangleInsets0 = defaultPlotEditor0.getPlotInsets();
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      Color color0 = (Color)defaultPlotEditor0.getBackgroundPaint();
      assertEquals((-4144960), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      BasicStroke basicStroke0 = (BasicStroke)defaultPlotEditor0.getOutlineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      Color color0 = (Color)defaultPlotEditor0.getOutlinePaint();
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(meterPlot0);
      defaultPlotEditor0.updatePlotProperties(meterPlot0);
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}z?!VB9`q=qV");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("}z?!VB9`q=qV");
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, numberAxis3D0, barRenderer0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      defaultPlotEditor0.updatePlotProperties(multiplePiePlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedRangeXYPlot0);
      defaultPlotEditor0.updatePlotProperties(combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.canSelectByPoint());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(517.90805);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedDomainXYPlot0);
      defaultPlotEditor0.updatePlotProperties(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}z?!VB9`q=qV");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("}z?!VB9`q=qV");
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, numberAxis3D0, barRenderer0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      defaultPlotEditor0.updatePlotProperties(categoryPlot0);
      assertFalse(categoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedDomainCategoryPlot0);
      DefaultAxisEditor defaultAxisEditor0 = defaultPlotEditor0.getDomainAxisPropertyEditPanel();
      ActionEvent actionEvent0 = new ActionEvent(defaultAxisEditor0, 82, "OutlinePaint", 10);
      // Undeclared exception!
      try { 
        defaultPlotEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(polarPlot0);
      ActionEvent actionEvent0 = new ActionEvent(defaultPlotEditor0, 10, "OutlineStroke", (-1L), 10);
      // Undeclared exception!
      try { 
        defaultPlotEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DateAxis dateAxis0 = new DateAxis();
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(500, boxAndWhiskerXYToolTipGenerator0);
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, dateAxis0, dateAxis0, standardXYItemRenderer0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(xYPlot0);
      assertTrue(defaultPlotEditor0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(906.107536550344, 906.107536550344, "Draw_lines");
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, (CategoryAxis) null, cyclicNumberAxis0, lineAndShapeRenderer0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      // Undeclared exception!
      try { 
        defaultPlotEditor0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultPlotEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(combinedRangeXYPlot0);
      Character character0 = new Character('h');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, (int) 'h');
      ActionEvent actionEvent0 = new ActionEvent(keyStroke0, 0, "L,{Zm~fX^", 10, 10);
      defaultPlotEditor0.actionPerformed(actionEvent0);
      assertFalse(defaultPlotEditor0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}z?!VB9`q=qV");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("}z?!VB9`q=qV");
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, numberAxis3D0, barRenderer0);
      DefaultPlotEditor defaultPlotEditor0 = new DefaultPlotEditor(categoryPlot0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = (DefaultNumberAxisEditor)defaultPlotEditor0.getRangeAxisPropertyEditPanel();
      assertEquals(1.05, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
  }
}
