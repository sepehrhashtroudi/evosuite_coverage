/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:17:31 GMT 2022
 */

package org.jfree.chart.editor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.editor.DefaultNumberAxisEditor;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.data.time.TimeSeriesTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNumberAxisEditor_ESTest extends DefaultNumberAxisEditor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2597.84237), (String) null);
      cyclicNumberAxis0.setRangeWithMargins((-2597.84237), (-862.619));
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      boolean boolean0 = defaultNumberAxisEditor0.isAutoRange();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("LaIcNFQ0Y~6");
      numberAxis3D0.setLowerBound(45.0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis3D0);
      double double0 = defaultNumberAxisEditor0.getMinimumValue();
      assertEquals(45.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2597.84237), (String) null);
      cyclicNumberAxis0.setRangeWithMargins((-2597.84237), (-862.619));
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      double double0 = defaultNumberAxisEditor0.getMinimumValue();
      assertEquals((-2684.6035385), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("V");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties((Axis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis3D0);
      CategoryAxis categoryAxis0 = new CategoryAxis("]p :,hI]2K}'cOqr");
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.setAxisProperties(categoryAxis0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.axis.CategoryAxis cannot be cast to org.jfree.chart.axis.NumberAxis
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2875.2, (String) null);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.focusLost((FocusEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("8!'>24e_]aj'");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultNumberAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = null;
      try {
        defaultNumberAxisEditor0 = new DefaultNumberAxisEditor((NumberAxis) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.editor.DefaultAxisEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("LaIcNFQ0Y~6");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis3D0);
      defaultNumberAxisEditor0.validateMinimum();
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis3D0);
      defaultNumberAxisEditor0.toggleAutoRange();
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Auto-adjust_range");
      cyclicNumberAxis0.setLowerBound(0.0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.setAxisProperties(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("GridPaint", stringArray0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      defaultNumberAxisEditor0.setAxisProperties(symbolAxis0);
      assertTrue(symbolAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5, "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer");
      cyclicNumberAxis0.setRange(2172.92838, 2172.92838);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.validateMaximum();
      assertEquals(2172.92838, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Auto-adjust_range");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.validateMaximum();
      assertEquals(1.0, defaultNumberAxisEditor0.getMaximumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5, "org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer");
      cyclicNumberAxis0.setRange(2172.92838, 2172.92838);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.validateMinimum();
      assertEquals(2172.92838, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Auto-adjust_range");
      cyclicNumberAxis0.setLowerBound(0.0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      defaultNumberAxisEditor0.toggleAutoRange();
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 2873, false);
      defaultNumberAxisEditor0.focusLost(focusEvent0);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4690.473, "MinimumRange");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      ActionEvent actionEvent0 = new ActionEvent(timeSeriesTableModel0, (-474), "MinimumRange");
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      assertEquals(0.0, defaultNumberAxisEditor0.getMinimumValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-59.412655684843), (double) xYShapeRenderer0.ZERO, "jVQ,");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      ActionEvent actionEvent0 = new ActionEvent(cyclicNumberAxis0, 269, "AutoRangeOnOff", 2024L, 269);
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      assertTrue(defaultNumberAxisEditor0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("GridPaint", stringArray0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      Object object0 = defaultNumberAxisEditor0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 500, "GridPaint", 1000L, 500);
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(symbolAxis0);
      Locale locale0 = Locale.CHINA;
      TickUnitSource tickUnitSource0 = NumberAxis.createStandardTickUnits(locale0);
      ActionEvent actionEvent0 = new ActionEvent(tickUnitSource0, 500, "GridStroke", (-2144));
      // Undeclared exception!
      try { 
        defaultNumberAxisEditor0.actionPerformed(actionEvent0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("V");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ActionEvent actionEvent0 = new ActionEvent(combinedRangeCategoryPlot0, 10, "Peter Kolb", (-3563L), 0);
      defaultNumberAxisEditor0.actionPerformed(actionEvent0);
      assertFalse(defaultNumberAxisEditor0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2597.84237), (String) null);
      cyclicNumberAxis0.setRangeWithMargins((-2597.84237), (-862.619));
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(cyclicNumberAxis0);
      double double0 = defaultNumberAxisEditor0.getMaximumValue();
      assertEquals((-775.8578315), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      double double0 = defaultNumberAxisEditor0.getMaximumValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      FocusEvent focusEvent0 = new FocusEvent(defaultNumberAxisEditor0, 2873, false);
      defaultNumberAxisEditor0.focusGained(focusEvent0);
      assertTrue(defaultNumberAxisEditor0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("V");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      double double0 = defaultNumberAxisEditor0.getMinimumValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("V");
      DefaultNumberAxisEditor defaultNumberAxisEditor0 = new DefaultNumberAxisEditor(numberAxis0);
      boolean boolean0 = defaultNumberAxisEditor0.isAutoRange();
      assertTrue(boolean0);
  }
}
