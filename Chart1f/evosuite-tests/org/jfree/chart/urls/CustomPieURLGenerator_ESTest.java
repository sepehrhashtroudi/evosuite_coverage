/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:59:54 GMT 2022
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.JLayeredPane;
import javax.swing.JSeparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomPieURLGenerator_ESTest extends CustomPieURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      customPieURLGenerator0.addURLs(hashtable0);
      Object object0 = customPieURLGenerator0.clone();
      assertTrue(object0.equals((Object)customPieURLGenerator0));
      
      hashtable0.put("yG*<+_&{", "yG*<+_&{");
      boolean boolean0 = object0.equals(customPieURLGenerator0);
      assertFalse(object0.equals((Object)customPieURLGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      CustomPieURLGenerator customPieURLGenerator1 = new CustomPieURLGenerator();
      assertTrue(customPieURLGenerator1.equals((Object)customPieURLGenerator0));
      
      Hashtable<CustomPieURLGenerator, Object> hashtable0 = new Hashtable<CustomPieURLGenerator, Object>();
      customPieURLGenerator1.addURLs(hashtable0);
      boolean boolean0 = customPieURLGenerator0.equals(customPieURLGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      boolean boolean0 = customPieURLGenerator0.equals(customPieURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      hashMap0.put(customPieURLGenerator0, (String) null);
      int int0 = customPieURLGenerator0.getURLCount(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      int int0 = customPieURLGenerator0.getListCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURLCount(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURLCount((-1804));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1804
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, JSeparator> hashtable0 = new Hashtable<String, JSeparator>();
      customPieURLGenerator0.addURLs(hashtable0);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURL((Comparable) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, JSeparator> hashtable0 = new Hashtable<String, JSeparator>();
      JSeparator jSeparator0 = new JSeparator();
      hashtable0.put("u{.B2\"gsz$#p,", jSeparator0);
      customPieURLGenerator0.addURLs(hashtable0);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURL("u{.B2\"gsz$#p,", 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JSeparator cannot be cast to java.lang.String
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.getURL((Comparable) null, (-2764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2764
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, CustomPieURLGenerator> hashtable0 = new Hashtable<String, CustomPieURLGenerator>();
      customPieURLGenerator0.addURLs(hashtable0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.generateURL(jDBCPieDataset0, (Comparable) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        customPieURLGenerator0.generateURL(defaultPieDataset0, "", (-138));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -138
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      customPieURLGenerator0.addURLs((Map) null);
      CustomPieURLGenerator customPieURLGenerator1 = new CustomPieURLGenerator();
      customPieURLGenerator1.addURLs((Map) null);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.equals(customPieURLGenerator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      CustomPieURLGenerator customPieURLGenerator1 = new CustomPieURLGenerator();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      customPieURLGenerator1.addURLs(hashtable0);
      customPieURLGenerator0.addURLs(hashtable0);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.equals(customPieURLGenerator1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Hashtable cannot be cast to java.util.HashMap
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      customPieURLGenerator0.addURLs((Map) null);
      // Undeclared exception!
      try { 
        customPieURLGenerator0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      customPieURLGenerator0.addURLs(hashMap0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      hashMap0.put(integer0, "");
      // Undeclared exception!
      try { 
        customPieURLGenerator0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.jfree.chart.urls.CustomPieURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      customPieURLGenerator0.addURLs((Map) null);
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(0, minute0);
      String string0 = customPieURLGenerator0.getURL(second0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      String string0 = customPieURLGenerator0.getURL((Comparable) null, 999);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      HashMap<CustomPieURLGenerator, String> hashMap0 = new HashMap<CustomPieURLGenerator, String>();
      customPieURLGenerator0.addURLs(hashMap0);
      int int0 = customPieURLGenerator0.getURLCount(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      int int0 = customPieURLGenerator0.getListCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      customPieURLGenerator0.addURLs(hashtable0);
      hashtable0.put("yG*<+_&{", "yG*<+_&{");
      Object object0 = customPieURLGenerator0.clone();
      assertTrue(object0.equals((Object)customPieURLGenerator0));
      
      hashtable0.put("yG*<+_&{", "ihh1I)_bshWUe1. c");
      boolean boolean0 = object0.equals(customPieURLGenerator0);
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)customPieURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      customPieURLGenerator0.addURLs(hashtable0);
      Object object0 = customPieURLGenerator0.clone();
      hashtable0.put("yG*<+_&{", "yG*<+_&{");
      Object object1 = customPieURLGenerator0.clone();
      boolean boolean0 = object1.equals(object0);
      assertFalse(object0.equals((Object)customPieURLGenerator0));
      assertFalse(boolean0);
      assertTrue(object1.equals((Object)customPieURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Object object0 = customPieURLGenerator0.clone();
      assertTrue(object0.equals((Object)customPieURLGenerator0));
      
      customPieURLGenerator0.addURLs(hashtable0);
      boolean boolean0 = customPieURLGenerator0.equals(object0);
      assertFalse(object0.equals((Object)customPieURLGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      boolean boolean0 = customPieURLGenerator0.equals("=$r!^+F2m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      customPieURLGenerator0.addURLs(hashtable0);
      hashtable0.put("yG*<+_&{", "yG*<+_&{");
      Object object0 = customPieURLGenerator0.clone();
      boolean boolean0 = object0.equals(customPieURLGenerator0);
      assertNotSame(object0, customPieURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      customPieURLGenerator0.addURLs((Map) null);
      String string0 = customPieURLGenerator0.generateURL(jDBCPieDataset0, "=$r!^+F2m", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      customPieURLGenerator0.addURLs((Map) null);
      int int0 = customPieURLGenerator0.getURLCount(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      String string0 = customPieURLGenerator0.generateURL(jDBCPieDataset0, "=$r!^+F2m", 0);
      assertNull(string0);
  }
}
