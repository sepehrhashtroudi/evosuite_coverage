/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:28:48 GMT 2022
 */

package org.jfree.chart.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.text.Format;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.JTextPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.text.TextLine;
import org.jfree.chart.util.Size2D;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextLine_ESTest extends TextLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0, color0);
      BufferedImage bufferedImage0 = new BufferedImage(1945, 1, 1);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      TextAnchor textAnchor0 = TextAnchor.TOP_CENTER;
      textLine0.draw(sunGraphics2D0, 140, 0, textAnchor0, 0, 0, 0);
      assertEquals((-4665371), sunGraphics2D0.pixel);
      assertEquals((-4665371), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0, color0);
      BufferedImage bufferedImage0 = new BufferedImage(1945, 1, 1);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_LEFT;
      textLine0.draw(sunGraphics2D0, 43.0F, 0.0F, textAnchor0, 4220.87F, 1.0F, 0);
      assertEquals((-4665371), sunGraphics2D0.pixel);
      assertEquals((-4665371), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextLine textLine0 = new TextLine("|Itc/HwZIK@Xv8H[yE");
      HashMap<Format.Field, Object> hashMap0 = new HashMap<Format.Field, Object>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      Color color0 = Color.LIGHT_GRAY;
      TextFragment textFragment0 = new TextFragment("|Itc/HwZIK@Xv8H[yE", font0, color0, 1259.7406F);
      textLine0.addFragment(textFragment0);
      TextFragment textFragment1 = textLine0.getLastTextFragment();
      assertNotNull(textFragment1);
      assertEquals(1259.7406F, textFragment1.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      Size2D size2D0 = textLine0.calculateDimensions((Graphics2D) null);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextLine textLine0 = new TextLine("Null 'description' argument.");
      // Undeclared exception!
      try { 
        textLine0.calculateDimensions((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine("", (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      textLine0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextLine textLine1 = new TextLine();
      boolean boolean0 = textLine0.equals(textLine1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      boolean boolean0 = textLine0.equals(textLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      boolean boolean0 = textLine0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0, color0);
      boolean boolean0 = textLine0.equals("@8bzuY,xCu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0, color0);
      TextFragment textFragment0 = textLine0.getLastTextFragment();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextFragment textFragment0 = textLine0.getLastTextFragment();
      assertNull(textFragment0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0, color0);
      TextFragment textFragment0 = textLine0.getFirstTextFragment();
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      TextFragment textFragment0 = textLine0.getFirstTextFragment();
      assertNull(textFragment0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Font font0 = TextFragment.DEFAULT_FONT;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      TextLine textLine0 = new TextLine("@8bzuY,xCu", font0, color0);
      BufferedImage bufferedImage0 = new BufferedImage(1945, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Size2D size2D0 = textLine0.calculateDimensions(graphics2D0);
      assertEquals(13.96875, size2D0.height, 0.01);
      assertEquals(78.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine("-AMP);vC", font0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine("Null 'paint' argument.", (Font) null, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-5));
      Font font0 = defaultStyledDocument0.getFont(style0);
      SystemColor systemColor0 = SystemColor.window;
      TextLine textLine0 = null;
      try {
        textLine0 = new TextLine((String) null, font0, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.text.TextLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextLine textLine0 = new TextLine("");
      // Undeclared exception!
      try { 
        textLine0.draw((Graphics2D) null, 0.0F, (-756), (TextAnchor) null, (-756), 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.text.TextFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextLine textLine0 = new TextLine();
      textLine0.removeFragment((TextFragment) null);
  }
}
