/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:59:14 GMT 2022
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeTitle_ESTest extends CompositeTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("gYt&)<", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Object[][] objectArray0 = new Object[5][6];
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) columnArrangement0;
      objectArray1[1] = (Object) graphics2D0;
      objectArray1[2] = (Object) chartRenderingInfo0;
      objectArray1[3] = (Object) chartRenderingInfo0;
      objectArray1[4] = (Object) compositeTitle0;
      objectArray0[0] = objectArray1;
      JTable jTable0 = new JTable(objectArray0, objectArray0[0]);
      Rectangle rectangle0 = jTable0.getCellRect(10, 10, false);
      compositeTitle0.draw(graphics2D0, (Rectangle2D) rectangle0);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      blockContainer0.add((Block) compositeTitle0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      GridArrangement gridArrangement0 = new GridArrangement((-3663), 63);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      blockContainer0.setWidth(63);
      compositeTitle0.setTitleContainer(blockContainer0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      blockContainer0.setWidth((-1636.5302));
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertNull(blockContainer1.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setHeight(2.5E9);
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      GridArrangement gridArrangement0 = new GridArrangement((-3668), 63);
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      blockContainer0.setHeight((-3668));
      compositeTitle0.setTitleContainer(blockContainer0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer(borderArrangement0);
      blockContainer0.setMargin(2648.64178037, 2648.64178037, 2648.64178037, 4233.843495002);
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertSame(blockContainer0, blockContainer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.setMargin((-961.3982259), (-961.3982259), 2.5E-6, 2.5E-6);
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      BlockContainer blockContainer1 = compositeTitle0.getContainer();
      assertEquals((-961.3982259), blockContainer1.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      Color color0 = Color.DARK_GRAY;
      compositeTitle0.setBackgroundPaint(color0);
      Color color1 = (Color)compositeTitle0.getBackgroundPaint();
      assertEquals(64, color1.getRed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-3787.02961));
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle(candlestickRenderer0, flowArrangement0, flowArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(1.0, 2, 2, 0);
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        compositeTitle0.draw((Graphics2D) null, rectangle2D0, (Object) compositeTitle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      blockContainer0.add((Block) compositeTitle0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2267.3, 2267.3);
      // Undeclared exception!
      try { 
        compositeTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(0.0);
      // Undeclared exception!
      try { 
        compositeTitle0.arrange((Graphics2D) null, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LegendTitle legendTitle0 = new LegendTitle(cyclicXYItemRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        compositeTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.FlowArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        compositeTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      Color color0 = Color.DARK_GRAY;
      compositeTitle0.setBackgroundPaint(color0);
      CompositeTitle compositeTitle1 = new CompositeTitle(blockContainer0);
      boolean boolean0 = compositeTitle0.equals(compositeTitle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      blockContainer0.add((Block) compositeTitle0);
      CompositeTitle compositeTitle1 = new CompositeTitle();
      boolean boolean0 = compositeTitle0.equals(compositeTitle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      Object object0 = compositeTitle0.clone();
      boolean boolean0 = compositeTitle0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      boolean boolean0 = compositeTitle0.equals(compositeTitle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      GridArrangement gridArrangement0 = new GridArrangement((-3663), 63);
      boolean boolean0 = compositeTitle0.equals(gridArrangement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("gYt&)<", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Object object0 = compositeTitle0.draw(graphics2D0, rectangle2D0, (Object) chartRenderingInfo0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      // Undeclared exception!
      try { 
        compositeTitle0.setTitleContainer((BlockContainer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'container' argument.
         //
         verifyException("org.jfree.chart.title.CompositeTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeTitle compositeTitle0 = null;
      try {
        compositeTitle0 = new CompositeTitle((BlockContainer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'container' argument.
         //
         verifyException("org.jfree.chart.title.CompositeTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Paint paint0 = compositeTitle0.getBackgroundPaint();
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(2.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      // Undeclared exception!
      try { 
        compositeTitle0.draw((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }
}
