/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:07:46 GMT 2022
 */

package org.jfree.chart.title;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegendTitle_ESTest extends LegendTitle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      legendTitle0.setItemPaint(defaultPolarItemRenderer0.DEFAULT_PAINT);
      Color color0 = (Color)legendTitle0.getItemPaint();
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(15);
      legendTitle0.setLegendItemGraphicEdge(rectangleEdge0);
      assertEquals(3.0, legendTitle0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.setWidth((-1929.323));
      legendTitle0.setWrapper(blockContainer0);
      BlockContainer blockContainer1 = legendTitle0.getWrapper();
      assertNull(blockContainer1.getID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.setHeight((-0.40081415004394083));
      legendTitle0.setWrapper(blockContainer0);
      BlockContainer blockContainer1 = legendTitle0.getWrapper();
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.setPadding((-36.79316), (double) 2, (-1647.12536), (double) candlestickRenderer0.ZERO);
      legendTitle0.setWrapper(blockContainer0);
      BlockContainer blockContainer1 = legendTitle0.getWrapper();
      assertEquals((-36.79316), blockContainer1.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("eS*3XIb3La]e%>", meterPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setItemFont(meterPlot0.DEFAULT_LABEL_FONT);
      Font font0 = legendTitle0.getItemFont();
      assertEquals(10, font0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      Color color0 = (Color)legendTitle0.getBackgroundPaint();
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement((HorizontalAlignment) null, verticalAlignment0, 0.0F, 1.0F);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, flowArrangement0, flowArrangement0);
      // Undeclared exception!
      try { 
        legendTitle0.fetchLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      LegendTitle legendTitle0 = new LegendTitle(xYBarRenderer0);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        legendTitle0.draw((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, columnArrangement0, columnArrangement0);
      // Undeclared exception!
      try { 
        legendTitle0.createLegendItemBlock((LegendItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(680, (Range) null);
      // Undeclared exception!
      try { 
        legendTitle0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      LegendTitle legendTitle0 = null;
      try {
        legendTitle0 = new LegendTitle(clusteredXYBarRenderer0, (Arrangement) null, (Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.block.BlockContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle(xYStepAreaRenderer0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", spiderWebPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 3, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4194.95194, 0.25, 3, 1.0F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      legendTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0, (Object) rectangle2D_Float0);
      assertEquals(2, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getBounds();
      // Undeclared exception!
      try { 
        legendTitle0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setBackgroundPaint(categoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(categoryPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      LegendTitle legendTitle0 = new LegendTitle(stackedXYAreaRenderer2_0);
      legendTitle0.setItemFont(stackedXYAreaRenderer2_0.DEFAULT_VALUE_LABEL_FONT);
      LegendTitle legendTitle1 = new LegendTitle(stackedXYAreaRenderer2_0);
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertFalse(boolean0);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      LegendTitle legendTitle0 = new LegendTitle(stackedXYAreaRenderer2_0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", multiplePiePlot0);
      jFreeChart0.removeSubtitle(legendTitle0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      LegendTitle legendTitle0 = new LegendTitle(stackedXYAreaRenderer2_0);
      LegendTitle legendTitle1 = new LegendTitle(stackedXYAreaRenderer2_0);
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      boolean boolean0 = legendTitle0.equals(combinedDomainXYPlot0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 193, (ChartRenderingInfo) null);
      assertEquals(193, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      LegendItem legendItem0 = new LegendItem("~w0;FwS7_", "~w0;FwS7_", "!", "Ss", combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      BlockContainer blockContainer0 = (BlockContainer)legendTitle0.createLegendItemBlock(legendItem0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      LegendTitle legendTitle0 = new LegendTitle(fastScatterPlot0);
      legendTitle0.fetchLegendItems();
      assertTrue(legendTitle0.isVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-802L));
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 683, week0, simpleTimeZone0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 2);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1420);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, stackedXYAreaRenderer0);
      LegendTitle legendTitle0 = new LegendTitle(xYPlot0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(valueAxis0.DEFAULT_RANGE, valueAxis0.DEFAULT_RANGE);
      Size2D size2D0 = legendTitle0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2617.02910702);
      LegendTitle legendTitle0 = new LegendTitle(candlestickRenderer0);
      // Undeclared exception!
      try { 
        legendTitle0.setItemLabelPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setItemLabelPadding(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      // Undeclared exception!
      try { 
        legendTitle0.setItemPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setLegendItemGraphicPadding(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      LegendTitle legendTitle0 = new LegendTitle(waterfallBarRenderer0);
      // Undeclared exception!
      try { 
        legendTitle0.setLegendItemGraphicAnchor((RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' point.
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      legendTitle0.setLegendItemGraphicAnchor(rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      // Undeclared exception!
      try { 
        legendTitle0.setLegendItemGraphicEdge((RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'edge' argument.
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      LegendTitle legendTitle0 = new LegendTitle(fastScatterPlot0);
      // Undeclared exception!
      try { 
        legendTitle0.setSources((LegendItemSource[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'sources' argument.
         //
         verifyException("org.jfree.chart.title.LegendTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null);
      LegendItemSource[] legendItemSourceArray0 = new LegendItemSource[9];
      legendTitle0.setSources(legendItemSourceArray0);
      assertTrue(legendTitle0.isVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      legendTitle0.setLegendItemGraphicLocation(rectangleAnchor0);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.setWidth((-1929.323));
      BlockContainer blockContainer1 = legendTitle0.getItemContainer();
      assertTrue(blockContainer1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getWrapper();
      assertNull(blockContainer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      LegendItemSource[] legendItemSourceArray0 = legendTitle0.getSources();
      assertEquals(1, legendItemSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      LegendTitle legendTitle0 = new LegendTitle(xYBarRenderer0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("NjmM{/|S$%i-Xfi;Q)", piePlot3D0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(12, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 200, 0, (-4994), (-835), true, true, true, true, true, false);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea(1873, 0);
      legendTitle0.draw(graphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-802L));
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 683, week0, simpleTimeZone0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 2);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1420);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, stackedXYAreaRenderer0);
      LegendTitle legendTitle0 = new LegendTitle(xYPlot0);
      RectangleInsets rectangleInsets0 = legendTitle0.getItemLabelPadding();
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Null 'padding' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      Font font0 = legendTitle0.getItemFont();
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      LegendTitle legendTitle0 = new LegendTitle(stackedBarRenderer3D0);
      RectangleEdge rectangleEdge0 = legendTitle0.getLegendItemGraphicEdge();
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      LegendTitle legendTitle0 = new LegendTitle(samplingXYLineRenderer0);
      Paint paint0 = legendTitle0.getBackgroundPaint();
      assertNull(paint0);
  }
}
