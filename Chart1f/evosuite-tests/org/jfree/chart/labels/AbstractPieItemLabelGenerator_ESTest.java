/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:51:15 GMT 2022
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.labels.AbstractPieItemLabelGenerator;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractPieItemLabelGenerator_ESTest extends AbstractPieItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("uCjaci!Dr4pzcx", numberFormat0, numberFormat0);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 437.4933285111;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, 437.4933285111);
      assertEquals("uCjaci!Dr4pzcx", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSxOi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSxOi{L", decimalFormat0, decimalFormat0);
      NumberFormat numberFormat0 = abstractPieItemLabelGenerator0.getPercentFormat();
      assertEquals(Integer.MAX_VALUE, numberFormat0.getMaximumIntegerDigits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("org.jfre@.chart.labels.AbstractPietemLabelGenerator", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getPercentFormat();
      assertFalse(decimalFormat0.isParseBigDecimal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getPercentFormat();
      assertEquals(3, decimalFormat0.getGroupingSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSxOi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSxOi{L", decimalFormat0, decimalFormat0);
      DecimalFormat decimalFormat1 = (DecimalFormat)abstractPieItemLabelGenerator0.getNumberFormat();
      assertEquals("-[AJSxOi{L", decimalFormat1.getNegativePrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("Null 'labelFormat' argument.", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getNumberFormat();
      assertEquals(1, decimalFormat0.getMultiplier());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)abstractPieItemLabelGenerator0.getNumberFormat();
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      String string0 = abstractPieItemLabelGenerator0.getLabelFormat();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-552));
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", numberFormat0, numberFormat0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-552));
      Object[] objectArray0 = abstractPieItemLabelGenerator0.createItemArray(categoryToPieDataset0, "");
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("8Eg", numberFormat0, numberFormat0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(defaultPieDataset0, "8Eg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (8Eg) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSQi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSQi{L", decimalFormat0, decimalFormat0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, (-874));
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, "[AJSQi{L3005");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched braces in the pattern.
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator(",d/TUa", numberFormat0, numberFormat0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-552));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(defaultPieDataset0, ",d/TUa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (,d/TUa) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("fr`$@Mu1!z6NI", numberFormat0, numberFormat0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(defaultPieDataset0, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("^i2&", numberFormat0, numberFormat0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray((PieDataset) null, "^i2&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator(",d/TUa", numberFormat0, numberFormat0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-552));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      defaultPieDataset0.insertValue(0, (Comparable) ",d/TUa", 0.0);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.createItemArray(defaultPieDataset0, ",d/TUa");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("g");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("g", choiceFormat0, choiceFormat0);
      try { 
        abstractPieItemLabelGenerator0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // org.jfree.chart.labels.AbstractPieItemLabelGenerator
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("ADg6a%", numberFormat0, numberFormat0);
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator1 = new AbstractPieItemLabelGenerator("6Sg'B", numberFormat0, numberFormat0);
      boolean boolean0 = abstractPieItemLabelGenerator0.equals(abstractPieItemLabelGenerator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("BGT4zI[W", numberFormat0, numberFormat0);
      boolean boolean0 = abstractPieItemLabelGenerator0.equals(abstractPieItemLabelGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSxOi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSxOi{L", decimalFormat0, decimalFormat0);
      boolean boolean0 = abstractPieItemLabelGenerator0.equals("[AJSxOi{L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSxOi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSxOi{L", decimalFormat0, decimalFormat0);
      String string0 = abstractPieItemLabelGenerator0.generateSectionLabel((PieDataset) null, "[AJSxOi{L");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("A:x1$0]z~f4w4!");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("A:x1$0]z~f4w4!", choiceFormat0, choiceFormat0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 739);
      // Undeclared exception!
      try { 
        abstractPieItemLabelGenerator0.generateSectionLabel(categoryToPieDataset0, "A:x1$0]z~f4w4!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = null;
      try {
        abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("6#hCfZWz.$R", numberFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'percentFormat' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractPieItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = null;
      try {
        abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'numberFormat' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractPieItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = null;
      try {
        abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator((String) null, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'labelFormat' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractPieItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSxOi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSxOi{L", decimalFormat0, decimalFormat0);
      String string0 = abstractPieItemLabelGenerator0.getLabelFormat();
      assertEquals("[AJSxOi{L", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("[AJSxOi{L");
      AbstractPieItemLabelGenerator abstractPieItemLabelGenerator0 = new AbstractPieItemLabelGenerator("[AJSxOi{L", decimalFormat0, decimalFormat0);
      abstractPieItemLabelGenerator0.hashCode();
  }
}
