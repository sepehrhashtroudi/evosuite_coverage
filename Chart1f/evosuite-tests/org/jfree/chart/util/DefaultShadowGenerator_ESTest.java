/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:44:06 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.SystemColor;
import java.awt.image.BufferedImage;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultShadowGenerator_ESTest extends DefaultShadowGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.info;
      assertEquals(224, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getBlue());
      assertEquals((-2039808), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(30, systemColor0, (-627.598F), 30, 2230.63618);
      assertEquals(224, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getBlue());
      assertEquals((-2039808), systemColor0.getRGB());
      assertEquals(30, defaultShadowGenerator0.getDistance());
      assertEquals((-33), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-627.598F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(30, defaultShadowGenerator0.getShadowSize());
      assertEquals(2230.63618, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1), defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator();
      assertFalse(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(5, defaultShadowGenerator1.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-0.7853981633974483), defaultShadowGenerator1.getAngle(), 0.01);
      assertEquals(5, defaultShadowGenerator1.getDistance());
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetX());
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetY());
      assertNotNull(defaultShadowGenerator1);
      
      boolean boolean0 = defaultShadowGenerator0.equals(defaultShadowGenerator1);
      assertFalse(boolean0);
      assertFalse(defaultShadowGenerator0.equals((Object)defaultShadowGenerator1));
      assertFalse(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(224, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getBlue());
      assertEquals((-2039808), systemColor0.getRGB());
      assertEquals(30, defaultShadowGenerator0.getDistance());
      assertEquals((-33), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-627.598F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(30, defaultShadowGenerator0.getShadowSize());
      assertEquals(2230.63618, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1), defaultShadowGenerator0.calculateOffsetX());
      assertEquals(5, defaultShadowGenerator1.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-0.7853981633974483), defaultShadowGenerator1.getAngle(), 0.01);
      assertEquals(5, defaultShadowGenerator1.getDistance());
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetX());
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetY());
      assertNotSame(defaultShadowGenerator0, defaultShadowGenerator1);
      assertNotSame(defaultShadowGenerator1, defaultShadowGenerator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.desktop;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(92, systemColor0.getBlue());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(0, systemColor0.getRed());
      assertEquals((-16753572), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, systemColor0, 0.0F, (-4010), (-1.0));
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(92, systemColor0.getBlue());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(0, systemColor0.getRed());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(0.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertEquals((-2166), defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-3374), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1.0), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-4010), defaultShadowGenerator0.getDistance());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.getShadowSize();
      assertEquals(0, int0);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(92, systemColor0.getBlue());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(0, systemColor0.getRed());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(0.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertEquals((-2166), defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-3374), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1.0), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-4010), defaultShadowGenerator0.getDistance());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.info;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getGreen());
      assertEquals((-2039808), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1057), systemColor0, (-1057), (-1057), (-1.0));
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getGreen());
      assertEquals((-2039808), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-1057), defaultShadowGenerator0.getDistance());
      assertEquals(168, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1057.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-1057), defaultShadowGenerator0.getShadowSize());
      assertEquals((-1.0), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(486, defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.getShadowSize();
      assertEquals((-1057), int0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getGreen());
      assertEquals((-2039808), systemColor0.getRGB());
      assertEquals(224, systemColor0.getRed());
      assertEquals((-1057), defaultShadowGenerator0.getDistance());
      assertEquals(168, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1057.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-1057), defaultShadowGenerator0.getShadowSize());
      assertEquals((-1.0), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(486, defaultShadowGenerator0.calculateOffsetX());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.yellow;
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-2528), color0, 0.0F, 0, 0);
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(2528, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(0.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(2528, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-2528), defaultShadowGenerator0.getShadowSize());
      assertNotNull(defaultShadowGenerator0);
      
      float float0 = defaultShadowGenerator0.getShadowOpacity();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(2528, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(0.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(2528, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-2528), defaultShadowGenerator0.getShadowSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.GREEN;
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, (-1848.4408F), 0, (-1848.4408F));
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-1848.4407958984375), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1848.4408F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertNotNull(defaultShadowGenerator0);
      
      float float0 = defaultShadowGenerator0.getShadowOpacity();
      assertEquals((-1848.4408F), float0, 0.01F);
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16711936), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-1848.4407958984375), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1848.4408F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.lightGray;
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(3043, color0, (-713.4F), 3043, (-713.4F));
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(3043, defaultShadowGenerator0.getDistance());
      assertEquals((-5984), defaultShadowGenerator0.calculateOffsetX());
      assertEquals(3043, defaultShadowGenerator0.getShadowSize());
      assertEquals((-713.4F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-713.4000244140625), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-3820), defaultShadowGenerator0.calculateOffsetY());
      assertNotNull(defaultShadowGenerator0);
      
      Color color1 = defaultShadowGenerator0.getShadowColor();
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(3043, defaultShadowGenerator0.getDistance());
      assertEquals((-5984), defaultShadowGenerator0.calculateOffsetX());
      assertEquals(3043, defaultShadowGenerator0.getShadowSize());
      assertEquals((-713.4F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-713.4000244140625), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-3820), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-4144960), color1.getRGB());
      assertEquals(192, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(192, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(192, color1.getBlue());
      assertSame(color0, color1);
      assertSame(color1, color0);
      assertNotNull(color1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-23), systemColor0, 1.0F, 0, 1.0F);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-23), defaultShadowGenerator0.getShadowSize());
      assertEquals(1.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.getDistance();
      assertEquals(0, int0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-23), defaultShadowGenerator0.getShadowSize());
      assertEquals(1.0, defaultShadowGenerator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.desktop;
      assertEquals(0, systemColor0.getRed());
      assertEquals(92, systemColor0.getBlue());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2, systemColor0, 2, (-2204), 1.7976931348623157E308);
      assertEquals(0, systemColor0.getRed());
      assertEquals(92, systemColor0.getBlue());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-2204), defaultShadowGenerator0.getDistance());
      assertEquals(2.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(2, defaultShadowGenerator0.getShadowSize());
      assertEquals(2201, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(1.7976931348623157E308, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(8, defaultShadowGenerator0.calculateOffsetY());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.getDistance();
      assertEquals((-2204), int0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(92, systemColor0.getBlue());
      assertEquals(92, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16753572), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-2204), defaultShadowGenerator0.getDistance());
      assertEquals(2.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(2, defaultShadowGenerator0.getShadowSize());
      assertEquals(2201, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(1.7976931348623157E308, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(8, defaultShadowGenerator0.calculateOffsetY());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.black;
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 0.0F, 1479, 0.0F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1479, defaultShadowGenerator0.getDistance());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(1479, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(0.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertNotNull(defaultShadowGenerator0);
      
      double double0 = defaultShadowGenerator0.getAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1479, defaultShadowGenerator0.getDistance());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(1479, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(0.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Color color0 = jTable0.getSelectionForeground();
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getRed());
      assertEquals(51, color0.getBlue());
      assertEquals(51, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-3509), color0, (-3509), (-3509), Double.POSITIVE_INFINITY);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getRed());
      assertEquals(51, color0.getBlue());
      assertEquals(51, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(3509, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-3509.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-3509), defaultShadowGenerator0.getShadowSize());
      assertEquals(Double.POSITIVE_INFINITY, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-3509), defaultShadowGenerator0.getDistance());
      assertEquals(3509, defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      double double0 = defaultShadowGenerator0.getAngle();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getRed());
      assertEquals(51, color0.getBlue());
      assertEquals(51, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(3509, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-3509.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-3509), defaultShadowGenerator0.getShadowSize());
      assertEquals(Double.POSITIVE_INFINITY, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-3509), defaultShadowGenerator0.getDistance());
      assertEquals(3509, defaultShadowGenerator0.calculateOffsetX());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = Color.gray;
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(0, color0, 557.0F, 0, 557.0F);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(557.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(557.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.calculateOffsetY();
      assertEquals(0, int0);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(557.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetX());
      assertEquals(557.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0, defaultShadowGenerator0.getShadowSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-23), systemColor0, 1.0F, 0, 1.0F);
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(1.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(1.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-23), defaultShadowGenerator0.getShadowSize());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.calculateOffsetY();
      assertEquals(23, int0);
      assertEquals(192, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(1.0F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0, defaultShadowGenerator0.getDistance());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(1.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-23), defaultShadowGenerator0.getShadowSize());
      assertEquals(23, defaultShadowGenerator0.calculateOffsetX());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Color color0 = Color.yellow;
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2840, color0, (-70.157F), 2840, 0.0);
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-2840), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-70.157F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(2840, defaultShadowGenerator0.getDistance());
      assertEquals(2840, defaultShadowGenerator0.getShadowSize());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.calculateOffsetX();
      assertEquals(0, int0);
      assertEquals(255, color0.getAlpha());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(0, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-2840), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-70.157F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0.0, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(2840, defaultShadowGenerator0.getDistance());
      assertEquals(2840, defaultShadowGenerator0.getShadowSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = Color.cyan;
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1), color0, (-1), (-1), (-1));
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1.0), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(1, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-1), defaultShadowGenerator0.getShadowSize());
      assertEquals((-1), defaultShadowGenerator0.getDistance());
      assertNotNull(defaultShadowGenerator0);
      
      int int0 = defaultShadowGenerator0.calculateOffsetX();
      assertEquals(1, int0);
      assertEquals((-16711681), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1.0), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(1, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-1), defaultShadowGenerator0.getShadowSize());
      assertEquals((-1), defaultShadowGenerator0.getDistance());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.applyShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Color color0 = Color.yellow;
      assertEquals(255, color0.getRed());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(251, color0, (-70.157F), 251, 0.12154247573297021);
      assertEquals(255, color0.getRed());
      assertEquals((-256), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-70.157F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(0.12154247573297021, defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(251, defaultShadowGenerator0.getDistance());
      assertEquals((-281), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(251, defaultShadowGenerator0.getShadowSize());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      BufferedImage bufferedImage0 = new BufferedImage(2029, 2029, 5);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2029, bufferedImage0.getWidth());
      assertEquals(2029, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(2029, bufferedImage0.getTileWidth());
      assertEquals(2029, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertNotNull(bufferedImage0);
      
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.applyShadow(bufferedImage0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.image.DataBufferByte cannot be cast to java.awt.image.DataBufferInt
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertNotNull(defaultShadowGenerator0);
      
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator();
      assertTrue(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(5, defaultShadowGenerator1.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetY());
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetX());
      assertEquals((-0.7853981633974483), defaultShadowGenerator1.getAngle(), 0.01);
      assertEquals(5, defaultShadowGenerator1.getDistance());
      assertNotNull(defaultShadowGenerator1);
      
      boolean boolean0 = defaultShadowGenerator0.equals(defaultShadowGenerator1);
      assertTrue(boolean0);
      assertTrue(defaultShadowGenerator0.equals((Object)defaultShadowGenerator1));
      assertTrue(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(5, defaultShadowGenerator1.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetY());
      assertEquals((-2), defaultShadowGenerator1.calculateOffsetX());
      assertEquals((-0.7853981633974483), defaultShadowGenerator1.getAngle(), 0.01);
      assertEquals(5, defaultShadowGenerator1.getDistance());
      assertNotSame(defaultShadowGenerator0, defaultShadowGenerator1);
      assertNotSame(defaultShadowGenerator1, defaultShadowGenerator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = Color.WHITE;
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1260), color0, (-1260), (-1260), (-2.147483648E9));
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(2483, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(961, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-2.147483648E9), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1260.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-1260), defaultShadowGenerator0.getDistance());
      assertEquals((-1260), defaultShadowGenerator0.getShadowSize());
      assertNotNull(defaultShadowGenerator0);
      
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator(121, color0, 121, (-1260), 0.0);
      assertFalse(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(121.0F, defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-121), defaultShadowGenerator1.calculateOffsetY());
      assertEquals((-1260), defaultShadowGenerator1.getDistance());
      assertEquals(121, defaultShadowGenerator1.getShadowSize());
      assertEquals((-1381), defaultShadowGenerator1.calculateOffsetX());
      assertEquals(0.0, defaultShadowGenerator1.getAngle(), 0.01);
      assertNotNull(defaultShadowGenerator1);
      
      boolean boolean0 = defaultShadowGenerator0.equals(defaultShadowGenerator1);
      assertFalse(boolean0);
      assertFalse(defaultShadowGenerator0.equals((Object)defaultShadowGenerator1));
      assertFalse(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(2483, defaultShadowGenerator0.calculateOffsetY());
      assertEquals(961, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-2.147483648E9), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1260.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-1260), defaultShadowGenerator0.getDistance());
      assertEquals((-1260), defaultShadowGenerator0.getShadowSize());
      assertEquals(121.0F, defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-121), defaultShadowGenerator1.calculateOffsetY());
      assertEquals((-1260), defaultShadowGenerator1.getDistance());
      assertEquals(121, defaultShadowGenerator1.getShadowSize());
      assertEquals((-1381), defaultShadowGenerator1.calculateOffsetX());
      assertEquals(0.0, defaultShadowGenerator1.getAngle(), 0.01);
      assertNotSame(defaultShadowGenerator0, defaultShadowGenerator1);
      assertNotSame(defaultShadowGenerator1, defaultShadowGenerator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = Color.WHITE;
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator((-1260), color0, (-1260), (-1260), (-2.147483648E9));
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(2483, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1260), defaultShadowGenerator0.getShadowSize());
      assertEquals(961, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-1260), defaultShadowGenerator0.getDistance());
      assertEquals((-2.147483648E9), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1260.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertNotNull(defaultShadowGenerator0);
      
      DefaultShadowGenerator defaultShadowGenerator1 = new DefaultShadowGenerator((-1260), color0, (-1260), (-1260), 0.0);
      assertFalse(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(1260, defaultShadowGenerator1.calculateOffsetY());
      assertEquals((-1260), defaultShadowGenerator1.getShadowSize());
      assertEquals(0, defaultShadowGenerator1.calculateOffsetX());
      assertEquals(0.0, defaultShadowGenerator1.getAngle(), 0.01);
      assertEquals((-1260.0F), defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-1260), defaultShadowGenerator1.getDistance());
      assertNotNull(defaultShadowGenerator1);
      
      boolean boolean0 = defaultShadowGenerator0.equals(defaultShadowGenerator1);
      assertFalse(boolean0);
      assertFalse(defaultShadowGenerator0.equals((Object)defaultShadowGenerator1));
      assertFalse(defaultShadowGenerator1.equals((Object)defaultShadowGenerator0));
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(2483, defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-1260), defaultShadowGenerator0.getShadowSize());
      assertEquals(961, defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-1260), defaultShadowGenerator0.getDistance());
      assertEquals((-2.147483648E9), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-1260.0F), defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(1260, defaultShadowGenerator1.calculateOffsetY());
      assertEquals((-1260), defaultShadowGenerator1.getShadowSize());
      assertEquals(0, defaultShadowGenerator1.calculateOffsetX());
      assertEquals(0.0, defaultShadowGenerator1.getAngle(), 0.01);
      assertEquals((-1260.0F), defaultShadowGenerator1.getShadowOpacity(), 0.01F);
      assertEquals((-1260), defaultShadowGenerator1.getDistance());
      assertNotSame(defaultShadowGenerator0, defaultShadowGenerator1);
      assertNotSame(defaultShadowGenerator1, defaultShadowGenerator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertNotNull(defaultShadowGenerator0);
      
      boolean boolean0 = defaultShadowGenerator0.equals(defaultShadowGenerator0);
      assertTrue(boolean0);
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
      assertNotNull(defaultShadowGenerator0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = defaultShadowGenerator0.equals(integer0);
      assertFalse(boolean0);
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(5, defaultShadowGenerator0.getShadowSize());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals(5, defaultShadowGenerator0.getDistance());
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetX());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = Color.yellow;
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(2840, color0, (-70.157F), 2840, 0.12154247573297021);
      BufferedImage bufferedImage0 = new BufferedImage(2029, 2029, 5);
      // Undeclared exception!
      defaultShadowGenerator0.createDropShadow(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = null;
      try {
        defaultShadowGenerator0 = new DefaultShadowGenerator(0, (Color) null, 0, 0, (-1439.9756540668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'color' argument.
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionForeground();
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator(6, color0, 6, (-3684), (-3684));
      // Undeclared exception!
      try { 
        defaultShadowGenerator0.createDropShadow((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.DefaultShadowGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      int int0 = defaultShadowGenerator0.calculateOffsetY();
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.hashCode();
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      double double0 = defaultShadowGenerator0.getAngle();
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals((-0.7853981633974483), double0, 0.01);
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      defaultShadowGenerator0.getShadowColor();
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      float float0 = defaultShadowGenerator0.getShadowOpacity();
      assertEquals(0.5F, float0, 0.01F);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      int int0 = defaultShadowGenerator0.getDistance();
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      int int0 = defaultShadowGenerator0.getShadowSize();
      assertEquals((-2), defaultShadowGenerator0.calculateOffsetY());
      assertEquals(5, int0);
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      int int0 = defaultShadowGenerator0.calculateOffsetX();
      assertEquals((-0.7853981633974483), defaultShadowGenerator0.getAngle(), 0.01);
      assertEquals(0.5F, defaultShadowGenerator0.getShadowOpacity(), 0.01F);
      assertEquals((-2), int0);
  }
}
