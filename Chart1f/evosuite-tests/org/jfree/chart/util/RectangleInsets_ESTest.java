/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:28:07 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangleInsets_ESTest extends RectangleInsets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-3092.92), (-2432.96951295369), (-2281.71), 0.0);
      Dimension dimension0 = new Dimension(1, 2931);
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangleInsets0.trim(rectangle0);
      assertEquals((-2433), rectangle0.x);
      assertEquals(8306.0, rectangle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.trimWidth(0.0);
      assertEquals((-2.0), double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1443.29), (-811.81), (-1443.29), (-811.81));
      double double0 = rectangleInsets0.extendWidth((-1150.074403));
      assertEquals((-1443.29), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1443.29), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-0.7079036346960947), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1443.29), (-811.81), (-1443.29), (-811.81));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-811.81), 0.0, 308.0, 1.0);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals((-1443.29), rectangle2D_Double1.y, 0.01);
      assertEquals(0.5, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-657.8099999999977), rectangle2D_Double1.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1.0), (-1.0), (-1.0), (-1.0));
      Line2D.Double line2D_Double0 = new Line2D.Double((-1.0), 1.0, 0.0, 1.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangleInsets0.createInsetRectangle(rectangle2D0, true, false);
      assertEquals((-0.5), rectangle2D1.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D1.getCenterY(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
      assertFalse(rectangle2D1.equals((Object)rectangle2D0));
      assertEquals((-1.0), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-698.940391099978), (-5183.2443771), (-5183.2443771), 714.682929066);
      Line2D.Double line2D_Double0 = new Line2D.Double((-698.940391099978), (-698.940391099978), (-5183.2443771), 714.682929066);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals(7295.808088365956, rectangle2D_Double0.height, 0.01);
      assertEquals((-1413.6233201659797), rectangle2D_Double0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, 0.0, (-1.0));
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.ZERO_INSETS.createAdjustedRectangle(rectangle2D_Double0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-306.658825), (-306.658825), (-306.658825), (-991.0));
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      LengthAdjustmentType lengthAdjustmentType1 = LengthAdjustmentType.CONTRACT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.ZERO_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType1, lengthAdjustmentType0);
      assertEquals((-306.658825), rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-306.658825), rectangleInsets0.getTop(), 0.01);
      assertEquals((-991.0), rectangleInsets0.getRight(), 0.01);
      assertEquals((-306.658825), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle2D_Double0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Dimension dimension0 = new Dimension((-1), (-2145763209));
      Rectangle rectangle0 = new Rectangle(dimension0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals((-2.145763209E9), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals((-0.5), rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (-3071.12192253), 0.0, 2623.418302607654);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle2D_Double0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      LengthAdjustmentType lengthAdjustmentType1 = LengthAdjustmentType.NO_CHANGE;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.ZERO_INSETS.createAdjustedRectangle(rectangle2D_Double0, lengthAdjustmentType0, lengthAdjustmentType1);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-698.940391099978), (-5183.2443771), (-5183.2443771), 714.682929066);
      rectangleInsets0.hashCode();
      assertEquals((-698.940391099978), rectangleInsets0.getTop(), 0.01);
      assertEquals((-5183.2443771), rectangleInsets0.getLeft(), 0.01);
      assertEquals(714.682929066, rectangleInsets0.getRight(), 0.01);
      assertEquals((-5183.2443771), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1672.3552149488), 0.0, (-1806.4766667619));
      rectangleInsets0.hashCode();
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1806.4766667619), rectangleInsets0.getRight(), 0.01);
      assertEquals((-1672.3552149488), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      RectangleInsets rectangleInsets1 = new RectangleInsets((-1675.9), 0.0F, 0.0, 0.0);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertFalse(boolean0);
      assertFalse(rectangleInsets1.equals((Object)rectangleInsets0));
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets1.getRight(), 0.01);
      assertEquals((-1675.9), rectangleInsets1.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 2021.7914, 1.0);
      RectangleInsets rectangleInsets1 = new RectangleInsets(unitType0, -0.0, 0.0, 1.0, 0.0);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertFalse(boolean0);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(-0.0, rectangleInsets1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      RectangleInsets rectangleInsets1 = new RectangleInsets();
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertFalse(boolean0);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, 0.0, 150.53089238635835, (-2191.2241762676));
      double double0 = rectangleInsets0.trimWidth(1440.0421795);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3631.2663557675996, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(150.53089238635835, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(268.0871483865, 1.0, (-1566.321), 268.0871483865);
      double double0 = rectangleInsets0.trimHeight(1.0);
      assertEquals(268.0871483865, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1299.2338516134998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.trimHeight((-4500.2783));
      assertEquals((-4500.2783), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.getTop();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1.0), (-1.0), (-1.0), (-1.0));
      double double0 = rectangleInsets0.getTop();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getRight(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, 0.0, 0.0, 836.04);
      double double0 = rectangleInsets0.getRight();
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(836.04, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1672.3552149488), 0.0, (-1806.4766667619));
      double double0 = rectangleInsets0.getRight();
      assertEquals((-1672.3552149488), rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1806.4766667619), double0, 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getLeft();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1.0), (-1.0), (-1.0), (-1.0));
      double double0 = rectangleInsets0.getLeft();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), rectangleInsets0.getRight(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1.0), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, 0.0, 150.53089238635835, (-2191.2241762676));
      double double0 = rectangleInsets0.getBottom();
      assertEquals((-2191.2241762676), rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(150.53089238635835, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1126.188), (-2183.202529633), (-1126.188), (-2183.202529633));
      double double0 = rectangleInsets0.getBottom();
      assertEquals((-1126.188), rectangleInsets0.getTop(), 0.01);
      assertEquals((-2183.202529633), rectangleInsets0.getRight(), 0.01);
      assertEquals((-1126.188), double0, 0.01);
      assertEquals((-2183.202529633), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.extendWidth(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.extendWidth(1.0F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.extendHeight(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.extendHeight(1.0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Dimension dimension0 = new Dimension((-1), (-2145763209));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0, false, false);
      assertEquals((-1.0728816045E9), rectangle2D0.getCenterY(), 0.01);
      assertEquals((-0.5), rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(133.04247, 133.04247, 0.0, 0.0);
      Rectangle2D rectangle2D0 = rectangleInsets0.ZERO_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Double0, false, false);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertTrue(rectangle2D0.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0, 1.0, 0.0, 0.0);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangleInsets0.ZERO_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      assertTrue(rectangle2D0.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D rectangle2D0 = rectangleInsets0.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle(rectangle2D0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D0));
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Dimension dimension0 = new Dimension(0, 1);
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, true, true);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1646.293972), 928.5192837766754, (-1.0));
      Point point0 = new Point((-2388), (-1029));
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, true, true);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Double0, true, true);
      assertEquals((-2388.0), rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-1029.0), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals((-927.5192837766754), rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(1647.293972, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, false, false);
      assertEquals(0.0, rectangle2D0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(239.76675338, 112.9, 0.0, (-299.2));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(239.76675338, (-2659.885367888574), 0.0, 0.0);
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals((-2540.001991198574), rectangle2D0.getCenterY(), 0.01);
      assertEquals(445.81675338, rectangle2D0.getCenterX(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1126.188), (-2183.202529633), (-1126.188), (-2183.202529633));
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 4249.6F, 0.0F, 0.0F);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Float0);
      rectangleInsets0.trim(rectangle2D_Double0);
      assertEquals((-4366.405059266), rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1672.3552149488), 0.0, (-1806.4766667619));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0);
      assertEquals(67.06072590655003, rectangle2D0.getCenterX(), 0.01);
      assertEquals((-0.5), rectangle2D0.getCenterY(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Dimension dimension0 = new Dimension((-1), (-2145763209));
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Double0, false, false);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01);
      assertEquals((-2.145763209E9), rectangle2D_Double0.height, 0.01);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangleInsets0.createAdjustedRectangle(rectangle2D_Double0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals((-2.0), rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Dimension dimension0 = new Dimension((-1), (-2145763209));
      Rectangle rectangle0 = new Rectangle(dimension0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.ZERO_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals((-2.145763209E9), rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle rectangle0 = new Rectangle(32, 32);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createUnion(rectangle0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D1 = rectangleInsets0.ZERO_INSETS.createAdjustedRectangle(rectangle2D0, lengthAdjustmentType0, lengthAdjustmentType0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertTrue(rectangle2D1.equals((Object)rectangle2D0));
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateTopOutset((-3233.407641024964));
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateTopInset((-2434.22612));
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1126.188), (-2183.202529633), (-1126.188), (-2183.202529633));
      double double0 = rectangleInsets0.calculateTopInset((-2183.202529633));
      assertEquals((-1126.188), double0, 0.01);
      assertEquals((-1126.188), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-2183.202529633), rectangleInsets0.getRight(), 0.01);
      assertEquals((-2183.202529633), rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 0.0, 0.0);
      double double0 = rectangleInsets0.calculateRightOutset(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateRightInset(0.0);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-1.0), (-1672.3552149488), 0.0, (-1806.4766667619));
      double double0 = rectangleInsets0.calculateRightInset(0.0);
      assertEquals((-1672.3552149488), rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1806.4766667619), double0, 0.01);
      assertEquals((-1.0), rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateLeftOutset(0.0);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets(589.2580756, (-1807.085343730757), (-1807.085343730757), 589.2580756);
      double double0 = rectangleInsets0.calculateLeftOutset(2299.4983546);
      assertEquals(589.2580756, rectangleInsets0.getTop(), 0.01);
      assertEquals(589.2580756, rectangleInsets0.getRight(), 0.01);
      assertEquals((-1807.085343730757), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-1807.085343730757), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateLeftInset((-3615.38784762462));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-306.658825), (-306.658825), (-306.658825), (-991.0));
      double double0 = rectangleInsets0.calculateBottomOutset(0.0);
      assertEquals((-306.658825), rectangleInsets0.getLeft(), 0.01);
      assertEquals((-991.0), rectangleInsets0.getRight(), 0.01);
      assertEquals((-306.658825), rectangleInsets0.getTop(), 0.01);
      assertEquals((-306.658825), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-3092.92), (-2432.96951295369), (-2281.71), 0.0);
      double double0 = rectangleInsets0.calculateBottomInset((-3092.92));
      assertEquals((-3092.92), rectangleInsets0.getTop(), 0.01);
      assertEquals((-2432.96951295369), rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-2281.71), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-2320.1251869), 0.0, (-2320.1251869), (-2320.1251869));
      // Undeclared exception!
      try { 
        rectangleInsets0.ZERO_INSETS.trim((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      // Undeclared exception!
      try { 
        rectangleInsets0.createInsetRectangle((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      double double0 = rectangleInsets0.calculateRightOutset(0.0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-31.39921), (-417.4342), (-417.4342), (-1.0));
      double double0 = rectangleInsets0.calculateRightOutset(2289.55720001529);
      assertEquals((-417.4342), rectangleInsets0.getBottom(), 0.01);
      assertEquals((-31.39921), rectangleInsets0.getTop(), 0.01);
      assertEquals((-5.458680288863642), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateRightInset((-2119.3651456309462));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 265.636231743, 265.636231743, 265.636231743, 265.636231743);
      double double0 = rectangleInsets0.calculateRightInset(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(265.636231743, rectangleInsets0.getLeft(), 0.01);
      assertEquals(265.636231743, rectangleInsets0.getTop(), 0.01);
      assertEquals(265.636231743, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateLeftOutset((-974.695));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 0.0, 0.0);
      double double0 = rectangleInsets0.calculateLeftOutset(899.15436F);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1443.29), (-811.81), (-1443.29), (-811.81));
      double double0 = rectangleInsets0.calculateLeftInset(1234.0);
      assertEquals((-1443.29), rectangleInsets0.getTop(), 0.01);
      assertEquals((-1001773.5399999999), double0, 0.01);
      assertEquals((-811.81), rectangleInsets0.getRight(), 0.01);
      assertEquals((-1443.29), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateLeftInset((-1156.581));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (-1271.1680113407065), 1218.2919296651432, 765.06938, 1218.2919296651432);
      double double0 = rectangleInsets0.calculateBottomOutset(765.06938);
      assertEquals(1154.2747703065986, double0, 0.01);
      assertEquals(1218.2919296651432, rectangleInsets0.getRight(), 0.01);
      assertEquals(1218.2919296651432, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateBottomOutset((-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateBottomInset(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 0.0, 0.0, 2021.7914, 1.0);
      double double0 = rectangleInsets0.calculateTopOutset(1458.8532465233534);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-890.24), (-890.24), (-890.24), 1.0);
      double double0 = rectangleInsets0.calculateTopOutset(0.0);
      assertEquals((-890.24), rectangleInsets0.getLeft(), 0.01);
      assertEquals((-890.24), double0, 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-890.24), rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.calculateTopInset(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle2D_Float0, false, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.ZERO_INSETS.createOutsetRectangle(rectangle2D0, true, true);
      assertEquals(0.0, rectangle2D0.getCenterY(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      // Undeclared exception!
      try { 
        rectangleInsets0.createOutsetRectangle((Rectangle2D) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle2D_Float0, true, true);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 265.636231743, 265.636231743, 265.636231743, 265.636231743);
      double double0 = rectangleInsets0.trimWidth(0.0);
      assertEquals(265.636231743, rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(265.636231743, rectangleInsets0.getLeft(), 0.01);
      assertEquals(265.636231743, rectangleInsets0.getTop(), 0.01);
      assertEquals(265.636231743, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 86.953, 86.953, 86.953, 86.953);
      double double0 = rectangleInsets0.calculateBottomInset(86.953);
      assertEquals(86.953, rectangleInsets0.getRight(), 0.01);
      assertEquals(86.953, rectangleInsets0.getLeft(), 0.01);
      assertEquals(7560.824209, double0, 0.01);
      assertEquals(86.953, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 86.953, 86.953, 86.953, 86.953);
      Line2D.Double line2D_Double0 = new Line2D.Double((-1309.25209), (-1309.25209), (-1309.25209), 86.953);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createOutsetRectangle(rectangle2D0);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D0));
      assertEquals((-1309.25209), rectangle2D_Double0.x, 0.01);
      assertEquals((-611.149545), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 86.953, 86.953, 86.953, 86.953);
      double double0 = rectangleInsets0.calculateTopInset(0.0);
      assertEquals(86.953, rectangleInsets0.getRight(), 0.01);
      assertEquals(86.953, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(86.953, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Line2D.Float line2D_Float0 = new Line2D.Float((-1.0F), (-1.0F), (-1.0F), 0.0F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangleInsets0.createOutsetRectangle(rectangle2D0, false, false);
      assertEquals((-0.5), rectangle2D1.getCenterY(), 0.01);
      assertEquals((-1.0), rectangle2D1.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      // Undeclared exception!
      try { 
        rectangleInsets0.createOutsetRectangle((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 1972.83565, 835.4714562170113, 0.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, false, false);
      assertEquals(418.0, rectangle2D0.getCenterX(), 0.01);
      assertEquals(986.5, rectangle2D0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      // Undeclared exception!
      try { 
        rectangleInsets0.createInsetRectangle((Rectangle2D) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets((-0.4139834576142733), (-0.4139834576142733), (-2728.693776736208), 0.0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      // Undeclared exception!
      try { 
        rectangleInsets0.createAdjustedRectangle((Rectangle2D) null, lengthAdjustmentType0, lengthAdjustmentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      rectangleInsets0.hashCode();
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      rectangleInsets0.hashCode();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      RectangleInsets rectangleInsets1 = new RectangleInsets();
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(1.0, rectangleInsets1.getRight(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets1.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets1.getLeft(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      RectangleInsets rectangleInsets1 = new RectangleInsets(29.4667851406, 0.0, 0.0, 496.680856);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
      assertFalse(boolean0);
      assertEquals(496.680856, rectangleInsets1.getRight(), 0.01);
      assertEquals(29.4667851406, rectangleInsets1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      RectangleInsets rectangleInsets1 = new RectangleInsets(29.4667851406, 0.0, 0.0, 0.0);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(29.4667851406, rectangleInsets1.getTop(), 0.01);
      assertFalse(rectangleInsets1.equals((Object)rectangleInsets0));
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, rectangleInsets1.getRight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      RectangleInsets rectangleInsets1 = new RectangleInsets((-1675.9), 0.0F, 0.0, 0.0);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, rectangleInsets1.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets1.getBottom(), 0.01);
      assertEquals((-1675.9), rectangleInsets1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 86.953, 86.953, 86.953, 86.953);
      boolean boolean0 = rectangleInsets0.equals("");
      assertEquals(86.953, rectangleInsets0.getRight(), 0.01);
      assertEquals(86.953, rectangleInsets0.getLeft(), 0.01);
      assertEquals(86.953, rectangleInsets0.getTop(), 0.01);
      assertFalse(boolean0);
      assertEquals(86.953, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets0);
      assertTrue(boolean0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets1 = new RectangleInsets(unitType0, (-576.433495051562), 0.0, 2065.69529248069, 727.7027);
      boolean boolean0 = rectangleInsets0.equals(rectangleInsets1);
      assertEquals(0.0, rectangleInsets1.getLeft(), 0.01);
      assertEquals(2065.69529248069, rectangleInsets1.getBottom(), 0.01);
      assertEquals(727.7027, rectangleInsets1.getRight(), 0.01);
      assertFalse(boolean0);
      assertEquals((-576.433495051562), rectangleInsets1.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RectangleInsets rectangleInsets0 = null;
      try {
        rectangleInsets0 = new RectangleInsets((UnitType) null, 1420.69618, 1420.69618, (-2564.01), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'unitType' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 86.953, 86.953, 86.953, 86.953);
      double double0 = rectangleInsets0.getLeft();
      assertEquals(86.953, double0, 0.01);
      assertEquals(86.953, rectangleInsets0.getTop(), 0.01);
      assertEquals(86.953, rectangleInsets0.getRight(), 0.01);
      assertEquals(86.953, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.extendHeight((-164.2));
      assertEquals((-164.2), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getTop();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getRight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      String string0 = rectangleInsets0.ZERO_INSETS.toString();
      assertEquals("RectangleInsets[t=0.0,l=0.0,b=0.0,r=0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D rectangle2D0 = rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
      assertEquals(0.0, rectangle2D0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.getBottom();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      rectangleInsets0.getUnitType();
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
      double double0 = rectangleInsets0.trimHeight(0.0);
      assertEquals(0.0, double0, 0.01);
  }
}
