/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:49:30 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.net.URL;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.ObjectUtilities;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectUtilities_ESTest extends ObjectUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ObjectUtilities objectUtilities0 = (ObjectUtilities)ObjectUtilities.loadAndInstantiate("org.jfree.chart.util.ObjectUtilities", class0);
      assertEquals("ThreadContext", objectUtilities0.getClassLoaderSource());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      URL uRL0 = ObjectUtilities.getResource("/", class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectUtilities.setClassLoaderSource((String) null);
      String string0 = ObjectUtilities.getClassLoaderSource();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectUtilities.setClassLoaderSource("");
      String string0 = ObjectUtilities.getClassLoaderSource();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<StandardGradientPaintTransformer> class0 = StandardGradientPaintTransformer.class;
      ClassLoader classLoader0 = ObjectUtilities.getClassLoader(class0);
      ObjectUtilities.setClassLoader(classLoader0);
      ClassLoader classLoader1 = ObjectUtilities.getClassLoader();
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Size2D> class0 = Size2D.class;
      // Undeclared exception!
      try { 
        ObjectUtilities.getResourceRelativeAsStream((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ObjectUtilities.getResourceRelative((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ObjectUtilities.getResourceAsStream((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ObjectUtilities.getResource((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectUtilities.setClassLoaderSource("");
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ObjectUtilities.getClassLoader(class0);
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectUtilities.setClassLoaderSource((String) null);
      Class<StandardGradientPaintTransformer> class0 = StandardGradientPaintTransformer.class;
      ClassLoader classLoader0 = ObjectUtilities.getClassLoader(class0);
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      HashSet hashSet0 = (HashSet)ObjectUtilities.clone(set0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        ObjectUtilities.clone("//org.jfree.data.xy.XIntervalSeriesCollection");
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectUtilities.isJDK14();
      boolean boolean0 = ObjectUtilities.isJDK14();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MatrixSeriesCollection matrixSeriesCollection0 = (MatrixSeriesCollection)ObjectUtilities.loadAndInstantiate("org.jfree.data.xy.MatrixSeriesCollection", class0, class0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      Object object0 = ObjectUtilities.loadAndInstantiate("org.jfree.data.jdbc.JDBCCategoryDataset", class0, class1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      InputStream inputStream0 = ObjectUtilities.getResourceRelativeAsStream("9CF-3@#qIWK", class0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InputStream inputStream0 = ObjectUtilities.getResourceAsStream("Null 'collection' argument.", class0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InputStream inputStream0 = ObjectUtilities.getResourceAsStream("", class0);
      assertEquals(4, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      URL uRL0 = ObjectUtilities.getResourceRelative("", class0);
      assertNull(uRL0.getQuery());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<StandardGradientPaintTransformer> class0 = StandardGradientPaintTransformer.class;
      InputStream inputStream0 = ObjectUtilities.getResourceRelativeAsStream("/", class0);
      assertEquals(4, inputStream0.available());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      URL uRL0 = ObjectUtilities.getResource("", class0);
      assertEquals((-1), uRL0.getPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectUtilities.setClassLoaderSource("");
      Class<Size2D> class0 = Size2D.class;
      Class<Object> class1 = Object.class;
      Object object0 = ObjectUtilities.loadAndInstantiate("", class1, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<StandardGradientPaintTransformer> class0 = StandardGradientPaintTransformer.class;
      ObjectUtilities.setClassLoaderSource("Null 'series' not permitted.");
      URL uRL0 = ObjectUtilities.getResourceRelative("Null 'series' not permitted.", class0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ObjectUtilities.setClassLoader(classLoader0);
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader1 = ObjectUtilities.getClassLoader(class0);
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<StandardGradientPaintTransformer> vector0 = new Vector<StandardGradientPaintTransformer>();
      vector0.add((StandardGradientPaintTransformer) null);
      ObjectUtilities.deepClone(vector0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<StandardGradientPaintTransformer> class0 = StandardGradientPaintTransformer.class;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(class0);
      try { 
        ObjectUtilities.deepClone(linkedHashSet0);
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtilities.deepClone((Collection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Size2D size2D0 = new Size2D(1.5, 1.5);
      Object object0 = ObjectUtilities.clone(size2D0);
      assertNotSame(object0, size2D0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtilities.clone((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ObjectUtilities.hashCode((Object) class0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectUtilities.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ObjectUtilities.equal((Object) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = ObjectUtilities.equal("Null 'series' not permitted.", "Null 'series' not permitted.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      boolean boolean0 = ObjectUtilities.equal(class0, timeSeriesTableModel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ObjectUtilities.getClassLoader();
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<StandardGradientPaintTransformer> class0 = StandardGradientPaintTransformer.class;
      Object object0 = ObjectUtilities.loadAndInstantiate("Series index out of bounds", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = ObjectUtilities.getClassLoaderSource();
      assertEquals("ThreadContext", string0);
  }
}
