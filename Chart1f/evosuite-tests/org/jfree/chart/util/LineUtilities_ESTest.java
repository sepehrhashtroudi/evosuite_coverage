/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:37:03 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.LineUtilities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineUtilities_ESTest extends LineUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((-754.4039F), (-754.4039F), 0.0F, 2881.1536F);
      assertNotNull(line2D_Float0);
      assertEquals((-754.4039F), line2D_Float0.y1, 0.01F);
      assertEquals((-754.4039F), line2D_Float0.x1, 0.01F);
      assertEquals(2881.1536F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      
      rectangle2D_Double0.setFrameFromDiagonal((-1.0), 223.96730101467, (double) 659.7866F, 5051.6362);
      assertEquals(4827.66889898533, rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(223.96730101467, rectangle2D_Double0.y, 0.01);
      assertEquals(660.78662109375, rectangle2D_Double0.width, 0.01);
      assertEquals(329.393310546875, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(659.78662109375, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(223.96730101467, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(5051.6362, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2637.801750507335, rectangle2D_Double0.getCenterY(), 0.01);
      
      boolean boolean0 = LineUtilities.clipLine(line2D_Float0, rectangle2D_Double0);
      assertTrue(boolean0);
      assertEquals(4827.66889898533, rectangle2D_Double0.height, 0.01);
      assertEquals((-1.0), rectangle2D_Double0.x, 0.01);
      assertEquals(223.96730101467, rectangle2D_Double0.y, 0.01);
      assertEquals(660.78662109375, rectangle2D_Double0.width, 0.01);
      assertEquals((-1.0F), line2D_Float0.x1, 0.01F);
      assertEquals(2881.1536F, line2D_Float0.y2, 0.01F);
      assertEquals(2876.3345F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(329.393310546875, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(659.78662109375, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(223.96730101467, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(5051.6362, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals((-1.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2637.801750507335, rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertNotNull(rectangle0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      // Undeclared exception!
      try { 
        LineUtilities.clipLine((Line2D) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.LineUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 2.400094F, (-2148.801F));
      assertNotNull(line2D_Float0);
      assertEquals(2.400094F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-2148.801F), line2D_Float0.y2, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(0, (-1415), 635, 0);
      assertNotNull(rectangle0);
      assertEquals(635, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals((-1415), rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(317.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-1415.0), rectangle0.getY(), 0.01);
      assertEquals(635.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1415.0), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1415.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1415.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(635.0, rectangle0.getMaxX(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.createUnion(rectangle0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotNull(rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(635, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals((-1415), rectangle0.y);
      assertEquals(635.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-1415.0), rectangle2D_Double1.y, 0.01);
      assertEquals(1415.0, rectangle2D_Double1.height, 0.01);
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(317.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-1415.0), rectangle0.getY(), 0.01);
      assertEquals(635.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1415.0), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1415.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1415.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(635.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-707.5), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(635.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(317.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1415.0), rectangle2D_Double1.getMinY(), 0.01);
      
      boolean boolean0 = LineUtilities.clipLine(line2D_Float0, rectangle2D_Double1);
      assertTrue(boolean0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals((-1415.0F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1.5804782F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(635, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals((-1415), rectangle0.y);
      assertEquals(635.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals((-1415.0), rectangle2D_Double1.y, 0.01);
      assertEquals(1415.0, rectangle2D_Double1.height, 0.01);
      assertFalse(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(317.5, rectangle0.getCenterX(), 0.01);
      assertEquals((-1415.0), rectangle0.getY(), 0.01);
      assertEquals(635.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1415.0), rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1415.0), rectangle0.getMinY(), 0.01);
      assertEquals((-1415.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(635.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-707.5), rectangle2D_Double1.getCenterY(), 0.01);
      assertEquals(635.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(317.5, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals((-1415.0), rectangle2D_Double1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0F, 0.0F, (-4676.4), (-359.77));
      assertNotNull(line2D_Double0);
      assertEquals((-4676.4), line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-359.77), line2D_Double0.y2, 0.01);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals((-4676.4), line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-359.77), line2D_Double0.y2, 0.01);
      assertEquals(360, rectangle0.height);
      assertEquals(4677, rectangle0.width);
      assertEquals((-360), rectangle0.y);
      assertEquals((-4677), rectangle0.x);
      assertEquals((-360.0), rectangle0.getMinY(), 0.01);
      assertEquals(360.0, rectangle0.getHeight(), 0.01);
      assertEquals(4677.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-360.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-180.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-2338.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-4677.0), rectangle0.getX(), 0.01);
      assertEquals((-4677.0), rectangle0.getMinX(), 0.01);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((-4844), (-360), 1.0F, 0);
      assertNotNull(line2D_Float0);
      assertEquals((-360.0F), line2D_Float0.y1, 0.01F);
      assertEquals((-4844.0F), line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(1.0F, line2D_Float0.x2, 0.01F);
      
      boolean boolean0 = LineUtilities.clipLine(line2D_Float0, rectangle0);
      assertTrue(boolean0);
      assertEquals((-4676.4), line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals((-359.77), line2D_Double0.y2, 0.01);
      assertEquals(360, rectangle0.height);
      assertEquals(4677, rectangle0.width);
      assertEquals((-360), rectangle0.y);
      assertEquals((-4677), rectangle0.x);
      assertEquals((-0.0743034F), line2D_Float0.y2, 0.01F);
      assertEquals((-347.59134F), line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals((-4677.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-360.0), rectangle0.getMinY(), 0.01);
      assertEquals(360.0, rectangle0.getHeight(), 0.01);
      assertEquals(4677.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-360.0), rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-180.0), rectangle0.getCenterY(), 0.01);
      assertEquals((-2338.5), rectangle0.getCenterX(), 0.01);
      assertEquals((-4677.0), rectangle0.getX(), 0.01);
      assertEquals((-4677.0), rectangle0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(3157.9967765, (-1204.194614), 261.1, 261.1);
      assertNotNull(line2D_Double0);
      assertEquals(261.1, line2D_Double0.x2, 0.01);
      assertEquals((-1204.194614), line2D_Double0.y1, 0.01);
      assertEquals(261.1, line2D_Double0.y2, 0.01);
      assertEquals(3157.9967765, line2D_Double0.x1, 0.01);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-49.97093F), (-49.97093F), 2067.44F, (-49.97093F));
      assertNotNull(rectangle2D_Float0);
      assertEquals((-49.97093F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-49.97093F), rectangle2D_Float0.x, 0.01F);
      assertEquals(2067.44F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-49.97093F), rectangle2D_Float0.y, 0.01F);
      assertEquals(2017.4690132141113, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-74.95639228820801), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(983.7490425109863, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-99.94185638427734), rectangle2D_Float0.getMaxY(), 0.01);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      assertNotNull(rectangle0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-49.97093F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-49.97093F), rectangle2D_Float0.x, 0.01F);
      assertEquals(2067.44F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-49.97093F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-49.97092819213867), rectangle2D_Double0.y, 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Double0.x, 0.01);
      assertEquals(2067.43994140625, rectangle2D_Double0.width, 0.01);
      assertEquals(49.97092819213867, rectangle2D_Double0.height, 0.01);
      assertEquals(2017.4690132141113, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-74.95639228820801), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(983.7490425109863, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-99.94185638427734), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2017.4690132141113, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-24.985464096069336), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(983.7490425109863, rectangle2D_Double0.getCenterX(), 0.01);
      
      boolean boolean0 = LineUtilities.clipLine(line2D_Double0, rectangle2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(777.2963615490024, line2D_Double0.x2, 0.01);
      assertEquals(876.0892045823553, line2D_Double0.x1, 0.01);
      assertEquals((-49.97092819213867), line2D_Double0.y1, 0.01);
      assertEquals((-49.97093F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-49.97093F), rectangle2D_Float0.x, 0.01F);
      assertEquals(2067.44F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-49.97093F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-49.97092819213867), rectangle2D_Double0.y, 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Double0.x, 0.01);
      assertEquals(2067.43994140625, rectangle2D_Double0.width, 0.01);
      assertEquals(49.97092819213867, rectangle2D_Double0.height, 0.01);
      assertEquals(2017.4690132141113, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals((-74.95639228820801), rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(983.7490425109863, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals((-99.94185638427734), rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2017.4690132141113, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-49.97092819213867), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-24.985464096069336), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(983.7490425109863, rectangle2D_Double0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double((-4843.4930795218), (-581.0343), 2868.872617, (-4843.4930795218));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      rectangle0.setSize(1972, 17);
      boolean boolean0 = LineUtilities.clipLine(line2D_Double0, rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrame(1.0, (-321.15053455), 1674.820100508423, 4844.0);
      line2D_Double0.x1 = 977.04317;
      boolean boolean0 = LineUtilities.clipLine(line2D_Double0, rectangle2D_Double0);
      assertEquals(977.04317, line2D_Double0.x1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LineUtilities lineUtilities0 = new LineUtilities();
  }
}
