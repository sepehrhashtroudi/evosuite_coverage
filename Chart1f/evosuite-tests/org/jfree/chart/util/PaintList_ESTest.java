/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:29:06 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.PaintList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintList_ESTest extends PaintList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      SystemColor systemColor0 = SystemColor.control;
      paintList0.setPaint(5486, systemColor0);
      paintList0.getPaint(5486);
      assertEquals(5487, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      // Undeclared exception!
      try { 
        paintList0.setPaint(Integer.MAX_VALUE, systemColor0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      // Undeclared exception!
      try { 
        paintList0.setPaint((-2538), (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.set(17, paintList0);
      // Undeclared exception!
      try { 
        paintList0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      SystemColor systemColor0 = SystemColor.control;
      paintList0.setPaint(5486, systemColor0);
      Object object0 = paintList0.clone();
      // Undeclared exception!
      paintList0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Color color0 = Color.BLUE;
      paintList0.setPaint(0, color0);
      paintList0.hashCode();
      assertEquals(1, paintList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Color color0 = Color.BLUE;
      paintList0.setPaint(0, color0);
      PaintList paintList1 = new PaintList();
      boolean boolean0 = paintList0.equals(paintList1);
      assertEquals(1, paintList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Object object0 = paintList0.clone();
      paintList0.setPaint(8, (Paint) null);
      boolean boolean0 = paintList0.equals(object0);
      assertEquals(9, paintList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      boolean boolean0 = paintList0.equals("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      boolean boolean0 = paintList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      boolean boolean0 = paintList0.equals(paintList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      Paint paint0 = paintList0.getPaint((-2538));
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaintList paintList0 = new PaintList();
      paintList0.setPaint(8, (Paint) null);
      paintList0.hashCode();
      assertEquals(9, paintList0.size());
  }
}
