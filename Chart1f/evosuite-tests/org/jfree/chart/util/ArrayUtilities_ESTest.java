/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:35:01 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.ArrayUtilities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayUtilities_ESTest extends ArrayUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[2][1];
      float[][] floatArray1 = new float[1][9];
      boolean boolean0 = ArrayUtilities.equal(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      float[][] floatArray0 = new float[2][3];
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(comparableArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      float[][] floatArray1 = ArrayUtilities.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.hasDuplicateItems((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtilities.compareVersionArrays((Comparable[]) null, (Comparable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.ArrayUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      Integer integer0 = Integer.valueOf(0);
      comparableArray0[1] = (Comparable<Integer>) integer0;
      int int0 = ArrayUtilities.compareVersionArrays(comparableArray0, comparableArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 9);
      Integer integer0 = Integer.valueOf(4);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      Comparable<String>[] comparableArray1 = (Comparable<String>[]) Array.newInstance(Comparable.class, 2);
      comparableArray1[0] = (Comparable<String>) "0@XM!Xs]j|+";
      // Undeclared exception!
      try { 
        ArrayUtilities.compareVersionArrays(comparableArray1, comparableArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      Comparable<String>[] comparableArray1 = (Comparable<String>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<String>) "";
      int int0 = ArrayUtilities.compareVersionArrays(comparableArray0, comparableArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Integer>[] comparableArray1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 6);
      Integer integer0 = Integer.getInteger("s<", 3078);
      comparableArray1[0] = (Comparable<Integer>) integer0;
      int int0 = ArrayUtilities.compareVersionArrays(comparableArray1, comparableArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      boolean boolean0 = ArrayUtilities.hasDuplicateItems(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = objectArray0[1];
      boolean boolean0 = ArrayUtilities.hasDuplicateItems(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[][] floatArray1 = new float[2][2];
      boolean boolean0 = ArrayUtilities.equal(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[][] floatArray1 = new float[0][9];
      boolean boolean0 = ArrayUtilities.equal(floatArray1, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      boolean boolean0 = ArrayUtilities.equal(floatArray0, (float[][]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[7][0];
      boolean boolean0 = ArrayUtilities.equal((float[][]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = ArrayUtilities.equal((float[][]) null, (float[][]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      boolean boolean0 = ArrayUtilities.equal(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = object0;
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(objectArray1, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = objectArray0[1];
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(objectArray0, objectArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 18);
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(comparableArray0, comparableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 18);
      float[][] floatArray0 = new float[2][3];
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(comparableArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 18);
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays((Object[]) null, comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = ArrayUtilities.clone((float[][]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      float[][] floatArray1 = ArrayUtilities.clone(floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtilities.equalReferencesInArrays(floatArray1, floatArray0);
      assertFalse(boolean0);
  }
}
