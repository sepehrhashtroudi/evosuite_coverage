/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:39:45 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Paint;
import java.awt.SystemColor;
import java.time.LocalDate;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.jfree.chart.util.PaintMap;
import org.jfree.data.time.Day;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaintMap_ESTest extends PaintMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Day day0 = new Day();
      paintMap0.put(day0, (Paint) null);
      PaintMap paintMap1 = new PaintMap();
      boolean boolean0 = paintMap1.equals(paintMap0);
      assertFalse(paintMap0.equals((Object)paintMap1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      paintMap0.put(localDate0, color0);
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)paintMap0.getPaint(localDate0);
      assertEquals((-13421773), printColorUIResource0.getRGB());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Day day0 = new Day();
      paintMap0.put(day0, (Paint) null);
      Object object0 = paintMap0.clone();
      boolean boolean0 = object0.equals(paintMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Day day0 = new Day();
      paintMap0.put(day0, (Paint) null);
      PaintMap paintMap1 = new PaintMap();
      boolean boolean0 = paintMap0.equals(paintMap1);
      assertFalse(boolean0);
      assertFalse(paintMap1.equals((Object)paintMap0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      boolean boolean0 = paintMap0.equals(paintMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Day day0 = new Day();
      boolean boolean0 = paintMap0.equals(day0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      // Undeclared exception!
      try { 
        paintMap0.put((Comparable) null, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.PaintMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Color color0 = Color.yellow;
      paintMap0.put("K*.N(^jm2FU/O9Zge[ ", color0);
      boolean boolean0 = paintMap0.containsKey("K*.N(^jm2FU/O9Zge[ ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      boolean boolean0 = paintMap0.containsKey("S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      // Undeclared exception!
      try { 
        paintMap0.getPaint((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.PaintMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      Day day0 = new Day();
      Paint paint0 = paintMap0.getPaint(day0);
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintMap paintMap0 = new PaintMap();
      paintMap0.clear();
  }
}
