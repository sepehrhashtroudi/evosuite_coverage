/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:50:29 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.Instant;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.RelativeDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RelativeDateFormat_ESTest extends RelativeDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(24L);
      relativeDateFormat0.setPositivePrefix("#D");
      relativeDateFormat0.hashCode();
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals(24L, relativeDateFormat0.getBaseMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1358);
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertEquals("d", relativeDateFormat1.getDaySuffix());
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertTrue(relativeDateFormat1.getShowZeroHours());
      assertEquals(1358L, relativeDateFormat0.getBaseMillis());
      assertFalse(relativeDateFormat1.getShowZeroDays());
      assertEquals("h", relativeDateFormat1.getHourSuffix());
      assertEquals("s", relativeDateFormat1.getSecondSuffix());
      assertFalse(boolean0);
      assertEquals("m", relativeDateFormat1.getMinuteSuffix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      assertTrue(relativeDateFormat0.getShowZeroHours());
      
      relativeDateFormat0.setShowZeroHours(false);
      boolean boolean0 = relativeDateFormat0.getShowZeroHours();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2158, 32, (-2429), 0, 1860, 0);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      assertFalse(relativeDateFormat0.getShowZeroDays());
      
      relativeDateFormat0.setShowZeroDays(true);
      boolean boolean0 = relativeDateFormat0.getShowZeroDays();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1678, (-2003), 1678);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      
      relativeDateFormat0.setSecondSuffix("");
      relativeDateFormat0.getSecondSuffix();
      assertEquals(45621100800000L, relativeDateFormat0.getBaseMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      relativeDateFormat0.setPositivePrefix("v`VlxqM6[");
      relativeDateFormat0.getPositivePrefix();
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertEquals((-2382L), relativeDateFormat0.getBaseMillis());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      
      relativeDateFormat0.setMinuteSuffix("");
      relativeDateFormat0.getMinuteSuffix();
      assertFalse(relativeDateFormat0.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      
      relativeDateFormat0.setDaySuffix("");
      relativeDateFormat0.getDaySuffix();
      assertTrue(relativeDateFormat0.getShowZeroHours());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.getBaseMillis();
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(695L);
      long long0 = relativeDateFormat0.getBaseMillis();
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals(695L, long0);
      assertEquals("h", relativeDateFormat0.getHourSuffix());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-681), (-681), (-681));
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1358);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(1358);
      // Undeclared exception!
      try { 
        relativeDateFormat0.format((Date) mockDate0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(2763L);
      relativeDateFormat0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        relativeDateFormat0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = null;
      try {
        relativeDateFormat0 = new RelativeDateFormat((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1678, (-2003), 1678);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      AttributedCharacterIterator attributedCharacterIterator0 = relativeDateFormat0.formatToCharacterIterator(mockDate0);
      assertEquals(10, attributedCharacterIterator0.getRunLimit());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      String string0 = relativeDateFormat0.getSecondSuffix();
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("s", string0);
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      String string0 = relativeDateFormat0.getHourSuffix();
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("h", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      String string0 = relativeDateFormat0.getDaySuffix();
      assertEquals("d", string0);
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      String string0 = relativeDateFormat0.getMinuteSuffix();
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      assertTrue(relativeDateFormat1.equals((Object)relativeDateFormat0));
      
      relativeDateFormat1.setSecondFormatter(decimalFormat0);
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-987L));
      DecimalFormat decimalFormat0 = new DecimalFormat("h");
      relativeDateFormat0.setHourFormatter(decimalFormat0);
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat((-987L));
      RelativeDateFormat relativeDateFormat2 = (RelativeDateFormat)relativeDateFormat1.clone();
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat2);
      assertEquals("h", relativeDateFormat2.getHourSuffix());
      assertEquals("m", relativeDateFormat2.getMinuteSuffix());
      assertTrue(relativeDateFormat2.equals((Object)relativeDateFormat1));
      assertEquals("d", relativeDateFormat2.getDaySuffix());
      assertEquals((-987L), relativeDateFormat2.getBaseMillis());
      assertTrue(relativeDateFormat2.getShowZeroHours());
      assertNotSame(relativeDateFormat2, relativeDateFormat1);
      assertEquals("s", relativeDateFormat2.getSecondSuffix());
      assertFalse(relativeDateFormat2.getShowZeroDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      
      relativeDateFormat0.setSecondSuffix("");
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      assertEquals("m", relativeDateFormat1.getMinuteSuffix());
      
      relativeDateFormat1.setMinuteSuffix(".:A");
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1006L));
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat((-1006L));
      relativeDateFormat0.setHourSuffix("d");
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-987L));
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      assertEquals("d", relativeDateFormat1.getDaySuffix());
      
      relativeDateFormat1.setDaySuffix("");
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      assertTrue(relativeDateFormat1.equals((Object)relativeDateFormat0));
      
      relativeDateFormat1.setPositivePrefix("#/o}Z'awakuMJ3=~$k");
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      relativeDateFormat1.setShowZeroHours(false);
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.getShowZeroHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      Object object0 = relativeDateFormat0.clone();
      relativeDateFormat0.setShowZeroDays(true);
      boolean boolean0 = relativeDateFormat0.equals(object0);
      assertFalse(boolean0);
      assertTrue(relativeDateFormat0.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1006L));
      RelativeDateFormat relativeDateFormat1 = new RelativeDateFormat();
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertEquals("d", relativeDateFormat1.getDaySuffix());
      assertTrue(relativeDateFormat1.getShowZeroHours());
      assertFalse(boolean0);
      assertEquals((-1006L), relativeDateFormat0.getBaseMillis());
      assertEquals("m", relativeDateFormat1.getMinuteSuffix());
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertEquals("s", relativeDateFormat1.getSecondSuffix());
      assertEquals("h", relativeDateFormat1.getHourSuffix());
      assertFalse(relativeDateFormat1.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      assertTrue(relativeDateFormat1.equals((Object)relativeDateFormat0));
      
      relativeDateFormat1.setLenient(false);
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.equals((Object)relativeDateFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat0);
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertTrue(boolean0);
      assertEquals("d", relativeDateFormat0.getDaySuffix());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(14, 1, (-2549), 0, (-2549));
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      boolean boolean0 = relativeDateFormat0.equals("");
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertFalse(boolean0);
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals((-1985020140000L), relativeDateFormat0.getBaseMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      relativeDateFormat0.setShowZeroHours(false);
      MockDate mockDate0 = new MockDate(1585, (-1), 0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      assertEquals("553,311d0m0.000s", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      MockDate mockDate0 = new MockDate(1358, 1358, 1358, 1521, 1358);
      StringWriter stringWriter0 = new StringWriter(1358);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1358);
      relativeDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("513,185d7h38m0.000s", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setSecondFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setSecondSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(650L);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setMinuteSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      // Undeclared exception!
      try { 
        relativeDateFormat0.setMinuteFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      relativeDateFormat0.setMinuteFormatter(decimalFormat0);
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1956L), (-1956L));
      Date date0 = Date.from(instant0);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setHourSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("C)F#5l_");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setHourFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1283));
      // Undeclared exception!
      try { 
        relativeDateFormat0.setDaySuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'suffix' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      // Undeclared exception!
      try { 
        relativeDateFormat0.setDayFormatter((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      relativeDateFormat0.setDayFormatter(decimalFormat0);
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-3272L));
      // Undeclared exception!
      try { 
        relativeDateFormat0.setPositivePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'prefix' argument.
         //
         verifyException("org.jfree.chart.util.RelativeDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-2382L));
      long long0 = relativeDateFormat0.getBaseMillis();
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals((-2382L), long0);
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat();
      boolean boolean0 = relativeDateFormat0.getShowZeroDays();
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertFalse(boolean0);
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      RelativeDateFormat relativeDateFormat1 = (RelativeDateFormat)relativeDateFormat0.clone();
      boolean boolean0 = relativeDateFormat0.equals(relativeDateFormat1);
      assertFalse(relativeDateFormat1.getShowZeroDays());
      assertTrue(boolean0);
      assertEquals("m", relativeDateFormat1.getMinuteSuffix());
      assertEquals("h", relativeDateFormat1.getHourSuffix());
      assertEquals((-12219292800000L), relativeDateFormat1.getBaseMillis());
      assertEquals("d", relativeDateFormat1.getDaySuffix());
      assertTrue(relativeDateFormat1.getShowZeroHours());
      assertEquals("s", relativeDateFormat1.getSecondSuffix());
      assertNotSame(relativeDateFormat1, relativeDateFormat0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[8];
      RelativeDateFormat.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(14, 1, (-2549), 0, (-2549));
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(mockDate0);
      relativeDateFormat0.hashCode();
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals((-1985020140000L), relativeDateFormat0.getBaseMillis());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1956L), (-1956L));
      Date date0 = Date.from(instant0);
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      assertEquals((-1956001L), relativeDateFormat0.getBaseMillis());
      
      relativeDateFormat0.setBaseMillis(0);
      assertFalse(relativeDateFormat0.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      relativeDateFormat0.getPositivePrefix();
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat(date0);
      boolean boolean0 = relativeDateFormat0.getShowZeroHours();
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertTrue(boolean0);
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals((-12219292800000L), relativeDateFormat0.getBaseMillis());
      assertFalse(relativeDateFormat0.getShowZeroDays());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RelativeDateFormat relativeDateFormat0 = new RelativeDateFormat((-1006L));
      relativeDateFormat0.parse("", (ParsePosition) null);
      assertEquals("d", relativeDateFormat0.getDaySuffix());
      assertTrue(relativeDateFormat0.getShowZeroHours());
      assertEquals("h", relativeDateFormat0.getHourSuffix());
      assertEquals("s", relativeDateFormat0.getSecondSuffix());
      assertEquals("m", relativeDateFormat0.getMinuteSuffix());
      assertFalse(relativeDateFormat0.getShowZeroDays());
      assertEquals((-1006L), relativeDateFormat0.getBaseMillis());
  }
}
