/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 00:32:17 GMT 2022
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.AbstractObjectList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractObjectList_ESTest extends AbstractObjectList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2165, 2165);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList0);
      assertEquals(0, abstractObjectList0.size());
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = abstractObjectList0.indexOf(object0);
      assertEquals(0, abstractObjectList0.size());
      assertEquals((-1), int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      int int1 = abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int1 == int0);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      int int2 = abstractObjectList0.indexOf(abstractObjectList1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals((-1), int2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(1245);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      abstractObjectList0.set(1245, ",p^!T 44Z~z-T1k*r");
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      abstractObjectList0.set(1245, ",p^!T 44Z~z-T1k*r");
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(1246, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.set(1245, ",p^!T 44Z~z-T1k*r");
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.hashCode();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(1246, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList2);
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList2);
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(1246, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      
      String string0 = "clone";
      abstractObjectList0.set(1245, "clone");
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      
      int int0 = abstractObjectList0.size();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertEquals(1246, int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      
      AbstractObjectList abstractObjectList3 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(1246, abstractObjectList3.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList3.equals((Object)abstractObjectList2));
      assertNotNull(abstractObjectList3);
      
      int int1 = abstractObjectList0.hashCode();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(int1 == int0);
      
      boolean boolean1 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(1246, abstractObjectList0.size());
      assertEquals(1246, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList3);
      assertFalse(boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList1.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList1.equals((Object)abstractObjectList3));
      assertFalse(boolean1 == boolean0);
      
      int int2 = abstractObjectList0.hashCode();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(int2 == int0);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      
      Object object0 = abstractObjectList0.get((-3469));
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertNull(object0);
      
      boolean boolean2 = abstractObjectList0.equals((Object) null);
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertFalse(boolean2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int3 = abstractObjectList0.hashCode();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(int3 == int0);
      
      int int4 = abstractObjectList0.hashCode();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(int4 == int0);
      
      int int5 = abstractObjectList0.hashCode();
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(int5 == int0);
      
      int int6 = abstractObjectList0.indexOf(",p^!T 44Z~z-T1k*r");
      assertEquals(1246, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertEquals((-1), int6);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(int6 == int0);
      
      AbstractObjectList abstractObjectList4 = new AbstractObjectList();
      assertEquals(0, abstractObjectList4.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList2));
      assertNotNull(abstractObjectList4);
      
      // Undeclared exception!
      abstractObjectList0.equals(abstractObjectList4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(1, (-3590));
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList2);
      
      int int0 = (-2321);
      boolean boolean0 = abstractObjectList0.equals("rN;]w^62KG+2atB.E");
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      Object object0 = null;
      AbstractObjectList abstractObjectList3 = new AbstractObjectList(1, 1);
      assertEquals(0, abstractObjectList3.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertNotNull(abstractObjectList3);
      
      boolean boolean1 = abstractObjectList0.equals(abstractObjectList3);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList3.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertTrue(boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertFalse(boolean1 == boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        abstractObjectList0.set(1777, object1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(730, 1);
      //  // Unstable assertion: assertEquals(0, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      //  // Unstable assertion: assertNotNull(abstractObjectList0);
      
      abstractObjectList0.hashCode();
      //  // Unstable assertion: assertEquals(0, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      int int0 = abstractObjectList0.size();
      //  // Unstable assertion: assertEquals(0, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      abstractObjectList0.set(2, "");
      //  // Unstable assertion: assertEquals(3, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      boolean boolean0 = abstractObjectList0.equals(object0);
      //  // Unstable assertion: assertEquals(3, abstractObjectList0.size());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      int int1 = abstractObjectList0.indexOf(object0);
      //  // Unstable assertion: assertEquals(3, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Object object1 = abstractObjectList0.get(730);
      //  // Unstable assertion: assertEquals(3, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      //  // Unstable assertion: assertNull(object1);
      
      int int2 = abstractObjectList0.indexOf("");
      //  // Unstable assertion: assertEquals(3, abstractObjectList0.size());
      //  // Unstable assertion: assertEquals((-1), int2);
      //  // Unstable assertion: assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList1 = new AbstractObjectList();
      assertEquals(0, abstractObjectList1.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.set(8, abstractObjectList1);
      assertEquals(9, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      int int0 = abstractObjectList0.size();
      assertEquals(9, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(9, int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      
      Object object0 = abstractObjectList1.get(8);
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNull(object0);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.set(1270, (Object) null);
      assertEquals(1271, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(1271, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList1.clone();
      assertEquals(0, abstractObjectList1.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertNotNull(abstractObjectList2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = null;
      try {
        abstractObjectList0 = new AbstractObjectList((-463));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = new AbstractObjectList();
      assertEquals(0, abstractObjectList1.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.set(729, abstractObjectList1);
      assertEquals(730, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      abstractObjectList1.hashCode();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(730, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      abstractObjectList0.set(729, abstractObjectList1);
      assertEquals(730, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      Object object0 = abstractObjectList1.get(8);
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNull(object0);
      
      Object object1 = abstractObjectList0.get((-269));
      assertEquals(730, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2686);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      abstractObjectList0.set(0, "4tA`IKn/Z1Glv[");
      assertEquals(1, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(1, abstractObjectList0.size());
      assertEquals(1, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.hashCode();
      assertEquals(1, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(1, abstractObjectList0.size());
      assertEquals(1, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList2);
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList2);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(1, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(3771, 3771);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      Object object0 = abstractObjectList0.get(3771);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNull(object0);
      
      abstractObjectList0.set(3771, (Object) null);
      assertEquals(3772, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      abstractObjectList0.hashCode();
      assertEquals(3772, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList1 = new AbstractObjectList();
      assertEquals(0, abstractObjectList1.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList1.clone();
      assertEquals(0, abstractObjectList1.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertNotNull(abstractObjectList2);
      
      abstractObjectList0.set(8, abstractObjectList2);
      assertEquals(3772, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      
      abstractObjectList1.clear();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      abstractObjectList1.hashCode();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      int int0 = abstractObjectList0.indexOf(abstractObjectList1);
      assertEquals(3772, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertEquals((-1), int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      boolean boolean0 = abstractObjectList0.equals(":ZJ,(SPntRM");
      assertEquals(3772, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList1 = new AbstractObjectList(8);
      assertEquals(0, abstractObjectList1.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.set(0, abstractObjectList1);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = abstractObjectList0.equals(object0);
      assertEquals(1, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      
      boolean boolean1 = abstractObjectList0.equals(object0);
      assertEquals(1, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertFalse(boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(boolean1 == boolean0);
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.get(0);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertSame(abstractObjectList2, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList2);
      
      int int0 = abstractObjectList0.indexOf(abstractObjectList2);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertSame(abstractObjectList2, abstractObjectList1);
      assertEquals(0, int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      
      int int1 = abstractObjectList0.hashCode();
      assertEquals(1, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(int1 == int0);
      
      abstractObjectList0.set(0, abstractObjectList2);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertSame(abstractObjectList2, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      int int0 = abstractObjectList0.indexOf((Object) null);
      assertEquals(0, abstractObjectList0.size());
      assertEquals((-1), int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.set(0, abstractObjectList1);
      assertEquals(1, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      abstractObjectList0.hashCode();
      assertEquals(1, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      Object object0 = abstractObjectList0.get(1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(0);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        abstractObjectList0.set(0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1);
      AbstractObjectList abstractObjectList0 = null;
      try {
        abstractObjectList0 = new AbstractObjectList((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(0);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = new AbstractObjectList(8, (-412));
      assertEquals(0, abstractObjectList1.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList1.hashCode();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList1));
      assertNotNull(abstractObjectList2);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList1.hashCode();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      
      boolean boolean1 = abstractObjectList0.equals((Object) null);
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertFalse(boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(boolean1 == boolean0);
      
      Object object0 = abstractObjectList0.get(0);
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertNull(object0);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      boolean boolean2 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertTrue(boolean2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = abstractObjectList1.size();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(0, int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      
      AbstractObjectList abstractObjectList3 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList3.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertNotNull(abstractObjectList3);
      
      boolean boolean3 = abstractObjectList1.equals(abstractObjectList3);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertEquals(0, abstractObjectList3.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList3);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertTrue(boolean3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean4 = abstractObjectList1.equals(object1);
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList2);
      assertNotSame(abstractObjectList1, abstractObjectList3);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertFalse(boolean4);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList3));
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean5 = abstractObjectList0.equals(object2);
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(object2, object1);
      assertFalse(boolean5);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      
      AbstractObjectList abstractObjectList4 = new AbstractObjectList(8);
      assertEquals(0, abstractObjectList4.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList1));
      assertNotNull(abstractObjectList4);
      
      // Undeclared exception!
      try { 
        abstractObjectList0.set((-1), abstractObjectList4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = new AbstractObjectList();
      assertEquals(0, abstractObjectList1.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList1.clear();
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(0, 0);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      Object object0 = abstractObjectList0.get((-739));
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNull(object0);
      
      boolean boolean0 = abstractObjectList0.equals((Object) null);
      assertEquals(0, abstractObjectList0.size());
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(179);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = abstractObjectList0.equals(object0);
      assertEquals(0, abstractObjectList0.size());
      assertFalse(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList0);
      assertEquals(0, abstractObjectList0.size());
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(1);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      String string0 = "";
      abstractObjectList0.set(1, "");
      assertEquals(2, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      
      abstractObjectList0.hashCode();
      assertEquals(2, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(2, abstractObjectList0.size());
      assertEquals(2, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList2.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList2);
      
      String string1 = (String)abstractObjectList0.get(1);
      assertEquals(2, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals("", string1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      AbstractObjectList abstractObjectList3 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(2, abstractObjectList0.size());
      assertEquals(2, abstractObjectList3.size());
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList3);
      
      abstractObjectList0.clear();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      
      int int0 = abstractObjectList0.size();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(0, int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      
      int int1 = (-1);
      int int2 = abstractObjectList0.hashCode();
      assertEquals(0, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        abstractObjectList0.set((-1), object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList(2);
      assertEquals(0, abstractObjectList0.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertNotNull(abstractObjectList0);
      
      AbstractObjectList abstractObjectList1 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(0, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList1);
      
      abstractObjectList0.set(2, abstractObjectList1);
      assertEquals(3, abstractObjectList0.size());
      assertEquals(0, abstractObjectList1.size());
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList1, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList0));
      
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      assertEquals(3, abstractObjectList0.size());
      assertEquals(3, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList2.equals((Object)abstractObjectList1));
      assertNotNull(abstractObjectList2);
      
      boolean boolean0 = abstractObjectList0.equals(abstractObjectList2);
      assertEquals(3, abstractObjectList0.size());
      assertEquals(3, abstractObjectList2.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList1);
      assertNotSame(abstractObjectList2, abstractObjectList0);
      assertTrue(boolean0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList2.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList2.equals((Object)abstractObjectList1));
      
      abstractObjectList0.hashCode();
      assertEquals(3, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      
      AbstractObjectList abstractObjectList3 = new AbstractObjectList(2, (-1950));
      assertEquals(0, abstractObjectList3.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList3);
      
      AbstractObjectList abstractObjectList4 = (AbstractObjectList)abstractObjectList3.clone();
      assertEquals(0, abstractObjectList3.size());
      assertEquals(0, abstractObjectList4.size());
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList4);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertNotSame(abstractObjectList4, abstractObjectList2);
      assertNotSame(abstractObjectList4, abstractObjectList0);
      assertNotSame(abstractObjectList4, abstractObjectList3);
      assertNotSame(abstractObjectList4, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList2));
      assertNotNull(abstractObjectList4);
      
      int int0 = abstractObjectList0.indexOf(abstractObjectList3);
      assertEquals(3, abstractObjectList0.size());
      assertEquals(0, abstractObjectList3.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList4);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertEquals((-1), int0);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      
      AbstractObjectList abstractObjectList5 = new AbstractObjectList(2483);
      assertEquals(0, abstractObjectList5.size());
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList5);
      
      abstractObjectList5.set(0, abstractObjectList0);
      assertEquals(3, abstractObjectList0.size());
      assertEquals(1, abstractObjectList5.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList5);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList5, abstractObjectList0);
      assertNotSame(abstractObjectList5, abstractObjectList2);
      assertNotSame(abstractObjectList5, abstractObjectList4);
      assertNotSame(abstractObjectList5, abstractObjectList3);
      assertNotSame(abstractObjectList5, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList5));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList4));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList1));
      
      boolean boolean1 = abstractObjectList0.equals(abstractObjectList5);
      assertEquals(3, abstractObjectList0.size());
      assertEquals(1, abstractObjectList5.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList5);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList5, abstractObjectList0);
      assertNotSame(abstractObjectList5, abstractObjectList2);
      assertNotSame(abstractObjectList5, abstractObjectList4);
      assertNotSame(abstractObjectList5, abstractObjectList3);
      assertNotSame(abstractObjectList5, abstractObjectList1);
      assertFalse(boolean1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList5));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList4));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList1));
      assertFalse(boolean1 == boolean0);
      
      int int1 = abstractObjectList5.hashCode();
      assertEquals(1, abstractObjectList5.size());
      assertNotSame(abstractObjectList5, abstractObjectList0);
      assertNotSame(abstractObjectList5, abstractObjectList2);
      assertNotSame(abstractObjectList5, abstractObjectList4);
      assertNotSame(abstractObjectList5, abstractObjectList3);
      assertNotSame(abstractObjectList5, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList4));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList1));
      assertFalse(int1 == int0);
      
      int int2 = abstractObjectList0.size();
      assertEquals(3, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList5);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(3, int2);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList5));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(int2 == int0);
      
      Object object0 = abstractObjectList5.get(3);
      assertEquals(1, abstractObjectList5.size());
      assertNotSame(abstractObjectList5, abstractObjectList0);
      assertNotSame(abstractObjectList5, abstractObjectList2);
      assertNotSame(abstractObjectList5, abstractObjectList4);
      assertNotSame(abstractObjectList5, abstractObjectList3);
      assertNotSame(abstractObjectList5, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList0));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList4));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList5.equals((Object)abstractObjectList1));
      assertNull(object0);
      
      int int3 = abstractObjectList0.indexOf((Object) null);
      assertEquals(3, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList5);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(0, int3);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList5));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      abstractObjectList0.set(8, abstractObjectList4);
      assertEquals(9, abstractObjectList0.size());
      assertEquals(0, abstractObjectList3.size());
      assertEquals(0, abstractObjectList4.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList5);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertNotSame(abstractObjectList3, abstractObjectList5);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList4);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertNotSame(abstractObjectList4, abstractObjectList5);
      assertNotSame(abstractObjectList4, abstractObjectList2);
      assertNotSame(abstractObjectList4, abstractObjectList0);
      assertNotSame(abstractObjectList4, abstractObjectList3);
      assertNotSame(abstractObjectList4, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList5));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList5));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList5));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList4.equals((Object)abstractObjectList2));
      
      int int4 = abstractObjectList0.size();
      assertEquals(9, abstractObjectList0.size());
      assertNotSame(abstractObjectList0, abstractObjectList4);
      assertNotSame(abstractObjectList0, abstractObjectList2);
      assertNotSame(abstractObjectList0, abstractObjectList3);
      assertNotSame(abstractObjectList0, abstractObjectList5);
      assertNotSame(abstractObjectList0, abstractObjectList1);
      assertEquals(9, int4);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList4));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList2));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList3));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList5));
      assertFalse(abstractObjectList0.equals((Object)abstractObjectList1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      
      abstractObjectList5.clear();
      assertEquals(0, abstractObjectList5.size());
      assertNotSame(abstractObjectList5, abstractObjectList0);
      assertNotSame(abstractObjectList5, abstractObjectList2);
      assertNotSame(abstractObjectList5, abstractObjectList4);
      assertNotSame(abstractObjectList5, abstractObjectList3);
      assertNotSame(abstractObjectList5, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList5.equals((Object)abstractObjectList0));
      
      AbstractObjectList abstractObjectList6 = (AbstractObjectList)abstractObjectList3.clone();
      assertEquals(0, abstractObjectList6.size());
      assertEquals(0, abstractObjectList3.size());
      assertNotSame(abstractObjectList6, abstractObjectList3);
      assertNotSame(abstractObjectList6, abstractObjectList5);
      assertNotSame(abstractObjectList6, abstractObjectList2);
      assertNotSame(abstractObjectList6, abstractObjectList1);
      assertNotSame(abstractObjectList6, abstractObjectList4);
      assertNotSame(abstractObjectList6, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList6);
      assertNotSame(abstractObjectList3, abstractObjectList5);
      assertNotSame(abstractObjectList3, abstractObjectList2);
      assertNotSame(abstractObjectList3, abstractObjectList4);
      assertNotSame(abstractObjectList3, abstractObjectList0);
      assertNotSame(abstractObjectList3, abstractObjectList1);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
      assertTrue(abstractObjectList6.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList6.equals((Object)abstractObjectList0));
      assertTrue(abstractObjectList6.equals((Object)abstractObjectList3));
      assertTrue(abstractObjectList6.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList6.equals((Object)abstractObjectList5));
      assertTrue(abstractObjectList6.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList4));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList2));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList1));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList5));
      assertTrue(abstractObjectList3.equals((Object)abstractObjectList0));
      assertNotNull(abstractObjectList6);
      
      // Undeclared exception!
      try { 
        abstractObjectList3.set(8, (Object) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractObjectList abstractObjectList0 = new AbstractObjectList();
      abstractObjectList0.get(7082);
      abstractObjectList0.equals((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      abstractObjectList0.clone();
      abstractObjectList0.hashCode();
      abstractObjectList0.equals(object1);
      abstractObjectList0.clear();
      abstractObjectList0.equals("s+|dZ(W%4)Q");
      abstractObjectList0.clone();
      abstractObjectList0.set(7082, object0);
      abstractObjectList0.hashCode();
      abstractObjectList0.equals(object1);
      abstractObjectList0.set(2068, abstractObjectList0);
      abstractObjectList0.hashCode();
      abstractObjectList0.clone();
      abstractObjectList0.hashCode();
      AbstractObjectList abstractObjectList1 = new AbstractObjectList(8, 2068);
      Object object2 = abstractObjectList0.clone();
      abstractObjectList0.size();
      abstractObjectList0.set(2413, (Object) null);
      assertEquals(7083, abstractObjectList0.size());
      
      abstractObjectList0.clear();
      abstractObjectList0.equals(">8MbiAo&");
      abstractObjectList0.indexOf(object2);
      abstractObjectList0.get((-1));
      AbstractObjectList abstractObjectList2 = (AbstractObjectList)abstractObjectList0.clone();
      abstractObjectList2.clone();
      abstractObjectList0.clear();
      abstractObjectList0.clear();
      abstractObjectList1.clone();
      assertTrue(abstractObjectList1.equals((Object)abstractObjectList2));
  }
}
