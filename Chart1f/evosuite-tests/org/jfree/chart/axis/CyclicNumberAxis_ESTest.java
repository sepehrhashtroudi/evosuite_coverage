/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:26:42 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JInternalFrame;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CyclicNumberAxis_ESTest extends CyclicNumberAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-4);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAutoRangeMinimumSize((-966.43247), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0), "org.jfree.data.category.SlidingCategoryDataset");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = cyclicNumberAxis0.java2DToValue((byte)92, rectangle2D0, rectangleEdge0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ":Y*");
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      
      cyclicNumberAxis0.advanceLineVisible = false;
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "im");
      double double0 = cyclicNumberAxis0.getPeriod();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2376.03), 723.5087523034096);
      cyclicNumberAxis0.setRange((-3056.0), (-2376.03));
      double double0 = cyclicNumberAxis0.getPeriod();
      assertEquals((-2376.03), cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(679.9699999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "Qz*c");
      double double0 = cyclicNumberAxis0.getOffset();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.14, 0.14, (String) null);
      double double0 = cyclicNumberAxis0.getOffset();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.14, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.9800000000000001, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(511.4579964343035, (-3.0));
      double double0 = cyclicNumberAxis0.getOffset();
      assertEquals((-3.0), double0, 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(511.4579964343035, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals((-3.0), cyclicNumberAxis0.getCycleBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1680.91);
      double double0 = cyclicNumberAxis0.getCycleBound();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1680.91, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2376.03), 723.5087523034096);
      cyclicNumberAxis0.setRange((-3056.0), (-2376.03));
      double double0 = cyclicNumberAxis0.getCycleBound();
      assertEquals((-3056.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-2676.3412476965896), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((short) (-981));
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setRange((Range) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame("MRH", true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.selectVerticalAutoTickUnit((Graphics2D) null, rectangle0, rectangle0, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 2.5, "!`aFk.>C^,;ZXSO-1>");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 1130, Double.NaN, 2.5, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.refreshTicksHorizontal(graphics2D0, (Rectangle2D) null, paintScaleLegend0.DEFAULT_POSITION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.14, 0.14, (String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.java2DToValue(255.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(30.0);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(2401.275407106195, 50.0, 30.0, 3938.23996, (-4897.464776275809), 0.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.drawTickMarksAndLabels((Graphics2D) null, 309.65, rectangle2D0, rectangle2D0, (RectangleEdge) null, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0L);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.draw((Graphics2D) null, (-788.0), (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(511.4579964343035, (-3.0));
      cyclicNumberAxis0.setPeriod((-451.24905));
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.centerRange(1123.05);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1348.674525) <= upper (897.425475).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY, "");
      TextAnchor textAnchor0 = TextAnchor.TOP_LEFT;
      NumberTick numberTick0 = new NumberTick(1.0E-8, "", textAnchor0, textAnchor0, 0.05);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, (CategoryAxis) null, cyclicNumberAxis0, (CategoryItemRenderer) null);
      RectangleEdge rectangleEdge0 = categoryPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.calculateAnchorPoint(numberTick0, 2366.910311091906, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "t!");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      cyclicNumberAxis0.setRange(range0, false, false);
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-17.3));
      cyclicNumberAxis0.setRange(cyclicNumberAxis0.DEFAULT_RANGE, true, true);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1912.3167507737));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.05, 1.0E-8, 0.0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      double double0 = cyclicNumberAxis0.valueToJava2D(0.0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals((-1912.3167507737), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1912.3167507737, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1242.92086939699);
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(500);
      double double0 = cyclicNumberAxis0.valueToJava2D(10, rectangle0, rectangleEdge0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1242.92086939699, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0), "org.jfree.data.category.SlidingCategoryDataset");
      boolean boolean0 = cyclicNumberAxis0.isAdvanceLineVisible();
      assertTrue(boolean0);
      assertEquals((-1.0), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1276.1013118));
      double double0 = cyclicNumberAxis0.getCycleBound();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1276.1013118, double0, 0.01);
      assertEquals((-1276.1013118), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      cyclicNumberAxis0.setFixedAutoRange(1.0F);
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      Color color0 = (Color)cyclicNumberAxis0.getAdvanceLinePaint();
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNotNull(color0);
      assertEquals(128, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNotNull(stroke0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(963.9720515001407, 963.9720515001407, "BUDQ,oQeu=QazU[F+Q?");
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)cyclicNumberAxis0.clone();
      cyclicNumberAxis1.period = 74.95775352177768;
      boolean boolean0 = cyclicNumberAxis0.equals(cyclicNumberAxis1);
      assertEquals((-10.47874428296916), cyclicNumberAxis1.getCycleBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(963.9720515001407, 963.9720515001407, "BUDQ,oQeu=QazU[F+Q?");
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)cyclicNumberAxis0.clone();
      boolean boolean0 = cyclicNumberAxis0.equals(cyclicNumberAxis1);
      assertTrue(boolean0);
      assertEquals(963.9720515001407, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertEquals(963.9720515001407, cyclicNumberAxis1.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis1.getCycleBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      boolean boolean0 = cyclicNumberAxis0.equals(color0);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(963.9720515001407, 963.9720515001407, "BUDQ,oQeu=QazU[F+Q?");
      boolean boolean0 = cyclicNumberAxis0.equals(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(963.9720515001407, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(963.9720515001407, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(963.9720515001407, 963.9720515001407, "BUDQ,oQeu=QazU[F+Q?");
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)cyclicNumberAxis0.clone();
      assertTrue(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      
      cyclicNumberAxis1.setInverted(true);
      boolean boolean0 = cyclicNumberAxis0.equals(cyclicNumberAxis1);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(12.0, "");
      cyclicNumberAxis0.setAutoRangeMinimumSize(2.5E10, true);
      assertEquals(2.5E10, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2093.5262306), (-2093.5262306), "u0Fyt-VX$mp");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAutoRangeMinimumSize((-2093.5262306), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5235987755982988);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(500, 0.5235987755982988, 0.05);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(500);
      double double0 = cyclicNumberAxis0.valueToJava2D(0.5235987755982988, rectangle2D0, rectangleEdge0);
      assertEquals(0.4764012244017012, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      cyclicNumberAxis0.setInverted(true);
      TextAnchor textAnchor0 = TextAnchor.CENTER_RIGHT;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, 0.05, "Index outside valid range.", textAnchor0, textAnchor0, 6249.818346816994);
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS.createAdjustedRectangle(rectangle0, (LengthAdjustmentType) null, (LengthAdjustmentType) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(0);
      cyclicNumberAxis0.calculateAnchorPoint(cyclicNumberAxis_CycleBoundTick0, 6249.818346816994, rectangle2D0, rectangleEdge0);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3500.5, "IA;do9Xk4=V");
      cyclicNumberAxis0.lengthToJava2D((-986.84089613728), (Rectangle2D) null, (RectangleEdge) null);
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(3500.5, cyclicNumberAxis0.getOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0), "org.jfree.data.category.SlidingCategoryDataset");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      cyclicNumberAxis0.java2DToValue(0.0, rectangle2D0, rectangleEdge0);
      assertEquals((-1.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals((-1.0), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1.0), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getCycleBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1242.92086939699);
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(500);
      double double0 = cyclicNumberAxis0.java2DToValue(1382.12986569, rectangle0, rectangleEdge0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1242.92086939699, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(963.9720515001407, 963.9720515001407, "BUDQ,oQeu=QazU[F+Q?");
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      NumberTick numberTick0 = new NumberTick(1.0F, "BUDQ,oQeu=QazU[F+Q?", textAnchor0, textAnchor0, 1.0F);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Rectangle rectangle0 = new Rectangle(point0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      cyclicNumberAxis0.calculateAnchorPoint(numberTick0, 10, rectangle0, rectangleEdge0);
      assertEquals((-962.9720515001407), cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-305.2695317466));
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAdvanceLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2000000.0, 2000000.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Stroke stroke0 = combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      cyclicNumberAxis0.setAdvanceLineStroke(stroke0);
      assertEquals((-1999999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(966.06881225, 966.06881225, "");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setAdvanceLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      cyclicNumberAxis0.setAdvanceLinePaint(color0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ":Y*");
      JInternalFrame jInternalFrame0 = new JInternalFrame(":Y*", true, false, false, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      double double0 = cyclicNumberAxis0.valueToJava2D((-311.57214259663), rectangle0, rectangleEdge0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getCycleBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1783.57997804553), (-1783.57997804553), "");
      double double0 = cyclicNumberAxis0.getPeriod();
      assertEquals((-1783.57997804553), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals((-1783.57997804553), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1783.57997804553), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      cyclicNumberAxis0.centerRange(Double.NaN);
      assertEquals(Double.NaN, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1912.3167507737));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.05, 1.0E-8, 0.0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      cyclicNumberAxis0.selectVerticalAutoTickUnit(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(1912.3167507737, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals((-1912.3167507737), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(963.9720515001407, 963.9720515001407, "BUDQ,oQeu=QazU[F+Q?");
      boolean boolean0 = cyclicNumberAxis0.isBoundMappedToLastCycle();
      assertFalse(boolean0);
      assertEquals(963.9720515001407, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(963.9720515001407, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1912.3167507737));
      cyclicNumberAxis0.setBoundMappedToLastCycle(true);
      assertTrue(cyclicNumberAxis0.isBoundMappedToLastCycle());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, Double.NaN, "Hry8:u,t8H%>A4j#");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Hry8:u,t8H%>A4j#", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.createBufferedImage((int) (byte)66, 16, 1984.834077818301, (double) 0.0F, chartRenderingInfo0);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2100.7213488207626, 2100.7213488207626, "W");
      cyclicNumberAxis0.setOffset(2100.7213488207626);
      assertEquals(0.0, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals(2100.7213488207626, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2100.7213488207626, cyclicNumberAxis0.getOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1756.072947181369), (-1756.072947181369));
      cyclicNumberAxis0.setAdvanceLineVisible(true);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1756.072947181369, cyclicNumberAxis0.getCycleBound(), 0.01);
      assertEquals((-1756.072947181369), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals((-1756.072947181369), cyclicNumberAxis0.getOffset(), 0.01);
  }
}
