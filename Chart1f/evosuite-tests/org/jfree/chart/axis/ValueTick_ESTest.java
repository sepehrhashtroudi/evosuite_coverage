/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:25:02 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.text.TextAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueTick_ESTest extends ValueTick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(5);
      TextAnchor textAnchor0 = TextAnchor.CENTER_RIGHT;
      NumberTick numberTick0 = new NumberTick(integer0, "`~wIGnrT<c1M.mp;U", textAnchor0, textAnchor0, 0.0);
      Long long0 = new Long(0L);
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, long0, "n_6=", textAnchor0, textAnchor0, 0.0);
      boolean boolean0 = numberTick0.equals(cyclicNumberAxis_CycleBoundTick0);
      assertEquals(5.0, numberTick0.getValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_RIGHT;
      DateTick dateTick0 = new DateTick(mockDate0, (String) null, textAnchor0, textAnchor0, 0L);
      double double0 = dateTick0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Short short0 = new Short((short)277);
      TextAnchor textAnchor0 = TextAnchor.TOP_LEFT;
      NumberTick numberTick0 = new NumberTick(short0, (String) null, textAnchor0, textAnchor0, (short)277);
      double double0 = numberTick0.getValue();
      assertEquals(277.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_LEFT;
      NumberTick numberTick0 = new NumberTick((TickType) null, 0.0, "!p.>hwtIV#'Z0`q^", textAnchor0, textAnchor0, (-1371.8550478));
      numberTick0.getTickType();
      assertEquals(0.0, numberTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(47, 47, 47, 47, 0, 47);
      TextAnchor textAnchor0 = TextAnchor.CENTER_RIGHT;
      mockDate0.setTime(0);
      Float float0 = new Float(0.0F);
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, float0, "", textAnchor0, textAnchor0, 47);
      TickType tickType0 = TickType.MINOR;
      DateTick dateTick0 = new DateTick(tickType0, mockDate0, "org.jfree.chart.axis.ValueTick", textAnchor0, textAnchor0, 0);
      boolean boolean0 = cyclicNumberAxis_CycleBoundTick0.equals(dateTick0);
      assertFalse(boolean0);
      assertEquals(0.0, dateTick0.getValue(), 0.01);
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TickType tickType0 = TickType.MAJOR;
      TextAnchor textAnchor0 = TextAnchor.CENTER_RIGHT;
      NumberTick numberTick0 = new NumberTick(tickType0, (-14.015512341602346), "", textAnchor0, textAnchor0, (-14.015512341602346));
      NumberTick numberTick1 = (NumberTick)numberTick0.clone();
      boolean boolean0 = numberTick0.equals(numberTick1);
      assertTrue(boolean0);
      assertEquals((-14.015512341602346), numberTick1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Float float0 = new Float((-49.94004F));
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_RIGHT;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, float0, "2Qy/#", textAnchor0, textAnchor0, 780.4861901189636);
      NumberTick numberTick0 = new NumberTick((TickType) null, (-49.94004F), "2Qy/#", textAnchor0, textAnchor0, (-49.94004F));
      // Undeclared exception!
      try { 
        numberTick0.equals(cyclicNumberAxis_CycleBoundTick0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueTick", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      DateTick dateTick0 = new DateTick(mockDate0, "Null 'collection' argument.", textAnchor0, textAnchor0, 63);
      Float float0 = new Float((float) 63);
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, float0, "Null 'collection' argument.", textAnchor0, textAnchor0, 63);
      boolean boolean0 = cyclicNumberAxis_CycleBoundTick0.equals(dateTick0);
      assertEquals(1.39240928132E12, dateTick0.getValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(63.0, cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      NumberTick numberTick0 = new NumberTick(tickType0, (-2619.0), "org.jfree.chart.alis.ValuTick", textAnchor0, textAnchor0, (-2619.0));
      boolean boolean0 = numberTick0.equals("org.jfree.chart.alis.ValuTick");
      assertFalse(boolean0);
      assertEquals((-2619.0), numberTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      Double double0 = Double.valueOf((-2619.0));
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, double0, "org.jfree.chart.alis.ValuTick", textAnchor0, textAnchor0, (-2619.0));
      boolean boolean0 = cyclicNumberAxis_CycleBoundTick0.equals(cyclicNumberAxis_CycleBoundTick0);
      assertTrue(boolean0);
      assertEquals((-2619.0), cyclicNumberAxis_CycleBoundTick0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      NumberTick numberTick0 = new NumberTick(tickType0, (-2619.0), "org.jfree.chart.alis.ValuTick", textAnchor0, textAnchor0, (-2619.0));
      double double0 = numberTick0.getValue();
      assertEquals((-2619.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      NumberTick numberTick0 = new NumberTick(tickType0, (-2619.0), "org.jfree.chart.alis.ValuTick", textAnchor0, textAnchor0, (-2619.0));
      numberTick0.getTickType();
      assertEquals((-2619.0), numberTick0.getValue(), 0.01);
  }
}
