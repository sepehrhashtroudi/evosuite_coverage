/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:16:03 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.time.ZoneId;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTickUnit_ESTest extends DateTickUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2901);
      MockDate mockDate0 = new MockDate(2901, 2901, 617, 617, 2901, 2901);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      dateTickUnit0.rollDate((Date) mockDate0, timeZone0);
      assertEquals(2901, dateTickUnit0.getMultiple());
      assertEquals(7.7700384E12, dateTickUnit0.getSize(), 0.01);
      assertEquals(2901, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1956);
      // Undeclared exception!
      try { 
        dateTickUnit0.rollDate((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 32);
      // Undeclared exception!
      try { 
        dateTickUnit0.dateToString((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37);
      MockDate mockDate0 = new MockDate(37, (-1), (-2391));
      // Undeclared exception!
      try { 
        dateTickUnit0.addToDate(mockDate0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((DateTickUnitType) null, 0, (DateTickUnitType) null, 3, dateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((DateTickUnitType) null, 1, dateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit((DateTickUnitType) null, 3442);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-1159), dateTickUnitType0, (-1159), dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37);
      MockDate mockDate0 = new MockDate(37, (-1), (-2391));
      // Undeclared exception!
      try { 
        dateTickUnit0.rollDate((Date) mockDate0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2397);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 2397, dateFormat0);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit1);
      assertEquals(2397, dateTickUnit1.getRollMultiple());
      assertEquals(2397000.0, dateTickUnit1.getSize(), 0.01);
      assertEquals(2397, dateTickUnit1.getMultiple());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 35);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 35);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit1);
      assertTrue(boolean0);
      assertEquals(35, dateTickUnit1.getMultiple());
      assertEquals(35000.0, dateTickUnit1.getSize(), 0.01);
      assertEquals(35, dateTickUnit1.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 35);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit0);
      assertEquals(35, dateTickUnit0.getMultiple());
      assertTrue(boolean0);
      assertEquals(35000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(35, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      MockDate mockDate0 = new MockDate(1275);
      boolean boolean0 = dateTickUnit0.equals(mockDate0);
      assertEquals(1275, dateTickUnit0.getRollMultiple());
      assertEquals(1275, dateTickUnit0.getMultiple());
      assertFalse(boolean0);
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.DAY;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1699, dateTickUnitType0, 19, dateFormat0);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 19);
      boolean boolean0 = dateTickUnit0.equals(dateTickUnit1);
      assertEquals(1.6416E9, dateTickUnit1.getSize(), 0.01);
      assertEquals(19, dateTickUnit0.getRollMultiple());
      assertEquals(1699, dateTickUnit0.getMultiple());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-2985), (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 19, dateTickUnitType0, 0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'rollMultiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.HOUR;
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'multiple' > 0.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = null;
      try {
        dateTickUnit0 = new DateTickUnit(dateTickUnitType0, (-2307), dateTickUnitType0, (-2307), (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.axis.DateTickUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      dateTickUnit0.getUnitType();
      assertEquals(1275, dateTickUnit0.getRollMultiple());
      assertEquals(1275, dateTickUnit0.getMultiple());
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      dateTickUnit0.getRollUnitType();
      assertEquals(1275, dateTickUnit0.getMultiple());
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(1275, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2397);
      int int0 = dateTickUnit0.getMultiple();
      assertEquals(2397, int0);
      assertEquals(2397000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2397, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 37);
      dateTickUnit0.hashCode();
      assertEquals(37, dateTickUnit0.getMultiple());
      assertEquals(2220000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(37, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      int int0 = dateTickUnit0.getRollMultiple();
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(1275, int0);
      assertEquals(1275, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      dateTickUnit0.getCalendarField();
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(1275, dateTickUnit0.getRollMultiple());
      assertEquals(1275, dateTickUnit0.getMultiple());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2901);
      MockDate mockDate0 = new MockDate(2901, 2901, 617, 617, 2901, 2901);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      dateTickUnit0.addToDate(mockDate0, timeZone0);
      assertEquals(7.7700384E12, dateTickUnit0.getSize(), 0.01);
      assertEquals(2901, dateTickUnit0.getMultiple());
      assertEquals(2901, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 35);
      String string0 = dateTickUnit0.toString();
      assertEquals("DateTickUnit[DateTickUnitType.SECOND, 35]", string0);
      assertEquals(35000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(35, dateTickUnit0.getRollMultiple());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      MockDate mockDate0 = new MockDate(1275);
      dateTickUnit0.dateToString(mockDate0);
      assertEquals(1275, dateTickUnit0.getRollMultiple());
      assertEquals(1275, dateTickUnit0.getMultiple());
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 1275);
      MockDate mockDate0 = new MockDate(1275);
      Date date0 = dateTickUnit0.rollDate((Date) mockDate0);
      assertEquals(1275, dateTickUnit0.getRollMultiple());
      assertEquals(1275, dateTickUnit0.getMultiple());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", date0.toString());
      assertEquals(1275.0, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2397);
      String string0 = dateTickUnit0.valueToString(2397);
      assertEquals(2397, dateTickUnit0.getRollMultiple());
      assertEquals("1/1/70", string0);
      assertEquals(2397000.0, dateTickUnit0.getSize(), 0.01);
      assertEquals(2397, dateTickUnit0.getMultiple());
  }
}
