/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:23:32 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberTickUnit;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TickUnit_ESTest extends TickUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1.0, numberFormat0);
      numberTickUnit0.hashCode();
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-82.3796975), numberFormat0, 2006);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-82.3796975), numberFormat0);
      boolean boolean0 = numberTickUnit1.equals(numberTickUnit0);
      assertFalse(boolean0);
      assertEquals((-82.3796975), numberTickUnit0.getSize(), 0.01);
      assertEquals((-82.3796975), numberTickUnit1.getSize(), 0.01);
      assertFalse(numberTickUnit0.equals((Object)numberTickUnit1));
      assertEquals(2006, numberTickUnit0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(538.048894484605);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-1.0));
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertFalse(boolean0);
      assertFalse(numberTickUnit1.equals((Object)numberTickUnit0));
      assertEquals((-1.0), numberTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      dateTickUnit0.valueToString((-26.2256507));
      assertEquals(7.76736E10, dateTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("k;j!=nR_\u0002s|jZ");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-462.1227880817), choiceFormat0, 1226);
      numberTickUnit0.valueToString((-1.0));
      assertEquals((-462.1227880817), numberTickUnit0.getSize(), 0.01);
      assertEquals(1226, numberTickUnit0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      double double0 = numberTickUnit0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-82.3796975), numberFormat0, 2006);
      double double0 = numberTickUnit0.getSize();
      assertEquals(2006, numberTickUnit0.getMinorTickCount());
      assertEquals((-82.3796975), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("}1R-d};b7.3^");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1624.589274678649, numberFormat0, 1555);
      int int0 = numberTickUnit0.getMinorTickCount();
      assertEquals(1555, int0);
      assertEquals(1624.589274678649, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(603.7928129, decimalFormat0, (-3790));
      int int0 = numberTickUnit0.getMinorTickCount();
      assertEquals(603.7928129, numberTickUnit0.getSize(), 0.01);
      assertEquals((-3790), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(1887.78610927569, numberFormat0, 19);
      numberTickUnit0.equals(locale0);
      assertEquals(19, numberTickUnit0.getMinorTickCount());
      assertEquals(1887.78610927569, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0, decimalFormat0);
      decimalFormat0.setPositivePrefix((String) null);
      // Undeclared exception!
      try { 
        numberTickUnit0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MONTH;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 29);
      double double0 = dateTickUnit0.getSize();
      assertEquals(7.76736E10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("k;j!=nR_\u0002s|jZ");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-462.1227880817), choiceFormat0, 1226);
      numberTickUnit0.hashCode();
      assertEquals(1226, numberTickUnit0.getMinorTickCount());
      assertEquals((-462.1227880817), numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-1642.042116890307), numberFormat0);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-1642.042116890307));
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertTrue(boolean0);
      assertEquals((-1642.042116890307), numberTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("k;j!=nR_\u0002s|jZ");
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-462.1227880817), choiceFormat0, 1226);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit((-1.0), choiceFormat0);
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertEquals(1226, numberTickUnit0.getMinorTickCount());
      assertEquals((-1.0), numberTickUnit1.getSize(), 0.01);
      assertFalse(boolean0);
      assertEquals((-462.1227880817), numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(599.3517730734967);
      int int0 = numberTickUnit0.compareTo(numberTickUnit0);
      assertEquals(599.3517730734967, numberTickUnit0.getSize(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2143507186, dateTickUnitType0, 2143507186, dateFormat0);
      DateTickUnit dateTickUnit1 = new DateTickUnit(dateTickUnitType0, 1530);
      int int0 = dateTickUnit0.compareTo(dateTickUnit1);
      assertEquals(1, int0);
      assertEquals(1530.0, dateTickUnit1.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(599.3517730734967);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(3, 3);
      int int0 = numberTickUnit0.compareTo(dateFormat0);
      assertEquals((-1), int0);
      assertEquals(599.3517730734967, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MINUTE;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 32);
      int int0 = numberTickUnit0.compareTo(dateTickUnit0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.0);
      int int0 = numberTickUnit0.getMinorTickCount();
      assertEquals(0, int0);
      assertEquals(0.0, numberTickUnit0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2.14350718740293E9, decimalFormat0, 2023);
      NumberTickUnit numberTickUnit1 = new NumberTickUnit(2.14350718740293E9, decimalFormat0);
      boolean boolean0 = numberTickUnit0.equals(numberTickUnit1);
      assertEquals(2.14350718740293E9, numberTickUnit1.getSize(), 0.01);
      assertFalse(numberTickUnit1.equals((Object)numberTickUnit0));
      assertEquals(2.14350718740293E9, numberTickUnit0.getSize(), 0.01);
      assertEquals(2023, numberTickUnit0.getMinorTickCount());
      assertFalse(boolean0);
  }
}
