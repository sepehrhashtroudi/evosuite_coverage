/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 22:24:22 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.CategoryTick;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBlockAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tick_ESTest extends Tick_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_CENTER;
      CategoryTick categoryTick0 = new CategoryTick("org.jfree.data.UnknownKeyException", (TextBlock) null, textBlockAnchor0, textAnchor0, 2041);
      CategoryTick categoryTick1 = new CategoryTick("org.jfree.data.UnknownKeyException", (TextBlock) null, textBlockAnchor0, textAnchor0, (-3042.9));
      boolean boolean0 = categoryTick1.equals(categoryTick0);
      assertEquals((-3042.9), categoryTick1.getAngle(), 0.01);
      assertFalse(boolean0);
      assertFalse(categoryTick0.equals((Object)categoryTick1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(0.25);
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_LEFT;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, double0, (String) null, textAnchor0, textAnchor0, 556.4616013288);
      cyclicNumberAxis_CycleBoundTick0.toString();
      assertEquals(556.4616013288, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TickType tickType0 = TickType.MINOR;
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_RIGHT;
      NumberTick numberTick0 = new NumberTick(tickType0, 2106.806, "TextAnchor.BASELINE_CENTER", textAnchor0, textAnchor0, (-1833.0));
      numberTick0.toString();
      assertEquals((-1833.0), numberTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(1.0);
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_CENTER;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(false, double0, (String) null, textAnchor0, textAnchor0, 0.0);
      cyclicNumberAxis_CycleBoundTick0.getText();
      assertEquals(0.0, cyclicNumberAxis_CycleBoundTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0.25);
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_LEFT;
      TextBlock textBlock0 = new TextBlock();
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.TOP_LEFT;
      CategoryTick categoryTick0 = new CategoryTick(double0, textBlock0, textBlockAnchor0, textAnchor0, 0.0);
      categoryTick0.getText();
      assertEquals(0.0, categoryTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(4109.485312239);
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_LEFT;
      NumberTick numberTick0 = new NumberTick(double0, "", textAnchor0, textAnchor0, 0.0);
      double double1 = numberTick0.getAngle();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(0.25);
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_LEFT;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, double0, (String) null, textAnchor0, textAnchor0, 556.4616013288);
      double double1 = cyclicNumberAxis_CycleBoundTick0.getAngle();
      assertEquals(556.4616013288, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(4109.485312239);
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_LEFT;
      NumberTick numberTick0 = new NumberTick(double0, "", textAnchor0, textAnchor0, 0.0);
      numberTick0.equals(numberTick0);
      assertEquals(0.0, numberTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextBlock textBlock0 = new TextBlock();
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      CategoryTick categoryTick0 = new CategoryTick((Comparable) null, textBlock0, textBlockAnchor0, textAnchor0, (-184.8944));
      TextAnchor textAnchor1 = TextAnchor.TOP_RIGHT;
      CategoryTick categoryTick1 = new CategoryTick(true, textBlock0, textBlockAnchor0, textAnchor1, 796);
      categoryTick0.equals(categoryTick1);
      assertEquals(796.0, categoryTick1.getAngle(), 0.01);
      assertEquals((-184.8944), categoryTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      TextAnchor textAnchor1 = TextAnchor.TOP_RIGHT;
      MockDate mockDate0 = new MockDate(149);
      DateTick dateTick0 = new DateTick(mockDate0, "", textAnchor1, textAnchor0, 2186.96590953);
      DateTick dateTick1 = new DateTick(mockDate0, "", textAnchor0, textAnchor0, (-3328.0886108));
      boolean boolean0 = dateTick0.equals(dateTick1);
      assertEquals((-3328.0886108), dateTick1.getAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_RIGHT;
      TickType tickType0 = TickType.MAJOR;
      DateTick dateTick0 = new DateTick(tickType0, mockDate0, "N/POWD", textAnchor0, textAnchor0, 0L);
      DateTick dateTick1 = new DateTick(tickType0, mockDate0, "sV)\"+{&kc#N#", textAnchor0, textAnchor0, 1322.84);
      boolean boolean0 = dateTick0.equals(dateTick1);
      assertEquals(1322.84, dateTick1.getAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextBlock textBlock0 = new TextBlock();
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      CategoryTick categoryTick0 = new CategoryTick((Comparable) null, textBlock0, textBlockAnchor0, textAnchor0, (-184.8944));
      CategoryTick categoryTick1 = new CategoryTick((Comparable) null, textBlock0, textBlockAnchor0, textAnchor0, (-184.8944));
      boolean boolean0 = categoryTick0.equals(categoryTick1);
      assertTrue(boolean0);
      assertEquals((-184.8944), categoryTick1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_CENTER;
      CategoryTick categoryTick0 = new CategoryTick("org.jfree.data.UnknownKeyException", (TextBlock) null, textBlockAnchor0, textAnchor0, 2041);
      CategoryTick categoryTick1 = new CategoryTick("org.jfree.data.UnknownKeyException", (TextBlock) null, textBlockAnchor0, textAnchor0, (-3042.9));
      boolean boolean0 = categoryTick0.equals(categoryTick1);
      assertFalse(categoryTick1.equals((Object)categoryTick0));
      assertFalse(boolean0);
      assertEquals((-3042.9), categoryTick1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      TextAnchor textAnchor0 = TextAnchor.HALF_ASCENT_CENTER;
      CyclicNumberAxis.CycleBoundTick cyclicNumberAxis_CycleBoundTick0 = null;
      try {
        cyclicNumberAxis_CycleBoundTick0 = new CyclicNumberAxis.CycleBoundTick(true, bigInteger0, "^Z4_<h{Vy[5", textAnchor0, (TextAnchor) null, (-3874.19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rotationAnchor' argument.
         //
         verifyException("org.jfree.chart.axis.Tick", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      NumberTick numberTick0 = null;
      try {
        numberTick0 = new NumberTick((TickType) null, 32, (String) null, (TextAnchor) null, textAnchor0, (-1971.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'textAnchor' argument.
         //
         verifyException("org.jfree.chart.axis.Tick", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2041, (-1478), (-4060));
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      DateTick dateTick0 = new DateTick((TickType) null, mockDate0, "org.jfree.data.UnknownKeyException", textAnchor0, textAnchor0, (-845.867723212));
      dateTick0.getText();
      assertEquals((-845.867723212), dateTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_LEFT;
      NumberTick numberTick0 = new NumberTick(0, "", textAnchor0, textAnchor0, 6);
      numberTick0.toString();
      assertEquals(6.0, numberTick0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_CENTER;
      CategoryTick categoryTick0 = new CategoryTick("org.jfree.data.UnknownKeyException", (TextBlock) null, textBlockAnchor0, textAnchor0, 2041);
      TextAnchor textAnchor1 = categoryTick0.getRotationAnchor();
      assertEquals(2041.0, categoryTick0.getAngle(), 0.01);
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextBlock textBlock0 = new TextBlock();
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.CENTER;
      TextAnchor textAnchor0 = TextAnchor.BASELINE_LEFT;
      CategoryTick categoryTick0 = new CategoryTick((Comparable) null, textBlock0, textBlockAnchor0, textAnchor0, (-184.8944));
      double double0 = categoryTick0.getAngle();
      assertEquals((-184.8944), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2041, (-1478), (-4060));
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      DateTick dateTick0 = new DateTick((TickType) null, mockDate0, "org.jfree.data.UnknownKeyException", textAnchor0, textAnchor0, (-845.867723212));
      Object object0 = dateTick0.clone();
      // Undeclared exception!
      try { 
        object0.equals(dateTick0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueTick", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.BOTTOM_CENTER;
      CategoryTick categoryTick0 = new CategoryTick("org.jfree.data.UnknownKeyException", (TextBlock) null, textBlockAnchor0, textAnchor0, 2041);
      TextAnchor textAnchor1 = categoryTick0.getTextAnchor();
      assertEquals(2041.0, categoryTick0.getAngle(), 0.01);
      assertEquals("TextAnchor.CENTER", textAnchor1.toString());
  }
}
