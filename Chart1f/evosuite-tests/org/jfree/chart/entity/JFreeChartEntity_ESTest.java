/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 03:58:28 GMT 2022
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import javax.swing.border.SoftBevelBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.entity.JFreeChartEntity;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChartEntity_ESTest extends JFreeChartEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-5), 25, 25, 1);
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("Ho%5$j<kvd@6", piePlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0, " rLr^+]w%T");
      jFreeChart0.setNotify(false);
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertEquals(15, jFreeChart1.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, false, false);
      Rectangle2D rectangle2D0 = meterPlot0.DEFAULT_LABEL_FONT.getStringBounds("", fontRenderContext0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle2D0, jFreeChart0, "");
      jFreeChart0.setAntiAlias(false);
      JFreeChart jFreeChart1 = jFreeChartEntity0.getChart();
      assertFalse(jFreeChart1.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity((Shape) null, jFreeChart0, "zyKXUM>8+n`K];+BJHa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.entity.ChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(rectangle0, (JFreeChart) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.entity.JFreeChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((-453));
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) null, (-715), 39, 39, (-453));
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("1QLd*O_", multiplePiePlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(rectangle0, jFreeChart0);
      jFreeChartEntity0.setArea(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      JFreeChart jFreeChart1 = new JFreeChart(multiplePiePlot0);
      JFreeChartEntity jFreeChartEntity1 = new JFreeChartEntity(multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE, jFreeChart1);
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      JFreeChartEntity jFreeChartEntity1 = (JFreeChartEntity)jFreeChartEntity0.clone();
      assertTrue(jFreeChartEntity1.equals((Object)jFreeChartEntity0));
      
      jFreeChartEntity1.setURLText("JFreeChartEntity: tooltip = null");
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(jFreeChartEntity1.equals((Object)jFreeChartEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      JFreeChartEntity jFreeChartEntity1 = new JFreeChartEntity(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, jFreeChart0, "JFreeChartEntity: tooltip = null", "wt6|i#:#k5mE");
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChart0.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      JFreeChartEntity jFreeChartEntity1 = new JFreeChartEntity(shape0, jFreeChart0, "wt6|i#:#k5mE");
      boolean boolean0 = jFreeChartEntity0.equals(jFreeChartEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2102.10804837), "org.jfree.chart.axis.SegmentedTimeline$SegmentRange");
      Shape shape0 = cyclicNumberAxis0.getLeftArrow();
      JFreeChartEntity jFreeChartEntity0 = null;
      try {
        jFreeChartEntity0 = new JFreeChartEntity(shape0, (JFreeChart) null, "tooltip = ", "TextBlockAnchor.TOP_RIGHT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'chart' argument.
         //
         verifyException("org.jfree.chart.entity.JFreeChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      jFreeChartEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      Object object0 = jFreeChartEntity0.clone();
      boolean boolean0 = jFreeChartEntity0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1778.881483268027));
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      JFreeChartEntity jFreeChartEntity0 = new JFreeChartEntity(shape0, jFreeChart0);
      String string0 = jFreeChartEntity0.toString();
      assertEquals("JFreeChartEntity: tooltip = null", string0);
  }
}
