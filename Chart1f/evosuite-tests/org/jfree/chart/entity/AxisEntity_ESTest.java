/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 04:02:23 GMT 2022
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.AxisEntity;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisEntity_ESTest extends AxisEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setVisible(false);
      AxisEntity axisEntity0 = new AxisEntity(line2D_Float0, numberAxis0);
      NumberAxis numberAxis1 = (NumberAxis)axisEntity0.getAxis();
      assertFalse(numberAxis1.isVerticalTickLabels());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "UW\"Mz<#FOB[UTBU.z=");
      Shape shape0 = cyclicNumberAxis0.getLeftArrow();
      cyclicNumberAxis0.setMinorTickMarksVisible(true);
      AxisEntity axisEntity0 = new AxisEntity(shape0, cyclicNumberAxis0, "$ChCs:dU@", "$ChCs:dU@");
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)axisEntity0.getAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      AxisEntity axisEntity0 = new AxisEntity(rectangle2D0, valueAxis0, "", "");
      Axis axis0 = axisEntity0.getAxis();
      assertEquals(0.0, axis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setTickMarkOutsideLength(0);
      AxisEntity axisEntity0 = new AxisEntity(rectangle0, logAxis0);
      LogAxis logAxis1 = (LogAxis)axisEntity0.getAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisEntity axisEntity0 = new AxisEntity(rectangle0, categoryAxis3D0, "", "Z*sEh=3JoitU9j");
      categoryAxis3D0.setTickMarkInsideLength(4732.621F);
      CategoryAxis3D categoryAxis3D1 = (CategoryAxis3D)axisEntity0.getAxis();
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LogAxis logAxis0 = new LogAxis("");
      AxisEntity axisEntity0 = new AxisEntity(rectangle2D_Double0, logAxis0);
      logAxis0.setFixedDimension(372L);
      LogAxis logAxis1 = (LogAxis)axisEntity0.getAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("AxisEntity: ");
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity((Shape) null, numberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.entity.ChartEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(975.472F, 3364.57F, 3364.57F, 975.472F, 4175.81F, 3364.57F);
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity(roundRectangle2D_Float0, (Axis) null, ":", ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.entity.AxisEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Shape shape0 = stackedXYAreaRenderer0.getLegendArea();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      AxisEntity axisEntity0 = new AxisEntity(shape0, numberAxis3D0);
      AxisEntity axisEntity1 = new AxisEntity(shape0, numberAxis3D0, "AxisEntity: tooltip = null");
      boolean boolean0 = axisEntity0.equals(axisEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisEntity axisEntity0 = new AxisEntity(rectangle0, categoryAxis3D0, "", "Z*sEh=3JoitU9j");
      AxisEntity axisEntity1 = new AxisEntity(line2D_Double0, categoryAxis3D0, "");
      boolean boolean0 = axisEntity0.equals(axisEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Shape shape0 = stackedXYAreaRenderer0.getLegendArea();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      AxisEntity axisEntity0 = new AxisEntity(shape0, numberAxis3D0);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      boolean boolean0 = axisEntity0.equals(defaultXYItemRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisEntity axisEntity0 = new AxisEntity(rectangle0, categoryAxis3D0, "", "Z*sEh=3JoitU9j");
      boolean boolean0 = axisEntity0.equals(axisEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Shape shape0 = stackedAreaRenderer0.getBaseShape();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0.00000");
      DateAxis dateAxis0 = new DateAxis("v\"w239E\"<|", simpleTimeZone0);
      AxisEntity axisEntity0 = new AxisEntity(shape0, dateAxis0);
      AxisEntity axisEntity1 = new AxisEntity(shape0, dateAxis0, (String) null, "0.00000");
      boolean boolean0 = axisEntity0.equals(axisEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      AxisEntity axisEntity0 = null;
      try {
        axisEntity0 = new AxisEntity(rectangle2D_Double0, (Axis) null, "RmND#dqGI= k\"/*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.entity.AxisEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LogAxis logAxis0 = new LogAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, logAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      AxisEntity axisEntity0 = new AxisEntity(rectangle2D0, logAxis0);
      String string0 = axisEntity0.toString();
      assertEquals("AxisEntity: tooltip = null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisEntity axisEntity0 = new AxisEntity(rectangle0, categoryAxis3D0, "", "Z*sEh=3JoitU9j");
      Object object0 = axisEntity0.clone();
      boolean boolean0 = object0.equals(axisEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      AxisEntity axisEntity0 = new AxisEntity(rectangle0, categoryAxis3D0, "", "Z*sEh=3JoitU9j");
      axisEntity0.hashCode();
  }
}
