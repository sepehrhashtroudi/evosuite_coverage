/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 27 04:01:27 GMT 2022
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.SimpleTimeZone;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.AxisLabelEntity;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AxisLabelEntity_ESTest extends AxisLabelEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 500, 0.0F, 2.0F);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(logAxis0, rectangle2D_Float0, "e", "e");
      logAxis0.setVisible(false);
      LogAxis logAxis1 = (LogAxis)axisLabelEntity0.getAxis();
      assertEquals(0.0, logAxis1.getFixedAutoRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(2L, 2L, 0.9F, 0.0F);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(numberAxis3D0, rectangle2D0, "", "");
      numberAxis3D0.setTickMarksVisible(false);
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)axisLabelEntity0.getAxis();
      assertTrue(numberAxis3D1.getAutoRangeStickyZero());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Shape shape0 = candlestickRenderer0.getItemShape(500, 30, true);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(numberAxis3D0, shape0, (String) null, "");
      numberAxis3D0.setTickLabelsVisible(false);
      Axis axis0 = axisLabelEntity0.getAxis();
      assertSame(numberAxis3D0, axis0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(270.0, 270.0);
      cyclicNumberAxis0.setMinorTickMarksVisible(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(cyclicNumberAxis0, rectangle2D0, "k1jHl}<.f5", "k1jHl}<.f5");
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)axisLabelEntity0.getAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(valueAxis0, thermometerPlot0.DEFAULT_LEGEND_ITEM_BOX, ";?7wj]5'sMLRqy_cCj", ";?7wj]5'sMLRqy_cCj");
      NumberAxis numberAxis0 = (NumberAxis)axisLabelEntity0.getAxis();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_AXIS_LABEL_PAINT, false);
      Shape shape0 = xYDifferenceRenderer0.getLegendLine();
      categoryAxis0.setTickMarkOutsideLength(0.0F);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(categoryAxis0, shape0, "", "AxisLabelEntity: ");
      Axis axis0 = axisLabelEntity0.getAxis();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(categoryAxis3D0, rectangle2D0, "org.jfree.chart.text.TextBlock", "org.jfree.chart.text.TextBlock");
      categoryAxis3D0.setTickMarkOutsideLength((-4991.21F));
      Axis axis0 = axisLabelEntity0.getAxis();
      assertTrue(axis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (float) 500, 3789.7F, 0.0F, (float) 500, 3789.7F);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      logAxis0.setTickMarkInsideLength((-22.0F));
      Shape shape0 = affineTransform0.createTransformedShape(rectangle2D0);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(logAxis0, shape0, "", "");
      LogAxis logAxis1 = (LogAxis)axisLabelEntity0.getAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.05, (double) 500, 0.05);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Shape shape0 = affineTransform0.createTransformedShape(rectangle2D0);
      logAxis0.setMinorTickMarkOutsideLength(0.0F);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(logAxis0, shape0, "", "");
      Axis axis0 = axisLabelEntity0.getAxis();
      assertEquals(2.0F, axis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 500, 0.0F, 2.0F);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(logAxis0, rectangle2D_Float0, "e", "e");
      logAxis0.setMinorTickMarkInsideLength(500.0F);
      LogAxis logAxis1 = (LogAxis)axisLabelEntity0.getAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Shape shape0 = stackedXYAreaRenderer0.getLegendArea();
      categoryAxis3D0.setLabelAngle(2);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(categoryAxis3D0, shape0, "", "");
      Axis axis0 = axisLabelEntity0.getAxis();
      assertSame(categoryAxis3D0, axis0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setLabelAngle((-3493.742634));
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 500, 0.0F, 2.0F);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(logAxis0, rectangle2D_Float0, "{8o", "XN^");
      Axis axis0 = axisLabelEntity0.getAxis();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-828), "Null 'axis' argument.");
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.time.Second", simpleTimeZone0);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      dateAxis0.setFixedDimension(Double.NaN);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(dateAxis0, rectangle0, "6#)YKqOxCFXv90", "6#)YKqOxCFXv90");
      Axis axis0 = axisLabelEntity0.getAxis();
      assertEquals("org.jfree.data.time.Second", axis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setFixedDimension((-1.0));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(numberAxis3D0, rectangle2D_Double0, (String) null, "~$8'rvQBOS(f7OL$Y1*");
      Axis axis0 = axisLabelEntity0.getAxis();
      assertEquals(2.0F, axis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      AxisLabelEntity axisLabelEntity0 = null;
      try {
        axisLabelEntity0 = new AxisLabelEntity((Axis) null, multiplePiePlot0.DEFAULT_LEGEND_ITEM_CIRCLE, "&U?GY%j", "&U?GY%j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.entity.AxisLabelEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 500, 0.0F, 2.0F);
      AxisLabelEntity axisLabelEntity0 = new AxisLabelEntity(logAxis0, rectangle2D_Float0, "", "");
      String string0 = axisLabelEntity0.toString();
      assertEquals("AxisLabelEntity: label = null", string0);
  }
}
