/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:46:47 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.FileDescriptor;
import java.util.List;
import javax.swing.JInternalFrame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockParams;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockContainer_ESTest extends BlockContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      Color color0 = Color.DARK_GRAY;
      ColorBlock colorBlock0 = new ColorBlock(color0, (-157.21951145), 1538.224618);
      blockContainer0.add((Block) colorBlock0, (Object) centerArrangement0);
      assertNull(colorBlock0.getID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      blockContainer1.add((Block) blockContainer0);
      blockContainer0.add((Block) blockContainer1);
      // Undeclared exception!
      try { 
        blockContainer0.equals(blockContainer1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Line2D.Double line2D_Double0 = new Line2D.Double((-1206.55902), 0.0, 0.0, 974.6035);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        blockContainer0.draw((Graphics2D) null, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null);
      // Undeclared exception!
      try { 
        blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        blockContainer0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Object) mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.add((Block) null, (Object) blockContainer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.block.BlockContainer cannot be cast to org.jfree.chart.util.RectangleEdge
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      assertTrue(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1);
      boolean boolean0 = blockContainer0.equals(blockContainer1);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      BlockContainer blockContainer1 = new BlockContainer();
      boolean boolean0 = blockContainer0.equals(blockContainer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.setMargin((-1117.3382957997), 309.227, 309.227, (-1117.3382957997));
      BlockContainer blockContainer1 = new BlockContainer();
      boolean boolean0 = blockContainer0.equals(blockContainer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      Object object0 = blockContainer0.clone();
      boolean boolean0 = blockContainer0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, blockContainer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      boolean boolean0 = blockContainer0.equals(blockContainer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      boolean boolean0 = blockContainer0.equals(columnArrangement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.add((Block) blockContainer0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 3027.596713699243, 3027.596713699243, 1882.9785268301448);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        blockContainer0.draw(graphics2D0, (Rectangle2D) rectangle0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockParams blockParams0 = new BlockParams();
      Line2D.Double line2D_Double0 = new Line2D.Double((-1206.55902), 0.0, 0.0, 974.6035);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Object) blockParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      boolean boolean0 = blockContainer0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      assertTrue(blockContainer0.isEmpty());
      
      blockContainer0.add((Block) blockContainer0);
      boolean boolean0 = blockContainer0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.setArrangement((Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.block.BlockContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      blockContainer0.setArrangement(columnArrangement0);
      assertTrue(blockContainer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockContainer blockContainer0 = null;
      try {
        blockContainer0 = new BlockContainer((Arrangement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'arrangement' argument.
         //
         verifyException("org.jfree.chart.block.BlockContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      List list0 = blockContainer0.getBlocks();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 3027.596713699243, 3027.596713699243, 1882.9785268301448);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      blockContainer0.draw(graphics2D0, (Rectangle2D) rectangle0);
      assertEquals(1884, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Arrangement arrangement0 = blockContainer0.getArrangement();
      assertNotNull(arrangement0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null, lengthConstraintType0, 0.0, (Range) null, lengthConstraintType0);
      // Undeclared exception!
      try { 
        blockContainer0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.clear();
      assertTrue(blockContainer0.isEmpty());
  }
}
