/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:34:15 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangleConstraint_ESTest extends RectangleConstraint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), 733.4588874);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(733.4588874, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(733.4588874, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-95.2707990113));
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedWidth();
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals((-95.2707990113), rectangleConstraint2.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(852.291978, range0, lengthConstraintType0, 537.791938, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertEquals(852.291978, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(537.791938, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(3003.6409556, range0, lengthConstraintType0, (-175.832), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertEquals(3003.6409556, rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-175.832), rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.0), 1.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 1.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), 733.4588874);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
      assertEquals(733.4588874, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(733.4588874, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0, 1.0);
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertEquals(1.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-2578.6), 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range0);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1910.111733801), 0.0);
      Range range1 = Range.shift(range0, (-3326.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1910.111733801), range1);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeHeight(range1);
      assertEquals((-1910.111733801), rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-1910.111733801), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-3326.0), rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-5.49143744), (-5.49143744));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth((-5.49143744));
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toUnconstrainedHeight();
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertNotSame(rectangleConstraint2, rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-5.49143744), rectangleConstraint2.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1.0), 1.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 1.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(0.0);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(3003.6409556, range0, lengthConstraintType0, (-175.832), range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(0.0);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals((-175.832), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-175.832), rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1.0), range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(733.4588874);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(733.4588874, rectangleConstraint1.getHeight(), 0.01);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(2987.09, (Range) null, lengthConstraintType0, 2987.09, (Range) null, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(775.7965436471989);
      assertEquals(2987.09, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(2987.09, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(775.7965436471989, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-3342.24825800209), (-3342.24825800209));
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.getWidthRange();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(2152.75596916, 2152.75596916);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.getWidthRange();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-467.3174615242501), range0, lengthConstraintType0, 1.0, range0, lengthConstraintType0);
      rectangleConstraint0.getWidthRange();
      assertEquals((-467.3174615242501), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 1817.9826);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      Range range1 = rectangleConstraint0.getWidthRange();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1370.41, 1370.41);
      double double0 = rectangleConstraint0.getWidth();
      assertEquals(1370.41, double0, 0.01);
      assertEquals(1370.41, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1071.392076431), 0.0);
      double double0 = rectangleConstraint0.getWidth();
      assertEquals((-1071.392076431), double0, 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-467.3174615242501), range0, lengthConstraintType0, 1.0, range0, lengthConstraintType0);
      rectangleConstraint0.getHeightRange();
      assertEquals((-467.3174615242501), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(1216.2, 4886.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.getHeightRange();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1877.554), false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range1, range1);
      rectangleConstraint0.getHeightRange();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1370.41, 1370.41);
      double double0 = rectangleConstraint0.getHeight();
      assertEquals(1370.41, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1370.41, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-785.2338245826), (-785.2338245826));
      double double0 = rectangleConstraint0.getHeight();
      assertEquals((-785.2338245826), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-785.2338245826), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1265.915420527, 0.0);
      // Undeclared exception!
      try { 
        rectangleConstraint0.NONE.calculateConstrainedSize((Size2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(1621.6214556656132, 1621.6214556656132);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(1621.6214556656132);
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1621.6214556656132, size2D1.height, 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1621.6214556656132, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(1621.6214556656132, 1621.6214556656132);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = new Size2D();
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.NONE.toFixedWidth(0.0);
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-175.832));
      RectangleConstraint rectangleConstraint2 = rectangleConstraint1.toRangeWidth(range0);
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint2.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-175.832), size2D1.height, 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(721.0561422019314, 721.0561422019314);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(721.0561422019314, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2858.29733201), (-2858.29733201));
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals((-2858.29733201), size2D1.width, 0.01);
      assertEquals((-2858.29733201), size2D1.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      Size2D size2D0 = new Size2D(0.0, 0.0);
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint0.NONE.calculateConstrainedSize(size2D0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D1.height, 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(721.0561422019314, 721.0561422019314);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = new Size2D();
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      Size2D size2D1 = rectangleConstraint1.calculateConstrainedSize(size2D0);
      assertEquals(721.0561422019314, size2D1.height, 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, size2D1.width, 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(721.0561422019314, 721.0561422019314);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = new Size2D();
      Size2D size2D1 = rectangleConstraint0.calculateConstrainedSize(size2D0);
      assertEquals(721.0561422019314, size2D1.width, 0.01);
      assertEquals(721.0561422019314, size2D1.height, 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2858.29733201), (-2858.29733201));
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeWidth((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1265.915420527, 0.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1265.915420527, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(1265.915420527, rectangleConstraint0.getWidth(), 0.01);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = null;
      try {
        rectangleConstraint0 = new RectangleConstraint(1011.3191574, (Range) null, lengthConstraintType0, 1011.3191574, (Range) null, (LengthConstraintType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'heightType' argument.
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-1372.304142724193), 1.0);
      RectangleConstraint rectangleConstraint0 = null;
      try {
        rectangleConstraint0 = new RectangleConstraint((-1372.304142724193), range0, (LengthConstraintType) null, 0.0, range0, (LengthConstraintType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'widthType' argument.
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(721.0561422019314, 721.0561422019314);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      double double0 = rectangleConstraint0.getWidth();
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(1621.6214556656132, 1621.6214556656132);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      double double0 = rectangleConstraint0.getHeight();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null);
      // Undeclared exception!
      try { 
        rectangleConstraint0.toRangeHeight((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      LengthConstraintType lengthConstraintType0 = rectangleConstraint0.getWidthConstraintType();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals("RectangleConstraintType.RANGE", lengthConstraintType0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1265.915420527, 0.0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(0.0);
      assertEquals(1265.915420527, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(1265.915420527, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 0.0);
      Range range1 = rectangleConstraint0.getHeightRange();
      assertNull(range1);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-2858.29733201), (-2858.29733201));
      rectangleConstraint0.getWidthRange();
      assertEquals((-2858.29733201), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2858.29733201), rectangleConstraint0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0, lengthConstraintType0, 0.0, range0, lengthConstraintType0);
      String string0 = rectangleConstraint0.toString();
      assertEquals("RectangleConstraint[LengthConstraintType.NONE: width=0.0, height=0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(721.0561422019314, 721.0561422019314);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      rectangleConstraint0.getHeightConstraintType();
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
  }
}
