/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 23:37:50 GMT 2022
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(2817.0, 0.0, 0.0, 2817.0);
      double double0 = abstractBlock0.calculateTotalHeight((-773.835527363));
      assertEquals(2817.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(2043.164472637, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.calculateTotalWidth(Double.NaN);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, Double.NEGATIVE_INFINITY);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-352.98531), (Range) null);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 742.1238106252019, 742.1238106252019, (-362.4948869037174));
      double double0 = abstractBlock0.trimToContentHeight((-1440.0));
      assertEquals(742.1238106252019, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 3092.0, 0.0, 0.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(3092.0, abstractBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(3791.415, (-1.0), 3791.415, 2495.860334539256);
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(3791.415, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentWidth((-3497.96733));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentWidth(1877.017767089);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(1877.017767089, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentHeight(1497.8371927802666);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(1497.8371927802666, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Point point0 = new Point((-402), 28);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(640);
      rectangle0.add(3485, (-1));
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double[] rectangle2D_DoubleArray0 = new Rectangle2D.Double[4];
      JList<Rectangle2D.Double> jList0 = new JList<Rectangle2D.Double>(rectangle2D_DoubleArray0);
      JScrollPane jScrollPane0 = new JScrollPane(jList0);
      Color color0 = Color.GREEN;
      EtchedBorder etchedBorder0 = new EtchedBorder(color0, color0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jScrollPane0, (Border) etchedBorder0, (-1), (-1), (-1), (-1));
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)abstractBlock0.getBounds();
      abstractBlock0.setMargin(2696.553165, 22.338288578907303, (-2759.940708633546), (-600.3));
      abstractBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(22.33829F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2728.2469940185547, rectangle2D_Float0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-31.0), (-31.0), (-31.0), (-31.0));
      Rectangle2D rectangle2D0 = abstractBlock0.getBounds();
      abstractBlock0.trimMargin(rectangle2D0);
      assertEquals(31.0, rectangle2D0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      abstractBlock0.trimMargin(rectangle2D0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrameFromDiagonal((-2.147483648E9), 0.0, 1589.343888646486, 1589.343888646486);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-1772.77618353), 3013.3762917335594, 3013.3762917335594, 1961.13347210965);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(3013, rectangle0.x);
      assertEquals((-3014.0), rectangle0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      rectangle0.add(1589.343888646486, (-1159.517));
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-2437.749), (-2437.749), 0.0, 5072.21237547);
      abstractBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle rectangle0 = new Rectangle(2147483646, 2147483646, 714, 2147483646);
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      SystemColor systemColor0 = SystemColor.textHighlight;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(2563, systemColor0, systemColor0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) null, (Border) softBevelBorder0, (-298), 182, (-259), (-3138));
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = new Range(2106.4772001, 2106.4772001);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 2106.4772001);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(2106.4772001, rectangleConstraint1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setWidth(2817.0);
      double double0 = abstractBlock0.getWidth();
      assertEquals(2817.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding((-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9));
      abstractBlock0.getPadding();
      assertEquals((-2.147483648E9), abstractBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(2805.173047, 2805.173047, 2805.173047, 2805.173047);
      abstractBlock0.getPadding();
      assertEquals(2805.173047, abstractBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getMargin();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-1884.90933557712), 0.0, 855.57442847);
      abstractBlock0.setMargin(rectangleInsets0);
      abstractBlock0.getMargin();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 677.761543056, 677.761543056, (-706.096));
      abstractBlock0.getMargin();
      assertEquals(677.761543056, abstractBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-31.0), (-31.0), (-31.0), (-31.0));
      abstractBlock0.getMargin();
      assertEquals((-31.0), abstractBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("Null 'bounds' argument.");
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setHeight(197.55787637967876);
      double double0 = abstractBlock0.getHeight();
      assertEquals(197.55787637967876, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setHeight((-1772.77618353));
      double double0 = abstractBlock0.getHeight();
      assertEquals((-1772.77618353), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      BlockBorder blockBorder0 = new BlockBorder(4237.1, 3311.246628030177, 4237.1, (-1698.8816784429));
      abstractBlock0.setFrame(blockBorder0);
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(4237.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding((-11.114226247868153), 22.338288578907303, (-11.114226247868153), 3245.85832889302);
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(22.338288578907303, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals((-11.114226247868153), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      LineBorder lineBorder0 = new LineBorder();
      abstractBlock0.setFrame(lineBorder0);
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.y = (-579.99);
      abstractBlock0.setBounds(rectangle2D_Double0);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalWidth(6);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalWidth((-1160));
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals((-1160.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalHeight(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalHeight((-1828));
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals((-1828.0), double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(3966.0, 0.5);
      abstractBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        abstractBlock0.arrange((Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.RectangleConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = new RectangleInsets(1.7976931348623157E308, 0.0, 0, 1614.032678766);
      abstractBlock0.setPadding(rectangleInsets0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-871.8339), 3344.614667);
      abstractBlock0.arrange((Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getWidth();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setWidth((-2094.15264));
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals((-2094.15264), abstractBlock1.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setHeight((-2.147483648E9));
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals((-2.147483648E9), abstractBlock1.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding((-2.147483648E9), 0.0, (-2.147483648E9), (-2.147483648E9));
      AbstractBlock abstractBlock1 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals((-2.147483648E9), abstractBlock0.getContentYOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertTrue(abstractBlock1.equals((Object)abstractBlock0));
      
      abstractBlock1.setMargin(0.0, 0.0, 2049.346056656657, 2049.346056656657);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(abstractBlock1.equals((Object)abstractBlock0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Object object0 = abstractBlock0.clone();
      assertTrue(object0.equals((Object)abstractBlock0));
      
      SystemColor systemColor0 = SystemColor.menu;
      GradientPaint gradientPaint0 = new GradientPaint((-323.0F), 2.0F, systemColor0, 2870.05F, 2.0F, systemColor0, false);
      BlockBorder blockBorder0 = new BlockBorder(0.0, 0.0, 1969.05858018675, 0.0, gradientPaint0);
      abstractBlock0.setFrame(blockBorder0);
      boolean boolean0 = abstractBlock0.equals(object0);
      assertFalse(object0.equals((Object)abstractBlock0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setID("org.jfree.chart.block.AbstractBlock");
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(abstractBlock1.equals((Object)abstractBlock0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
      assertNotSame(abstractBlock1, abstractBlock0);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(abstractBlock0);
      assertTrue(boolean0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      boolean boolean0 = abstractBlock0.equals(rectangle0);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = new Range(162.0, 162.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(162.0, range0);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(162.0, rectangleConstraint1.getWidth(), 0.01);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertSame(rectangleConstraint1, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalWidth(0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      RectangleConstraint rectangleConstraint1 = abstractBlock0.toContentConstraint(rectangleConstraint0);
      RectangleConstraint rectangleConstraint2 = abstractBlock0.toContentConstraint(rectangleConstraint1);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint2.getWidth(), 0.01);
      assertNotSame(rectangleConstraint2, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = abstractBlock0.getMargin();
      abstractBlock0.setMargin(rectangleInsets0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getFrame();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("");
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getPadding();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.drawBorder((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }
}
