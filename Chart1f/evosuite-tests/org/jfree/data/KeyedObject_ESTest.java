/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:13:56 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.KeyedObject;
import org.jfree.data.time.Quarter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyedObject_ESTest extends KeyedObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      keyedObject0.setObject(keyedObject0);
      Object object0 = keyedObject0.getObject();
      assertSame(object0, keyedObject0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      KeyedObject keyedObject0 = new KeyedObject(quarter0, quarter0);
      Comparable comparable0 = keyedObject0.getKey();
      assertSame(quarter0, comparable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      boolean boolean0 = keyedObject0.equals("n\"F4~Qn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      KeyedObject keyedObject0 = new KeyedObject(quarter0, quarter0);
      Object object0 = keyedObject0.clone();
      boolean boolean0 = keyedObject0.equals(object0);
      assertNotSame(object0, keyedObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      KeyedObject keyedObject1 = new KeyedObject("n\"F4~Qn", keyedObject0);
      boolean boolean0 = keyedObject0.equals(keyedObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      boolean boolean0 = keyedObject0.equals(keyedObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      Object object0 = keyedObject0.clone();
      assertTrue(object0.equals((Object)keyedObject0));
      
      keyedObject0.setObject(keyedObject0);
      boolean boolean0 = keyedObject0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      Object object0 = keyedObject0.clone();
      keyedObject0.setObject(object0);
      Object object1 = keyedObject0.clone();
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      Object object0 = keyedObject0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      Comparable comparable0 = keyedObject0.getKey();
      assertNull(comparable0);
  }
}
