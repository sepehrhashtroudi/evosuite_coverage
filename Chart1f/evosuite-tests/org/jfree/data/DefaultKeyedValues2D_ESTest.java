/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:12:13 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DefaultKeyedValues2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValues2D_ESTest extends DefaultKeyedValues2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      defaultKeyedValues2D0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(4220).when(comparable0).compareTo(any());
      defaultKeyedValues2D0.setValue((Number) null, comparable0, comparable0);
      defaultKeyedValues2D0.removeValue("er\t\"/b_KiW", "er\t\"/b_KiW");
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue((Number) null, comparable0, comparable0);
      defaultKeyedValues2D0.addValue((Number) null, "sI.", "sI.");
      defaultKeyedValues2D0.addValue((Number) null, "sI.", "sI.");
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue(comparable0, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn("org.jfree.data.KeyedValueComparator", "", "", "").when(comparable0).toString();
      defaultKeyedValues2D0.setValue((Number) null, comparable0, comparable0);
      Comparable<DefaultKeyedValues> comparable1 = (Comparable<DefaultKeyedValues>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable1).toString();
      defaultKeyedValues2D0.setValue((Number) null, "", comparable1);
      Object object0 = defaultKeyedValues2D0.clone();
      boolean boolean0 = defaultKeyedValues2D0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultKeyedValues2D0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Double double0 = new Double((-3066.1105105033826));
      defaultKeyedValues2D0.addValue(double0, double0, double0);
      Integer integer0 = new Integer(0);
      defaultKeyedValues2D0.removeRow((int) integer0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Float float0 = new Float((float) 0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue(float0, float0, comparable0);
      Number number0 = defaultKeyedValues2D0.getValue(0, 0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Byte byte0 = new Byte((byte)0);
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      defaultKeyedValues2D0.getRowKey((byte)0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      int int0 = defaultKeyedValues2D0.getRowIndex(float0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(1139.1073113188963);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      int int0 = defaultKeyedValues2D0.getRowCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Double double0 = new Double((-3066.1105105033826));
      defaultKeyedValues2D0.addValue(double0, double0, double0);
      Comparable comparable0 = defaultKeyedValues2D0.getColumnKey(0);
      defaultKeyedValues2D0.removeColumn(comparable0);
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte) (-1));
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparable0).compareTo(any());
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeValue(comparable0, comparable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Long long0 = new Long(0);
      defaultKeyedValues2D0.addValue(long0, long0, long0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow(comparable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.Comparable$MockitoMock$1313216473 cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((-2285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue(1, 1301);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((-160), (-160));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowKey(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getColumnKey((short)1391);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1391, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getColumnKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(0.0F);
      Integer integer0 = new Integer(1137);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.addValue(integer0, float0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte) (-1));
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      Float float0 = new Float(1051.396649);
      defaultKeyedValues2D0.setValue(float0, float0, float0);
      defaultKeyedValues2D0.removeColumn((Comparable) byte0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte)29);
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      defaultKeyedValues2D0.setValue(byte0, byte0, byte0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      int int0 = defaultKeyedValues2D0.getRowIndex("5d");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Byte byte0 = new Byte((byte)29);
      defaultKeyedValues2D0.addValue(byte0, byte0, byte0);
      Number number0 = defaultKeyedValues2D0.getValue(0, 0);
      assertEquals((byte)29, number0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("'position' out of bounds.", "'position' out of bounds.").when(comparable0).toString();
      Integer integer0 = new Integer((-1));
      defaultKeyedValues2D0.addValue(integer0, comparable0, integer0);
      Object object0 = defaultKeyedValues2D0.clone();
      boolean boolean0 = defaultKeyedValues2D0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn("sI.", "", "org.jfree.chart.util.SortOrder", "").when(comparable0).toString();
      defaultKeyedValues2D0.setValue((Number) null, comparable0, comparable0);
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      defaultKeyedValues2D1.addValue((Number) null, "", "sI.");
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D1.getColumnCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(any());
      doReturn("Null 'columnKey' argument.").when(comparable0).toString();
      defaultKeyedValues2D0.setValue((Number) null, comparable0, comparable0);
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      defaultKeyedValues2D1.removeValue("er\t\"/b_KiW", "er\t\"/b_KiW");
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      Byte byte0 = new Byte((byte) (-90));
      boolean boolean0 = defaultKeyedValues2D0.equals(byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(1139.1073113188963);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("FH#SWi1LSlU&P2%q|hY").when(comparable0).toString();
      defaultKeyedValues2D0.addValue(float0, comparable0, comparable0);
      defaultKeyedValues2D0.removeColumn(1);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: -1
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Short short0 = new Short((short) (-3846));
      defaultKeyedValues2D0.setValue(short0, short0, short0);
      defaultKeyedValues2D0.removeRow((Comparable) short0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Short short0 = new Short((short) (-3846));
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((Comparable) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: -3846
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Double double0 = new Double((-3066.1105105033826));
      defaultKeyedValues2D0.addValue(double0, double0, double0);
      Comparable comparable0 = defaultKeyedValues2D0.getColumnKey(0);
      Integer integer0 = new Integer(0);
      defaultKeyedValues2D0.removeColumn(comparable0);
      defaultKeyedValues2D0.removeValue(integer0, double0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Double double0 = new Double((-3066.1105105033826));
      defaultKeyedValues2D0.addValue(double0, double0, double0);
      Integer integer0 = new Integer(0);
      defaultKeyedValues2D0.removeValue(integer0, double0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(1.0);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Number number0 = defaultKeyedValues2D0.getValue((Comparable) float0, (Comparable) float0);
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) double0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Double double0 = new Double((-3066.1105105033826));
      defaultKeyedValues2D0.addValue(double0, double0, double0);
      Comparable comparable0 = defaultKeyedValues2D0.getColumnKey(0);
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.setValue(871, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      List list0 = defaultKeyedValues2D0.getColumnKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowKey((-546));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      List list0 = defaultKeyedValues2D0.getRowKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      Float float0 = new Float(1139.1073113188963);
      defaultKeyedValues2D0.addValue(float0, float0, float0);
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue(float0, comparable0, comparable0);
      Number number0 = defaultKeyedValues2D0.getValue(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int int0 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
  }
}
