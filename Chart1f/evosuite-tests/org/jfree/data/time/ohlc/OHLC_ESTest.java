/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:50:00 GMT 2022
 */

package org.jfree.data.time.ohlc;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.time.ohlc.OHLC;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OHLC_ESTest extends OHLC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-975.996031726673), (-975.996031726673), (-975.996031726673), (-975.996031726673));
      OHLC oHLC1 = new OHLC((-975.996031726673), (-975.996031726673), (-2597.117655518), (-975.996031726673));
      boolean boolean0 = oHLC1.equals(oHLC0);
      assertEquals((-975.996031726673), oHLC1.getOpen(), 0.01);
      assertEquals((-975.996031726673), oHLC0.getLow(), 0.01);
      assertFalse(boolean0);
      assertFalse(oHLC0.equals((Object)oHLC1));
      assertEquals((-975.996031726673), oHLC1.getHigh(), 0.01);
      assertEquals((-975.996031726673), oHLC1.getClose(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      OHLC oHLC1 = new OHLC(0.0, 587.0625360913939, 4.160413831, 0.0);
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertEquals(4.160413831, oHLC1.getLow(), 0.01);
      assertFalse(boolean0);
      assertEquals(587.0625360913939, oHLC1.getHigh(), 0.01);
      assertEquals(0.0, oHLC1.getClose(), 0.01);
      assertEquals(0.0, oHLC1.getOpen(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OHLC oHLC0 = new OHLC(1.0, 1.0, 1.0, 0.0);
      OHLC oHLC1 = new OHLC(1.0, 1082.91851, 0.0, 530.7893685177877);
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertEquals(1082.91851, oHLC1.getHigh(), 0.01);
      assertEquals(0.0, oHLC1.getLow(), 0.01);
      assertEquals(530.7893685177877, oHLC1.getClose(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, oHLC1.getOpen(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      OHLC oHLC1 = new OHLC((-2540.54461882), (-2560.75385), (-2540.54461882), 0.0);
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertEquals(0.0, oHLC1.getClose(), 0.01);
      assertEquals((-2540.54461882), oHLC1.getOpen(), 0.01);
      assertEquals((-2540.54461882), oHLC1.getLow(), 0.01);
      assertEquals((-2560.75385), oHLC1.getHigh(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OHLC oHLC0 = new OHLC(775.531, 775.531, 775.531, 775.531);
      double double0 = oHLC0.getOpen();
      assertEquals(775.531, double0, 0.01);
      assertEquals(775.531, oHLC0.getHigh(), 0.01);
      assertEquals(775.531, oHLC0.getLow(), 0.01);
      assertEquals(775.531, oHLC0.getClose(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-2816.33448848614), (-2328.6), (-2816.33448848614), 0.0);
      double double0 = oHLC0.getOpen();
      assertEquals((-2328.6), oHLC0.getHigh(), 0.01);
      assertEquals((-2816.33448848614), oHLC0.getLow(), 0.01);
      assertEquals(0.0, oHLC0.getClose(), 0.01);
      assertEquals((-2816.33448848614), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OHLC oHLC0 = new OHLC(775.531, 775.531, 775.531, 775.531);
      double double0 = oHLC0.getLow();
      assertEquals(775.531, oHLC0.getOpen(), 0.01);
      assertEquals(775.531, oHLC0.getHigh(), 0.01);
      assertEquals(775.531, double0, 0.01);
      assertEquals(775.531, oHLC0.getClose(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-2132.34803624204), 465.487405496732, (-2132.34803624204), (-2608.1605459192747));
      double double0 = oHLC0.getLow();
      assertEquals((-2132.34803624204), oHLC0.getOpen(), 0.01);
      assertEquals((-2132.34803624204), double0, 0.01);
      assertEquals((-2608.1605459192747), oHLC0.getClose(), 0.01);
      assertEquals(465.487405496732, oHLC0.getHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-1089.481445863), 205.2, (-2363.649960103), 848.367497);
      double double0 = oHLC0.getHigh();
      assertEquals((-2363.649960103), oHLC0.getLow(), 0.01);
      assertEquals(848.367497, oHLC0.getClose(), 0.01);
      assertEquals(205.2, double0, 0.01);
      assertEquals((-1089.481445863), oHLC0.getOpen(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-975.996031726673), (-975.996031726673), (-975.996031726673), (-975.996031726673));
      double double0 = oHLC0.getHigh();
      assertEquals((-975.996031726673), oHLC0.getClose(), 0.01);
      assertEquals((-975.996031726673), oHLC0.getOpen(), 0.01);
      assertEquals((-975.996031726673), double0, 0.01);
      assertEquals((-975.996031726673), oHLC0.getLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OHLC oHLC0 = new OHLC(775.531, 775.531, 775.531, 775.531);
      double double0 = oHLC0.getClose();
      assertEquals(775.531, oHLC0.getOpen(), 0.01);
      assertEquals(775.531, oHLC0.getLow(), 0.01);
      assertEquals(775.531, oHLC0.getHigh(), 0.01);
      assertEquals(775.531, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-975.996031726673), (-975.996031726673), (-975.996031726673), (-975.996031726673));
      double double0 = oHLC0.getClose();
      assertEquals((-975.996031726673), oHLC0.getOpen(), 0.01);
      assertEquals((-975.996031726673), oHLC0.getHigh(), 0.01);
      assertEquals((-975.996031726673), oHLC0.getLow(), 0.01);
      assertEquals((-975.996031726673), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-975.996031726673), (-975.996031726673), (-975.996031726673), (-975.996031726673));
      OHLC oHLC1 = new OHLC((-975.996031726673), (-975.996031726673), (-2597.117655518), (-975.996031726673));
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertEquals((-975.996031726673), oHLC0.getLow(), 0.01);
      assertEquals((-975.996031726673), oHLC1.getHigh(), 0.01);
      assertEquals((-975.996031726673), oHLC1.getClose(), 0.01);
      assertFalse(oHLC1.equals((Object)oHLC0));
      assertFalse(boolean0);
      assertEquals((-975.996031726673), oHLC1.getOpen(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OHLC oHLC0 = new OHLC(775.531, 775.531, 775.531, 775.531);
      OHLC oHLC1 = new OHLC(775.531, (-1533.03754037), 775.531, 775.531);
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertFalse(oHLC1.equals((Object)oHLC0));
      assertEquals(775.531, oHLC1.getOpen(), 0.01);
      assertEquals(775.531, oHLC1.getClose(), 0.01);
      assertEquals(775.531, oHLC1.getLow(), 0.01);
      assertEquals(775.531, oHLC0.getHigh(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OHLC oHLC0 = new OHLC(1.0, 1814.595439274512, 1814.595439274512, (-664.86204909276));
      OHLC oHLC1 = new OHLC(1.0, (-664.86204909276), 1814.595439274512, (-1520.06233943456));
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertFalse(boolean0);
      assertEquals(1.0, oHLC1.getOpen(), 0.01);
      assertEquals(1814.595439274512, oHLC1.getLow(), 0.01);
      assertEquals((-664.86204909276), oHLC1.getHigh(), 0.01);
      assertEquals((-1520.06233943456), oHLC1.getClose(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      OHLC oHLC1 = new OHLC(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertEquals(0.0, oHLC1.getClose(), 0.01);
      assertEquals(0.0, oHLC1.getOpen(), 0.01);
      assertEquals(0.0, oHLC1.getHigh(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, oHLC1.getLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = oHLC0.equals(oHLC0);
      assertEquals(0.0, oHLC0.getLow(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, oHLC0.getHigh(), 0.01);
      assertEquals(0.0, oHLC0.getOpen(), 0.01);
      assertEquals(0.0, oHLC0.getClose(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = oHLC0.equals((Object) null);
      assertEquals(0.0, oHLC0.getHigh(), 0.01);
      assertEquals(0.0, oHLC0.getClose(), 0.01);
      assertEquals(0.0, oHLC0.getOpen(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, oHLC0.getLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      double double0 = oHLC0.getHigh();
      assertEquals(0.0, oHLC0.getClose(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, oHLC0.getLow(), 0.01);
      assertEquals(0.0, oHLC0.getOpen(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      double double0 = oHLC0.getLow();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, oHLC0.getClose(), 0.01);
      assertEquals(0.0, oHLC0.getOpen(), 0.01);
      assertEquals(0.0, oHLC0.getHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      oHLC0.hashCode();
      assertEquals(0.0, oHLC0.getLow(), 0.01);
      assertEquals(0.0, oHLC0.getHigh(), 0.01);
      assertEquals(0.0, oHLC0.getClose(), 0.01);
      assertEquals(0.0, oHLC0.getOpen(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      double double0 = oHLC0.getClose();
      assertEquals(0.0, oHLC0.getOpen(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, oHLC0.getLow(), 0.01);
      assertEquals(0.0, oHLC0.getHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OHLC oHLC0 = new OHLC(0.0, 0.0, 0.0, 0.0);
      double double0 = oHLC0.getOpen();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, oHLC0.getHigh(), 0.01);
      assertEquals(0.0, oHLC0.getLow(), 0.01);
      assertEquals(0.0, oHLC0.getClose(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OHLC oHLC0 = new OHLC((-1089.481445863), 205.2, (-2363.649960103), 848.367497);
      OHLC oHLC1 = new OHLC((-252.45058129735378), (-252.45058129735378), (-252.45058129735378), (-252.45058129735378));
      boolean boolean0 = oHLC0.equals(oHLC1);
      assertEquals(848.367497, oHLC0.getClose(), 0.01);
      assertEquals((-2363.649960103), oHLC0.getLow(), 0.01);
      assertEquals((-1089.481445863), oHLC0.getOpen(), 0.01);
      assertEquals(205.2, oHLC0.getHigh(), 0.01);
      assertFalse(boolean0);
  }
}
