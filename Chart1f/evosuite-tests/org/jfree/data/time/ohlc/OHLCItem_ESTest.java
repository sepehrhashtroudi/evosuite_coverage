/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:49:02 GMT 2022
 */

package org.jfree.data.time.ohlc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.time.ohlc.OHLCItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OHLCItem_ESTest extends OHLCItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      OHLCItem oHLCItem0 = new OHLCItem(minute0, 59, 0, 59, 0.0);
      double double0 = oHLCItem0.getYValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-418), 2664, 0, (-418), 2664, 2664);
      Year year0 = new Year(mockDate0);
      OHLCItem oHLCItem0 = new OHLCItem(year0, (-3387.269638), 9999, (-2757.024), (-418));
      double double0 = oHLCItem0.getYValue();
      assertEquals((-418.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      OHLCItem oHLCItem0 = new OHLCItem(fixedMillisecond0, 0.0, 4633.6230004336, (-1.0), (-1.0));
      double double0 = oHLCItem0.getOpenValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      OHLCItem oHLCItem0 = new OHLCItem(week0, (-1757.64592585), 53, (-2778.9), 53);
      double double0 = oHLCItem0.getOpenValue();
      assertEquals((-1757.64592585), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Day day0 = new Day();
      OHLCItem oHLCItem0 = new OHLCItem(day0, 0.0, 0.0, 0.0, 0.0);
      double double0 = oHLCItem0.getLowValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week((-590), 0);
      OHLCItem oHLCItem0 = new OHLCItem(week0, 810.8750005, 1, 609.0039845724734, 799.303440935886);
      double double0 = oHLCItem0.getLowValue();
      assertEquals(609.0039845724734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      OHLCItem oHLCItem0 = new OHLCItem(week0, (-1757.64592585), 53, (-2778.9), 53);
      double double0 = oHLCItem0.getHighValue();
      assertEquals(53.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week();
      OHLCItem oHLCItem0 = new OHLCItem(week0, (-1879.092306169), (-1879.092306169), 0.0, 0.0);
      double double0 = oHLCItem0.getHighValue();
      assertEquals((-1879.092306169), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Day day0 = new Day();
      OHLCItem oHLCItem0 = new OHLCItem(day0, 0.0, 0.0, 0.0, 0.0);
      double double0 = oHLCItem0.getCloseValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      OHLCItem oHLCItem0 = new OHLCItem(month0, (-2813.29), 0.0, 1.0, (-463.02));
      double double0 = oHLCItem0.getCloseValue();
      assertEquals((-463.02), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OHLCItem oHLCItem0 = null;
      try {
        oHLCItem0 = new OHLCItem((RegularTimePeriod) null, (-1366.88003), 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.ComparableObjectItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week();
      OHLCItem oHLCItem0 = new OHLCItem(week0, (-1757.64592585), 53, (-2778.9), 53);
      double double0 = oHLCItem0.getCloseValue();
      assertEquals(53.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week();
      OHLCItem oHLCItem0 = new OHLCItem(week0, (-1757.64592585), 53, (-2778.9), 53);
      double double0 = oHLCItem0.getLowValue();
      assertEquals((-2778.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      OHLCItem oHLCItem0 = new OHLCItem(millisecond0, 999, 0, 0, 999);
      double double0 = oHLCItem0.getHighValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      OHLCItem oHLCItem0 = new OHLCItem(millisecond0, 999, 0, 0, 999);
      double double0 = oHLCItem0.getOpenValue();
      assertEquals(999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      OHLCItem oHLCItem0 = new OHLCItem(millisecond0, 999, 0, 0, 999);
      RegularTimePeriod regularTimePeriod0 = oHLCItem0.getPeriod();
      assertSame(regularTimePeriod0, millisecond0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      OHLCItem oHLCItem0 = new OHLCItem(millisecond0, 999, 0, 0, 999);
      double double0 = oHLCItem0.getYValue();
      assertEquals(999.0, double0, 0.01);
  }
}
