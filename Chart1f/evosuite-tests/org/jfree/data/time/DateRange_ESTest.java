/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:06:06 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.Range;
import org.jfree.data.time.DateRange;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateRange_ESTest extends DateRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateRange dateRange0 = new DateRange(mockDate0, mockDate0);
      long long0 = dateRange0.getUpperMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateRange dateRange0 = new DateRange((-1.0), (-1.0));
      long long0 = dateRange0.getUpperMillis();
      assertEquals((-1L), long0);
      assertEquals((-1L), dateRange0.getLowerMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateRange dateRange0 = new DateRange(2.0, 2.0);
      long long0 = dateRange0.getLowerMillis();
      assertEquals(2L, long0);
      assertEquals(2L, dateRange0.getUpperMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateRange dateRange0 = new DateRange((-3999.6672134988785), (-3999.6672134988785));
      long long0 = dateRange0.getLowerMillis();
      assertEquals((-3999L), long0);
      assertEquals((-3999L), dateRange0.getUpperMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(354, 1999, 354, 1999, 1999, 354);
      MockDate mockDate1 = new MockDate(354);
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(mockDate0, mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.4256836694E13) <= upper (354.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(0.0, (-1415.854517010947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1415.854517010947).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateRange dateRange0 = new DateRange(mockDate0, mockDate0);
      Date date0 = dateRange0.getUpperDate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      DateRange dateRange0 = new DateRange(mockDate0, mockDate0);
      Date date0 = dateRange0.getLowerDate();
      assertTrue(date0.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      long long0 = dateRange0.getLowerMillis();
      assertEquals(0L, long0);
      assertEquals(1L, dateRange0.getUpperMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      DateRange dateRange1 = new DateRange(dateRange0);
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(1L, dateRange1.getUpperMillis());
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange1.getLowerMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      long long0 = dateRange0.getUpperMillis();
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      String string0 = dateRange0.toString();
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals("[Jan 1, 1970 12:00:00 AM --> Jan 1, 1970 12:00:00 AM]", string0);
  }
}
