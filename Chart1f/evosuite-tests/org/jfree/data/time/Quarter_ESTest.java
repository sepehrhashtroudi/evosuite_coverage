/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:47:29 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Quarter_ESTest extends Quarter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quarter quarter0 = Quarter.parseQuarter("Q2/3568");
      assertEquals(14274L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60, 55, (-2824));
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      int int0 = quarter0.compareTo(regularTimePeriod0);
      assertEquals(7829L, regularTimePeriod0.getSerialIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60, 47, (-2832));
      Quarter quarter0 = new Quarter(mockDate0);
      Quarter quarter1 = new Quarter();
      boolean boolean0 = quarter0.equals(quarter1);
      assertEquals(8057L, quarter1.getSerialIndex());
      assertFalse(boolean0);
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1, quarter1.getQuarter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertNotNull(quarter1);
      
      boolean boolean0 = quarter0.equals(quarter1);
      assertFalse(boolean0);
      assertEquals(4, quarter1.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, (-400), (-1782));
      TimeZone timeZone0 = TimeZone.getDefault();
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      assertEquals(1900, quarter0.getYearValue());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10, 380, 10, 10, 2, 182);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(date0, timeZone0, locale0);
      Year year0 = quarter0.getYear();
      assertEquals(6332L, quarter0.getSerialIndex());
      assertEquals(1582L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1450), (-1450), (-448), 219, 219);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      System.setCurrentTimeMillis((-537L));
      quarter0.getYear();
      assertEquals(1312L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 244, 156);
      Quarter quarter0 = new Quarter(mockDate0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1919,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      mockGregorianCalendar0.getWeekYear();
      long long0 = quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1582,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=355,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-12212553600001L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      quarter0.peg(mockGregorianCalendar0);
      quarter0.getLastMillisecond();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1582,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 244, 156);
      Quarter quarter0 = new Quarter(mockDate0);
      long long0 = quarter0.getLastMillisecond();
      assertEquals((-1585699200000L), long0);
      assertEquals(7680L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(760, (-822), 0, 2958465, 758);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3183), "MiA\"~>-_6A", 5, 0, 2958465, 2958465, 0, 3468, 0, (-822), (-319), 32, 457);
      Locale locale0 = Locale.ITALY;
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      quarter0.getFirstMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=MiA\"~>-_6A,offset=-3183,dstSavings=457,useDaylight=false,startYear=0,startMode=0,startMonth=5,startDay=0,startDayOfWeek=2958465,startTime=2958465,startTimeMode=0,endMode=0,endMonth=3468,endDay=0,endDayOfWeek=-822,endTime=-319,endTimeMode=32],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2928,MONTH=9,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=1,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3183,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      mockGregorianCalendar0.getWeekYear();
      long long0 = quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1582,MONTH=9,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=355,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-12212553600001L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-908), (-894), 4, 0, 83);
      quarter0.peg(mockGregorianCalendar0);
      quarter0.getFirstMillisecond();
      assertEquals(1, quarter0.getQuarter());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 244, 156);
      Quarter quarter0 = new Quarter(mockDate0);
      long long0 = quarter0.getFirstMillisecond();
      assertEquals(7680L, quarter0.getSerialIndex());
      assertEquals((-1585699200000L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(60, 47, (-2832));
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      int int0 = quarter0.compareTo(regularTimePeriod0);
      assertEquals((-1), int0);
      assertEquals(7826L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        quarter0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("SerialDate.monthCodeToQuarter: invalid month code.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        quarter0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        quarter0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((Date) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, (-99), 37);
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(mockDate0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(4, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 2619, 1, (-1428), (-1428));
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'minute' argument.");
      Locale locale0 = Locale.forLanguageTag("Null 'minute' argument.");
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Quarter quarter0 = new Quarter(1, year0);
      assertEquals(8477L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 4, (-894), 4, 0, 83);
      quarter0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("u:taKyq'yS'O.KWJdQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Q found at end of string.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Q.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3712), 176, 176, 494, (-566), (-566));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-566));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      Year year0 = new Year(0);
      int int0 = quarter0.compareTo(year0);
      assertEquals(0, int0);
      assertEquals(7193L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      int int0 = quarter0.compareTo(locale0);
      assertEquals(1, int0);
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      Quarter quarter1 = new Quarter(1, 1);
      boolean boolean0 = quarter0.equals(quarter1);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter1.getYearValue());
      assertEquals(5L, quarter1.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      boolean boolean0 = quarter0.equals(quarter0);
      assertEquals(4, quarter0.getQuarter());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      boolean boolean0 = quarter0.equals(fixedMillisecond0);
      assertFalse(boolean0);
      assertEquals(6332L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Quarter quarter0 = new Quarter(mockDate0);
      boolean boolean0 = quarter0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(7881L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      Quarter quarter1 = (Quarter)quarter0.next();
      assertNotNull(quarter1);
      
      int int0 = quarter1.compareTo(quarter0);
      assertEquals(1, int0);
      assertEquals(1, quarter1.getQuarter());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3712), 176, 176, 494, (-566), (-566));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-566));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      assertNull(regularTimePeriod0);
      assertEquals(1798, quarter0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2134, 12, 3, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4161, "$`+SnJ6o!?b[E\"q");
      Quarter quarter0 = new Quarter(date0, simpleTimeZone0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      assertNotNull(regularTimePeriod0);
      
      boolean boolean0 = quarter0.equals(regularTimePeriod0);
      assertEquals(6331L, regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)quarter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(7, (Year) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Quarter quarter0 = Quarter.parseQuarter("Q1/2014");
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((-1874), (Year) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(120, 120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((-2595), 1585);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      long long0 = quarter0.getSerialIndex();
      assertEquals(8057L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      quarter0.hashCode();
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      int int0 = quarter0.getYearValue();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      long long0 = quarter0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(8057L, quarter0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      int int0 = quarter0.getQuarter();
      assertEquals(1, int0);
      assertEquals(2014, quarter0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      long long0 = quarter0.getLastMillisecond();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      String string0 = quarter0.toString();
      assertEquals("Q1/2014", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      quarter0.getYear();
      assertEquals(1, quarter0.getQuarter());
  }
}
