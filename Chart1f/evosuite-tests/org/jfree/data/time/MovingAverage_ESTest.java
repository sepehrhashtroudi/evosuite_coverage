/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:52:47 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.MovingAverage;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MovingAverage_ESTest extends MovingAverage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) yIntervalSeriesCollection0, (-1), (String) null, 4.9E-324, (-2002.140967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip must be >= 0.0.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "3`ciC&0", 2);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eriod must be positive.");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "org.jfree.data.xy.XIntervalSeriesCollection", 2476, 0);
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(212L);
      Hour hour0 = new Hour(mockDate0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) defaultBoxAndWhiskerXYDataset0, ",u*65MLt5D'`ujt}71", 212L, (long) 23);
      assertEquals(1, xYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(1, (-9999), 1, 1900, 3);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, (-2403.689575932), 1.0, 5, 4.9E-324);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("3`ciC&0", oHLCDataItemArray0);
      XYSeries xYSeries0 = MovingAverage.createMovingAverage((XYDataset) defaultOHLCDataset0, 1600, "3`ciC&0", 1417.44, (double) 0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "Unable to add cloned data item.", 2, (-1645));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("3`ciC&0", oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) defaultOHLCDataset0, 1600, "3`ciC&0", 1417.44, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) histogramDataset0, 3499, "", (double) 3499, (double) 3499);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3499, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(366, 274, 366);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, (-2403.689575932), 1.0, 5, 4.9E-324);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("3`ciC&0", oHLCDataItemArray0);
      XYSeries xYSeries0 = MovingAverage.createMovingAverage((XYDataset) defaultOHLCDataset0, 0, "3`ciC&0", 1394.676647, 872.42280408823);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      XYSeries xYSeries0 = MovingAverage.createMovingAverage((XYDataset) timeTableXYDataset0, 1305, "0TE$", 1565.2111, 0.5);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.AbstractXYDataset", "", "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      Hour hour0 = new Hour(371, day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "org.jfree.data.xy.AbstractXYDataset", 371, 2553);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("TH-=wGf&\"VpJ!", "TH-=wGf&\"VpJ!", (String) null);
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "ykP#x3AQV+m9rI:", 30, (-1014));
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.AbstractXYDataset", "", "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      Hour hour0 = new Hour(371, day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.POSITIVE_INFINITY);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection0, "", Double.POSITIVE_INFINITY, (double) 5019L);
      assertEquals(1, xYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) yIntervalSeriesCollection0, "B/\"yI}=+whVx=}dC", 3293.412695, (-3652.5527810243));
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(xYDataset0, 0, (String) null, (double) 0, (-356.7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) null, (-2058005161), "", (double) (-2058005161), (double) (-2058005161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null source (XYDataset).
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) null, "Null 'range' argument.", (double) 371, (double) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null source (XYDataset).
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.AbstractXYDataset", "", "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      Hour hour0 = new Hour(371, day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "skip must be >= 0.0.", 23);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(212L);
      Hour hour0 = new Hour(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries0, ",u*65MLt5D'`ujt}71", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage((TimeSeries) null, "Null 'source'.", (-110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source'.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      // Undeclared exception!
      MovingAverage.createMovingAverage(timeSeries0, "3`ciC&0", 9999, (-9999));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.AbstractXYDataset", "", "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      Hour hour0 = new Hour(371, day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.POSITIVE_INFINITY);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, (String) null, 2553, 2553);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries0, "gX'pF,V6T]", (-318), (-318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((TimeSeries) null, "Zs.9^%", 34, 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null source.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "Unable to add cloned data item.", (-1645), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((TimeSeriesCollection) null, "`r-Nk", (-5314), 1346);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("skip must be >= 0.0.");
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) defaultBoxAndWhiskerXYDataset0, "skip must be >= 0.0.", 2014L, (-1087L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip must be >= 0.0.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }
}
