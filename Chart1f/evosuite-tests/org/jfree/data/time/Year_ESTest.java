/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:59:06 GMT 2022
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Year_ESTest extends Year_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(468, (-298), 581);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0);
      Year year1 = Year.parseYear("1582");
      Date date1 = year1.getEnd();
      Year year2 = new Year(date1, timeZone0);
      boolean boolean0 = year0.equals(year2);
      assertFalse(year2.equals((Object)year0));
      assertTrue(year1.equals((Object)year0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year(9999);
      year0.next();
      assertEquals(9999L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-618L));
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      Year year1 = (Year)year0.previous();
      assertEquals(1968, year1.getYear());
      assertNotNull(year1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Year year0 = Year.parseYear("-298");
      assertEquals((-298), year0.getYear());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Year year0 = Year.parseYear("1582");
      assertEquals("1582", year0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1211L));
      Year year0 = Year.parseYear("1582");
      assertEquals(1582L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year(0);
      int int0 = year0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Year year0 = new Year((-298));
      int int0 = year0.getYear();
      assertEquals((-298), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year(0);
      long long0 = year0.getSerialIndex();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year((-298));
      long long0 = year0.getSerialIndex();
      assertEquals((-298L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Year year0 = new Year();
      Calendar calendar0 = MockCalendar.getInstance();
      year0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.setTime(date0);
      Year year0 = new Year(date0);
      year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1582,MONTH=11,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=31,DAY_OF_YEAR=278,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Year year0 = new Year((-815));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4), 9999, (-4), (-4), 2958465, 9999);
      year0.peg(mockGregorianCalendar0);
      year0.getLastMillisecond();
      assertEquals("-815", year0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Year year0 = new Year((-298));
      long long0 = year0.getLastMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals((-298L), year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1680, 0, (-2196));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1680, "::]9/),ENV@[bM");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, (-2196), (-1131));
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3573,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.setTime(date0);
      Year year0 = new Year(date0);
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1582,MONTH=0,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=278,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-9999), 932, (-9999), 9999, 932, 3142);
      year0.peg(mockGregorianCalendar0);
      year0.getFirstMillisecond();
      assertEquals(2014, year0.getYear());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Year year0 = new Year((-1501));
      long long0 = year0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals("-1501", year0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      int int0 = year0.compareTo(year1);
      assertEquals((-7985), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Year.parseYear("Invalid 'day' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Year.parseYear((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-618L));
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      // Undeclared exception!
      try { 
        year0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2874L);
      Locale locale0 = new Locale("TX2UBTR.iI", "TX2UBTR.iI");
      Year year0 = null;
      try {
        year0 = new Year(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Year year0 = null;
      try {
        year0 = new Year((Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Year year0 = null;
      try {
        year0 = new Year((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(468, (-298), 581);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0);
      long long0 = year0.getLastMillisecond();
      assertEquals((-12219292800000L), long0);
      assertEquals("1582", year0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1582,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(468, (-298), 581);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0);
      year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1582,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(17, (-1638), 17, (-1638), (-1221));
      Year year0 = new Year(mockDate0);
      // Undeclared exception!
      try { 
        year0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-969), (-969), (-969), (-969), (-969), (-969));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-969), "+63zTSKps");
      Locale locale0 = Locale.CANADA;
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      assertEquals("847", year0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year(61);
      Object object0 = new Object();
      int int0 = year0.compareTo(object0);
      assertEquals(61, year0.getYear());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-969), (-969), (-969), (-969), (-969), (-969));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-969), "+63zTSKps");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      int int0 = year0.compareTo(year0);
      assertEquals("847", year0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Year year0 = new Year(61);
      MockDate mockDate0 = new MockDate(9999, (-9999), 61);
      Quarter quarter0 = new Quarter(mockDate0);
      int int0 = year0.compareTo(quarter0);
      assertEquals(0, int0);
      assertEquals(61, year0.getYear());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      Year year1 = new Year(1582);
      boolean boolean0 = year0.equals(year1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      boolean boolean0 = year0.equals(locale0);
      assertEquals("1582", year0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      boolean boolean0 = year0.equals(year0);
      assertTrue(boolean0);
      assertEquals("1582", year0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Year year0 = new Year((-16));
      Year year1 = new Year((-9999));
      boolean boolean0 = year0.equals(year1);
      assertFalse(year1.equals((Object)year0));
      assertFalse(boolean0);
      assertEquals((-16), year0.getYear());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Year year0 = new Year((-16));
      RegularTimePeriod regularTimePeriod0 = year0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals((-15L), regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, (-9999), 61);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      assertNull(regularTimePeriod0);
      assertEquals(11065, year0.getYear());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Year year0 = new Year((-9999));
      year0.previous();
      assertEquals("-9999", year0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, (-9999), 61);
      Year year0 = new Year(mockDate0);
      // Undeclared exception!
      try { 
        year0.previous();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (11064) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Year year0 = new Year();
      // Undeclared exception!
      try { 
        year0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      year0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4728), (-4728), 572);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      long long0 = year0.getSerialIndex();
      assertEquals(1582L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      String string0 = year0.toString();
      assertEquals("1582", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      long long0 = year0.getFirstMillisecond();
      assertEquals((-12219292800000L), long0);
      assertEquals(1582L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      int int0 = year0.getYear();
      assertEquals(1582, int0);
  }
}
